"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component6.prototype.isReactComponent = {};
          Component6.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component6.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component6.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component6.prototype;
          function PureComponent6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent6.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent6;
          assign2(pureComponentPrototype, Component6.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty14 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty14.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty14.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement35(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty14.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement20(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty14.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement14(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray3(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement14(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray3(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement14(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext14(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef100(render3) {
            {
              if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render3 !== "function") {
                error("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
              } else {
                if (render3.length !== 0 && render3.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render3 != null) {
                if (render3.defaultProps != null || render3.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render3.name && !render3.displayName) {
                    render3.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo5(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext24(Context2) {
            var dispatcher = resolveDispatcher();
            {
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2);
          }
          function useState53(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer3(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef65(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect65(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback25(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo38(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle11(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue4(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component7) {
            var prototype3 = Component7.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values4, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty14);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values4, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray3(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement14(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement14(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement14(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray3(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement35.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement20.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children12 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports2.Children = Children12;
          exports2.Component = Component6;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent6;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.act = act;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext14;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef2;
          exports2.forwardRef = forwardRef100;
          exports2.isValidElement = isValidElement14;
          exports2.lazy = lazy;
          exports2.memo = memo5;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback25;
          exports2.useContext = useContext24;
          exports2.useDebugValue = useDebugValue4;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect65;
          exports2.useId = useId2;
          exports2.useImperativeHandle = useImperativeHandle11;
          exports2.useInsertionEffect = useInsertionEffect3;
          exports2.useLayoutEffect = useLayoutEffect4;
          exports2.useMemo = useMemo38;
          exports2.useReducer = useReducer3;
          exports2.useRef = useRef65;
          exports2.useState = useState53;
          exports2.useSyncExternalStore = useSyncExternalStore2;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare(left2, node2) < 0) {
                if (rightIndex < length2 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right2, node2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React312 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React312.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment31 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty14 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty14.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty14.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties3.hasOwnProperty(name) ? properties3[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties3 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize7 = function(token3) {
            return token3[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties3[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties3[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties3[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component6) {
            var prototype3 = Component6.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment31:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString5(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement2(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString5(value);
                }
              } else if (node2.value !== toString5(value)) {
                node2.value = toString5(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement2(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString5(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString5(value)) {
                node2.defaultValue = toString5(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React312.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray3(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray3(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString5(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString5(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber2 = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber2).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber2[prefixKey(prefix3, prop)] = isUnitlessNumber2[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty4 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty4) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles5) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles5) {
                if (!styles5.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles5[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles2(node2, styles5) {
            var style7 = node2.style;
            for (var styleName in styles5) {
              if (!styles5.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles5[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles5[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style7.setProperty(styleName, styleValue);
              } else {
                style7[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles5) {
            var expanded = {};
            for (var key in styles5) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty14.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty14.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a, b) {
            if (isInsideEventHandler) {
              return fn2(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get4(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty14.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset2) {
            var node2 = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end2 = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end2 = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement2();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement2(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement2(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style6 = {};
          if (canUseDOM) {
            style6 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style6) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names2 = [];
              attributeNames.forEach(function(name) {
                names2.push(name);
              });
              error("Extra attributes from the server: %s", names2);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles2(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles2(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement35(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty14.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement35(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style7 = instance.style;
            if (typeof style7.setProperty === "function") {
              style7.setProperty("display", "none", "important");
            } else {
              style7.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values4, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty14);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values4, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component6, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component6)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component6 = node2.type;
                    if (isContextProvider(Component6)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment31) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment31) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray3(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root3 = node2.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect4 = effects[i];
                var callback = effect4.callback;
                if (callback !== null) {
                  effect4.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray3(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component6, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component6(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component6(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect4 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect4.next = effect4;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect4;
                effect4.next = firstEffect;
                componentUpdateQueue.lastEffect = effect4;
              }
            }
            return effect4;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component6, baseProps) {
            if (Component6 && Component6.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component6.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray3(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var render4 = Component6.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component6.type;
              if (isSimpleFunctionComponent(type) && Component6.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component6.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component6.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component6.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component6.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component6.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component6, nextProps);
              mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component6, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component6, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component6.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component6, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component6 = init(payload);
            workInProgress2.type = Component6;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component6);
            var resolvedProps = resolveDefaultProps(Component6, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component6);
                  workInProgress2.type = Component6 = resolveFunctionForHotReloading(Component6);
                }
                child = updateFunctionComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component6 = resolveClassForHotReloading(Component6);
                }
                child = updateClassComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component6 = resolveForwardRefForHotReloading(Component6);
                }
                child = updateForwardRef(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component6.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component6)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component6,
                  resolveDefaultProps(Component6.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component6 !== null && typeof Component6 === "object" && Component6.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component6 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component6, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component6, nextProps);
            mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component6, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component6.prototype && typeof Component6.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component6)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component6, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component6);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component6) {
            {
              if (Component6) {
                if (Component6.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component6.displayName || Component6.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component6.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component6.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component6.contextType === "object" && Component6.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray3(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray3(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render4 = newProps.children;
            {
              if (typeof render4 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render4(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component6 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component6 ? unresolvedProps : resolveDefaultProps(Component6, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component6, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment31:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment31:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  var destroy = effect4.destroy;
                  effect4.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect4.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect4.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect4.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect4.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect4.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect4 = firstEffect;
                      do {
                        var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect4 = effect4.next;
                      } while (effect4 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now2());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now2());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now2());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now2());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component6) {
            var prototype3 = Component6.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component6) {
            if (typeof Component6 === "function") {
              return shouldConstruct$1(Component6) ? ClassComponent : FunctionComponent;
            } else if (Component6 !== void 0 && Component6 !== null) {
              var $$typeof = Component6.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment31, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.3.1";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component6 = fiber.type;
              if (isContextProvider(Component6)) {
                return processChildContext(fiber, Component6, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get4(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray3(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray3(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render3(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render3;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports2.createRoot = m.createRoot;
        exports2.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
      function _interopRequireDefault(e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      }
      module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage/index.js
  var require_formatMuiErrorMessage2 = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t)
          ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn2) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn2(arg);
      return cache[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
    return void 0;
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var isDevelopment, StyleSheet;
  var init_emotion_sheet_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.esm.js"() {
      isDevelopment = false;
      StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            var _tag$parentNode;
            return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
        };
        return StyleSheet2;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root2, parent, type, props, children, length2) {
    return { value, root: root2, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root2, props) {
    return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root2, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property2 = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root2, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property2 > 0 && strlen(characters2) - length2)
                append(property2 > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference2 = ruleset(characters2, root2, parent, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root2, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index = offset2 = property2 = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property2 = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root2, parent, index, offset2, rules, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root2, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root2, parent) {
    return node(value, root2, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root2, parent, length2) {
    return node(value, root2, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(position - 1, points, index);
              break;
            case 2:
              parsed[index] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index] = peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            default:
              parsed[index] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      prefixer = function prefixer2(element, index, children, callback) {
        if (element.length > -1) {
          if (!element["return"])
            switch (element.type) {
              case DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
              case KEYFRAMES:
                return serialize([copy(element, {
                  value: replace(element.value, "@", "@" + WEBKIT)
                })], callback);
              case RULESET:
                if (element.length)
                  return combine(element.props, function(value) {
                    switch (match(value, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return serialize([copy(element, {
                          props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                        })], callback);
                      case "::placeholder":
                        return serialize([copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                        })], callback);
                    }
                    return "";
                  });
            }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        {
          var currentSheet;
          var finalizingPlugins = [stringify, rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles5) {
            return serialize(compile(styles5), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        }
        var cache = {
          key,
          sheet: new StyleSheet({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment31 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment31;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement2;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment5;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty2 = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf2 = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf2(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys2.length; ++i) {
            var key = keys2[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty2(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module2.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser = true;
      registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
        var className = cache.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag2 === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser === false) && cache.registered[className] === void 0
        ) {
          cache.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
        registerStyles(cache, serialized, isStringTag2);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        scale: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== void 0) {
      return componentSelector;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        var keyframes4 = interpolation;
        if (keyframes4.anim === 1) {
          cursor = {
            name: keyframes4.name,
            styles: keyframes4.styles,
            next: cursor
          };
          return keyframes4.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== void 0) {
          var next2 = serializedStyles.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles5 = serializedStyles.styles + ";";
          return styles5;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    var asString = interpolation;
    if (registered == null) {
      return asString;
    }
    var cached = registered[asString];
    return cached !== void 0 ? cached : asString;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var key in obj) {
        var value = obj[key];
        if (typeof value !== "object") {
          var asString = value;
          if (registered != null && registered[asString] !== void 0) {
            string += key + "{" + registered[asString] + "}";
          } else if (isProcessableValue(asString)) {
            string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
          }
        } else {
          if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (key) {
              case "animation":
              case "animationName": {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string += key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles5 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles5 += handleInterpolation(mergedProps, registered, strings);
    } else {
      var asTemplateStringsArr = strings;
      styles5 += asTemplateStringsArr[0];
    }
    for (var i = 1; i < args.length; i++) {
      styles5 += handleInterpolation(mergedProps, registered, args[i]);
      if (stringMode) {
        var templateStringsArr = strings;
        styles5 += templateStringsArr[i];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles5)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = murmur2(styles5) + identifierName;
    return {
      name,
      styles: styles5,
      next: cursor
    };
  }
  var isDevelopment2, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, noComponentSelectorMessage, labelPattern, cursor;
  var init_emotion_serialize_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      isDevelopment2 = false;
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property2) {
        return property2.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React = __toESM(require_react());
      syncFallback = function syncFallback2(create) {
        return create();
      };
      useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-5486c51c.browser.esm.js
  function withTheme(Component6) {
    var componentName = Component6.displayName || Component6.name || "Component";
    var render3 = function render4(props, ref) {
      var theme2 = React2.useContext(ThemeContext);
      return /* @__PURE__ */ React2.createElement(Component6, _extends({
        theme: theme2,
        ref
      }, props));
    };
    var WithTheme = /* @__PURE__ */ React2.forwardRef(render3);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component6);
  }
  var React2, import_react, isDevelopment3, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, hasOwn, typePropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_5486c51c_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-5486c51c.browser.esm.js"() {
      React2 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isDevelopment3 = false;
      EmotionCacheContext = /* @__PURE__ */ React2.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      ThemeContext = /* @__PURE__ */ React2.createContext({});
      useTheme = function useTheme2() {
        return React2.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme2) {
        if (typeof theme2 === "function") {
          var mergedTheme = theme2(outerTheme);
          return mergedTheme;
        }
        return _extends({}, outerTheme, theme2);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme2) {
          return getTheme(outerTheme, theme2);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme2 = React2.useContext(ThemeContext);
        if (props.theme !== theme2) {
          theme2 = createCacheWithTheme(theme2)(props.theme);
        }
        return /* @__PURE__ */ React2.createElement(ThemeContext.Provider, {
          value: theme2
        }, props.children);
      };
      hasOwn = {}.hasOwnProperty;
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        var newProps = {};
        for (var key in props) {
          if (hasOwn.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(
        /* <any, any> */
        function(props, cache, ref) {
          var cssProp = props.css;
          if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
            cssProp = cache.registered[cssProp];
          }
          var WrappedComponent = props[typePropName];
          var registeredStyles = [cssProp];
          var className = "";
          if (typeof props.className === "string") {
            className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }
          var serialized = serializeStyles(registeredStyles, void 0, React2.useContext(ThemeContext));
          className += cache.key + "-" + serialized.name;
          var newProps = {};
          for (var key in props) {
            if (hasOwn.call(props, key) && key !== "css" && key !== typePropName && !isDevelopment3) {
              newProps[key] = props[key];
            }
          }
          newProps.className = className;
          if (ref) {
            newProps.ref = ref;
          }
          return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Insertion, {
            cache,
            serialized,
            isStringTag: typeof WrappedComponent === "string"
          }), /* @__PURE__ */ React2.createElement(WrappedComponent, newProps));
        }
      );
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function merge(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var React3, import_hoist_non_react_statics2, jsx, Global, keyframes, classnames, Insertion3, ClassNames;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_5486c51c_browser_esm();
      init_emotion_element_5486c51c_browser_esm();
      React3 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwn.call(props, "css")) {
          return React3.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React3.createElement.apply(null, createElementArgArray);
      };
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var styles5 = props.styles;
        var serialized = serializeStyles([styles5], void 0, React3.useContext(ThemeContext));
        var sheetRef = React3.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      keyframes = function keyframes2() {
        var insertable = css.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString5() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i = 0; i < serializedArr.length; i++) {
            insertStyles(cache, serializedArr[i], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && isDevelopment3) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx2 = function cx3() {
          if (hasRendered && isDevelopment3) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx: cx2,
          theme: React3.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Insertion3, {
          cache,
          serializedArr
        }), ele);
      });
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React4, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, isDevelopment4, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      React4 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_react_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp3;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp3 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp3 !== "function" && isReal) {
          shouldForwardProp3 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp3;
      };
      isDevelopment4 = false;
      Insertion5 = function Insertion6(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp3 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp3 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles5 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles5.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles5.push.apply(styles5, args);
          } else {
            styles5.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              styles5.push(args[i], args[0][i]);
            }
          }
          var Styled = withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React4.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles5.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp3 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (finalShouldForwardProp(_key)) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            if (ref) {
              newProps.ref = ref;
            }
            return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Insertion5, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React4.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles5;
          Styled.__emotion_forwardProp = shouldForwardProp3;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && isDevelopment4) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles5);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => newStyled
  });
  var import_react3, tags, newStyled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      newStyled = createStyled.bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment31 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment31;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement2;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment5;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty14 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty14.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values4, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values4, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement14, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement14(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement14(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React312 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React312.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component6) {
            var prototype3 = Component6.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty14 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values4, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty14);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values4, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty14.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty14.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty14.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement14(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray3(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement14(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement14(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement14(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray3(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray3(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty14.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys2 = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys2.length > 0 ? "{key: someKey, " + keys2.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys2.length > 0 ? "{" + keys2.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx3;
          exports2.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports2) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = StyledEngineProvider2;
      var React312 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      var cache;
      if (typeof document === "object") {
        cache = (0, _cache.default)({
          key: "css",
          prepend: true
        });
      }
      function StyledEngineProvider2(props) {
        const {
          injectFirst,
          children
        } = props;
        return injectFirst && cache ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache,
          children
        }) : children;
      }
      true ? StyledEngineProvider2.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports2) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports2) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = GlobalStyles3;
      var React312 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty4(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles3(props) {
        const {
          styles: styles5,
          defaultTheme: defaultTheme4 = {}
        } = props;
        const globalStyles = typeof styles5 === "function" ? (themeInput) => styles5(isEmpty4(themeInput) ? defaultTheme4 : themeInput) : styles5;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles3.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports2) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/material/node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/styled-engine/node/index.js"(exports2) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports2, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports2, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports2, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports2.default = styled4;
      exports2.internal_processStyles = void 0;
      Object.defineProperty(exports2, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled4(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles5) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles5.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles5.some((style6) => style6 === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles5);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports2.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports2, module2) {
      function _extends12() {
        return module2.exports = _extends12 = Object.assign ? Object.assign.bind() : function(n) {
          for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r2 in t)
              ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
          }
          return n;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _extends12.apply(null, arguments);
      }
      module2.exports = _extends12, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@mui/utils/deepmerge/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/deepmerge/deepmerge.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = deepmerge12;
      exports2.isPlainObject = isPlainObject6;
      var _extends22 = _interopRequireDefault(require_extends());
      function isPlainObject6(item) {
        if (typeof item !== "object" || item === null) {
          return false;
        }
        const prototype3 = Object.getPrototypeOf(item);
        return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
      }
      function deepClone2(source) {
        if (!isPlainObject6(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone2(source[key]);
        });
        return output;
      }
      function deepmerge12(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends22.default)({}, target) : target;
        if (isPlainObject6(target) && isPlainObject6(source)) {
          Object.keys(source).forEach((key) => {
            if (isPlainObject6(source[key]) && // Avoid prototype pollution
            Object.prototype.hasOwnProperty.call(target, key) && isPlainObject6(target[key])) {
              output[key] = deepmerge12(target[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject6(source[key]) ? deepClone2(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/deepmerge/index.js
  var require_deepmerge2 = __commonJS({
    "node_modules/@mui/utils/deepmerge/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      Object.keys(_deepmerge).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports2 && exports2[key] === _deepmerge[key])
          return;
        Object.defineProperty(exports2, key, {
          enumerable: true,
          get: function() {
            return _deepmerge[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/capitalize/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/capitalize/capitalize.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = capitalize7;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      function capitalize7(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/capitalize/index.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/utils/capitalize/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment31 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment31;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.SuspenseList = SuspenseList;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement2;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment5;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isSuspenseList = isSuspenseList;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/getDisplayName/getDisplayName.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = getDisplayName2;
      exports2.getFunctionName = getFunctionName;
      var _reactIs = require_react_is3();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn2) {
        const match2 = `${fn2}`.match(fnNameMatchRegex);
        const name = match2 && match2[1];
        return name || "";
      }
      function getFunctionComponentName(Component6, fallback = "") {
        return Component6.displayName || Component6.name || getFunctionName(Component6) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName2(Component6) {
        if (Component6 == null) {
          return void 0;
        }
        if (typeof Component6 === "string") {
          return Component6;
        }
        if (typeof Component6 === "function") {
          return getFunctionComponentName(Component6, "Component");
        }
        if (typeof Component6 === "object") {
          switch (Component6.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component6, Component6.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component6, Component6.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName/index.js
  var require_getDisplayName2 = __commonJS({
    "node_modules/@mui/utils/getDisplayName/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      var _getDisplayName = _interopRequireWildcard(require_getDisplayName());
      Object.keys(_getDisplayName).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports2 && exports2[key] === _getDisplayName[key])
          return;
        Object.defineProperty(exports2, key, {
          enumerable: true,
          get: function() {
            return _getDisplayName[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/clamp/clamp.js
  var require_clamp = __commonJS({
    "node_modules/@mui/utils/clamp/clamp.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      function clamp3(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
        return Math.max(min2, Math.min(val, max2));
      }
      var _default = exports2.default = clamp3;
    }
  });

  // node_modules/@mui/utils/clamp/index.js
  var require_clamp2 = __commonJS({
    "node_modules/@mui/utils/clamp/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _clamp.default;
        }
      });
      var _clamp = _interopRequireDefault(require_clamp());
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/merge.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      function merge6(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _deepmerge.default)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = exports2.default = merge6;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/responsivePropType.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType3 = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = exports2.default = responsivePropType3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/breakpoints.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.computeBreakpointsBase = computeBreakpointsBase2;
      exports2.createEmptyBreakpointObject = createEmptyBreakpointObject3;
      exports2.default = void 0;
      exports2.handleBreakpoints = handleBreakpoints3;
      exports2.mergeBreakpointsInOrder = mergeBreakpointsInOrder2;
      exports2.removeUnusedBreakpoints = removeUnusedBreakpoints3;
      exports2.resolveBreakpointValues = resolveBreakpointValues2;
      exports2.values = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _merge = _interopRequireDefault(require_merge());
      var values4 = exports2.values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      var defaultBreakpoints3 = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values4[key]}px)`
      };
      function handleBreakpoints3(props, propValue, styleFromPropValue) {
        const theme2 = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints3;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints3;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values4).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props) => {
          const theme2 = props.theme || {};
          const base = styleFunction(props);
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints3;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends22.default)({
                theme: theme2
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends22.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject3(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints3(breakpointKeys, style6) {
        return breakpointKeys.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style6);
      }
      function mergeBreakpointsInOrder2(breakpointsInput, ...styles5) {
        const emptyBreakpoints = createEmptyBreakpointObject3(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles5].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
        return removeUnusedBreakpoints3(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase2(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues2({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase2(breakpointValues, themeBreakpoints);
        const keys2 = Object.keys(base);
        if (keys2.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys2.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = exports2.default = breakpoints;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/style.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      exports2.getPath = getPath3;
      exports2.getStyleValue = getStyleValue4;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath3(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue4(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath3(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value, userValue, themeMapping);
        }
        return value;
      }
      function style6(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn2 = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme2 = props.theme;
          const themeMapping = getPath3(theme2, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue4(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue4(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn2.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn2.filterProps = [prop];
        return fn2;
      }
      var _default = exports2.default = style6;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/memoize.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = memoize5;
      function memoize5(fn2) {
        const cache = {};
        return (arg) => {
          if (cache[arg] === void 0) {
            cache[arg] = fn2(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/spacing.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.createUnarySpacing = createUnarySpacing3;
      exports2.createUnaryUnit = createUnaryUnit3;
      exports2.default = void 0;
      exports2.getStyleFromPropValue = getStyleFromPropValue3;
      exports2.getValue = getValue4;
      exports2.margin = margin3;
      exports2.marginKeys = void 0;
      exports2.padding = padding3;
      exports2.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties3 = {
        m: "margin",
        p: "padding"
      };
      var directions3 = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases3 = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties3 = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases3[prop]) {
            prop = aliases3[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property2 = properties3[a];
        const direction = directions3[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
      });
      var marginKeys3 = exports2.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      var paddingKeys3 = exports2.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      var spacingKeys3 = [...marginKeys3, ...paddingKeys3];
      function createUnaryUnit3(theme2, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme2, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing3(theme2) {
        return createUnaryUnit3(theme2, "spacing", 8, "spacing");
      }
      function getValue4(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue3(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue4(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty3(props, keys2, prop, transformer) {
        if (keys2.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties3(prop);
        const styleFromPropValue = getStyleFromPropValue3(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style6(props, keys2) {
        const transformer = createUnarySpacing3(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty3(props, keys2, prop, transformer)).reduce(_merge.default, {});
      }
      function margin3(props) {
        return style6(props, marginKeys3);
      }
      margin3.propTypes = true ? marginKeys3.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin3.filterProps = marginKeys3;
      function padding3(props) {
        return style6(props, paddingKeys3);
      }
      padding3.propTypes = true ? paddingKeys3.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding3.filterProps = paddingKeys3;
      function spacing3(props) {
        return style6(props, spacingKeys3);
      }
      spacing3.propTypes = true ? spacingKeys3.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing3.filterProps = spacingKeys3;
      var _default = exports2.default = spacing3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/compose.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose3(...styles5) {
        const handlers = styles5.reduce((acc, style6) => {
          style6.filterProps.forEach((prop) => {
            acc[prop] = style6;
          });
          return acc;
        }, {});
        const fn2 = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn2.propTypes = true ? styles5.reduce((acc, style6) => Object.assign(acc, style6.propTypes), {}) : {};
        fn2.filterProps = styles5.reduce((acc, style6) => acc.concat(style6.filterProps), []);
        return fn2;
      }
      var _default = exports2.default = compose3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/borders.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.borderTopColor = exports2.borderTop = exports2.borderRightColor = exports2.borderRight = exports2.borderRadius = exports2.borderLeftColor = exports2.borderLeft = exports2.borderColor = exports2.borderBottomColor = exports2.borderBottom = exports2.border = void 0;
      exports2.borderTransform = borderTransform3;
      exports2.outlineColor = exports2.outline = exports2.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform3(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      function createBorderStyle3(prop, transform) {
        return (0, _style.default)({
          prop,
          themeKey: "borders",
          transform
        });
      }
      var border3 = exports2.border = createBorderStyle3("border", borderTransform3);
      var borderTop3 = exports2.borderTop = createBorderStyle3("borderTop", borderTransform3);
      var borderRight3 = exports2.borderRight = createBorderStyle3("borderRight", borderTransform3);
      var borderBottom3 = exports2.borderBottom = createBorderStyle3("borderBottom", borderTransform3);
      var borderLeft3 = exports2.borderLeft = createBorderStyle3("borderLeft", borderTransform3);
      var borderColor3 = exports2.borderColor = createBorderStyle3("borderColor");
      var borderTopColor3 = exports2.borderTopColor = createBorderStyle3("borderTopColor");
      var borderRightColor3 = exports2.borderRightColor = createBorderStyle3("borderRightColor");
      var borderBottomColor3 = exports2.borderBottomColor = createBorderStyle3("borderBottomColor");
      var borderLeftColor3 = exports2.borderLeftColor = createBorderStyle3("borderLeftColor");
      var outline3 = exports2.outline = createBorderStyle3("outline", borderTransform3);
      var outlineColor3 = exports2.outlineColor = createBorderStyle3("outlineColor");
      var borderRadius3 = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports2.borderRadius = borderRadius3;
      borderRadius3.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius3.filterProps = ["borderRadius"];
      var borders3 = (0, _compose.default)(border3, borderTop3, borderRight3, borderBottom3, borderLeft3, borderColor3, borderTopColor3, borderRightColor3, borderBottomColor3, borderLeftColor3, borderRadius3, outline3, outlineColor3);
      var _default = exports2.default = borders3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/cssGrid.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.rowGap = exports2.gridTemplateRows = exports2.gridTemplateColumns = exports2.gridTemplateAreas = exports2.gridRow = exports2.gridColumn = exports2.gridAutoRows = exports2.gridAutoFlow = exports2.gridAutoColumns = exports2.gridArea = exports2.gap = exports2.default = exports2.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap3 = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports2.gap = gap3;
      gap3.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap3.filterProps = ["gap"];
      var columnGap3 = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports2.columnGap = columnGap3;
      columnGap3.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap3.filterProps = ["columnGap"];
      var rowGap3 = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports2.rowGap = rowGap3;
      rowGap3.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap3.filterProps = ["rowGap"];
      var gridColumn3 = exports2.gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      var gridRow3 = exports2.gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      var gridAutoFlow3 = exports2.gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      var gridAutoColumns3 = exports2.gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      var gridAutoRows3 = exports2.gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      var gridTemplateColumns3 = exports2.gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      var gridTemplateRows3 = exports2.gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      var gridTemplateAreas3 = exports2.gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      var gridArea3 = exports2.gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      var grid3 = (0, _compose.default)(gap3, columnGap3, rowGap3, gridColumn3, gridRow3, gridAutoFlow3, gridAutoColumns3, gridAutoRows3, gridTemplateColumns3, gridTemplateRows3, gridTemplateAreas3, gridArea3);
      var _default = exports2.default = grid3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/palette.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = exports2.color = exports2.bgcolor = exports2.backgroundColor = void 0;
      exports2.paletteTransform = paletteTransform3;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform3(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color3 = exports2.color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform3
      });
      var bgcolor3 = exports2.bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform3
      });
      var backgroundColor3 = exports2.backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform3
      });
      var palette3 = (0, _compose.default)(color3, bgcolor3, backgroundColor3);
      var _default = exports2.default = palette3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/sizing.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.sizeWidth = exports2.sizeHeight = exports2.minWidth = exports2.minHeight = exports2.maxWidth = exports2.maxHeight = exports2.height = exports2.default = exports2.boxSizing = void 0;
      exports2.sizingTransform = sizingTransform3;
      exports2.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform3(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width3 = exports2.width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform3
      });
      var maxWidth3 = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme2;
            const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
            if (!breakpoint) {
              return {
                maxWidth: sizingTransform3(propValue)
              };
            }
            if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
              return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
              };
            }
            return {
              maxWidth: breakpoint
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports2.maxWidth = maxWidth3;
      maxWidth3.filterProps = ["maxWidth"];
      var minWidth3 = exports2.minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform3
      });
      var height3 = exports2.height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform3
      });
      var maxHeight3 = exports2.maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform3
      });
      var minHeight3 = exports2.minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform3
      });
      var sizeWidth3 = exports2.sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform3
      });
      var sizeHeight3 = exports2.sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform3
      });
      var boxSizing3 = exports2.boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      var sizing3 = (0, _compose.default)(width3, maxWidth3, minWidth3, height3, maxHeight3, minHeight3, boxSizing3);
      var _default = exports2.default = sizing3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig4 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        outline: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        outlineColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = exports2.default = defaultSxConfig4;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      exports2.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx3;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys3(...objects) {
        const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn3(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx3() {
        function getThemeValue(prop, val, theme2, config) {
          const props = {
            [prop]: val,
            theme: theme2
          };
          const options = config[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform,
            style: style6
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme2, themeKey) || {};
          if (style6) {
            return style6(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx5(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme: theme2 = {}
          } = props || {};
          if (!sx) {
            return null;
          }
          const config = (_theme$unstable_sxCon = theme2.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme2);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme2.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css3 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn3(sxObject[styleKey], theme2);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config[styleKey]) {
                    css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme2, config));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme: theme2
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys3(breakpointsValues, value)) {
                      css3[styleKey] = styleFunctionSx5({
                        sx: value,
                        theme: theme2
                      });
                    } else {
                      css3 = (0, _merge.default)(css3, breakpointsValues);
                    }
                  }
                } else {
                  css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme2, config));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css3);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx5;
      }
      var styleFunctionSx4 = unstable_createStyleFunctionSx3();
      styleFunctionSx4.filterProps = ["sx"];
      var _default = exports2.default = styleFunctionSx4;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports2, module2) {
      function _objectWithoutPropertiesLoose3(r2, e) {
        if (null == r2)
          return {};
        var t = {};
        for (var n in r2)
          if ({}.hasOwnProperty.call(r2, n)) {
            if (e.includes(n))
              continue;
            t[n] = r2[n];
          }
        return t;
      }
      module2.exports = _objectWithoutPropertiesLoose3, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = extendSxProp4;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = require_deepmerge2();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded130 = ["sx"];
      var splitProps2 = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp4(props) {
        const {
          sx: inSx
        } = props, other = (0, _objectWithoutPropertiesLoose22.default)(props, _excluded130);
        const {
          systemProps,
          otherProps
        } = splitProps2(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _deepmerge.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends22.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends22.default)({}, systemProps, inSx);
        }
        return (0, _extends22.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports2, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports2, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports2, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/createBreakpoints.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.breakpointKeys = void 0;
      exports2.default = createBreakpoints3;
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends22 = _interopRequireDefault(require_extends());
      var _excluded130 = ["values", "unit", "step"];
      var breakpointKeys = exports2.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      var sortBreakpointsValues3 = (values4) => {
        const breakpointsAsArray = Object.keys(values4).map((key) => ({
          key,
          val: values4[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends22.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints3(breakpoints) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values: values4 = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5
        } = breakpoints, other = (0, _objectWithoutPropertiesLoose22.default)(breakpoints, _excluded130);
        const sortedValues = sortBreakpointsValues3(values4);
        const keys2 = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values4[key] === "number" ? values4[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values4[key] === "number" ? values4[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start2, end2) {
          const endIndex = keys2.indexOf(end2);
          return `@media (min-width:${typeof values4[start2] === "number" ? values4[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values4[keys2[endIndex]] === "number" ? values4[keys2[endIndex]] : end2) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys2.indexOf(key) + 1 < keys2.length) {
            return between(key, keys2[keys2.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys2.indexOf(key);
          if (keyIndex === 0) {
            return up(keys2[1]);
          }
          if (keyIndex === keys2.length - 1) {
            return down(keys2[keyIndex]);
          }
          return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends22.default)({
          keys: keys2,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/shape.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var shape3 = {
        borderRadius: 4
      };
      var _default = exports2.default = shape3;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/createSpacing.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = createSpacing3;
      var _spacing = require_spacing();
      function createSpacing3(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing3 = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing3.mui = true;
        return spacing3;
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/applyStyles.js
  var require_applyStyles = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/applyStyles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = applyStyles4;
      function applyStyles4(key, styles5) {
        const theme2 = this;
        if (theme2.vars && typeof theme2.getColorSchemeSelector === "function") {
          const selector = theme2.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
          return {
            [selector]: styles5
          };
        }
        if (theme2.palette.mode === key) {
          return styles5;
        }
        return {};
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/createTheme.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
      var _excluded130 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme4(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose22.default)(options, _excluded130);
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing3 = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _deepmerge.default)({
          breakpoints,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: (0, _extends22.default)({
            mode: "light"
          }, paletteInput),
          spacing: spacing3,
          shape: (0, _extends22.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme.applyStyles = _applyStyles.default;
        muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = (0, _extends22.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = exports2.default = createTheme4;
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createTheme/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports2, "private_createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports2, "unstable_applyStyles", {
        enumerable: true,
        get: function() {
          return _applyStyles.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/colorManipulator.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.alpha = alpha13;
      exports2.blend = blend;
      exports2.colorChannel = void 0;
      exports2.darken = darken6;
      exports2.decomposeColor = decomposeColor2;
      exports2.emphasize = emphasize3;
      exports2.getContrastRatio = getContrastRatio3;
      exports2.getLuminance = getLuminance3;
      exports2.hexToRgb = hexToRgb2;
      exports2.hslToRgb = hslToRgb3;
      exports2.lighten = lighten6;
      exports2.private_safeAlpha = private_safeAlpha;
      exports2.private_safeColorChannel = void 0;
      exports2.private_safeDarken = private_safeDarken;
      exports2.private_safeEmphasize = private_safeEmphasize;
      exports2.private_safeLighten = private_safeLighten;
      exports2.recomposeColor = recomposeColor2;
      exports2.rgbToHex = rgbToHex3;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _clamp = _interopRequireDefault(require_clamp2());
      function clampWrapper2(value, min2 = 0, max2 = 1) {
        if (true) {
          if (value < min2 || value > max2) {
            console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
          }
        }
        return (0, _clamp.default)(value, min2, max2);
      }
      function hexToRgb2(color3) {
        color3 = color3.slice(1);
        const re = new RegExp(`.{1,${color3.length >= 6 ? 2 : 1}}`, "g");
        let colors = color3.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor2(color3) {
        if (color3.type) {
          return color3;
        }
        if (color3.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color3));
        }
        const marker = color3.indexOf("(");
        const type = color3.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color3}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color3));
        }
        let values4 = color3.substring(marker + 1, color3.length - 1);
        let colorSpace;
        if (type === "color") {
          values4 = values4.split(" ");
          colorSpace = values4.shift();
          if (values4.length === 4 && values4[3].charAt(0) === "/") {
            values4[3] = values4[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
          }
        } else {
          values4 = values4.split(",");
        }
        values4 = values4.map((value) => parseFloat(value));
        return {
          type,
          values: values4,
          colorSpace
        };
      }
      var colorChannel = (color3) => {
        const decomposedColor = decomposeColor2(color3);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports2.colorChannel = colorChannel;
      var private_safeColorChannel = (color3, warning) => {
        try {
          return colorChannel(color3);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color3;
        }
      };
      exports2.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor2(color3) {
        const {
          type,
          colorSpace
        } = color3;
        let {
          values: values4
        } = color3;
        if (type.indexOf("rgb") !== -1) {
          values4 = values4.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type.indexOf("hsl") !== -1) {
          values4[1] = `${values4[1]}%`;
          values4[2] = `${values4[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values4 = `${colorSpace} ${values4.join(" ")}`;
        } else {
          values4 = `${values4.join(", ")}`;
        }
        return `${type}(${values4})`;
      }
      function rgbToHex3(color3) {
        if (color3.indexOf("#") === 0) {
          return color3;
        }
        const {
          values: values4
        } = decomposeColor2(color3);
        return `#${values4.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb3(color3) {
        color3 = decomposeColor2(color3);
        const {
          values: values4
        } = color3;
        const h = values4[0];
        const s = values4[1] / 100;
        const l = values4[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color3.type === "hsla") {
          type += "a";
          rgb.push(values4[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function getLuminance3(color3) {
        color3 = decomposeColor2(color3);
        let rgb = color3.type === "hsl" || color3.type === "hsla" ? decomposeColor2(hslToRgb3(color3)).values : color3.values;
        rgb = rgb.map((val) => {
          if (color3.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio3(foreground, background) {
        const lumA = getLuminance3(foreground);
        const lumB = getLuminance3(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha13(color3, value) {
        color3 = decomposeColor2(color3);
        value = clampWrapper2(value);
        if (color3.type === "rgb" || color3.type === "hsl") {
          color3.type += "a";
        }
        if (color3.type === "color") {
          color3.values[3] = `/${value}`;
        } else {
          color3.values[3] = value;
        }
        return recomposeColor2(color3);
      }
      function private_safeAlpha(color3, value, warning) {
        try {
          return alpha13(color3, value);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color3;
        }
      }
      function darken6(color3, coefficient) {
        color3 = decomposeColor2(color3);
        coefficient = clampWrapper2(coefficient);
        if (color3.type.indexOf("hsl") !== -1) {
          color3.values[2] *= 1 - coefficient;
        } else if (color3.type.indexOf("rgb") !== -1 || color3.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color3.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color3);
      }
      function private_safeDarken(color3, coefficient, warning) {
        try {
          return darken6(color3, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color3;
        }
      }
      function lighten6(color3, coefficient) {
        color3 = decomposeColor2(color3);
        coefficient = clampWrapper2(coefficient);
        if (color3.type.indexOf("hsl") !== -1) {
          color3.values[2] += (100 - color3.values[2]) * coefficient;
        } else if (color3.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color3.values[i] += (255 - color3.values[i]) * coefficient;
          }
        } else if (color3.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color3.values[i] += (1 - color3.values[i]) * coefficient;
          }
        }
        return recomposeColor2(color3);
      }
      function private_safeLighten(color3, coefficient, warning) {
        try {
          return lighten6(color3, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color3;
        }
      }
      function emphasize3(color3, coefficient = 0.15) {
        return getLuminance3(color3) > 0.5 ? darken6(color3, coefficient) : lighten6(color3, coefficient);
      }
      function private_safeEmphasize(color3, coefficient, warning) {
        try {
          return emphasize3(color3, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color3;
        }
      }
      function blend(background, overlay, opacity, gamma = 1) {
        const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
        const backgroundColor3 = decomposeColor2(background);
        const overlayColor = decomposeColor2(overlay);
        const rgb = [blendChannel(backgroundColor3.values[0], overlayColor.values[0]), blendChannel(backgroundColor3.values[1], overlayColor.values[1]), blendChannel(backgroundColor3.values[2], overlayColor.values[2])];
        return recomposeColor2({
          type: "rgb",
          values: rgb
        });
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/createStyled.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = createStyled5;
      exports2.shouldForwardProp = shouldForwardProp3;
      exports2.systemDefaultTheme = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _deepmerge = require_deepmerge2();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded130 = ["ownerState"];
      var _excluded224 = ["variants"];
      var _excluded314 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty4(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      function shouldForwardProp3(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme4 = exports2.systemDefaultTheme = (0, _createTheme.default)();
      var lowercaseFirstLetter2 = (string) => {
        if (!string) {
          return string;
        }
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function resolveTheme2({
        defaultTheme: defaultTheme4,
        theme: theme2,
        themeId
      }) {
        return isEmpty4(theme2) ? defaultTheme4 : theme2[themeId] || theme2;
      }
      function defaultOverridesResolver2(slot) {
        if (!slot) {
          return null;
        }
        return (props, styles5) => styles5[slot];
      }
      function processStyleArg2(callableStyle, _ref) {
        let {
          ownerState
        } = _ref, props = (0, _objectWithoutPropertiesLoose22.default)(_ref, _excluded130);
        const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle((0, _extends22.default)({
          ownerState
        }, props)) : callableStyle;
        if (Array.isArray(resolvedStylesArg)) {
          return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg2(resolvedStyle, (0, _extends22.default)({
            ownerState
          }, props)));
        }
        if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
          const {
            variants = []
          } = resolvedStylesArg, otherStyles = (0, _objectWithoutPropertiesLoose22.default)(resolvedStylesArg, _excluded224);
          let result = otherStyles;
          variants.forEach((variant) => {
            let isMatch = true;
            if (typeof variant.props === "function") {
              isMatch = variant.props((0, _extends22.default)({
                ownerState
              }, props, ownerState));
            } else {
              Object.keys(variant.props).forEach((key) => {
                if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
                  isMatch = false;
                }
              });
            }
            if (isMatch) {
              if (!Array.isArray(result)) {
                result = [result];
              }
              result.push(typeof variant.style === "function" ? variant.style((0, _extends22.default)({
                ownerState
              }, props, ownerState)) : variant.style);
            }
          });
          return result;
        }
        return resolvedStylesArg;
      }
      function createStyled5(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme4 = systemDefaultTheme4,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp3,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp3
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)((0, _extends22.default)({}, props, {
            theme: resolveTheme2((0, _extends22.default)({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }))
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles5) => styles5.filter((style6) => !(style6 != null && style6.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver: overridesResolver6 = defaultOverridesResolver2(lowercaseFirstLetter2(componentSlot))
          } = inputOptions, options = (0, _objectWithoutPropertiesLoose22.default)(inputOptions, _excluded314);
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
          );
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter2(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp3;
          if (componentSlot === "Root" || componentSlot === "root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag2(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends22.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const transformStyleArg = (stylesArg) => {
            if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
              return (props) => processStyleArg2(stylesArg, (0, _extends22.default)({}, props, {
                theme: resolveTheme2({
                  theme: props.theme,
                  defaultTheme: defaultTheme4,
                  themeId
                })
              }));
            }
            return stylesArg;
          };
          const muiStyledResolver = (styleArg2, ...expressions) => {
            let transformedStyleArg = transformStyleArg(styleArg2);
            const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
            if (componentName && overridesResolver6) {
              expressionsWithDefaultTheme.push((props) => {
                const theme2 = resolveTheme2((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                if (!theme2.components || !theme2.components[componentName] || !theme2.components[componentName].styleOverrides) {
                  return null;
                }
                const styleOverrides = theme2.components[componentName].styleOverrides;
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = processStyleArg2(slotStyle, (0, _extends22.default)({}, props, {
                    theme: theme2
                  }));
                });
                return overridesResolver6(props, resolvedStyleOverrides);
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                var _theme$components;
                const theme2 = resolveTheme2((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                const themeVariants = theme2 == null || (_theme$components = theme2.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
                return processStyleArg2({
                  variants: themeVariants
                }, (0, _extends22.default)({}, props, {
                  theme: theme2
                }));
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg2) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg2, ...placeholders];
              transformedStyleArg.raw = [...styleArg2.raw, ...placeholders];
            }
            const Component6 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
              }
              Component6.displayName = displayName;
            }
            if (tag.muiName) {
              Component6.muiName = tag.muiName;
            }
            return Component6;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault.js"(exports2) {
      "use strict";
      "use client";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var React312 = _interopRequireWildcard(require_react());
      var _styledEngine = require_node();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      function isObjectEmpty2(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme8(defaultTheme4 = null) {
        const contextTheme = React312.useContext(_styledEngine.ThemeContext);
        return !contextTheme || isObjectEmpty2(contextTheme) ? defaultTheme4 : contextTheme;
      }
      var _default = exports2.default = useTheme8;
    }
  });

  // node_modules/dayjs/dayjs.min.js
  var require_dayjs_min = __commonJS({
    "node_modules/dayjs/dayjs.min.js"(exports2, module2) {
      !function(t, e) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
      }(exports2, function() {
        "use strict";
        var t = 1e3, e = 6e4, n = 36e5, r2 = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
          var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
          return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
        } }, m = function(t2, e2, n2) {
          var r3 = String(t2);
          return !r3 || r3.length >= e2 ? t2 : "" + Array(e2 + 1 - r3.length).join(n2) + t2;
        }, v = { s: m, z: function(t2) {
          var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r3 = Math.floor(n2 / 60), i2 = n2 % 60;
          return (e2 <= 0 ? "+" : "-") + m(r3, 2, "0") + ":" + m(i2, 2, "0");
        }, m: function t2(e2, n2) {
          if (e2.date() < n2.date())
            return -t2(n2, e2);
          var r3 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r3, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r3 + (s2 ? -1 : 1), c);
          return +(-(r3 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
        }, a: function(t2) {
          return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
        }, p: function(t2) {
          return { M: c, y: h, w: o, d: a, D: d, h: u, m: s, s: i, ms: r2, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t2) {
          return void 0 === t2;
        } }, g = "en", D = {};
        D[g] = M;
        var p = "$isDayjsObject", S = function(t2) {
          return t2 instanceof _2 || !(!t2 || !t2[p]);
        }, w = function t2(e2, n2, r3) {
          var i2;
          if (!e2)
            return g;
          if ("string" == typeof e2) {
            var s2 = e2.toLowerCase();
            D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
            var u2 = e2.split("-");
            if (!i2 && u2.length > 1)
              return t2(u2[0]);
          } else {
            var a2 = e2.name;
            D[a2] = e2, i2 = a2;
          }
          return !r3 && i2 && (g = i2), i2 || !r3 && g;
        }, O = function(t2, e2) {
          if (S(t2))
            return t2.clone();
          var n2 = "object" == typeof e2 ? e2 : {};
          return n2.date = t2, n2.args = arguments, new _2(n2);
        }, b = v;
        b.l = w, b.i = S, b.w = function(t2, e2) {
          return O(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
        };
        var _2 = function() {
          function M2(t2) {
            this.$L = w(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
          }
          var m2 = M2.prototype;
          return m2.parse = function(t2) {
            this.$d = function(t3) {
              var e2 = t3.date, n2 = t3.utc;
              if (null === e2)
                return /* @__PURE__ */ new Date(NaN);
              if (b.u(e2))
                return /* @__PURE__ */ new Date();
              if (e2 instanceof Date)
                return new Date(e2);
              if ("string" == typeof e2 && !/Z$/i.test(e2)) {
                var r3 = e2.match($);
                if (r3) {
                  var i2 = r3[2] - 1 || 0, s2 = (r3[7] || "0").substring(0, 3);
                  return n2 ? new Date(Date.UTC(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2)) : new Date(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2);
                }
              }
              return new Date(e2);
            }(t2), this.init();
          }, m2.init = function() {
            var t2 = this.$d;
            this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
          }, m2.$utils = function() {
            return b;
          }, m2.isValid = function() {
            return !(this.$d.toString() === l);
          }, m2.isSame = function(t2, e2) {
            var n2 = O(t2);
            return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
          }, m2.isAfter = function(t2, e2) {
            return O(t2) < this.startOf(e2);
          }, m2.isBefore = function(t2, e2) {
            return this.endOf(e2) < O(t2);
          }, m2.$g = function(t2, e2, n2) {
            return b.u(t2) ? this[e2] : this.set(n2, t2);
          }, m2.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m2.valueOf = function() {
            return this.$d.getTime();
          }, m2.startOf = function(t2, e2) {
            var n2 = this, r3 = !!b.u(e2) || e2, f2 = b.p(t2), l2 = function(t3, e3) {
              var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
              return r3 ? i2 : i2.endOf(a);
            }, $2 = function(t3, e3) {
              return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
            }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
            switch (f2) {
              case h:
                return r3 ? l2(1, 0) : l2(31, 11);
              case c:
                return r3 ? l2(1, M3) : l2(0, M3 + 1);
              case o:
                var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
                return l2(r3 ? m3 - D2 : m3 + (6 - D2), M3);
              case a:
              case d:
                return $2(v2 + "Hours", 0);
              case u:
                return $2(v2 + "Minutes", 1);
              case s:
                return $2(v2 + "Seconds", 2);
              case i:
                return $2(v2 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m2.endOf = function(t2) {
            return this.startOf(t2, false);
          }, m2.$set = function(t2, e2) {
            var n2, o2 = b.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r2] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
            if (o2 === c || o2 === h) {
              var y2 = this.clone().set(d, 1);
              y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
            } else
              l2 && this.$d[l2]($2);
            return this.init(), this;
          }, m2.set = function(t2, e2) {
            return this.clone().$set(t2, e2);
          }, m2.get = function(t2) {
            return this[b.p(t2)]();
          }, m2.add = function(r3, f2) {
            var d2, l2 = this;
            r3 = Number(r3);
            var $2 = b.p(f2), y2 = function(t2) {
              var e2 = O(l2);
              return b.w(e2.date(e2.date() + Math.round(t2 * r3)), l2);
            };
            if ($2 === c)
              return this.set(c, this.$M + r3);
            if ($2 === h)
              return this.set(h, this.$y + r3);
            if ($2 === a)
              return y2(1);
            if ($2 === o)
              return y2(7);
            var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r3 * M3;
            return b.w(m3, this);
          }, m2.subtract = function(t2, e2) {
            return this.add(-1 * t2, e2);
          }, m2.format = function(t2) {
            var e2 = this, n2 = this.$locale();
            if (!this.isValid())
              return n2.invalidDate || l;
            var r3 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h2 = function(t3, n3, i3, s3) {
              return t3 && (t3[n3] || t3(e2, r3)) || i3[n3].slice(0, s3);
            }, d2 = function(t3) {
              return b.s(s2 % 12 || 12, t3, "0");
            }, $2 = f2 || function(t3, e3, n3) {
              var r4 = t3 < 12 ? "AM" : "PM";
              return n3 ? r4.toLowerCase() : r4;
            };
            return r3.replace(y, function(t3, r4) {
              return r4 || function(t4) {
                switch (t4) {
                  case "YY":
                    return String(e2.$y).slice(-2);
                  case "YYYY":
                    return b.s(e2.$y, 4, "0");
                  case "M":
                    return a2 + 1;
                  case "MM":
                    return b.s(a2 + 1, 2, "0");
                  case "MMM":
                    return h2(n2.monthsShort, a2, c2, 3);
                  case "MMMM":
                    return h2(c2, a2);
                  case "D":
                    return e2.$D;
                  case "DD":
                    return b.s(e2.$D, 2, "0");
                  case "d":
                    return String(e2.$W);
                  case "dd":
                    return h2(n2.weekdaysMin, e2.$W, o2, 2);
                  case "ddd":
                    return h2(n2.weekdaysShort, e2.$W, o2, 3);
                  case "dddd":
                    return o2[e2.$W];
                  case "H":
                    return String(s2);
                  case "HH":
                    return b.s(s2, 2, "0");
                  case "h":
                    return d2(1);
                  case "hh":
                    return d2(2);
                  case "a":
                    return $2(s2, u2, true);
                  case "A":
                    return $2(s2, u2, false);
                  case "m":
                    return String(u2);
                  case "mm":
                    return b.s(u2, 2, "0");
                  case "s":
                    return String(e2.$s);
                  case "ss":
                    return b.s(e2.$s, 2, "0");
                  case "SSS":
                    return b.s(e2.$ms, 3, "0");
                  case "Z":
                    return i2;
                }
                return null;
              }(t3) || i2.replace(":", "");
            });
          }, m2.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m2.diff = function(r3, d2, l2) {
            var $2, y2 = this, M3 = b.p(d2), m3 = O(r3), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
              return b.m(y2, m3);
            };
            switch (M3) {
              case h:
                $2 = D2() / 12;
                break;
              case c:
                $2 = D2();
                break;
              case f:
                $2 = D2() / 3;
                break;
              case o:
                $2 = (g2 - v2) / 6048e5;
                break;
              case a:
                $2 = (g2 - v2) / 864e5;
                break;
              case u:
                $2 = g2 / n;
                break;
              case s:
                $2 = g2 / e;
                break;
              case i:
                $2 = g2 / t;
                break;
              default:
                $2 = g2;
            }
            return l2 ? $2 : b.a($2);
          }, m2.daysInMonth = function() {
            return this.endOf(c).$D;
          }, m2.$locale = function() {
            return D[this.$L];
          }, m2.locale = function(t2, e2) {
            if (!t2)
              return this.$L;
            var n2 = this.clone(), r3 = w(t2, e2, true);
            return r3 && (n2.$L = r3), n2;
          }, m2.clone = function() {
            return b.w(this.$d, this);
          }, m2.toDate = function() {
            return new Date(this.valueOf());
          }, m2.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m2.toISOString = function() {
            return this.$d.toISOString();
          }, m2.toString = function() {
            return this.$d.toUTCString();
          }, M2;
        }(), k = _2.prototype;
        return O.prototype = k, [["$ms", r2], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t2) {
          k[t2[1]] = function(e2) {
            return this.$g(e2, t2[0], t2[1]);
          };
        }), O.extend = function(t2, e2) {
          return t2.$i || (t2(e2, _2, O), t2.$i = true), O;
        }, O.locale = w, O.isDayjs = S, O.unix = function(t2) {
          return O(1e3 * t2);
        }, O.en = D[g], O.Ls = D, O.p = {}, O;
      });
    }
  });

  // node_modules/dayjs/plugin/weekOfYear.js
  var require_weekOfYear = __commonJS({
    "node_modules/dayjs/plugin/weekOfYear.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_weekOfYear = t();
      }(exports2, function() {
        "use strict";
        var e = "week", t = "year";
        return function(i, n, r2) {
          var f = n.prototype;
          f.week = function(i2) {
            if (void 0 === i2 && (i2 = null), null !== i2)
              return this.add(7 * (i2 - this.week()), "day");
            var n2 = this.$locale().yearStart || 1;
            if (11 === this.month() && this.date() > 25) {
              var f2 = r2(this).startOf(t).add(1, t).date(n2), s = r2(this).endOf(e);
              if (f2.isBefore(s))
                return 1;
            }
            var a = r2(this).startOf(t).date(n2).startOf(e).subtract(1, "millisecond"), o = this.diff(a, e, true);
            return o < 0 ? r2(this).startOf("week").week() : Math.ceil(o);
          }, f.weeks = function(e2) {
            return void 0 === e2 && (e2 = null), this.week(e2);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/customParseFormat.js
  var require_customParseFormat = __commonJS({
    "node_modules/dayjs/plugin/customParseFormat.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_customParseFormat = t();
      }(exports2, function() {
        "use strict";
        var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d/, r2 = /\d\d/, i = /\d\d?/, o = /\d*[^-_:/,()\s\d]+/, s = {}, a = function(e2) {
          return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
        };
        var f = function(e2) {
          return function(t2) {
            this[e2] = +t2;
          };
        }, h = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
          (this.zone || (this.zone = {})).offset = function(e3) {
            if (!e3)
              return 0;
            if ("Z" === e3)
              return 0;
            var t2 = e3.match(/([+-]|\d\d)/g), n2 = 60 * t2[1] + (+t2[2] || 0);
            return 0 === n2 ? 0 : "+" === t2[0] ? -n2 : n2;
          }(e2);
        }], u = function(e2) {
          var t2 = s[e2];
          return t2 && (t2.indexOf ? t2 : t2.s.concat(t2.f));
        }, d = function(e2, t2) {
          var n2, r3 = s.meridiem;
          if (r3) {
            for (var i2 = 1; i2 <= 24; i2 += 1)
              if (e2.indexOf(r3(i2, 0, t2)) > -1) {
                n2 = i2 > 12;
                break;
              }
          } else
            n2 = e2 === (t2 ? "pm" : "PM");
          return n2;
        }, c = { A: [o, function(e2) {
          this.afternoon = d(e2, false);
        }], a: [o, function(e2) {
          this.afternoon = d(e2, true);
        }], Q: [n, function(e2) {
          this.month = 3 * (e2 - 1) + 1;
        }], S: [n, function(e2) {
          this.milliseconds = 100 * +e2;
        }], SS: [r2, function(e2) {
          this.milliseconds = 10 * +e2;
        }], SSS: [/\d{3}/, function(e2) {
          this.milliseconds = +e2;
        }], s: [i, f("seconds")], ss: [i, f("seconds")], m: [i, f("minutes")], mm: [i, f("minutes")], H: [i, f("hours")], h: [i, f("hours")], HH: [i, f("hours")], hh: [i, f("hours")], D: [i, f("day")], DD: [r2, f("day")], Do: [o, function(e2) {
          var t2 = s.ordinal, n2 = e2.match(/\d+/);
          if (this.day = n2[0], t2)
            for (var r3 = 1; r3 <= 31; r3 += 1)
              t2(r3).replace(/\[|\]/g, "") === e2 && (this.day = r3);
        }], w: [i, f("week")], ww: [r2, f("week")], M: [i, f("month")], MM: [r2, f("month")], MMM: [o, function(e2) {
          var t2 = u("months"), n2 = (u("monthsShort") || t2.map(function(e3) {
            return e3.slice(0, 3);
          })).indexOf(e2) + 1;
          if (n2 < 1)
            throw new Error();
          this.month = n2 % 12 || n2;
        }], MMMM: [o, function(e2) {
          var t2 = u("months").indexOf(e2) + 1;
          if (t2 < 1)
            throw new Error();
          this.month = t2 % 12 || t2;
        }], Y: [/[+-]?\d+/, f("year")], YY: [r2, function(e2) {
          this.year = a(e2);
        }], YYYY: [/\d{4}/, f("year")], Z: h, ZZ: h };
        function l(n2) {
          var r3, i2;
          r3 = n2, i2 = s && s.formats;
          for (var o2 = (n2 = r3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t2, n3, r4) {
            var o3 = r4 && r4.toUpperCase();
            return n3 || i2[r4] || e[r4] || i2[o3].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t3, n4) {
              return t3 || n4.slice(1);
            });
          })).match(t), a2 = o2.length, f2 = 0; f2 < a2; f2 += 1) {
            var h2 = o2[f2], u2 = c[h2], d2 = u2 && u2[0], l2 = u2 && u2[1];
            o2[f2] = l2 ? { regex: d2, parser: l2 } : h2.replace(/^\[|\]$/g, "");
          }
          return function(e2) {
            for (var t2 = {}, n3 = 0, r4 = 0; n3 < a2; n3 += 1) {
              var i3 = o2[n3];
              if ("string" == typeof i3)
                r4 += i3.length;
              else {
                var s2 = i3.regex, f3 = i3.parser, h3 = e2.slice(r4), u3 = s2.exec(h3)[0];
                f3.call(t2, u3), e2 = e2.replace(u3, "");
              }
            }
            return function(e3) {
              var t3 = e3.afternoon;
              if (void 0 !== t3) {
                var n4 = e3.hours;
                t3 ? n4 < 12 && (e3.hours += 12) : 12 === n4 && (e3.hours = 0), delete e3.afternoon;
              }
            }(t2), t2;
          };
        }
        return function(e2, t2, n2) {
          n2.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (a = e2.parseTwoDigitYear);
          var r3 = t2.prototype, i2 = r3.parse;
          r3.parse = function(e3) {
            var t3 = e3.date, r4 = e3.utc, o2 = e3.args;
            this.$u = r4;
            var a2 = o2[1];
            if ("string" == typeof a2) {
              var f2 = true === o2[2], h2 = true === o2[3], u2 = f2 || h2, d2 = o2[2];
              h2 && (d2 = o2[2]), s = this.$locale(), !f2 && d2 && (s = n2.Ls[d2]), this.$d = function(e4, t4, n3, r5) {
                try {
                  if (["x", "X"].indexOf(t4) > -1)
                    return new Date(("X" === t4 ? 1e3 : 1) * e4);
                  var i3 = l(t4)(e4), o3 = i3.year, s2 = i3.month, a3 = i3.day, f3 = i3.hours, h3 = i3.minutes, u3 = i3.seconds, d3 = i3.milliseconds, c3 = i3.zone, m2 = i3.week, M2 = /* @__PURE__ */ new Date(), Y = a3 || (o3 || s2 ? 1 : M2.getDate()), p = o3 || M2.getFullYear(), v = 0;
                  o3 && !s2 || (v = s2 > 0 ? s2 - 1 : M2.getMonth());
                  var D, w = f3 || 0, g = h3 || 0, y = u3 || 0, L = d3 || 0;
                  return c3 ? new Date(Date.UTC(p, v, Y, w, g, y, L + 60 * c3.offset * 1e3)) : n3 ? new Date(Date.UTC(p, v, Y, w, g, y, L)) : (D = new Date(p, v, Y, w, g, y, L), m2 && (D = r5(D).week(m2).toDate()), D);
                } catch (e5) {
                  return /* @__PURE__ */ new Date("");
                }
              }(t3, a2, r4, n2), this.init(), d2 && true !== d2 && (this.$L = this.locale(d2).$L), u2 && t3 != this.format(a2) && (this.$d = /* @__PURE__ */ new Date("")), s = {};
            } else if (a2 instanceof Array)
              for (var c2 = a2.length, m = 1; m <= c2; m += 1) {
                o2[1] = a2[m - 1];
                var M = n2.apply(this, o2);
                if (M.isValid()) {
                  this.$d = M.$d, this.$L = M.$L, this.init();
                  break;
                }
                m === c2 && (this.$d = /* @__PURE__ */ new Date(""));
              }
            else
              i2.call(this, e3);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/localizedFormat.js
  var require_localizedFormat = __commonJS({
    "node_modules/dayjs/plugin/localizedFormat.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_localizedFormat = t();
      }(exports2, function() {
        "use strict";
        var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
        return function(t, o, n) {
          var r2 = o.prototype, i = r2.format;
          n.en.formats = e, r2.format = function(t2) {
            void 0 === t2 && (t2 = "YYYY-MM-DDTHH:mm:ssZ");
            var o2 = this.$locale().formats, n2 = function(t3, o3) {
              return t3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t4, n3, r3) {
                var i2 = r3 && r3.toUpperCase();
                return n3 || o3[r3] || e[r3] || o3[i2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t5, o4) {
                  return t5 || o4.slice(1);
                });
              });
            }(t2, void 0 === o2 ? {} : o2);
            return i.call(this, n2);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/isBetween.js
  var require_isBetween = __commonJS({
    "node_modules/dayjs/plugin/isBetween.js"(exports2, module2) {
      !function(e, i) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = i() : "function" == typeof define && define.amd ? define(i) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isBetween = i();
      }(exports2, function() {
        "use strict";
        return function(e, i, t) {
          i.prototype.isBetween = function(e2, i2, s, f) {
            var n = t(e2), o = t(i2), r2 = "(" === (f = f || "()")[0], u = ")" === f[1];
            return (r2 ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r2 ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/advancedFormat.js
  var require_advancedFormat = __commonJS({
    "node_modules/dayjs/plugin/advancedFormat.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_advancedFormat = t();
      }(exports2, function() {
        "use strict";
        return function(e, t) {
          var r2 = t.prototype, n = r2.format;
          r2.format = function(e2) {
            var t2 = this, r3 = this.$locale();
            if (!this.isValid())
              return n.bind(this)(e2);
            var s = this.$utils(), a = (e2 || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e3) {
              switch (e3) {
                case "Q":
                  return Math.ceil((t2.$M + 1) / 3);
                case "Do":
                  return r3.ordinal(t2.$D);
                case "gggg":
                  return t2.weekYear();
                case "GGGG":
                  return t2.isoWeekYear();
                case "wo":
                  return r3.ordinal(t2.week(), "W");
                case "w":
                case "ww":
                  return s.s(t2.week(), "w" === e3 ? 1 : 2, "0");
                case "W":
                case "WW":
                  return s.s(t2.isoWeek(), "W" === e3 ? 1 : 2, "0");
                case "k":
                case "kk":
                  return s.s(String(0 === t2.$H ? 24 : t2.$H), "k" === e3 ? 1 : 2, "0");
                case "X":
                  return Math.floor(t2.$d.getTime() / 1e3);
                case "x":
                  return t2.$d.getTime();
                case "z":
                  return "[" + t2.offsetName() + "]";
                case "zzz":
                  return "[" + t2.offsetName("long") + "]";
                default:
                  return e3;
              }
            });
            return n.bind(this)(a);
          };
        };
      });
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports2, module2) {
      "use strict";
      module2.exports = function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length2, i, keys2;
          if (Array.isArray(a)) {
            length2 = a.length;
            if (length2 != b.length)
              return false;
            for (i = length2; i-- !== 0; )
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys2 = Object.keys(a);
          length2 = keys2.length;
          if (length2 !== Object.keys(b).length)
            return false;
          for (i = length2; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
              return false;
          for (i = length2; i-- !== 0; ) {
            var key = keys2[i];
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      };
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal2;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      module2.exports = root2;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root2 = require_root();
      var Symbol3 = root2.Symbol;
      module2.exports = Symbol3;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      var nativeObjectToString3 = objectProto16.toString;
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag2(value) {
        var isOwn = hasOwnProperty14.call(value, symToStringTag3), tag = value[symToStringTag3];
        try {
          value[symToStringTag3] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString3.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag3] = tag;
          } else {
            delete value[symToStringTag3];
          }
        }
        return result;
      }
      module2.exports = getRawTag2;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      var nativeObjectToString3 = objectProto16.toString;
      function objectToString2(value) {
        return nativeObjectToString3.call(value);
      }
      module2.exports = objectToString2;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var getRawTag2 = require_getRawTag();
      var objectToString2 = require_objectToString();
      var nullTag2 = "[object Null]";
      var undefinedTag2 = "[object Undefined]";
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag2(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
      }
      module2.exports = baseGetTag2;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray3 = Array.isArray;
      module2.exports = isArray3;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike2;
    }
  });

  // node_modules/lodash/isString.js
  var require_isString = __commonJS({
    "node_modules/lodash/isString.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isArray3 = require_isArray();
      var isObjectLike2 = require_isObjectLike();
      var stringTag3 = "[object String]";
      function isString2(value) {
        return typeof value == "string" || !isArray3(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag3;
      }
      module2.exports = isString2;
    }
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "node_modules/lodash/_createBaseFor.js"(exports2, module2) {
      function createBaseFor2(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module2.exports = createBaseFor2;
    }
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "node_modules/lodash/_baseFor.js"(exports2, module2) {
      var createBaseFor2 = require_createBaseFor();
      var baseFor2 = createBaseFor2();
      module2.exports = baseFor2;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes2(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module2.exports = baseTimes2;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var argsTag4 = "[object Arguments]";
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag4;
      }
      module2.exports = baseIsArguments2;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments2 = require_baseIsArguments();
      var isObjectLike2 = require_isObjectLike();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
      var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty14.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
      };
      module2.exports = isArguments2;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse2() {
        return false;
      }
      module2.exports = stubFalse2;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var stubFalse2 = require_stubFalse();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
      var isBuffer3 = nativeIsBuffer2 || stubFalse2;
      module2.exports = isBuffer3;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      var reIsUint2 = /^(?:0|[1-9]\d*)$/;
      function isIndex2(value, length2) {
        var type = typeof value;
        length2 = length2 == null ? MAX_SAFE_INTEGER3 : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
      }
      module2.exports = isIndex2;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER3;
      }
      module2.exports = isLength2;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isLength2 = require_isLength();
      var isObjectLike2 = require_isObjectLike();
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var funcTag3 = "[object Function]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var objectTag5 = "[object Object]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var weakMapTag3 = "[object WeakMap]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      var typedArrayTags2 = {};
      typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
      typedArrayTags2[argsTag4] = typedArrayTags2[arrayTag3] = typedArrayTags2[arrayBufferTag3] = typedArrayTags2[boolTag3] = typedArrayTags2[dataViewTag4] = typedArrayTags2[dateTag3] = typedArrayTags2[errorTag3] = typedArrayTags2[funcTag3] = typedArrayTags2[mapTag4] = typedArrayTags2[numberTag3] = typedArrayTags2[objectTag5] = typedArrayTags2[regexpTag3] = typedArrayTags2[setTag4] = typedArrayTags2[stringTag3] = typedArrayTags2[weakMapTag3] = false;
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      module2.exports = baseIsTypedArray2;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary2(func) {
        return function(value) {
          return func(value);
        };
      }
      module2.exports = baseUnary2;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var freeProcess2 = moduleExports4 && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types = freeModule4 && freeModule4.require && freeModule4.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil2;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray2 = require_baseIsTypedArray();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
      var isTypedArray3 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      module2.exports = isTypedArray3;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes2 = require_baseTimes();
      var isArguments2 = require_isArguments();
      var isArray3 = require_isArray();
      var isBuffer3 = require_isBuffer();
      var isIndex2 = require_isIndex();
      var isTypedArray3 = require_isTypedArray();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray3(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer3(value), isType = !isArr && !isArg && !isBuff && isTypedArray3(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length2 = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty14.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex2(key, length2)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys2;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto16;
        return value === proto;
      }
      module2.exports = isPrototype2;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg2(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module2.exports = overArg2;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var nativeKeys2 = overArg2(Object.keys, Object);
      module2.exports = nativeKeys2;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype2 = require_isPrototype();
      var nativeKeys2 = require_nativeKeys();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function baseKeys2(object) {
        if (!isPrototype2(object)) {
          return nativeKeys2(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty14.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeys2;
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject3(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module2.exports = isObject3;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObject3 = require_isObject();
      var asyncTag2 = "[object AsyncFunction]";
      var funcTag3 = "[object Function]";
      var genTag2 = "[object GeneratorFunction]";
      var proxyTag2 = "[object Proxy]";
      function isFunction3(value) {
        if (!isObject3(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag3 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
      }
      module2.exports = isFunction3;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isLength2 = require_isLength();
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction3(value);
      }
      module2.exports = isArrayLike2;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeys2 = require_baseKeys();
      var isArrayLike2 = require_isArrayLike();
      function keys2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
      }
      module2.exports = keys2;
    }
  });

  // node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "node_modules/lodash/_baseForOwn.js"(exports2, module2) {
      var baseFor2 = require_baseFor();
      var keys2 = require_keys();
      function baseForOwn2(object, iteratee) {
        return object && baseFor2(object, iteratee, keys2);
      }
      module2.exports = baseForOwn2;
    }
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "node_modules/lodash/identity.js"(exports2, module2) {
      function identity2(value) {
        return value;
      }
      module2.exports = identity2;
    }
  });

  // node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS({
    "node_modules/lodash/_castFunction.js"(exports2, module2) {
      var identity2 = require_identity();
      function castFunction2(value) {
        return typeof value == "function" ? value : identity2;
      }
      module2.exports = castFunction2;
    }
  });

  // node_modules/lodash/forOwn.js
  var require_forOwn = __commonJS({
    "node_modules/lodash/forOwn.js"(exports2, module2) {
      var baseForOwn2 = require_baseForOwn();
      var castFunction2 = require_castFunction();
      function forOwn(object, iteratee) {
        return object && baseForOwn2(object, castFunction2(iteratee));
      }
      module2.exports = forOwn;
    }
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "node_modules/lodash/_getPrototype.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var getPrototype2 = overArg2(Object.getPrototypeOf, Object);
      module2.exports = getPrototype2;
    }
  });

  // node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/lodash/isPlainObject.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var getPrototype2 = require_getPrototype();
      var isObjectLike2 = require_isObjectLike();
      var objectTag5 = "[object Object]";
      var funcProto4 = Function.prototype;
      var objectProto16 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      var objectCtorString2 = funcToString4.call(Object);
      function isPlainObject6(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag5) {
          return false;
        }
        var proto = getPrototype2(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty14.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString4.call(Ctor) == objectCtorString2;
      }
      module2.exports = isPlainObject6;
    }
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap2(array, iteratee) {
        var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
        while (++index < length2) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      module2.exports = arrayMap2;
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear2;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports2, module2) {
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      module2.exports = eq2;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq2 = require_eq();
      function assocIndexOf2(array, key) {
        var length2 = array.length;
        while (length2--) {
          if (eq2(array[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf2;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function listCacheDelete2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete2;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheGet2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      module2.exports = listCacheGet2;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheHas2(key) {
        return assocIndexOf2(this.__data__, key) > -1;
      }
      module2.exports = listCacheHas2;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheSet2(key, value) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module2.exports = listCacheSet2;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear2 = require_listCacheClear();
      var listCacheDelete2 = require_listCacheDelete();
      var listCacheGet2 = require_listCacheGet();
      var listCacheHas2 = require_listCacheHas();
      var listCacheSet2 = require_listCacheSet();
      function ListCache2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      module2.exports = ListCache2;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      module2.exports = stackClear2;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete2(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete2;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet2(key) {
        return this.__data__.get(key);
      }
      module2.exports = stackGet2;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas2(key) {
        return this.__data__.has(key);
      }
      module2.exports = stackHas2;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root2 = require_root();
      var coreJsData2 = root2["__core-js_shared__"];
      module2.exports = coreJsData2;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData2 = require_coreJsData();
      var maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      module2.exports = isMasked2;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto4 = Function.prototype;
      var funcToString4 = funcProto4.toString;
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString4.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      module2.exports = toSource2;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isMasked2 = require_isMasked();
      var isObject3 = require_isObject();
      var toSource2 = require_toSource();
      var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
      var funcProto4 = Function.prototype;
      var objectProto16 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      var reIsNative2 = RegExp(
        "^" + funcToString4.call(hasOwnProperty14).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative2(value) {
        if (!isObject3(value) || isMasked2(value)) {
          return false;
        }
        var pattern = isFunction3(value) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value));
      }
      module2.exports = baseIsNative2;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue4(object, key) {
        return object == null ? void 0 : object[key];
      }
      module2.exports = getValue4;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative2 = require_baseIsNative();
      var getValue4 = require_getValue();
      function getNative2(object, key) {
        var value = getValue4(object, key);
        return baseIsNative2(value) ? value : void 0;
      }
      module2.exports = getNative2;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Map4 = getNative2(root2, "Map");
      module2.exports = Map4;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var nativeCreate2 = getNative2(Object, "create");
      module2.exports = nativeCreate2;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear2;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete2(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete2;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function hashGet2(key) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result = data[key];
          return result === HASH_UNDEFINED4 ? void 0 : result;
        }
        return hasOwnProperty14.call(data, key) ? data[key] : void 0;
      }
      module2.exports = hashGet2;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function hashHas2(key) {
        var data = this.__data__;
        return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty14.call(data, key);
      }
      module2.exports = hashHas2;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function hashSet2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED4 : value;
        return this;
      }
      module2.exports = hashSet2;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear2 = require_hashClear();
      var hashDelete2 = require_hashDelete();
      var hashGet2 = require_hashGet();
      var hashHas2 = require_hashHas();
      var hashSet2 = require_hashSet();
      function Hash2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      module2.exports = Hash2;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash2 = require_Hash();
      var ListCache2 = require_ListCache();
      var Map4 = require_Map();
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map4 || ListCache2)(),
          "string": new Hash2()
        };
      }
      module2.exports = mapCacheClear2;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable2(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module2.exports = isKeyable2;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable2 = require_isKeyable();
      function getMapData2(map2, key) {
        var data = map2.__data__;
        return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData2;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheDelete2(key) {
        var result = getMapData2(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete2;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheGet2(key) {
        return getMapData2(this, key).get(key);
      }
      module2.exports = mapCacheGet2;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheHas2(key) {
        return getMapData2(this, key).has(key);
      }
      module2.exports = mapCacheHas2;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheSet2(key, value) {
        var data = getMapData2(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet2;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear2 = require_mapCacheClear();
      var mapCacheDelete2 = require_mapCacheDelete();
      var mapCacheGet2 = require_mapCacheGet();
      var mapCacheHas2 = require_mapCacheHas();
      var mapCacheSet2 = require_mapCacheSet();
      function MapCache2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype["delete"] = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      module2.exports = MapCache2;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var Map4 = require_Map();
      var MapCache2 = require_MapCache();
      var LARGE_ARRAY_SIZE2 = 200;
      function stackSet2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs = data.__data__;
          if (!Map4 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache2(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet2;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var stackClear2 = require_stackClear();
      var stackDelete2 = require_stackDelete();
      var stackGet2 = require_stackGet();
      var stackHas2 = require_stackHas();
      var stackSet2 = require_stackSet();
      function Stack3(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      Stack3.prototype.clear = stackClear2;
      Stack3.prototype["delete"] = stackDelete2;
      Stack3.prototype.get = stackGet2;
      Stack3.prototype.has = stackHas2;
      Stack3.prototype.set = stackSet2;
      module2.exports = Stack3;
    }
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function setCacheAdd2(value) {
        this.__data__.set(value, HASH_UNDEFINED4);
        return this;
      }
      module2.exports = setCacheAdd2;
    }
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas2(value) {
        return this.__data__.has(value);
      }
      module2.exports = setCacheHas2;
    }
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var setCacheAdd2 = require_setCacheAdd();
      var setCacheHas2 = require_setCacheHas();
      function SetCache2(values4) {
        var index = -1, length2 = values4 == null ? 0 : values4.length;
        this.__data__ = new MapCache2();
        while (++index < length2) {
          this.add(values4[index]);
        }
      }
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      module2.exports = SetCache2;
    }
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome2(array, predicate) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome2;
    }
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas2(cache, key) {
        return cache.has(key);
      }
      module2.exports = cacheHas2;
    }
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arraySome2 = require_arraySome();
      var cacheHas2 = require_cacheHas();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG5 ? new SetCache2() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalArrays2;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root2 = require_root();
      var Uint8Array3 = root2.Uint8Array;
      module2.exports = Uint8Array3;
    }
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray2(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      module2.exports = mapToArray2;
    }
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray2(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      module2.exports = setToArray2;
    }
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var Uint8Array3 = require_Uint8Array();
      var eq2 = require_eq();
      var equalArrays2 = require_equalArrays();
      var mapToArray2 = require_mapToArray();
      var setToArray2 = require_setToArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
      function equalByTag2(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag4:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag3:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object), new Uint8Array3(other))) {
              return false;
            }
            return true;
          case boolTag3:
          case dateTag3:
          case numberTag3:
            return eq2(+object, +other);
          case errorTag3:
            return object.name == other.name && object.message == other.message;
          case regexpTag3:
          case stringTag3:
            return object == other + "";
          case mapTag4:
            var convert = mapToArray2;
          case setTag4:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG7;
            convert || (convert = setToArray2);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG5;
            stack.set(object, other);
            var result = equalArrays2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag3:
            if (symbolValueOf2) {
              return symbolValueOf2.call(object) == symbolValueOf2.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag2;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush2(array, values4) {
        var index = -1, length2 = values4.length, offset2 = array.length;
        while (++index < length2) {
          array[offset2 + index] = values4[index];
        }
        return array;
      }
      module2.exports = arrayPush2;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isArray3 = require_isArray();
      function baseGetAllKeys2(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray3(object) ? result : arrayPush2(result, symbolsFunc(object));
      }
      module2.exports = baseGetAllKeys2;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter2(array, predicate) {
        var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length2) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module2.exports = arrayFilter2;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray2() {
        return [];
      }
      module2.exports = stubArray2;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter2 = require_arrayFilter();
      var stubArray2 = require_stubArray();
      var objectProto16 = Object.prototype;
      var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
      var nativeGetSymbols2 = Object.getOwnPropertySymbols;
      var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter2(nativeGetSymbols2(object), function(symbol) {
          return propertyIsEnumerable3.call(object, symbol);
        });
      };
      module2.exports = getSymbols2;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbols2 = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys2(object) {
        return baseGetAllKeys2(object, keys2, getSymbols2);
      }
      module2.exports = getAllKeys2;
    }
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys2 = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function equalObjects2(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, objProps = getAllKeys2(object), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty14.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalObjects2;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var DataView2 = getNative2(root2, "DataView");
      module2.exports = DataView2;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Promise3 = getNative2(root2, "Promise");
      module2.exports = Promise3;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Set3 = getNative2(root2, "Set");
      module2.exports = Set3;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var WeakMap3 = getNative2(root2, "WeakMap");
      module2.exports = WeakMap3;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView2 = require_DataView();
      var Map4 = require_Map();
      var Promise3 = require_Promise();
      var Set3 = require_Set();
      var WeakMap3 = require_WeakMap();
      var baseGetTag2 = require_baseGetTag();
      var toSource2 = require_toSource();
      var mapTag4 = "[object Map]";
      var objectTag5 = "[object Object]";
      var promiseTag2 = "[object Promise]";
      var setTag4 = "[object Set]";
      var weakMapTag3 = "[object WeakMap]";
      var dataViewTag4 = "[object DataView]";
      var dataViewCtorString2 = toSource2(DataView2);
      var mapCtorString2 = toSource2(Map4);
      var promiseCtorString2 = toSource2(Promise3);
      var setCtorString2 = toSource2(Set3);
      var weakMapCtorString2 = toSource2(WeakMap3);
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag4 || Map4 && getTag2(new Map4()) != mapTag4 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag4 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag3) {
        getTag2 = function(value) {
          var result = baseGetTag2(value), Ctor = result == objectTag5 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag4;
              case mapCtorString2:
                return mapTag4;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag4;
              case weakMapCtorString2:
                return weakMapTag3;
            }
          }
          return result;
        };
      }
      module2.exports = getTag2;
    }
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack3 = require_Stack();
      var equalArrays2 = require_equalArrays();
      var equalByTag2 = require_equalByTag();
      var equalObjects2 = require_equalObjects();
      var getTag2 = require_getTag();
      var isArray3 = require_isArray();
      var isBuffer3 = require_isBuffer();
      var isTypedArray3 = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var objectTag5 = "[object Object]";
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function baseIsEqualDeep2(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray3(object), othIsArr = isArray3(other), objTag = objIsArr ? arrayTag3 : getTag2(object), othTag = othIsArr ? arrayTag3 : getTag2(other);
        objTag = objTag == argsTag4 ? objectTag5 : objTag;
        othTag = othTag == argsTag4 ? objectTag5 : othTag;
        var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer3(object)) {
          if (!isBuffer3(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack3());
          return objIsArr || isTypedArray3(object) ? equalArrays2(object, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG7)) {
          var objIsWrapped = objIsObj && hasOwnProperty14.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty14.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack3());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack3());
        return equalObjects2(object, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep2;
    }
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep2 = require_baseIsEqualDeep();
      var isObjectLike2 = require_isObjectLike();
      function baseIsEqual2(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
      }
      module2.exports = baseIsEqual2;
    }
  });

  // node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
      var Stack3 = require_Stack();
      var baseIsEqual2 = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseIsMatch2(object, source, matchData, customizer) {
        var index = matchData.length, length2 = index, noCustomizer = !customizer;
        if (object == null) {
          return !length2;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length2) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack3();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module2.exports = baseIsMatch2;
    }
  });

  // node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
      var isObject3 = require_isObject();
      function isStrictComparable2(value) {
        return value === value && !isObject3(value);
      }
      module2.exports = isStrictComparable2;
    }
  });

  // node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "node_modules/lodash/_getMatchData.js"(exports2, module2) {
      var isStrictComparable2 = require_isStrictComparable();
      var keys2 = require_keys();
      function getMatchData2(object) {
        var result = keys2(object), length2 = result.length;
        while (length2--) {
          var key = result[length2], value = object[key];
          result[length2] = [key, value, isStrictComparable2(value)];
        }
        return result;
      }
      module2.exports = getMatchData2;
    }
  });

  // node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
      function matchesStrictComparable2(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module2.exports = matchesStrictComparable2;
    }
  });

  // node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "node_modules/lodash/_baseMatches.js"(exports2, module2) {
      var baseIsMatch2 = require_baseIsMatch();
      var getMatchData2 = require_getMatchData();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      function baseMatches2(source) {
        var matchData = getMatchData2(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch2(object, source, matchData);
        };
      }
      module2.exports = baseMatches2;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var symbolTag3 = "[object Symbol]";
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag3;
      }
      module2.exports = isSymbol2;
    }
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "node_modules/lodash/_isKey.js"(exports2, module2) {
      var isArray3 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp2 = /^\w*$/;
      function isKey2(value, object) {
        if (isArray3(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object != null && value in Object(object);
      }
      module2.exports = isKey2;
    }
  });

  // node_modules/lodash/memoize.js
  var require_memoize2 = __commonJS({
    "node_modules/lodash/memoize.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var FUNC_ERROR_TEXT4 = "Expected a function";
      function memoize5(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT4);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize5.Cache || MapCache2)();
        return memoized;
      }
      memoize5.Cache = MapCache2;
      module2.exports = memoize5;
    }
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
      var memoize5 = require_memoize2();
      var MAX_MEMOIZE_SIZE2 = 500;
      function memoizeCapped2(func) {
        var result = memoize5(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE2) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      module2.exports = memoizeCapped2;
    }
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "node_modules/lodash/_stringToPath.js"(exports2, module2) {
      var memoizeCapped2 = require_memoizeCapped();
      var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar2 = /\\(\\)?/g;
      var stringToPath2 = memoizeCapped2(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName2, function(match2, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match2);
        });
        return result;
      });
      module2.exports = stringToPath2;
    }
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var arrayMap2 = require_arrayMap();
      var isArray3 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var INFINITY3 = 1 / 0;
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolToString2 = symbolProto3 ? symbolProto3.toString : void 0;
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray3(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
      }
      module2.exports = baseToString2;
    }
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString2 = require_baseToString();
      function toString5(value) {
        return value == null ? "" : baseToString2(value);
      }
      module2.exports = toString5;
    }
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "node_modules/lodash/_castPath.js"(exports2, module2) {
      var isArray3 = require_isArray();
      var isKey2 = require_isKey();
      var stringToPath2 = require_stringToPath();
      var toString5 = require_toString();
      function castPath2(value, object) {
        if (isArray3(value)) {
          return value;
        }
        return isKey2(value, object) ? [value] : stringToPath2(toString5(value));
      }
      module2.exports = castPath2;
    }
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "node_modules/lodash/_toKey.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      var INFINITY3 = 1 / 0;
      function toKey2(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
      }
      module2.exports = toKey2;
    }
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "node_modules/lodash/_baseGet.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var toKey2 = require_toKey();
      function baseGet2(object, path) {
        path = castPath2(path, object);
        var index = 0, length2 = path.length;
        while (object != null && index < length2) {
          object = object[toKey2(path[index++])];
        }
        return index && index == length2 ? object : void 0;
      }
      module2.exports = baseGet2;
    }
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS({
    "node_modules/lodash/get.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function get4(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet2(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module2.exports = get4;
    }
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "node_modules/lodash/_baseHasIn.js"(exports2, module2) {
      function baseHasIn2(object, key) {
        return object != null && key in Object(object);
      }
      module2.exports = baseHasIn2;
    }
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "node_modules/lodash/_hasPath.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var isArguments2 = require_isArguments();
      var isArray3 = require_isArray();
      var isIndex2 = require_isIndex();
      var isLength2 = require_isLength();
      var toKey2 = require_toKey();
      function hasPath2(object, path, hasFunc) {
        path = castPath2(path, object);
        var index = -1, length2 = path.length, result = false;
        while (++index < length2) {
          var key = toKey2(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length2) {
          return result;
        }
        length2 = object == null ? 0 : object.length;
        return !!length2 && isLength2(length2) && isIndex2(key, length2) && (isArray3(object) || isArguments2(object));
      }
      module2.exports = hasPath2;
    }
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "node_modules/lodash/hasIn.js"(exports2, module2) {
      var baseHasIn2 = require_baseHasIn();
      var hasPath2 = require_hasPath();
      function hasIn2(object, path) {
        return object != null && hasPath2(object, path, baseHasIn2);
      }
      module2.exports = hasIn2;
    }
  });

  // node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      var get4 = require_get();
      var hasIn2 = require_hasIn();
      var isKey2 = require_isKey();
      var isStrictComparable2 = require_isStrictComparable();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      var toKey2 = require_toKey();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseMatchesProperty2(path, srcValue) {
        if (isKey2(path) && isStrictComparable2(srcValue)) {
          return matchesStrictComparable2(toKey2(path), srcValue);
        }
        return function(object) {
          var objValue = get4(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn2(object, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5);
        };
      }
      module2.exports = baseMatchesProperty2;
    }
  });

  // node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "node_modules/lodash/_baseProperty.js"(exports2, module2) {
      function baseProperty2(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module2.exports = baseProperty2;
    }
  });

  // node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function basePropertyDeep2(path) {
        return function(object) {
          return baseGet2(object, path);
        };
      }
      module2.exports = basePropertyDeep2;
    }
  });

  // node_modules/lodash/property.js
  var require_property = __commonJS({
    "node_modules/lodash/property.js"(exports2, module2) {
      var baseProperty2 = require_baseProperty();
      var basePropertyDeep2 = require_basePropertyDeep();
      var isKey2 = require_isKey();
      var toKey2 = require_toKey();
      function property2(path) {
        return isKey2(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
      }
      module2.exports = property2;
    }
  });

  // node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "node_modules/lodash/_baseIteratee.js"(exports2, module2) {
      var baseMatches2 = require_baseMatches();
      var baseMatchesProperty2 = require_baseMatchesProperty();
      var identity2 = require_identity();
      var isArray3 = require_isArray();
      var property2 = require_property();
      function baseIteratee2(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray3(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
        }
        return property2(value);
      }
      module2.exports = baseIteratee2;
    }
  });

  // node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "node_modules/lodash/_createBaseEach.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      function createBaseEach2(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object(collection);
          while (fromRight ? index-- : ++index < length2) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module2.exports = createBaseEach2;
    }
  });

  // node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "node_modules/lodash/_baseEach.js"(exports2, module2) {
      var baseForOwn2 = require_baseForOwn();
      var createBaseEach2 = require_createBaseEach();
      var baseEach2 = createBaseEach2(baseForOwn2);
      module2.exports = baseEach2;
    }
  });

  // node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "node_modules/lodash/_baseMap.js"(exports2, module2) {
      var baseEach2 = require_baseEach();
      var isArrayLike2 = require_isArrayLike();
      function baseMap2(collection, iteratee) {
        var index = -1, result = isArrayLike2(collection) ? Array(collection.length) : [];
        baseEach2(collection, function(value, key, collection2) {
          result[++index] = iteratee(value, key, collection2);
        });
        return result;
      }
      module2.exports = baseMap2;
    }
  });

  // node_modules/lodash/map.js
  var require_map = __commonJS({
    "node_modules/lodash/map.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIteratee2 = require_baseIteratee();
      var baseMap2 = require_baseMap();
      var isArray3 = require_isArray();
      function map2(collection, iteratee) {
        var func = isArray3(collection) ? arrayMap2 : baseMap2;
        return func(collection, baseIteratee2(iteratee, 3));
      }
      module2.exports = map2;
    }
  });

  // node_modules/reactcss/lib/flattenNames.js
  var require_flattenNames = __commonJS({
    "node_modules/reactcss/lib/flattenNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.flattenNames = void 0;
      var _isString2 = require_isString();
      var _isString3 = _interopRequireDefault(_isString2);
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _isPlainObject2 = require_isPlainObject();
      var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
      var _map2 = require_map();
      var _map3 = _interopRequireDefault(_map2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var flattenNames = exports2.flattenNames = function flattenNames2() {
        var things = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var names2 = [];
        (0, _map3.default)(things, function(thing) {
          if (Array.isArray(thing)) {
            flattenNames2(thing).map(function(name) {
              return names2.push(name);
            });
          } else if ((0, _isPlainObject3.default)(thing)) {
            (0, _forOwn3.default)(thing, function(value, key) {
              value === true && names2.push(key);
              names2.push(key + "-" + value);
            });
          } else if ((0, _isString3.default)(thing)) {
            names2.push(thing);
          }
        });
        return names2;
      };
      exports2.default = flattenNames;
    }
  });

  // node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "node_modules/lodash/_arrayEach.js"(exports2, module2) {
      function arrayEach2(array, iteratee) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      module2.exports = arrayEach2;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var defineProperty2 = function() {
        try {
          var func = getNative2(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      module2.exports = defineProperty2;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
      var defineProperty2 = require_defineProperty();
      function baseAssignValue2(object, key, value) {
        if (key == "__proto__" && defineProperty2) {
          defineProperty2(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module2.exports = baseAssignValue2;
    }
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "node_modules/lodash/_assignValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function assignValue2(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty14.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue2(object, key, value);
        }
      }
      module2.exports = assignValue2;
    }
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "node_modules/lodash/_copyObject.js"(exports2, module2) {
      var assignValue2 = require_assignValue();
      var baseAssignValue2 = require_baseAssignValue();
      function copyObject2(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length2 = props.length;
        while (++index < length2) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue2(object, key, newValue);
          } else {
            assignValue2(object, key, newValue);
          }
        }
        return object;
      }
      module2.exports = copyObject2;
    }
  });

  // node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "node_modules/lodash/_baseAssign.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keys2 = require_keys();
      function baseAssign(object, source) {
        return object && copyObject2(source, keys2(source), object);
      }
      module2.exports = baseAssign;
    }
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
      function nativeKeysIn2(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = nativeKeysIn2;
    }
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
      var isObject3 = require_isObject();
      var isPrototype2 = require_isPrototype();
      var nativeKeysIn2 = require_nativeKeysIn();
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function baseKeysIn2(object) {
        if (!isObject3(object)) {
          return nativeKeysIn2(object);
        }
        var isProto = isPrototype2(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty14.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeysIn2;
    }
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "node_modules/lodash/keysIn.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeysIn2 = require_baseKeysIn();
      var isArrayLike2 = require_isArrayLike();
      function keysIn2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn2(object);
      }
      module2.exports = keysIn2;
    }
  });

  // node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function baseAssignIn(object, source) {
        return object && copyObject2(source, keysIn2(source), object);
      }
      module2.exports = baseAssignIn;
    }
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var allocUnsafe2 = Buffer4 ? Buffer4.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe2 ? allocUnsafe2(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    }
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "node_modules/lodash/_copyArray.js"(exports2, module2) {
      function copyArray2(source, array) {
        var index = -1, length2 = source.length;
        array || (array = Array(length2));
        while (++index < length2) {
          array[index] = source[index];
        }
        return array;
      }
      module2.exports = copyArray2;
    }
  });

  // node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "node_modules/lodash/_copySymbols.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbols2 = require_getSymbols();
      function copySymbols(source, object) {
        return copyObject2(source, getSymbols2(source), object);
      }
      module2.exports = copySymbols;
    }
  });

  // node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var getPrototype2 = require_getPrototype();
      var getSymbols2 = require_getSymbols();
      var stubArray2 = require_stubArray();
      var nativeGetSymbols2 = Object.getOwnPropertySymbols;
      var getSymbolsIn = !nativeGetSymbols2 ? stubArray2 : function(object) {
        var result = [];
        while (object) {
          arrayPush2(result, getSymbols2(object));
          object = getPrototype2(object);
        }
        return result;
      };
      module2.exports = getSymbolsIn;
    }
  });

  // node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbolsIn = require_getSymbolsIn();
      function copySymbolsIn(source, object) {
        return copyObject2(source, getSymbolsIn(source), object);
      }
      module2.exports = copySymbolsIn;
    }
  });

  // node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbolsIn = require_getSymbolsIn();
      var keysIn2 = require_keysIn();
      function getAllKeysIn(object) {
        return baseGetAllKeys2(object, keysIn2, getSymbolsIn);
      }
      module2.exports = getAllKeysIn;
    }
  });

  // node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "node_modules/lodash/_initCloneArray.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      var hasOwnProperty14 = objectProto16.hasOwnProperty;
      function initCloneArray(array) {
        var length2 = array.length, result = new array.constructor(length2);
        if (length2 && typeof array[0] == "string" && hasOwnProperty14.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      module2.exports = initCloneArray;
    }
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
      var Uint8Array3 = require_Uint8Array();
      function cloneArrayBuffer2(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
        return result;
      }
      module2.exports = cloneArrayBuffer2;
    }
  });

  // node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "node_modules/lodash/_cloneDataView.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      module2.exports = cloneDataView;
    }
  });

  // node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
      var reFlags = /\w*$/;
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      module2.exports = cloneRegExp;
    }
  });

  // node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
      function cloneSymbol(symbol) {
        return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
      }
      module2.exports = cloneSymbol;
    }
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module2.exports = cloneTypedArray2;
    }
  });

  // node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      var cloneDataView = require_cloneDataView();
      var cloneRegExp = require_cloneRegExp();
      var cloneSymbol = require_cloneSymbol();
      var cloneTypedArray2 = require_cloneTypedArray();
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag3:
            return cloneArrayBuffer2(object);
          case boolTag3:
          case dateTag3:
            return new Ctor(+object);
          case dataViewTag4:
            return cloneDataView(object, isDeep);
          case float32Tag2:
          case float64Tag2:
          case int8Tag2:
          case int16Tag2:
          case int32Tag2:
          case uint8Tag2:
          case uint8ClampedTag2:
          case uint16Tag2:
          case uint32Tag2:
            return cloneTypedArray2(object, isDeep);
          case mapTag4:
            return new Ctor();
          case numberTag3:
          case stringTag3:
            return new Ctor(object);
          case regexpTag3:
            return cloneRegExp(object);
          case setTag4:
            return new Ctor();
          case symbolTag3:
            return cloneSymbol(object);
        }
      }
      module2.exports = initCloneByTag;
    }
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "node_modules/lodash/_baseCreate.js"(exports2, module2) {
      var isObject3 = require_isObject();
      var objectCreate2 = Object.create;
      var baseCreate2 = /* @__PURE__ */ function() {
        function object() {
        }
        return function(proto) {
          if (!isObject3(proto)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module2.exports = baseCreate2;
    }
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "node_modules/lodash/_initCloneObject.js"(exports2, module2) {
      var baseCreate2 = require_baseCreate();
      var getPrototype2 = require_getPrototype();
      var isPrototype2 = require_isPrototype();
      function initCloneObject2(object) {
        return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate2(getPrototype2(object)) : {};
      }
      module2.exports = initCloneObject2;
    }
  });

  // node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "node_modules/lodash/_baseIsMap.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var mapTag4 = "[object Map]";
      function baseIsMap(value) {
        return isObjectLike2(value) && getTag2(value) == mapTag4;
      }
      module2.exports = baseIsMap;
    }
  });

  // node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "node_modules/lodash/isMap.js"(exports2, module2) {
      var baseIsMap = require_baseIsMap();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsMap = nodeUtil2 && nodeUtil2.isMap;
      var isMap = nodeIsMap ? baseUnary2(nodeIsMap) : baseIsMap;
      module2.exports = isMap;
    }
  });

  // node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "node_modules/lodash/_baseIsSet.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var setTag4 = "[object Set]";
      function baseIsSet(value) {
        return isObjectLike2(value) && getTag2(value) == setTag4;
      }
      module2.exports = baseIsSet;
    }
  });

  // node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "node_modules/lodash/isSet.js"(exports2, module2) {
      var baseIsSet = require_baseIsSet();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsSet = nodeUtil2 && nodeUtil2.isSet;
      var isSet = nodeIsSet ? baseUnary2(nodeIsSet) : baseIsSet;
      module2.exports = isSet;
    }
  });

  // node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "node_modules/lodash/_baseClone.js"(exports2, module2) {
      var Stack3 = require_Stack();
      var arrayEach2 = require_arrayEach();
      var assignValue2 = require_assignValue();
      var baseAssign = require_baseAssign();
      var baseAssignIn = require_baseAssignIn();
      var cloneBuffer2 = require_cloneBuffer();
      var copyArray2 = require_copyArray();
      var copySymbols = require_copySymbols();
      var copySymbolsIn = require_copySymbolsIn();
      var getAllKeys2 = require_getAllKeys();
      var getAllKeysIn = require_getAllKeysIn();
      var getTag2 = require_getTag();
      var initCloneArray = require_initCloneArray();
      var initCloneByTag = require_initCloneByTag();
      var initCloneObject2 = require_initCloneObject();
      var isArray3 = require_isArray();
      var isBuffer3 = require_isBuffer();
      var isMap = require_isMap();
      var isObject3 = require_isObject();
      var isSet = require_isSet();
      var keys2 = require_keys();
      var keysIn2 = require_keysIn();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_FLAT_FLAG = 2;
      var CLONE_SYMBOLS_FLAG = 4;
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var funcTag3 = "[object Function]";
      var genTag2 = "[object GeneratorFunction]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var objectTag5 = "[object Object]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var weakMapTag3 = "[object WeakMap]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      var cloneableTags = {};
      cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag2] = cloneableTags[float64Tag2] = cloneableTags[int8Tag2] = cloneableTags[int16Tag2] = cloneableTags[int32Tag2] = cloneableTags[mapTag4] = cloneableTags[numberTag3] = cloneableTags[objectTag5] = cloneableTags[regexpTag3] = cloneableTags[setTag4] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag2] = cloneableTags[uint8ClampedTag2] = cloneableTags[uint16Tag2] = cloneableTags[uint32Tag2] = true;
      cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject3(value)) {
          return value;
        }
        var isArr = isArray3(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray2(value, result);
          }
        } else {
          var tag = getTag2(value), isFunc = tag == funcTag3 || tag == genTag2;
          if (isBuffer3(value)) {
            return cloneBuffer2(value, isDeep);
          }
          if (tag == objectTag5 || tag == argsTag4 || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject2(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack3());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue2(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      module2.exports = baseClone;
    }
  });

  // node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "node_modules/lodash/cloneDeep.js"(exports2, module2) {
      var baseClone = require_baseClone();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_SYMBOLS_FLAG = 4;
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      module2.exports = cloneDeep;
    }
  });

  // node_modules/reactcss/lib/mergeClasses.js
  var require_mergeClasses = __commonJS({
    "node_modules/reactcss/lib/mergeClasses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.mergeClasses = void 0;
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _cloneDeep2 = require_cloneDeep();
      var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var mergeClasses = exports2.mergeClasses = function mergeClasses2(classes) {
        var activeNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var styles5 = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
        activeNames.map(function(name) {
          var toMerge = classes[name];
          if (toMerge) {
            (0, _forOwn3.default)(toMerge, function(value, key) {
              if (!styles5[key]) {
                styles5[key] = {};
              }
              styles5[key] = _extends12({}, styles5[key], toMerge[key]);
            });
          }
          return name;
        });
        return styles5;
      };
      exports2.default = mergeClasses;
    }
  });

  // node_modules/reactcss/lib/autoprefix.js
  var require_autoprefix = __commonJS({
    "node_modules/reactcss/lib/autoprefix.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.autoprefix = void 0;
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var transforms = {
        borderRadius: function borderRadius3(value) {
          return {
            msBorderRadius: value,
            MozBorderRadius: value,
            OBorderRadius: value,
            WebkitBorderRadius: value,
            borderRadius: value
          };
        },
        boxShadow: function boxShadow(value) {
          return {
            msBoxShadow: value,
            MozBoxShadow: value,
            OBoxShadow: value,
            WebkitBoxShadow: value,
            boxShadow: value
          };
        },
        userSelect: function userSelect(value) {
          return {
            WebkitTouchCallout: value,
            KhtmlUserSelect: value,
            MozUserSelect: value,
            msUserSelect: value,
            WebkitUserSelect: value,
            userSelect: value
          };
        },
        flex: function flex(value) {
          return {
            WebkitBoxFlex: value,
            MozBoxFlex: value,
            WebkitFlex: value,
            msFlex: value,
            flex: value
          };
        },
        flexBasis: function flexBasis(value) {
          return {
            WebkitFlexBasis: value,
            flexBasis: value
          };
        },
        justifyContent: function justifyContent(value) {
          return {
            WebkitJustifyContent: value,
            justifyContent: value
          };
        },
        transition: function transition(value) {
          return {
            msTransition: value,
            MozTransition: value,
            OTransition: value,
            WebkitTransition: value,
            transition: value
          };
        },
        transform: function transform(value) {
          return {
            msTransform: value,
            MozTransform: value,
            OTransform: value,
            WebkitTransform: value,
            transform: value
          };
        },
        absolute: function absolute(value) {
          var direction = value && value.split(" ");
          return {
            position: "absolute",
            top: direction && direction[0],
            right: direction && direction[1],
            bottom: direction && direction[2],
            left: direction && direction[3]
          };
        },
        extend: function extend2(name, otherElementStyles) {
          var otherStyle = otherElementStyles[name];
          if (otherStyle) {
            return otherStyle;
          }
          return {
            "extend": name
          };
        }
      };
      var autoprefix = exports2.autoprefix = function autoprefix2(elements) {
        var prefixed = {};
        (0, _forOwn3.default)(elements, function(styles5, element) {
          var expanded = {};
          (0, _forOwn3.default)(styles5, function(value, key) {
            var transform = transforms[key];
            if (transform) {
              expanded = _extends12({}, expanded, transform(value));
            } else {
              expanded[key] = value;
            }
          });
          prefixed[element] = expanded;
        });
        return prefixed;
      };
      exports2.default = autoprefix;
    }
  });

  // node_modules/reactcss/lib/components/hover.js
  var require_hover = __commonJS({
    "node_modules/reactcss/lib/components/hover.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.hover = void 0;
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn9(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var hover = exports2.hover = function hover2(Component6) {
        var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits9(Hover, _React$Component);
          function Hover() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck9(this, Hover);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function() {
              return _this.setState({ hover: true });
            }, _this.handleMouseOut = function() {
              return _this.setState({ hover: false });
            }, _this.render = function() {
              return _react2.default.createElement(
                Span,
                { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut },
                _react2.default.createElement(Component6, _extends12({}, _this.props, _this.state))
              );
            }, _temp), _possibleConstructorReturn9(_this, _ret);
          }
          return Hover;
        }(_react2.default.Component);
      };
      exports2.default = hover;
    }
  });

  // node_modules/reactcss/lib/components/active.js
  var require_active = __commonJS({
    "node_modules/reactcss/lib/components/active.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.active = void 0;
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn9(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var active = exports2.active = function active2(Component6) {
        var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits9(Active, _React$Component);
          function Active() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck9(this, Active);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function() {
              return _this.setState({ active: true });
            }, _this.handleMouseUp = function() {
              return _this.setState({ active: false });
            }, _this.render = function() {
              return _react2.default.createElement(
                Span,
                { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp },
                _react2.default.createElement(Component6, _extends12({}, _this.props, _this.state))
              );
            }, _temp), _possibleConstructorReturn9(_this, _ret);
          }
          return Active;
        }(_react2.default.Component);
      };
      exports2.default = active;
    }
  });

  // node_modules/reactcss/lib/loop.js
  var require_loop = __commonJS({
    "node_modules/reactcss/lib/loop.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var loopable = function loopable2(i, length2) {
        var props = {};
        var setProp = function setProp2(name) {
          var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          props[name] = value;
        };
        i === 0 && setProp("first-child");
        i === length2 - 1 && setProp("last-child");
        (i === 0 || i % 2 === 0) && setProp("even");
        Math.abs(i % 2) === 1 && setProp("odd");
        setProp("nth-child", i);
        return props;
      };
      exports2.default = loopable;
    }
  });

  // node_modules/reactcss/lib/index.js
  var require_lib = __commonJS({
    "node_modules/reactcss/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.ReactCSS = exports2.loop = exports2.handleActive = exports2.handleHover = exports2.hover = void 0;
      var _flattenNames = require_flattenNames();
      var _flattenNames2 = _interopRequireDefault(_flattenNames);
      var _mergeClasses = require_mergeClasses();
      var _mergeClasses2 = _interopRequireDefault(_mergeClasses);
      var _autoprefix = require_autoprefix();
      var _autoprefix2 = _interopRequireDefault(_autoprefix);
      var _hover2 = require_hover();
      var _hover3 = _interopRequireDefault(_hover2);
      var _active = require_active();
      var _active2 = _interopRequireDefault(_active);
      var _loop2 = require_loop();
      var _loop3 = _interopRequireDefault(_loop2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports2.hover = _hover3.default;
      exports2.handleHover = _hover3.default;
      exports2.handleActive = _active2.default;
      exports2.loop = _loop3.default;
      var ReactCSS = exports2.ReactCSS = function ReactCSS2(classes) {
        for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          activations[_key - 1] = arguments[_key];
        }
        var activeNames = (0, _flattenNames2.default)(activations);
        var merged = (0, _mergeClasses2.default)(classes, activeNames);
        return (0, _autoprefix2.default)(merged);
      };
      exports2.default = ReactCSS;
    }
  });

  // node_modules/@icons/material/UnfoldMoreHorizontalIcon.js
  var require_UnfoldMoreHorizontalIcon = __commonJS({
    "node_modules/@icons/material/UnfoldMoreHorizontalIcon.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutProperties(obj, keys2) {
        var target = {};
        for (var i in obj) {
          if (keys2.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      var DEFAULT_SIZE = 24;
      exports2.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width3 = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height3 = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style6 = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
        return _react2.default.createElement(
          "svg",
          _extends12({
            viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
            style: _extends12({ fill, width: width3, height: height3 }, style6)
          }, props),
          _react2.default.createElement("path", { d: "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z" })
        );
      };
    }
  });

  // node_modules/@icons/material/CheckIcon.js
  var require_CheckIcon = __commonJS({
    "node_modules/@icons/material/CheckIcon.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends12 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutProperties(obj, keys2) {
        var target = {};
        for (var i in obj) {
          if (keys2.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      var DEFAULT_SIZE = 24;
      exports2.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width3 = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height3 = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style6 = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
        return _react2.default.createElement(
          "svg",
          _extends12({
            viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
            style: _extends12({ fill, width: width3, height: height3 }, style6)
          }, props),
          _react2.default.createElement("path", { d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" })
        );
      };
    }
  });

  // build/client/index.js
  var React311 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // build/client/App.js
  var React310 = __toESM(require_react(), 1);

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r2, e) {
    if (null == r2)
      return {};
    var t = {};
    for (var n in r2)
      if ({}.hasOwnProperty.call(r2, n)) {
        if (e.includes(n))
          continue;
        t[n] = r2[n];
      }
    return t;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/index.js
  var import_styled_engine6 = __toESM(require_node());

  // node_modules/@mui/material/node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var React6 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_styled_engine2 = __toESM(require_node());

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/createTheme.js
  init_extends();
  var import_deepmerge3 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  init_extends();
  var _excluded = ["values", "unit", "step"];
  var sortBreakpointsValues = (values4) => {
    const breakpointsAsArray = Object.keys(values4).map((key) => ({
      key,
      val: values4[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values4 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded);
    const sortedValues = sortBreakpointsValues(values4);
    const keys2 = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values4[key] === "number" ? values4[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values4[key] === "number" ? values4[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys2.indexOf(end2);
      return `@media (min-width:${typeof values4[start2] === "number" ? values4[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values4[keys2[endIndex]] === "number" ? values4[keys2[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys2.indexOf(key) + 1 < keys2.length) {
        return between(key, keys2[keys2.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys2.indexOf(key);
      if (keyIndex === 0) {
        return up(keys2[1]);
      }
      if (keyIndex === keys2.length - 1) {
        return down(keys2[keyIndex]);
      }
      return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys: keys2,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/material/node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/material/node_modules/@mui/system/esm/breakpoints.js
  init_extends();
  var import_deepmerge2 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/node_modules/@mui/system/esm/merge.js
  var import_deepmerge = __toESM(require_deepmerge2());
  function merge2(acc, item) {
    if (!item) {
      return acc;
    }
    return (0, import_deepmerge.default)(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default = merge2;

  // node_modules/@mui/material/node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme2 = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style6) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style6);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles5) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles5].reduce((prev2, next2) => (0, import_deepmerge2.default)(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys2 = Object.keys(base);
    if (keys2.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys2.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/style.js
  var import_capitalize = __toESM(require_capitalize2());
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn2 = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme2 = props.theme;
      const themeMapping = getPath(theme2, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn2.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn2.filterProps = [prop];
    return fn2;
  }
  var style_default = style;

  // node_modules/@mui/material/node_modules/@mui/system/esm/memoize.js
  function memoize2(fn2) {
    const cache = {};
    return (arg) => {
      if (cache[arg] === void 0) {
        cache[arg] = fn2(arg);
      }
      return cache[arg];
    };
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property2 = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme2, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme2, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme2) {
    return createUnaryUnit(theme2, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys2, prop, transformer) {
    if (keys2.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys2) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing3 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing3.mui = true;
    return spacing3;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  var import_capitalize2 = __toESM(require_capitalize2());

  // node_modules/@mui/material/node_modules/@mui/system/esm/compose.js
  function compose(...styles5) {
    const handlers = styles5.reduce((acc, style6) => {
      style6.filterProps.forEach((prop) => {
        acc[prop] = style6;
      });
      return acc;
    }, {});
    const fn2 = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn2.propTypes = true ? styles5.reduce((acc, style6) => Object.assign(acc, style6.propTypes), {}) : {};
    fn2.filterProps = styles5.reduce((acc, style6) => acc.concat(style6.filterProps), []);
    return fn2;
  }
  var compose_default = compose;

  // node_modules/@mui/material/node_modules/@mui/system/esm/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style_default({
      prop,
      themeKey: "borders",
      transform
    });
  }
  var border = createBorderStyle("border", borderTransform);
  var borderTop = createBorderStyle("borderTop", borderTransform);
  var borderRight = createBorderStyle("borderRight", borderTransform);
  var borderBottom = createBorderStyle("borderBottom", borderTransform);
  var borderLeft = createBorderStyle("borderLeft", borderTransform);
  var borderColor = createBorderStyle("borderColor");
  var borderTopColor = createBorderStyle("borderTopColor");
  var borderRightColor = createBorderStyle("borderRightColor");
  var borderBottomColor = createBorderStyle("borderBottomColor");
  var borderLeftColor = createBorderStyle("borderLeftColor");
  var outline = createBorderStyle("outline", borderTransform);
  var outlineColor = createBorderStyle("outlineColor");
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

  // node_modules/@mui/material/node_modules/@mui/system/esm/cssGrid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // node_modules/@mui/material/node_modules/@mui/system/esm/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var palette = compose_default(color, bgcolor, backgroundColor);

  // node_modules/@mui/material/node_modules/@mui/system/esm/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  var height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // node_modules/@mui/material/node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default = defaultSxConfig;

  // node_modules/@mui/material/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme2, config) {
      const props = {
        [prop]: val,
        theme: theme2
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style6
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme2, themeKey) || {};
      if (style6) {
        return style6(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize2.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx4(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme: theme2 = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = (_theme$unstable_sxCon = theme2.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme2);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme2.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css3 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme2);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css3 = merge_default(css3, getThemeValue(styleKey, value, theme2, config));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme: theme2
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css3[styleKey] = styleFunctionSx4({
                    sx: value,
                    theme: theme2
                  });
                } else {
                  css3 = merge_default(css3, breakpointsValues);
                }
              }
            } else {
              css3 = merge_default(css3, getThemeValue(styleKey, value, theme2, config));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css3);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx4;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/applyStyles.js
  function applyStyles(key, styles5) {
    const theme2 = this;
    if (theme2.vars && typeof theme2.getColorSchemeSelector === "function") {
      const selector = theme2.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
      return {
        [selector]: styles5
      };
    }
    if (theme2.palette.mode === key) {
      return styles5;
    }
    return {};
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded2 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded2);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing3 = createSpacing(spacingInput);
    let muiTheme = (0, import_deepmerge3.default)({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing3,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge3.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/material/node_modules/@mui/system/esm/useThemeWithoutDefault.js
  var React5 = __toESM(require_react());
  var import_styled_engine = __toESM(require_node());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme4 = null) {
    const contextTheme = React5.useContext(import_styled_engine.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme4 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/material/node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme4 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme4);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/material/node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function GlobalStyles({
    styles: styles5,
    themeId,
    defaultTheme: defaultTheme4 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme4);
    const globalStyles = typeof styles5 === "function" ? styles5(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles5;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styled_engine2.GlobalStyles, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: import_prop_types2.default.object,
    /**
     * @ignore
     */
    styles: import_prop_types2.default.oneOfType([import_prop_types2.default.array, import_prop_types2.default.func, import_prop_types2.default.number, import_prop_types2.default.object, import_prop_types2.default.string, import_prop_types2.default.bool]),
    /**
     * @ignore
     */
    themeId: import_prop_types2.default.string
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/material/node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  init_extends();
  var import_deepmerge4 = __toESM(require_deepmerge2());
  var _excluded3 = ["sx"];
  var splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig_default;
    Object.keys(props).forEach((prop) => {
      if (config[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!(0, import_deepmerge4.isPlainObject)(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  // node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/@mui/material/node_modules/@mui/system/esm/createBox.js
  init_extends();
  var React7 = __toESM(require_react());

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e)) {
        var o = e.length;
        for (t = 0; t < o; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      } else
        for (f in e)
          e[f] && (n && (n += " "), n += f);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
      (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  var clsx_default = clsx;

  // node_modules/@mui/material/node_modules/@mui/system/esm/createBox.js
  var import_styled_engine3 = __toESM(require_node());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var _excluded4 = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme4,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = (0, import_styled_engine3.default)("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx_default);
    const Box2 = /* @__PURE__ */ React7.forwardRef(function Box3(inProps, ref) {
      const theme2 = useTheme_default(defaultTheme4);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded4);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme2[themeId] || theme2 : theme2
      }, other));
    });
    return Box2;
  }

  // node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
  var globalStateClasses = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/createStyled.js
  init_extends();
  var import_styled_engine4 = __toESM(require_node());
  var import_deepmerge5 = __toESM(require_deepmerge2());
  var import_capitalize3 = __toESM(require_capitalize2());
  var import_getDisplayName = __toESM(require_getDisplayName2());
  var _excluded5 = ["ownerState"];
  var _excluded22 = ["variants"];
  var _excluded32 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var systemDefaultTheme2 = createTheme_default();
  var lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme4,
    theme: theme2,
    themeId
  }) {
    return isEmpty(theme2) ? defaultTheme4 : theme2[themeId] || theme2;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles5) => styles5[slot];
  }
  function processStyleArg(callableStyle, _ref) {
    let {
      ownerState
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded5);
    const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle(_extends({
      ownerState
    }, props)) : callableStyle;
    if (Array.isArray(resolvedStylesArg)) {
      return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg(resolvedStyle, _extends({
        ownerState
      }, props)));
    }
    if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
      const {
        variants = []
      } = resolvedStylesArg, otherStyles = _objectWithoutPropertiesLoose(resolvedStylesArg, _excluded22);
      let result = otherStyles;
      variants.forEach((variant) => {
        let isMatch = true;
        if (typeof variant.props === "function") {
          isMatch = variant.props(_extends({
            ownerState
          }, props, ownerState));
        } else {
          Object.keys(variant.props).forEach((key) => {
            if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
              isMatch = false;
            }
          });
        }
        if (isMatch) {
          if (!Array.isArray(result)) {
            result = [result];
          }
          result.push(typeof variant.style === "function" ? variant.style(_extends({
            ownerState
          }, props, ownerState)) : variant.style);
        }
      });
      return result;
    }
    return resolvedStylesArg;
  }
  function createStyled3(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme4 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx_default(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme4,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      (0, import_styled_engine4.internal_processStyles)(tag, (styles5) => styles5.filter((style6) => !(style6 != null && style6.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver6 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded32);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = (0, import_styled_engine4.default)(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const transformStyleArg = (stylesArg) => {
        if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, import_deepmerge5.isPlainObject)(stylesArg)) {
          return (props) => processStyleArg(stylesArg, _extends({}, props, {
            theme: resolveTheme({
              theme: props.theme,
              defaultTheme: defaultTheme4,
              themeId
            })
          }));
        }
        return stylesArg;
      };
      const muiStyledResolver = (styleArg2, ...expressions) => {
        let transformedStyleArg = transformStyleArg(styleArg2);
        const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
        if (componentName && overridesResolver6) {
          expressionsWithDefaultTheme.push((props) => {
            const theme2 = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }));
            if (!theme2.components || !theme2.components[componentName] || !theme2.components[componentName].styleOverrides) {
              return null;
            }
            const styleOverrides = theme2.components[componentName].styleOverrides;
            const resolvedStyleOverrides = {};
            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
              resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, _extends({}, props, {
                theme: theme2
              }));
            });
            return overridesResolver6(props, resolvedStyleOverrides);
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            var _theme$components;
            const theme2 = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }));
            const themeVariants = theme2 == null || (_theme$components = theme2.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
            return processStyleArg({
              variants: themeVariants
            }, _extends({}, props, {
              theme: theme2
            }));
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg2) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg2, ...placeholders];
          transformedStyleArg.raw = [...styleArg2.raw, ...placeholders];
        }
        const Component6 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${(0, import_capitalize3.default)(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${(0, import_getDisplayName.default)(tag)})`;
          }
          Component6.displayName = displayName;
        }
        if (tag.muiName) {
          Component6.muiName = tag.muiName;
        }
        return Component6;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/styled.js
  var styled2 = createStyled3();
  var styled_default = styled2;

  // node_modules/@mui/utils/esm/resolveProps/resolveProps.js
  init_extends();
  function resolveProps(defaultProps2, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends({}, defaultProps2[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme: theme2,
      name,
      props
    } = params;
    if (!theme2 || !theme2.components || !theme2.components[name] || !theme2.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme2.components[name].defaultProps, props);
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme4,
    themeId
  }) {
    let theme2 = useTheme_default(defaultTheme4);
    if (themeId) {
      theme2 = theme2[themeId] || theme2;
    }
    const mergedProps = getThemeProps({
      theme: theme2,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js
  var React9 = __toESM(require_react());

  // node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
  var React8 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React8.useLayoutEffect : React8.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // node_modules/@mui/material/node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match2, setMatch] = React9.useState(() => {
      if (noSsr && matchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    });
    useEnhancedEffect_default(() => {
      let active = true;
      if (!matchMedia) {
        return void 0;
      }
      const queryList = matchMedia(query);
      const updateMatch = () => {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return () => {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia]);
    return match2;
  }
  var maybeReactUseSyncExternalStore = React9["useSyncExternalStore"];
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React9.useCallback(() => defaultMatches, [defaultMatches]);
    const getServerSnapshot = React9.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (ssrMatchMedia !== null) {
        const {
          matches
        } = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
    const [getSnapshot, subscribe] = React9.useMemo(() => {
      if (matchMedia === null) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, (notify) => {
        mediaQueryList.addListener(notify);
        return () => {
          mediaQueryList.removeListener(notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    return match2;
  }
  function useMediaQuery(queryInput, options = {}) {
    const theme2 = useThemeWithoutDefault_default();
    const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      ssrMatchMedia = null,
      noSsr = false
    } = getThemeProps({
      name: "MuiUseMediaQuery",
      props: options,
      theme: theme2
    });
    if (true) {
      if (typeof queryInput === "function" && theme2 === null) {
        console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    let query = typeof queryInput === "function" ? queryInput(theme2) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
    const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    if (true) {
      React9.useDebugValue({
        query,
        match: match2
      });
    }
    return match2;
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/colorManipulator.js
  var import_clamp = __toESM(require_clamp2());
  function clampWrapper(value, min2 = 0, max2 = 1) {
    if (true) {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return (0, import_clamp.default)(value, min2, max2);
  }
  function hexToRgb(color3) {
    color3 = color3.slice(1);
    const re = new RegExp(`.{1,${color3.length >= 6 ? 2 : 1}}`, "g");
    let colors = color3.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color3) {
    if (color3.type) {
      return color3;
    }
    if (color3.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color3));
    }
    const marker = color3.indexOf("(");
    const type = color3.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(true ? `MUI: Unsupported \`${color3}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, import_formatMuiErrorMessage.default)(9, color3));
    }
    let values4 = color3.substring(marker + 1, color3.length - 1);
    let colorSpace;
    if (type === "color") {
      values4 = values4.split(" ");
      colorSpace = values4.shift();
      if (values4.length === 4 && values4[3].charAt(0) === "/") {
        values4[3] = values4[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, import_formatMuiErrorMessage.default)(10, colorSpace));
      }
    } else {
      values4 = values4.split(",");
    }
    values4 = values4.map((value) => parseFloat(value));
    return {
      type,
      values: values4,
      colorSpace
    };
  }
  function recomposeColor(color3) {
    const {
      type,
      colorSpace
    } = color3;
    let {
      values: values4
    } = color3;
    if (type.indexOf("rgb") !== -1) {
      values4 = values4.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values4[1] = `${values4[1]}%`;
      values4[2] = `${values4[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values4 = `${colorSpace} ${values4.join(" ")}`;
    } else {
      values4 = `${values4.join(", ")}`;
    }
    return `${type}(${values4})`;
  }
  function alpha(color3, value) {
    color3 = decomposeColor(color3);
    value = clampWrapper(value);
    if (color3.type === "rgb" || color3.type === "hsl") {
      color3.type += "a";
    }
    if (color3.type === "color") {
      color3.values[3] = `/${value}`;
    } else {
      color3.values[3] = value;
    }
    return recomposeColor(color3);
  }

  // node_modules/@mui/material/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  init_extends();
  var React24 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());

  // node_modules/@mui/material/node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  init_extends();
  var React21 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());

  // node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@mui/utils/esm/elementAcceptingRef/elementAcceptingRef.js
  var import_prop_types3 = __toESM(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype: prototype3 = {}
    } = elementType;
    return Boolean(prototype3.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types3.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types3.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/esm/elementTypeAcceptingRef/elementTypeAcceptingRef.js
  var import_prop_types4 = __toESM(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype: prototype3 = {}
    } = elementType;
    return Boolean(prototype3.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types4.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/esm/exactProp/exactProp.js
  init_extends();
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/refType/refType.js
  var import_prop_types5 = __toESM(require_prop_types());
  var refType = import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]);
  var refType_default = refType;

  // node_modules/@mui/utils/esm/createChainedFunction/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/esm/debounce/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js
  var React10 = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    var _muiName, _element$type;
    return /* @__PURE__ */ React10.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
    ) !== -1;
  }

  // node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/esm/requirePropFactory/requirePropFactory.js
  init_extends();
  function requirePropFactory(componentNameInError, Component6) {
    if (false) {
      return () => null;
    }
    const prevPropTypes = Component6 ? _extends({}, Component6.propTypes) : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }

  // node_modules/@mui/utils/esm/setRef/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/esm/useId/useId.js
  var React11 = __toESM(require_react());
  var globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React11.useState(idOverride);
    const id = idOverride || defaultId;
    React11.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  var maybeReactUseId = React11["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }

  // node_modules/@mui/utils/esm/unsupportedProp/unsupportedProp.js
  function unsupportedProp(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/useControlled/useControlled.js
  var React12 = __toESM(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React12.useRef(controlled !== void 0);
    const [valueState, setValue] = React12.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React12.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React12.useRef(defaultProp);
      React12.useEffect(() => {
        if (!isControlled && !Object.is(defaultValue, defaultProp)) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React12.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
  var React13 = __toESM(require_react());
  function useEventCallback(fn2) {
    const ref = React13.useRef(fn2);
    useEnhancedEffect_default(() => {
      ref.current = fn2;
    });
    return React13.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  var useEventCallback_default = useEventCallback;

  // node_modules/@mui/utils/esm/useForkRef/useForkRef.js
  var React14 = __toESM(require_react());
  function useForkRef(...refs) {
    return React14.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }

  // node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
  var React15 = __toESM(require_react());
  var UNINITIALIZED = {};
  function useLazyRef(init, initArg) {
    const ref = React15.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) {
      ref.current = init(initArg);
    }
    return ref;
  }

  // node_modules/@mui/utils/esm/useOnMount/useOnMount.js
  var React16 = __toESM(require_react());
  var EMPTY = [];
  function useOnMount(fn2) {
    React16.useEffect(fn2, EMPTY);
  }

  // node_modules/@mui/utils/esm/useTimeout/useTimeout.js
  var Timeout = class _Timeout {
    constructor() {
      this.currentId = null;
      this.clear = () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      };
      this.disposeEffect = () => {
        return this.clear;
      };
    }
    static create() {
      return new _Timeout();
    }
    /**
     * Executes `fn` after `delay`, clearing any previously scheduled call.
     */
    start(delay, fn2) {
      this.clear();
      this.currentId = setTimeout(() => {
        this.currentId = null;
        fn2();
      }, delay);
    }
  };
  function useTimeout() {
    const timeout2 = useLazyRef(Timeout.create).current;
    useOnMount(timeout2.disposeEffect);
    return timeout2;
  }

  // node_modules/@mui/utils/esm/useIsFocusVisible/useIsFocusVisible.js
  var React17 = __toESM(require_react());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = new Timeout();
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React17.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React17.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        hadFocusVisibleRecentlyTimeout.start(100, () => {
          hadFocusVisibleRecently = false;
        });
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }

  // node_modules/@mui/utils/esm/getScrollbarSize/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/esm/scrollLeft/scrollLeft.js
  var cachedType;
  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }
    const dummy = document.createElement("div");
    const container = document.createElement("div");
    container.style.width = "10px";
    container.style.height = "1px";
    dummy.appendChild(container);
    dummy.dir = "rtl";
    dummy.style.fontSize = "14px";
    dummy.style.width = "4px";
    dummy.style.height = "1px";
    dummy.style.position = "absolute";
    dummy.style.top = "-1000px";
    dummy.style.overflow = "scroll";
    document.body.appendChild(dummy);
    cachedType = "reverse";
    if (dummy.scrollLeft > 0) {
      cachedType = "default";
    } else {
      dummy.scrollLeft = 1;
      if (dummy.scrollLeft === 0) {
        cachedType = "negative";
      }
    }
    document.body.removeChild(dummy);
    return cachedType;
  }
  function getNormalizedScrollLeft(element, direction) {
    const scrollLeft = element.scrollLeft;
    if (direction !== "rtl") {
      return scrollLeft;
    }
    const type = detectScrollType();
    switch (type) {
      case "negative":
        return element.scrollWidth - element.clientWidth + scrollLeft;
      case "reverse":
        return element.scrollWidth - element.clientWidth - scrollLeft;
      default:
        return scrollLeft;
    }
  }

  // node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js
  var React18 = __toESM(require_react());
  var usePreviousProps = (value) => {
    const ref = React18.useRef({});
    React18.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  var usePreviousProps_default = usePreviousProps;

  // node_modules/@mui/utils/esm/visuallyHidden/visuallyHidden.js
  var visuallyHidden = {
    border: 0,
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  };
  var visuallyHidden_default = visuallyHidden;

  // node_modules/@mui/utils/esm/integerPropType/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  var isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // node_modules/@mui/utils/esm/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output;
  }

  // node_modules/@mui/utils/esm/clamp/clamp.js
  function clamp2(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
    return Math.max(min2, Math.min(val, max2));
  }
  var clamp_default = clamp2;

  // node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
  init_extends();

  // node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
  init_extends();

  // node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }
  var isHostComponent_default = isHostComponent;

  // node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent_default(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }
  var appendOwnerState_default = appendOwnerState;

  // node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
  init_extends();

  // node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var extractEventHandlers_default = extractEventHandlers;

  // node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var omitEventHandlers_default = omitEventHandlers;

  // node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers_default(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }
  var mergeSlotProps_default = mergeSlotProps;

  // node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }
  var resolveComponentProps_default = resolveComponentProps;

  // node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
  var _excluded6 = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded6);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps_default(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState_default(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }
  var useSlotProps_default = useSlotProps;

  // node_modules/@mui/material/node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React19 = __toESM(require_react());
  var ThemeContext3 = /* @__PURE__ */ React19.createContext(null);
  if (true) {
    ThemeContext3.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext3;

  // node_modules/@mui/material/node_modules/@mui/private-theming/useTheme/useTheme.js
  var React20 = __toESM(require_react());
  function useTheme5() {
    const theme2 = React20.useContext(ThemeContext_default);
    if (true) {
      React20.useDebugValue(theme2);
    }
    return theme2;
  }

  // node_modules/@mui/material/node_modules/@mui/private-theming/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // node_modules/@mui/material/node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends({}, outerTheme, localTheme);
  }
  function ThemeProvider3(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme5();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme2 = React21.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ThemeContext_default.Provider, {
      value: theme2,
      children
    });
  }
  true ? ThemeProvider3.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types6.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types6.default.oneOfType([import_prop_types6.default.object, import_prop_types6.default.func]).isRequired
  } : void 0;
  if (true) {
    true ? ThemeProvider3.propTypes = exactProp(ThemeProvider3.propTypes) : void 0;
  }
  var ThemeProvider_default = ThemeProvider3;

  // node_modules/@mui/material/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_styled_engine5 = __toESM(require_node());

  // node_modules/@mui/material/node_modules/@mui/system/esm/RtlProvider/index.js
  init_extends();
  var React22 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var _excluded7 = ["value"];
  var RtlContext = /* @__PURE__ */ React22.createContext();
  function RtlProvider(_ref) {
    let {
      value
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded7);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(RtlContext.Provider, _extends({
      value: value != null ? value : true
    }, props));
  }
  true ? RtlProvider.propTypes = {
    children: import_prop_types7.default.node,
    value: import_prop_types7.default.bool
  } : void 0;
  var useRtl = () => {
    const value = React22.useContext(RtlContext);
    return value != null ? value : false;
  };
  var RtlProvider_default = RtlProvider;

  // node_modules/@mui/material/node_modules/@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js
  var React23 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var PropsContext = /* @__PURE__ */ React23.createContext(void 0);
  function DefaultPropsProvider({
    value,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(PropsContext.Provider, {
      value,
      children
    });
  }
  true ? DefaultPropsProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types8.default.node,
    /**
     * @ignore
     */
    value: import_prop_types8.default.object
  } : void 0;
  function getThemeProps2(params) {
    const {
      theme: theme2,
      name,
      props
    } = params;
    if (!theme2 || !theme2.components || !theme2.components[name]) {
      return props;
    }
    const config = theme2.components[name];
    if (config.defaultProps) {
      return resolveProps(config.defaultProps, props);
    }
    if (!config.styleOverrides && !config.variants) {
      return resolveProps(config, props);
    }
    return props;
  }
  function useDefaultProps({
    props,
    name
  }) {
    const ctx = React23.useContext(PropsContext);
    return getThemeProps2({
      props,
      name,
      theme: {
        components: ctx
      }
    });
  }
  var DefaultPropsProvider_default = DefaultPropsProvider;

  // node_modules/@mui/material/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React24.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider4(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useThemeWithoutDefault_default(EMPTY_THEME);
    const upperPrivateTheme = useTheme5() || EMPTY_THEME;
    if (true) {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    const rtlValue = engineTheme.direction === "rtl";
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ThemeProvider_default, {
      theme: privateTheme,
      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_styled_engine5.ThemeContext.Provider, {
        value: engineTheme,
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(RtlProvider_default, {
          value: rtlValue,
          children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(DefaultPropsProvider_default, {
            value: engineTheme == null ? void 0 : engineTheme.components,
            children
          })
        })
      })
    });
  }
  true ? ThemeProvider4.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Your component tree.
     */
    children: import_prop_types9.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: import_prop_types9.default.string
  } : void 0;
  if (true) {
    true ? ThemeProvider4.propTypes = exactProp(ThemeProvider4.propTypes) : void 0;
  }
  var ThemeProvider_default2 = ThemeProvider4;

  // node_modules/@mui/material/node_modules/@mui/system/esm/Stack/createStack.js
  init_extends();
  var React25 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());
  var import_deepmerge6 = __toESM(require_deepmerge2());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded8 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
  var defaultTheme = createTheme_default();
  var defaultCreateStyledComponent = styled_default("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  });
  function useThemePropsDefault(props) {
    return useThemeProps({
      props,
      name: "MuiStack",
      defaultTheme
    });
  }
  function joinChildren(children, separator) {
    const childrenArray = React25.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);
      if (index < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React25.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }
      return output;
    }, []);
  }
  var getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  var style3 = ({
    ownerState,
    theme: theme2
  }) => {
    let styles5 = _extends({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme: theme2
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme2.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme2);
      const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles5 = (0, import_deepmerge6.default)(styles5, handleBreakpoints({
        theme: theme2
      }, spacingValues, styleFromPropValue));
    }
    styles5 = mergeBreakpointsInOrder(theme2.breakpoints, styles5);
    return styles5;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps3 = useThemePropsDefault,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses88 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const StackRoot = createStyledComponent(style3);
    const Stack3 = /* @__PURE__ */ React25.forwardRef(function Grid3(inProps, ref) {
      const themeProps = useThemeProps3(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction = "column",
        spacing: spacing3 = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
      const ownerState = {
        direction,
        spacing: spacing3,
        useFlexGap
      };
      const classes = useUtilityClasses88();
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(StackRoot, _extends({
        as: component,
        ownerState,
        ref,
        className: clsx_default(classes.root, className)
      }, other, {
        children: divider ? joinChildren(children, divider) : children
      }));
    });
    true ? Stack3.propTypes = {
      children: import_prop_types10.default.node,
      direction: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types10.default.arrayOf(import_prop_types10.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types10.default.object]),
      divider: import_prop_types10.default.node,
      spacing: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string])), import_prop_types10.default.number, import_prop_types10.default.object, import_prop_types10.default.string]),
      sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object])
    } : void 0;
    return Stack3;
  }

  // node_modules/@mui/material/styles/createTheme.js
  init_extends();
  var import_deepmerge9 = __toESM(require_deepmerge2());
  var import_styleFunctionSx6 = __toESM(require_styleFunctionSx2());
  var import_createTheme5 = __toESM(require_createTheme2());

  // node_modules/@mui/material/styles/createMixins.js
  init_extends();
  function createMixins(breakpoints, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  init_extends();
  var import_deepmerge7 = __toESM(require_deepmerge2());
  var import_colorManipulator = __toESM(require_colorManipulator());

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/styles/createPalette.js
  var _excluded9 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_colorManipulator.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_colorManipulator.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette3) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette3, other = _objectWithoutPropertiesLoose(palette3, _excluded9);
    const primary = palette3.primary || getDefaultPrimary(mode);
    const secondary = palette3.secondary || getDefaultSecondary(mode);
    const error = palette3.error || getDefaultError(mode);
    const info = palette3.info || getDefaultInfo(mode);
    const success = palette3.success || getDefaultSuccess(mode);
    const warning = palette3.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_colorManipulator.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color3,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color3 = _extends({}, color3);
      if (!color3.main && color3[mainShade]) {
        color3.main = color3[mainShade];
      }
      if (!color3.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_formatMuiErrorMessage.default)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color3.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color3.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_formatMuiErrorMessage.default)(12, name ? ` (${name})` : "", JSON.stringify(color3.main)));
      }
      addLightOrDark(color3, "light", lightShade, tonalOffset);
      addLightOrDark(color3, "dark", darkShade, tonalOffset);
      if (!color3.contrastText) {
        color3.contrastText = getContrastText(color3.main);
      }
      return color3;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_deepmerge7.default)(_extends({
      // A collection of common colors.
      common: _extends({}, common_default),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  init_extends();
  var import_deepmerge8 = __toESM(require_deepmerge2());
  var _excluded10 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette3, typography) {
    const _ref = typeof typography === "function" ? typography(palette3) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded10);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_deepmerge8.default)(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  init_extends();
  var _excluded11 = ["duration", "easing", "delay"];
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height3) {
    if (!height3) {
      return 0;
    }
    const constant2 = height3 / 36;
    return Math.round((4 + 15 * constant2 ** 0.25 + constant2 / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded11);
      if (true) {
        const isString2 = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString2(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString2(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString2(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString2(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded12 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded12);
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_formatMuiErrorMessage.default)(18));
    }
    const palette3 = createPalette(paletteInput);
    const systemTheme = (0, import_createTheme5.default)(options);
    let muiTheme = (0, import_deepmerge9.default)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette3,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette3, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = (0, import_deepmerge9.default)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge9.default)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, import_styleFunctionSx6.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_styleFunctionSx6.default)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/useTheme.js
  var React26 = __toESM(require_react());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme2 = createTheme_default2();
  var defaultTheme_default = defaultTheme2;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme6() {
    const theme2 = useTheme_default(defaultTheme_default);
    if (true) {
      React26.useDebugValue(theme2);
    }
    return theme2[identifier_default] || theme2;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name
  }) {
    return useThemeProps({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var import_createStyled2 = __toESM(require_createStyled());

  // node_modules/@mui/material/styles/slotShouldForwardProp.js
  function slotShouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var slotShouldForwardProp_default = slotShouldForwardProp;

  // node_modules/@mui/material/styles/rootShouldForwardProp.js
  var rootShouldForwardProp = (prop) => slotShouldForwardProp_default(prop) && prop !== "classes";
  var rootShouldForwardProp_default = rootShouldForwardProp;

  // node_modules/@mui/material/styles/styled.js
  var styled3 = (0, import_createStyled2.default)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp: rootShouldForwardProp_default
  });
  var styled_default2 = styled3;

  // node_modules/@mui/material/styles/ThemeProvider.js
  init_extends();
  var React27 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var _excluded13 = ["theme"];
  function ThemeProvider5(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded13);
    const scopedTheme = themeInput[identifier_default];
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ThemeProvider_default2, _extends({}, props, {
      themeId: scopedTheme ? identifier_default : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  true ? ThemeProvider5.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types11.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types11.default.oneOfType([import_prop_types11.default.object, import_prop_types11.default.func]).isRequired
  } : void 0;

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var getOverlayAlpha_default = getOverlayAlpha;

  // build/client/theme/theme.js
  var theme = createTheme_default2({
    palette: {
      mode: "dark",
      primary: {
        main: "#2196f3"
      },
      secondary: {
        main: "#19857b"
      },
      error: {
        main: red_default.A400
      }
    }
  });
  var theme_default = theme;

  // build/client/Main.js
  var React309 = __toESM(require_react(), 1);

  // node_modules/@mui/material/utils/capitalize.js
  var import_capitalize4 = __toESM(require_capitalize2());
  var capitalize_default = import_capitalize4.default;

  // node_modules/@mui/material/utils/createSvgIcon.js
  init_extends();
  var React30 = __toESM(require_react());

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  init_extends();
  var React29 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());

  // node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js
  init_extends();
  var React28 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function DefaultPropsProvider2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(DefaultPropsProvider_default, _extends({}, props));
  }
  true ? DefaultPropsProvider2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types12.default.node,
    /**
     * @ignore
     */
    value: import_prop_types12.default.object.isRequired
  } : void 0;
  function useDefaultProps2(params) {
    return useDefaultProps(params);
  }

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded14 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses = (ownerState) => {
    const {
      color: color3,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color3 !== "inherit" && `color${capitalize_default(color3)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default2("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.color !== "inherit" && styles5[`color${capitalize_default(ownerState.color)}`], styles5[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      // the <svg> will define the property that has `currentColor`
      // for example heroicons uses fill="none" and stroke="currentColor"
      fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme2.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme2.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme2.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme2.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme2.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme2.vars || theme2).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme2.vars || theme2).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
        disabled: (_palette3 = (theme2.vars || theme2).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React29.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color3 = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
    const hasSvgAsChild = /* @__PURE__ */ React29.isValidElement(children) && children.type === "svg";
    const ownerState = _extends({}, props, {
      color: color3,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(SvgIconRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, hasSvgAsChild && children.props, {
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Node passed into the SVG element.
     */
    children: import_prop_types13.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types13.default.object,
    /**
     * @ignore
     */
    className: import_prop_types13.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types13.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types13.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types13.default.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: import_prop_types13.default.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: import_prop_types13.default.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: import_prop_types13.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: import_prop_types13.default.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: import_prop_types13.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component6(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SvgIcon_default, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component6.displayName = `${displayName}Icon`;
    }
    Component6.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React30.memo(/* @__PURE__ */ React30.forwardRef(Component6));
  }

  // node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/utils/requirePropFactory.js
  var requirePropFactory_default = requirePropFactory;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/utils/unsupportedProp.js
  var unsupportedProp_default = unsupportedProp;

  // node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // node_modules/@mui/material/utils/useEventCallback.js
  var useEventCallback_default2 = useEventCallback_default;

  // node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var useIsFocusVisible_default = useIsFocusVisible;

  // node_modules/react-transition-group/esm/CSSTransition.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  // node_modules/react-transition-group/esm/CSSTransition.js
  var import_prop_types16 = __toESM(require_prop_types());

  // node_modules/dom-helpers/esm/hasClass.js
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  // node_modules/dom-helpers/esm/addClass.js
  function addClass(element, className) {
    if (element.classList)
      element.classList.add(className);
    else if (!hasClass(element, className))
      if (typeof element.className === "string")
        element.className = element.className + " " + className;
      else
        element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
  }

  // node_modules/dom-helpers/esm/removeClass.js
  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
  }
  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === "string") {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
    }
  }

  // node_modules/react-transition-group/esm/CSSTransition.js
  var import_react6 = __toESM(require_react());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types15 = __toESM(require_prop_types());
  var import_react5 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types14 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.shape({
    enter: import_prop_types14.default.number,
    exit: import_prop_types14.default.number,
    appear: import_prop_types14.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.shape({
    enter: import_prop_types14.default.string,
    exit: import_prop_types14.default.string,
    active: import_prop_types14.default.string
  }), import_prop_types14.default.shape({
    enter: import_prop_types14.default.string,
    enterDone: import_prop_types14.default.string,
    enterActive: import_prop_types14.default.string,
    exit: import_prop_types14.default.string,
    exitDone: import_prop_types14.default.string,
    exitActive: import_prop_types14.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react4 = __toESM(require_react());
  var TransitionGroupContext_default = import_react4.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render3() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react5.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react5.default.cloneElement(import_react5.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react5.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types15.default.shape({
      current: typeof Element === "undefined" ? import_prop_types15.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types15.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types15.default.oneOfType([import_prop_types15.default.func.isRequired, import_prop_types15.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types15.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types15.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types15.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types15.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types15.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types15.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types15.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types15.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types15.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types15.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types15.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types15.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types15.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/CSSTransition.js
  var _addClass = function addClass2(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return addClass(node2, c);
    });
  };
  var removeClass2 = function removeClass3(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return removeClass(node2, c);
    });
  };
  var CSSTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(CSSTransition2, _React$Component);
    function CSSTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };
      _this.onEnter = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, appearing ? "appear" : "enter", "base");
        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };
      _this.onEntering = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
        var type = appearing ? "appear" : "enter";
        _this.addClass(node2, type, "active");
        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };
      _this.onEntered = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
        var type = appearing ? "appear" : "enter";
        _this.removeClasses(node2, type);
        _this.addClass(node2, type, "done");
        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };
      _this.onExit = function(maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
        _this.removeClasses(node2, "appear");
        _this.removeClasses(node2, "enter");
        _this.addClass(node2, "exit", "base");
        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };
      _this.onExiting = function(maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
        _this.addClass(node2, "exit", "active");
        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };
      _this.onExited = function(maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, "exit", "done");
        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };
      _this.resolveArguments = function(maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
      };
      _this.getClassNames = function(type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === "string";
        var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
        var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName,
          activeClassName,
          doneClassName
        };
      };
      return _this;
    }
    var _proto = CSSTransition2.prototype;
    _proto.addClass = function addClass3(node2, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];
      var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
      if (type === "appear" && phase === "done" && doneClassName) {
        className += " " + doneClassName;
      }
      if (phase === "active") {
        if (node2)
          forceReflow(node2);
      }
      if (className) {
        this.appliedClasses[type][phase] = className;
        _addClass(node2, className);
      }
    };
    _proto.removeClasses = function removeClasses(node2, type) {
      var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};
      if (baseClassName) {
        removeClass2(node2, baseClassName);
      }
      if (activeClassName) {
        removeClass2(node2, activeClassName);
      }
      if (doneClassName) {
        removeClass2(node2, doneClassName);
      }
    };
    _proto.render = function render3() {
      var _this$props = this.props, _2 = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
      return /* @__PURE__ */ import_react6.default.createElement(Transition_default, _extends({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };
    return CSSTransition2;
  }(import_react6.default.Component);
  CSSTransition.defaultProps = {
    classNames: ""
  };
  CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: import_prop_types16.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types16.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: import_prop_types16.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: import_prop_types16.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: import_prop_types16.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: import_prop_types16.default.func
  }) : {};
  var CSSTransition_default = CSSTransition;

  // node_modules/react-transition-group/esm/TransitionGroup.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e) {
    if (void 0 === e)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types17 = __toESM(require_prop_types());
  var import_react8 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react7 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react7.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      import_react7.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react7.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react7.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react7.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react7.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react7.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react7.isValidElement)(prevChild)) {
        children[key] = (0, import_react7.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render3() {
      var _this$props = this.props, Component6 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component6 === null) {
        return /* @__PURE__ */ import_react8.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react8.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react8.default.createElement(Component6, props, children));
    };
    return TransitionGroup2;
  }(import_react8.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types17.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types17.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types17.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types17.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types17.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types17.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style6 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style6.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style6.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style6.transitionDelay
    };
  }

  // node_modules/@mui/material/Paper/Paper.js
  init_extends();
  var React35 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());
  var import_colorManipulator2 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var _excluded15 = ["className", "component", "elevation", "square", "variant"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default2("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], !ownerState.square && styles5.rounded, ownerState.variant === "elevation" && styles5[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme2.vars || theme2).palette.background.paper,
      color: (theme2.vars || theme2).palette.text.primary,
      transition: theme2.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme2.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme2.vars || theme2).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme2.vars || theme2).shadows[ownerState.elevation]
    }, !theme2.vars && theme2.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme2.vars && {
      backgroundImage: (_theme$vars$overlays = theme2.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React35.forwardRef(function Paper2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses2(ownerState);
    if (true) {
      const theme2 = useTheme6();
      if (theme2.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types18.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types18.default.object,
    /**
     * @ignore
     */
    className: import_prop_types18.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types18.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types18.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["elevation", "outlined"]), import_prop_types18.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/utils/useSlot.js
  init_extends();
  var _excluded16 = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"];
  var _excluded23 = ["component", "slots", "slotProps"];
  var _excluded33 = ["component"];
  function useSlot(name, parameters) {
    const {
      className,
      elementType: initialElementType,
      ownerState,
      externalForwardedProps,
      getSlotOwnerState,
      internalForwardedProps
    } = parameters, useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded16);
    const {
      component: rootComponent,
      slots = {
        [name]: void 0
      },
      slotProps = {
        [name]: void 0
      }
    } = externalForwardedProps, other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded23);
    const elementType = slots[name] || initialElementType;
    const resolvedComponentsProps = resolveComponentProps_default(slotProps[name], ownerState);
    const _mergeSlotProps = mergeSlotProps_default(_extends({
      className
    }, useSlotPropsParams, {
      externalForwardedProps: name === "root" ? other : void 0,
      externalSlotProps: resolvedComponentsProps
    })), {
      props: {
        component: slotComponent
      },
      internalRef
    } = _mergeSlotProps, mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded33);
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);
    const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
    const finalOwnerState = _extends({}, ownerState, slotOwnerState);
    const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
    const props = appendOwnerState_default(elementType, _extends({}, name === "root" && !rootComponent && !slots[name] && internalForwardedProps, name !== "root" && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {
      as: LeafComponent
    }, {
      ref
    }), finalOwnerState);
    Object.keys(slotOwnerState).forEach((propName) => {
      delete props[propName];
    });
    return [elementType, props];
  }

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  init_extends();
  var React38 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  init_extends();
  var React37 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());

  // node_modules/@mui/material/ButtonBase/Ripple.js
  var React36 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props;
    const [leaving, setLeaving] = React36.useState(false);
    const rippleClassName = clsx_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React36.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types19.default.object.isRequired,
    className: import_prop_types19.default.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: import_prop_types19.default.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: import_prop_types19.default.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: import_prop_types19.default.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: import_prop_types19.default.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: import_prop_types19.default.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: import_prop_types19.default.number,
    /**
     * exit delay
     */
    timeout: import_prop_types19.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var _excluded17 = ["center", "classes", "className"];
  var _ = (t) => t;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = (0, import_styled_engine6.keyframes)(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = (0, import_styled_engine6.keyframes)(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = (0, import_styled_engine6.keyframes)(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default2("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default2(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme: theme2
  }) => theme2.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React37.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
    const [ripples, setRipples] = React37.useState([]);
    const nextKey = React37.useRef(0);
    const rippleCallback = React37.useRef(null);
    React37.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React37.useRef(false);
    const startTimer = useTimeout();
    const startTimerCommit = React37.useRef(null);
    const container = React37.useRef(null);
    const startCommit = React37.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React37.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.start(DELAY_RIPPLE, () => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          });
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit, startTimer]);
    const pulsate = React37.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React37.useCallback((event, cb) => {
      startTimer.clear();
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.start(0, () => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, [startTimer]);
    React37.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TouchRippleRoot, _extends({
      className: clsx_default(touchRippleClasses_default.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: import_prop_types20.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types20.default.object,
    /**
     * @ignore
     */
    className: import_prop_types20.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  var buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var _excluded18 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses3 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default2("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React38.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
    const buttonRef = React38.useRef(null);
    const rippleRef = React38.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React38.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React38.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React38.useState(false);
    React38.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React38.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default2((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus3 = useEventCallback_default2((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React38.useRef(false);
    const handleKeyDown2 = useEventCallback_default2((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default2((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React38.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses3(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_default(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus3,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(TouchRipple_default, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType_default,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types21.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types21.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types21.default.object,
    /**
     * @ignore
     */
    className: import_prop_types21.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef_default,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types21.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types21.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types21.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types21.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types21.default.string,
    /**
     * @ignore
     */
    href: import_prop_types21.default.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: import_prop_types21.default.elementType,
    /**
     * @ignore
     */
    onBlur: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onContextMenu: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onDragLeave: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types21.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseUp: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchEnd: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchMove: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchStart: import_prop_types21.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types21.default.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types21.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.shape({
      current: import_prop_types21.default.shape({
        pulsate: import_prop_types21.default.func.isRequired,
        start: import_prop_types21.default.func.isRequired,
        stop: import_prop_types21.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["button", "reset", "submit"]), import_prop_types21.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/Alert/Alert.js
  init_extends();
  var React45 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_colorManipulator4 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Alert/alertClasses.js
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  var alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  init_extends();
  var React39 = __toESM(require_react());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_colorManipulator3 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  var iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var _excluded19 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color3,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color3 !== "default" && `color${capitalize_default(color3)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles5[`edge${capitalize_default(ownerState.edge)}`], styles5[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme2.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme2.vars || theme2).palette.action.active,
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator3.alpha)(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme: theme2,
    ownerState
  }) => {
    var _palette;
    const palette3 = (_palette = (theme2.vars || theme2).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette3 == null ? void 0 : palette3.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette3 && {
        backgroundColor: theme2.vars ? `rgba(${palette3.mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator3.alpha)(palette3.main, theme2.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme2.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme2.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme2.vars || theme2).palette.action.disabled
      }
    });
  });
  var IconButton = /* @__PURE__ */ React39.forwardRef(function IconButton2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color3 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const ownerState = _extends({}, props, {
      edge,
      color: color3,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses4(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(IconButtonRoot, _extends({
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other, {
      ownerState,
      children
    }));
  });
  true ? IconButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The icon to display.
     */
    children: chainPropTypes(import_prop_types22.default.node, (props) => {
      const found = React39.Children.toArray(props.children).some((child) => /* @__PURE__ */ React39.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types22.default.object,
    /**
     * @ignore
     */
    className: import_prop_types22.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types22.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types22.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types22.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types22.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types22.default.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["small", "medium", "large"]), import_prop_types22.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var React40 = __toESM(require_react());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime19.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
  var React41 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime20.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
  var React42 = __toESM(require_react());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime21.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
  var React43 = __toESM(require_react());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime22.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // node_modules/@mui/material/internal/svg-icons/Close.js
  var React44 = __toESM(require_react());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/Alert/Alert.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded20 = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      variant,
      color: color3,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color3 || severity)}`, `${variant}${capitalize_default(color3 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  var AlertRoot = styled_default2(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], styles5[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme: theme2
  }) => {
    const getColor = theme2.palette.mode === "light" ? import_colorManipulator4.darken : import_colorManipulator4.lighten;
    const getBackgroundColor = theme2.palette.mode === "light" ? import_colorManipulator4.lighten : import_colorManipulator4.darken;
    return _extends({}, theme2.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px",
      variants: [...Object.entries(theme2.palette).filter(([, value]) => value.main && value.light).map(([color3]) => ({
        props: {
          colorSeverity: color3,
          variant: "standard"
        },
        style: {
          color: theme2.vars ? theme2.vars.palette.Alert[`${color3}Color`] : getColor(theme2.palette[color3].light, 0.6),
          backgroundColor: theme2.vars ? theme2.vars.palette.Alert[`${color3}StandardBg`] : getBackgroundColor(theme2.palette[color3].light, 0.9),
          [`& .${alertClasses_default.icon}`]: theme2.vars ? {
            color: theme2.vars.palette.Alert[`${color3}IconColor`]
          } : {
            color: theme2.palette[color3].main
          }
        }
      })), ...Object.entries(theme2.palette).filter(([, value]) => value.main && value.light).map(([color3]) => ({
        props: {
          colorSeverity: color3,
          variant: "outlined"
        },
        style: {
          color: theme2.vars ? theme2.vars.palette.Alert[`${color3}Color`] : getColor(theme2.palette[color3].light, 0.6),
          border: `1px solid ${(theme2.vars || theme2).palette[color3].light}`,
          [`& .${alertClasses_default.icon}`]: theme2.vars ? {
            color: theme2.vars.palette.Alert[`${color3}IconColor`]
          } : {
            color: theme2.palette[color3].main
          }
        }
      })), ...Object.entries(theme2.palette).filter(([, value]) => value.main && value.dark).map(([color3]) => ({
        props: {
          colorSeverity: color3,
          variant: "filled"
        },
        style: _extends({
          fontWeight: theme2.typography.fontWeightMedium
        }, theme2.vars ? {
          color: theme2.vars.palette.Alert[`${color3}FilledColor`],
          backgroundColor: theme2.vars.palette.Alert[`${color3}FilledBg`]
        } : {
          backgroundColor: theme2.palette.mode === "dark" ? theme2.palette[color3].dark : theme2.palette[color3].main,
          color: theme2.palette.getContrastText(theme2.palette[color3].main)
        })
      }))]
    });
  });
  var AlertIcon = styled_default2("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles5) => styles5.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default2("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles5) => styles5.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  var AlertAction = styled_default2("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles5) => styles5.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React45.forwardRef(function Alert2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color3,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const ownerState = _extends({}, props, {
      color: color3,
      severity,
      variant,
      colorSeverity: color3 || severity
    });
    const classes = useUtilityClasses5(ownerState);
    const externalForwardedProps = {
      slots: _extends({
        closeButton: components.CloseButton,
        closeIcon: components.CloseIcon
      }, slots),
      slotProps: _extends({}, componentsProps, slotProps)
    };
    const [CloseButtonSlot, closeButtonProps] = useSlot("closeButton", {
      elementType: IconButton_default,
      externalForwardedProps,
      ownerState
    });
    const [CloseIconSlot, closeIconProps] = useSlot("closeIcon", {
      elementType: Close_default,
      externalForwardedProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CloseButtonSlot, _extends({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose
        }, closeButtonProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CloseIconSlot, _extends({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  true ? Alert.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: import_prop_types23.default.node,
    /**
     * The content of the component.
     */
    children: import_prop_types23.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types23.default.object,
    /**
     * @ignore
     */
    className: import_prop_types23.default.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types23.default.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["error", "info", "success", "warning"]), import_prop_types23.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    components: import_prop_types23.default.shape({
      CloseButton: import_prop_types23.default.elementType,
      CloseIcon: import_prop_types23.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    componentsProps: import_prop_types23.default.shape({
      closeButton: import_prop_types23.default.object,
      closeIcon: import_prop_types23.default.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: import_prop_types23.default.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: import_prop_types23.default.shape({
      error: import_prop_types23.default.node,
      info: import_prop_types23.default.node,
      success: import_prop_types23.default.node,
      warning: import_prop_types23.default.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types23.default.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types23.default.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["error", "info", "success", "warning"]), import_prop_types23.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types23.default.shape({
      closeButton: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
      closeIcon: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types23.default.shape({
      closeButton: import_prop_types23.default.elementType,
      closeIcon: import_prop_types23.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["filled", "outlined", "standard"]), import_prop_types23.default.string])
  } : void 0;
  var Alert_default = Alert;

  // node_modules/@mui/material/Typography/Typography.js
  init_extends();
  var React46 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());
  var import_styleFunctionSx7 = __toESM(require_styleFunctionSx2());

  // node_modules/@mui/material/Typography/typographyClasses.js
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  var typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

  // node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var _excluded21 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default2("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.variant && styles5[ownerState.variant], ownerState.align !== "inherit" && styles5[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles5.noWrap, ownerState.gutterBottom && styles5.gutterBottom, ownerState.paragraph && styles5.paragraph];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme2.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color3) => {
    return colorTransformations[color3] || color3;
  };
  var Typography = /* @__PURE__ */ React46.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useDefaultProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const color3 = transformDeprecatedColors(themeProps.color);
    const props = (0, import_styleFunctionSx7.extendSxProp)(_extends({}, themeProps, {
      color: color3
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const ownerState = _extends({}, props, {
      align,
      color: color3,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component6 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TypographyRoot, _extends({
      as: Component6,
      ref,
      ownerState,
      className: clsx_default(classes.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: import_prop_types24.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types24.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types24.default.object,
    /**
     * @ignore
     */
    className: import_prop_types24.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types24.default.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: import_prop_types24.default.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: import_prop_types24.default.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: import_prop_types24.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types24.default.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: import_prop_types24.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/AppBar/AppBar.js
  init_extends();
  var React47 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());

  // node_modules/@mui/material/AppBar/appBarClasses.js
  function getAppBarUtilityClass(slot) {
    return generateUtilityClass("MuiAppBar", slot);
  }
  var appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);

  // node_modules/@mui/material/AppBar/AppBar.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var _excluded24 = ["className", "color", "enableColorOnDark", "position"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      color: color3,
      position: position2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color3)}`, `position${capitalize_default(position2)}`]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };
  var joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
  var AppBarRoot = styled_default2(Paper_default, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`], styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const backgroundColorDefault = theme2.palette.mode === "light" ? theme2.palette.grey[100] : theme2.palette.grey[900];
    return _extends({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      // ⚠️ sticky is not supported by IE11.
      position: "sticky",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme2.vars && _extends({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme2.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme2.palette[ownerState.color].main,
      color: theme2.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme2.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme2.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme2.vars && _extends({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme2.vars.palette.AppBar.defaultBg : joinVars(theme2.vars.palette.AppBar.darkBg, theme2.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme2.vars.palette.text.primary : joinVars(theme2.vars.palette.AppBar.darkColor, theme2.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme2.vars.palette[ownerState.color].main : joinVars(theme2.vars.palette.AppBar.darkBg, theme2.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme2.vars.palette[ownerState.color].contrastText : joinVars(theme2.vars.palette.AppBar.darkColor, theme2.vars.palette[ownerState.color].contrastText)
    }, !["inherit", "transparent"].includes(ownerState.color) && {
      backgroundColor: "var(--AppBar-background)"
    }, {
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  var AppBar = /* @__PURE__ */ React47.forwardRef(function AppBar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color: color3 = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
    const ownerState = _extends({}, props, {
      color: color3,
      position: position2,
      enableColorOnDark
    });
    const classes = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx_default(classes.root, className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  true ? AppBar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types25.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types25.default.object,
    /**
     * @ignore
     */
    className: import_prop_types25.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), import_prop_types25.default.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: import_prop_types25.default.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: import_prop_types25.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
  } : void 0;
  var AppBar_default = AppBar;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  init_extends();
  var React61 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());
  var import_colorManipulator6 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/useAutocomplete/useAutocomplete.js
  init_extends();
  var React48 = __toESM(require_react());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify3,
      trim: trim3 = false
    } = config;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim3 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify3 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  var defaultFilterOptions = createFilterOptions();
  var pageSize = 5;
  var defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionKey,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React48.useRef(false);
    const firstFocus = React48.useRef(true);
    const inputRef = React48.useRef(null);
    const listboxRef = React48.useRef(null);
    const [anchorEl, setAnchorEl] = React48.useState(null);
    const [focusedTag, setFocusedTag] = React48.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React48.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React48.useState(false);
    const resetInputValue = React48.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React48.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = usePreviousProps_default({
      filteredOptions,
      value,
      inputValue
    });
    React48.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback_default((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React48.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index, direction) {
      if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
          return nextFocus;
        }
        if (direction === "next") {
          nextFocus = (nextFocus + 1) % filteredOptions.length;
        } else {
          nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
        }
        if (nextFocus === index) {
          return -1;
        }
      }
    }
    const setHighlightedIndex = useEventCallback_default(({
      event,
      index,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index;
      if (index === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      let listboxNode = listboxRef.current;
      if (listboxRef.current.getAttribute("role") !== "listbox") {
        listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      }
      if (!listboxNode) {
        return;
      }
      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback_default(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const getPreviousHighlightedOptionIndex = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          return findIndex(filteredOptions, (option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
        }
      }
      return -1;
    };
    const syncHighlightedIndex = React48.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();
      if (previousHighlightedOptionIndex !== -1) {
        highlightedIndexRef.current = previousHighlightedOptionIndex;
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback_default((node2) => {
      setRef(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React48.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React48.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React48.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin2 = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin2 !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index, direction) {
      if (index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index = focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus3 = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index) {
        setHighlightedIndex({
          event,
          index,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index) => (event) => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (!disabledProp && (inputValue === "" || !open)) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur,
        onFocus: handleFocus3,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperatively so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => _extends({
        key: index,
        "data-tag-index": index,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        var _getOptionKey;
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }
  var useAutocomplete_default = useAutocomplete;

  // node_modules/@mui/material/Popper/Popper.js
  init_extends();
  var import_useThemeWithoutDefault4 = __toESM(require_useThemeWithoutDefault());
  var import_prop_types28 = __toESM(require_prop_types());
  var React51 = __toESM(require_react());

  // node_modules/@mui/material/Popper/BasePopper.js
  init_extends();
  var React50 = __toESM(require_react());

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument2 = node2.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node2;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style6 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style6);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style6 = styleProperties.reduce(function(style7, property2) {
          style7[property2] = "";
          return style7;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style6);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round2 = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width3 = clientRect.width / scaleX;
    var height3 = clientRect.height / scaleY;
    return {
      width: width3,
      height: height3,
      top: y,
      right: x + width3,
      bottom: y + height3,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width3 = element.offsetWidth;
    var height3 = element.offsetHeight;
    if (Math.abs(clientRect.width - width3) <= 1) {
      width3 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height3) <= 1) {
      height3 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width3,
      height: height3
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css3 = getComputedStyle(currentNode);
      if (css3.transform !== "none" || css3.perspective !== "none" || css3.contain === "paint" || ["transform", "perspective"].indexOf(css3.willChange) !== -1 || isFirefox && css3.willChange === "filter" || isFirefox && css3.filter && css3.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys2) {
    return keys2.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding3, state) {
    padding3 = typeof padding3 === "function" ? padding3(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding3;
    return mergePaddingObject(typeof padding3 !== "number" ? padding3 : expandToHashMap(padding3, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round2(x * dpr) / dpr || 0,
      y: round2(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width3 = html.clientWidth;
    var height3 = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width3 = visualViewport.width;
      height3 = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width3,
      height: height3,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width3 = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height3 = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width3;
    }
    return {
      width: width3,
      height: height3,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding3 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding3 !== "number" ? padding3 : expandToHashMap(padding3, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding3 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding3
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding3 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding3,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding3
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding3 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding3,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round2(rect.width) / element.offsetWidth || 1;
    var scaleY = round2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map2 = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map2.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map2.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce2(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce2(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@mui/material/Popper/BasePopper.js
  var import_prop_types27 = __toESM(require_prop_types());

  // node_modules/@mui/material/Portal/Portal.js
  var React49 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_prop_types26 = __toESM(require_prop_types());
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React49.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React49.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React49.isValidElement(children) ? children.ref : null, forwardedRef);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React49.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React49.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(React49.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(React49.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
    });
  });
  true ? Portal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types26.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types26.default.oneOfType([HTMLElementType, import_prop_types26.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types26.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@mui/material/Popper/popperClasses.js
  function getPopperUtilityClass(slot) {
    return generateUtilityClass("MuiPopper", slot);
  }
  var popperClasses = generateUtilityClasses("MuiPopper", ["root"]);

  // node_modules/@mui/material/Popper/BasePopper.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded25 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
  var _excluded26 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement2(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement2(element);
  }
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getPopperUtilityClass, classes);
  };
  var defaultPopperOptions = {};
  var PopperTooltip = /* @__PURE__ */ React50.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
      // @ts-ignore internal logic
      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
    const tooltipRef = React50.useRef(null);
    const ownRef = useForkRef(tooltipRef, forwardedRef);
    const popperRef = React50.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React50.useRef(handlePopperRef);
    useEnhancedEffect_default(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React50.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React50.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React50.useState(resolveAnchorEl(anchorEl));
    React50.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React50.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl(anchorEl));
      }
    }, [anchorEl]);
    useEnhancedEffect_default(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (true) {
        if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses8(props);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps_default({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  var Popper = /* @__PURE__ */ React50.forwardRef(function Popper2(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style6,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
    const [exited, setExited] = React50.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
    }
    const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Portal_default, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display
        }, style6),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  true ? Popper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: chainPropTypes(import_prop_types27.default.oneOfType([HTMLElementType, import_prop_types27.default.object, import_prop_types27.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: import_prop_types27.default.oneOfType([import_prop_types27.default.node, import_prop_types27.default.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types27.default.oneOfType([HTMLElementType, import_prop_types27.default.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: import_prop_types27.default.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types27.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types27.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types27.default.arrayOf(import_prop_types27.default.shape({
      data: import_prop_types27.default.object,
      effect: import_prop_types27.default.func,
      enabled: import_prop_types27.default.bool,
      fn: import_prop_types27.default.func,
      name: import_prop_types27.default.any,
      options: import_prop_types27.default.object,
      phase: import_prop_types27.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types27.default.arrayOf(import_prop_types27.default.string),
      requiresIfExists: import_prop_types27.default.arrayOf(import_prop_types27.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types27.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types27.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types27.default.shape({
      modifiers: import_prop_types27.default.array,
      onFirstUpdate: import_prop_types27.default.func,
      placement: import_prop_types27.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types27.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType_default,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types27.default.shape({
      root: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types27.default.shape({
      root: import_prop_types27.default.elementType
    }),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types27.default.bool
  } : void 0;
  var BasePopper_default = Popper;

  // node_modules/@mui/material/Popper/Popper.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var _excluded27 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
  var PopperRoot = styled_default2(BasePopper_default, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var Popper3 = /* @__PURE__ */ React51.forwardRef(function Popper4(inProps, ref) {
    var _slots$root;
    const theme2 = (0, import_useThemeWithoutDefault4.default)();
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      anchorEl,
      component,
      components,
      componentsProps,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
    const otherProps = _extends({
      anchorEl,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition
    }, other);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PopperRoot, _extends({
      as: component,
      direction: theme2 == null ? void 0 : theme2.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, otherProps, {
      ref
    }));
  });
  true ? Popper3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: import_prop_types28.default.oneOfType([HTMLElementType, import_prop_types28.default.object, import_prop_types28.default.func]),
    /**
     * Popper render function or node.
     */
    children: import_prop_types28.default.oneOfType([import_prop_types28.default.node, import_prop_types28.default.func]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types28.default.elementType,
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: import_prop_types28.default.shape({
      Root: import_prop_types28.default.elementType
    }),
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    componentsProps: import_prop_types28.default.shape({
      root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types28.default.oneOfType([HTMLElementType, import_prop_types28.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types28.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types28.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types28.default.arrayOf(import_prop_types28.default.shape({
      data: import_prop_types28.default.object,
      effect: import_prop_types28.default.func,
      enabled: import_prop_types28.default.bool,
      fn: import_prop_types28.default.func,
      name: import_prop_types28.default.any,
      options: import_prop_types28.default.object,
      phase: import_prop_types28.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types28.default.arrayOf(import_prop_types28.default.string),
      requiresIfExists: import_prop_types28.default.arrayOf(import_prop_types28.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types28.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types28.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types28.default.shape({
      modifiers: import_prop_types28.default.array,
      onFirstUpdate: import_prop_types28.default.func,
      placement: import_prop_types28.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types28.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType_default,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types28.default.shape({
      root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types28.default.shape({
      root: import_prop_types28.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types28.default.bool
  } : void 0;
  var Popper_default = Popper3;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  init_extends();
  var React52 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  function getListSubheaderUtilityClass(slot) {
    return generateUtilityClass("MuiListSubheader", slot);
  }
  var listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var _excluded28 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      color: color3,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color3 !== "default" && `color${capitalize_default(color3)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return composeClasses(slots, getListSubheaderUtilityClass, classes);
  };
  var ListSubheaderRoot = styled_default2("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles5.gutters, ownerState.inset && styles5.inset, !ownerState.disableSticky && styles5.sticky];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: (theme2.vars || theme2).palette.text.secondary,
    fontFamily: theme2.typography.fontFamily,
    fontWeight: theme2.typography.fontWeightMedium,
    fontSize: theme2.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: (theme2.vars || theme2).palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: (theme2.vars || theme2).palette.background.paper
  }));
  var ListSubheader = /* @__PURE__ */ React52.forwardRef(function ListSubheader2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className,
      color: color3 = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const ownerState = _extends({}, props, {
      color: color3,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes = useUtilityClasses9(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  ListSubheader.muiSkipListHighlight = true;
  true ? ListSubheader.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types29.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types29.default.object,
    /**
     * @ignore
     */
    className: import_prop_types29.default.string,
    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: import_prop_types29.default.oneOf(["default", "inherit", "primary"]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types29.default.elementType,
    /**
     * If `true`, the List Subheader will not have gutters.
     * @default false
     */
    disableGutters: import_prop_types29.default.bool,
    /**
     * If `true`, the List Subheader will not stick to the top during scroll.
     * @default false
     */
    disableSticky: import_prop_types29.default.bool,
    /**
     * If `true`, the List Subheader is indented.
     * @default false
     */
    inset: import_prop_types29.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object])
  } : void 0;
  var ListSubheader_default = ListSubheader;

  // node_modules/@mui/material/Chip/Chip.js
  init_extends();
  var React54 = __toESM(require_react());
  var import_prop_types30 = __toESM(require_prop_types());
  var import_colorManipulator5 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React53 = __toESM(require_react());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime32.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/Chip/chipClasses.js
  function getChipUtilityClass(slot) {
    return generateUtilityClass("MuiChip", slot);
  }
  var chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var _excluded29 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color3,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color3)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color3)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color3)}`, `${variant}${capitalize_default(color3)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color3)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color3)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color3)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };
  var ChipRoot = styled_default2("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        color: color3,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles5.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles5[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles5[`avatarColor${capitalize_default(color3)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles5.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles5[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles5[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIconColor${capitalize_default(color3)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color3)}`]
      }, styles5.root, styles5[`size${capitalize_default(size)}`], styles5[`color${capitalize_default(color3)}`], clickable && styles5.clickable, clickable && color3 !== "default" && styles5[`clickableColor${capitalize_default(color3)})`], onDelete && styles5.deletable, onDelete && color3 !== "default" && styles5[`deletableColor${capitalize_default(color3)}`], styles5[variant], styles5[`${variant}${capitalize_default(color3)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const textColor = theme2.palette.mode === "light" ? theme2.palette.grey[700] : theme2.palette.grey[300];
    return _extends({
      maxWidth: "100%",
      fontFamily: theme2.typography.fontFamily,
      fontSize: theme2.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme2.vars || theme2).palette.text.primary,
      backgroundColor: (theme2.vars || theme2).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme2.transitions.create(["background-color", "box-shadow"]),
      // reset cursor explicitly in case ButtonBase is used
      cursor: "unset",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme2.vars ? theme2.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme2.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme2.vars || theme2).palette.primary.contrastText,
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme2.vars || theme2).palette.secondary.contrastText,
        backgroundColor: (theme2.vars || theme2).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme2.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends({
        color: theme2.vars ? theme2.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.26)` : (0, import_colorManipulator5.alpha)(theme2.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.4)` : (0, import_colorManipulator5.alpha)(theme2.palette.text.primary, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : (0, import_colorManipulator5.alpha)(theme2.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme2.vars || theme2).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme2.vars || theme2).palette[ownerState.color].main,
      color: (theme2.vars || theme2).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator5.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme2.vars || theme2).palette[ownerState.color].dark
      }
    });
  }, ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator5.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator5.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme2.vars || theme2).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette[ownerState.color].dark
    }
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme2.vars ? `1px solid ${theme2.vars.palette.Chip.defaultBorder}` : `1px solid ${theme2.palette.mode === "light" ? theme2.palette.grey[400] : theme2.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme2.vars || theme2).palette[ownerState.color].main,
    border: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator5.alpha)(theme2.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator5.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : (0, import_colorManipulator5.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator5.alpha)(theme2.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme2.vars || theme2).palette[ownerState.color].main
      }
    }
  }));
  var ChipLabel = styled_default2("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles5.label, styles5[`label${capitalize_default(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.variant === "outlined" && {
    paddingLeft: 11,
    paddingRight: 11
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.size === "small" && ownerState.variant === "outlined" && {
    paddingLeft: 7,
    paddingRight: 7
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React54.forwardRef(function Chip2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color3 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
      // TODO v6: Rename to `focusableWhenDisabled`.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
    const chipRef = React54.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color: color3,
      iconColor: /* @__PURE__ */ React54.isValidElement(iconProp) ? iconProp.props.color || color3 : color3,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses10(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React54.isValidElement(deleteIconProp) ? /* @__PURE__ */ React54.cloneElement(deleteIconProp, {
        className: clsx_default(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Cancel_default, {
        className: clsx_default(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React54.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React54.cloneElement(avatarProp, {
        className: clsx_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React54.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React54.cloneElement(iconProp, {
        className: clsx_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(ChipRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ChipLabel, {
        className: clsx_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  true ? Chip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types30.default.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types30.default.object,
    /**
     * @ignore
     */
    className: import_prop_types30.default.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: import_prop_types30.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types30.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types30.default.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: import_prop_types30.default.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types30.default.bool,
    /**
     * Icon element.
     */
    icon: import_prop_types30.default.element,
    /**
     * The content of the component.
     */
    label: import_prop_types30.default.node,
    /**
     * @ignore
     */
    onClick: import_prop_types30.default.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: import_prop_types30.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types30.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types30.default.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["medium", "small"]), import_prop_types30.default.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: import_prop_types30.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
    /**
     * @ignore
     */
    tabIndex: import_prop_types30.default.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["filled", "outlined"]), import_prop_types30.default.string])
  } : void 0;
  var Chip_default = Chip;

  // node_modules/@mui/material/Input/inputClasses.js
  init_extends();

  // node_modules/@mui/material/InputBase/InputBase.js
  init_extends();
  var React59 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());

  // node_modules/@mui/material/TextareaAutosize/TextareaAutosize.js
  init_extends();
  var React55 = __toESM(require_react());
  var import_prop_types31 = __toESM(require_prop_types());
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var _excluded30 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue2(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty2(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;
  }
  var TextareaAutosize = /* @__PURE__ */ React55.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style6,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
    const {
      current: isControlled
    } = React55.useRef(value != null);
    const inputRef = React55.useRef(null);
    const handleRef = useForkRef(forwardedRef, inputRef);
    const heightRef = React55.useRef(null);
    const shadowRef = React55.useRef(null);
    const calculateTextareaStyles = React55.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0,
          overflowing: false
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing3 = computedStyle.boxSizing;
      const padding3 = getStyleValue2(computedStyle.paddingBottom) + getStyleValue2(computedStyle.paddingTop);
      const border3 = getStyleValue2(computedStyle.borderBottomWidth) + getStyleValue2(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing3 === "border-box" ? padding3 + border3 : 0);
      const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflowing
      };
    }, [maxRows, minRows, props.placeholder]);
    const syncHeight = React55.useCallback(() => {
      const textareaStyles = calculateTextareaStyles();
      if (isEmpty2(textareaStyles)) {
        return;
      }
      const outerHeightStyle = textareaStyles.outerHeightStyle;
      const input = inputRef.current;
      if (heightRef.current !== outerHeightStyle) {
        heightRef.current = outerHeightStyle;
        input.style.height = `${outerHeightStyle}px`;
      }
      input.style.overflow = textareaStyles.overflowing ? "hidden" : "";
    }, [calculateTextareaStyles]);
    useEnhancedEffect_default(() => {
      const handleResize = () => {
        syncHeight();
      };
      let rAF;
      const rAFHandleResize = () => {
        cancelAnimationFrame(rAF);
        rAF = requestAnimationFrame(() => {
          handleResize();
        });
      };
      const debounceHandleResize = debounce(handleResize);
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(rAF);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [calculateTextareaStyles, syncHeight]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    const handleChange = (event) => {
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(React55.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime35.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: style6
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style6, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    className: import_prop_types31.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types31.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types31.default.string,
    /**
     * @ignore
     */
    style: import_prop_types31.default.object,
    /**
     * @ignore
     */
    value: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.string), import_prop_types31.default.number, import_prop_types31.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React56 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React56.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React57 = __toESM(require_react());
  function useFormControl() {
    return React57.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  init_extends();
  var React58 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  function GlobalStyles2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(GlobalStyles_default, _extends({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  true ? GlobalStyles2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types32.default.oneOfType([import_prop_types32.default.array, import_prop_types32.default.func, import_prop_types32.default.number, import_prop_types32.default.object, import_prop_types32.default.string, import_prop_types32.default.bool])
  } : void 0;
  var GlobalStyles_default2 = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var _excluded31 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.formControl && styles5.formControl, ownerState.startAdornment && styles5.adornedStart, ownerState.endAdornment && styles5.adornedEnd, ownerState.error && styles5.error, ownerState.size === "small" && styles5.sizeSmall, ownerState.multiline && styles5.multiline, ownerState.color && styles5[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles5.fullWidth, ownerState.hiddenLabel && styles5.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.input, ownerState.size === "small" && styles5.inputSizeSmall, ownerState.multiline && styles5.inputMultiline, ownerState.type === "search" && styles5.inputTypeSearch, ownerState.startAdornment && styles5.inputAdornedStart, ownerState.endAdornment && styles5.inputAdornedEnd, ownerState.hiddenLabel && styles5.inputHiddenLabel];
  };
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes,
      color: color3,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color3)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${capitalize_default(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default2("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => _extends({}, theme2.typography.body1, {
    color: (theme2.vars || theme2).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default2("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => {
    const light2 = theme2.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme2.vars ? {
      opacity: theme2.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme2.transitions.create("opacity", {
        duration: theme2.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme2.vars ? {
      opacity: theme2.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme2.vars || theme2).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(GlobalStyles_default2, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React59.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React59.useRef(value != null);
    const inputRef = React59.useRef();
    const handleInputRefWarning = React59.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React59.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React59.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React59.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React59.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus3 = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_formatMuiErrorMessage.default)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React59.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React59.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses11(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input3 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(React59.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Input3, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent_default(Input3) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus3
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types33.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types33.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types33.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types33.default.object,
    /**
     * @ignore
     */
    className: import_prop_types33.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types33.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types33.default.shape({
      Input: import_prop_types33.default.elementType,
      Root: import_prop_types33.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types33.default.shape({
      input: import_prop_types33.default.object,
      root: import_prop_types33.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types33.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types33.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types33.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types33.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types33.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types33.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types33.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef_default,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types33.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types33.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types33.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types33.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types33.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types33.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types33.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types33.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types33.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types33.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types33.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types33.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types33.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types33.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types33.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["medium", "small"]), import_prop_types33.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types33.default.shape({
      input: import_prop_types33.default.object,
      root: import_prop_types33.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types33.default.shape({
      input: import_prop_types33.default.elementType,
      root: import_prop_types33.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types33.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types33.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types33.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  init_extends();
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  init_extends();
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React60 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime40.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  function getAutocompleteUtilityClass(slot) {
    return generateUtilityClass("MuiAutocomplete", slot);
  }
  var autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  var autocompleteClasses_default = autocompleteClasses;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  var _excluded34 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
  var _excluded210 = ["ref"];
  var _excluded35 = ["key"];
  var _excluded42 = ["key"];
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes,
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return composeClasses(slots, getAutocompleteUtilityClass, classes);
  };
  var AutocompleteRoot = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles5.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles5[`tagSize${capitalize_default(size)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles5.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles5.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles5.inputFocused
      }, styles5.root, fullWidth && styles5.fullWidth, hasPopupIcon && styles5.hasPopupIcon, hasClearIcon && styles5.hasClearIcon];
    }
  })({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    /* Avoid double tap issue on iOS */
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    },
    [`& .${autocompleteClasses_default.tag}`]: {
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    },
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 5px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      // Don't specify paddingRight, as it overrides the default value set when there is only
      // one of the popup or clear icon as the specificity is equal so the latter one wins
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 8px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 0,
      paddingBottom: 0,
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 16,
        paddingBottom: 17
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 8,
        paddingBottom: 9
      }
    },
    [`& .${autocompleteClasses_default.input}`]: {
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    },
    variants: [{
      props: {
        fullWidth: true
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        [`& .${autocompleteClasses_default.tag}`]: {
          margin: 2,
          maxWidth: "calc(100% - 4px)"
        }
      }
    }, {
      props: {
        inputFocused: true
      },
      style: {
        [`& .${autocompleteClasses_default.input}`]: {
          opacity: 1
        }
      }
    }, {
      props: {
        multiple: true
      },
      style: {
        [`& .${autocompleteClasses_default.inputRoot}`]: {
          flexWrap: "wrap"
        }
      }
    }]
  });
  var AutocompleteEndAdornment = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles5) => styles5.endAdornment
  })({
    // We use a position absolute to support wrapping tags.
    position: "absolute",
    right: 0,
    top: "50%",
    transform: "translate(0, -50%)"
  });
  var AutocompleteClearIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles5) => styles5.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  var AutocompletePopupIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles5) => _extends({}, styles5.popupIndicator, ownerState.popupOpen && styles5.popupIndicatorOpen)
  })({
    padding: 2,
    marginRight: -2,
    variants: [{
      props: {
        popupOpen: true
      },
      style: {
        transform: "rotate(180deg)"
      }
    }]
  });
  var AutocompletePopper = styled_default2(Popper_default, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles5.option
      }, styles5.popper, ownerState.disablePortal && styles5.popperDisablePortal];
    }
  })(({
    theme: theme2
  }) => ({
    zIndex: (theme2.vars || theme2).zIndex.modal,
    variants: [{
      props: {
        disablePortal: true
      },
      style: {
        position: "absolute"
      }
    }]
  }));
  var AutocompletePaper = styled_default2(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles5) => styles5.paper
  })(({
    theme: theme2
  }) => _extends({}, theme2.typography.body1, {
    overflow: "auto"
  }));
  var AutocompleteLoading = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles5) => styles5.loading
  })(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteNoOptions = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles5) => styles5.noOptions
  })(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteListbox = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles5) => styles5.listbox
  })(({
    theme: theme2
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    position: "relative",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme2.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: (theme2.vars || theme2).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: (theme2.vars || theme2).palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator6.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator6.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (theme2.vars || theme2).palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator6.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
        }
      }
    }
  }));
  var AutocompleteGroupLabel = styled_default2(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles5) => styles5.groupLabel
  })(({
    theme: theme2
  }) => ({
    backgroundColor: (theme2.vars || theme2).palette.background.paper,
    top: -8
  }));
  var AutocompleteGroupUl = styled_default2("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles5) => styles5.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  var Autocomplete = /* @__PURE__ */ React61.forwardRef(function Autocomplete2(inProps, ref) {
    var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel: getOptionLabelProp,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading\u2026",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = "medium",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      expanded,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete_default(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const {
      onMouseDown: handleInputMouseDown
    } = getInputProps();
    const {
      ref: externalListboxRef
    } = ListboxProps != null ? ListboxProps : {};
    const _getListboxProps = getListboxProps(), {
      ref: listboxRef
    } = _getListboxProps, otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded210);
    const combinedListboxRef = useForkRef_default(listboxRef, externalListboxRef);
    const defaultGetOptionLabel = (option) => {
      var _option$label;
      return (_option$label = option.label) != null ? _option$label : option;
    };
    const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;
    const ownerState = _extends({}, props, {
      disablePortal,
      expanded,
      focused,
      fullWidth,
      getOptionLabel,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });
    const classes = useUtilityClasses12(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: classes.tag,
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
      } else {
        startAdornment = value.map((option, index) => {
          const _getCustomizedTagProp = getCustomizedTagProps({
            index
          }), {
            key
          } = _getCustomizedTagProp, customTagProps = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded35);
          return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Chip_default, _extends({
            label: getOptionLabel(option),
            size
          }, customTagProps, ChipProps), key);
        });
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(/* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("li", {
      children: [/* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => {
      const {
        key
      } = props2, otherProps = _objectWithoutPropertiesLoose(props2, _excluded42);
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("li", _extends({}, otherProps, {
        children: getOptionLabel(option)
      }), key);
    };
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps["aria-selected"],
        index,
        inputValue
      }, ownerState);
    };
    const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
    const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
    const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
    const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
    const renderAutocompletePopperChildren = (children) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompletePopper, _extends({
      as: PopperComponent,
      disablePortal,
      style: {
        width: anchorEl ? anchorEl.clientWidth : null
      },
      ownerState,
      role: "presentation",
      anchorEl,
      open: popupOpen
    }, popperSlotProps, {
      className: clsx_default(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
      children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompletePaper, _extends({
        ownerState,
        as: PaperComponent
      }, paperSlotProps, {
        className: clsx_default(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
        children
      }))
    }));
    let autocompletePopper = null;
    if (groupedOptions.length > 0) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteListbox, _extends({
        as: ListboxComponent,
        className: classes.listbox,
        ownerState
      }, otherListboxProps, ListboxProps, {
        ref: combinedListboxRef,
        children: groupedOptions.map((option, index) => {
          if (groupBy) {
            return renderGroup({
              key: option.key,
              group: option.group,
              children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
            });
          }
          return renderListOption(option, index);
        })
      })));
    } else if (loading && groupedOptions.length === 0) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteLoading, {
        className: classes.loading,
        ownerState,
        children: loadingText
      }));
    } else if (groupedOptions.length === 0 && !freeSolo && !loading) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteNoOptions, {
        className: classes.noOptions,
        ownerState,
        role: "presentation",
        onMouseDown: (event) => {
          event.preventDefault();
        },
        children: noOptionsText
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(React61.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteRoot, _extends({
        ref,
        className: clsx_default(classes.root, className),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: _extends({
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            onClick: (event) => {
              if (event.target === event.currentTarget) {
                handleInputMouseDown(event);
              }
            }
          }, (hasClearIcon || hasPopupIcon) && {
            endAdornment: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState,
              children: [hasClearIcon ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, clearIndicatorSlotProps, {
                className: clsx_default(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                ownerState
              }, popupIndicatorSlotProps, {
                className: clsx_default(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                children: popupIcon
              })) : null]
            })
          }),
          inputProps: _extends({
            className: classes.input,
            disabled,
            readOnly
          }, getInputProps())
        })
      })), anchorEl ? autocompletePopper : null]
    });
  });
  true ? Autocomplete.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the portion of the selected suggestion that the user hasn't typed,
     * known as the completion string, appears inline after the input cursor in the textbox.
     * The inline completion string is visually highlighted and has a selected state.
     * @default false
     */
    autoComplete: import_prop_types34.default.bool,
    /**
     * If `true`, the first option is automatically highlighted.
     * @default false
     */
    autoHighlight: import_prop_types34.default.bool,
    /**
     * If `true`, the selected option becomes the value of the input
     * when the Autocomplete loses focus unless the user chooses
     * a different option or changes the character string in the input.
     *
     * When using the `freeSolo` mode, the typed value will be the input value
     * if the Autocomplete loses focus without highlighting an option.
     * @default false
     */
    autoSelect: import_prop_types34.default.bool,
    /**
     * Control if the input should be blurred when an option is selected:
     *
     * - `false` the input is not blurred.
     * - `true` the input is always blurred.
     * - `touch` the input is blurred after a touch event.
     * - `mouse` the input is blurred after a mouse event.
     * @default false
     */
    blurOnSelect: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["mouse", "touch"]), import_prop_types34.default.bool]),
    /**
     * Props applied to the [`Chip`](/material-ui/api/chip/) element.
     */
    ChipProps: import_prop_types34.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types34.default.object,
    /**
     * @ignore
     */
    className: import_prop_types34.default.string,
    /**
     * The icon to display in place of the default clear icon.
     * @default <ClearIcon fontSize="small" />
     */
    clearIcon: import_prop_types34.default.node,
    /**
     * If `true`, the input's text is cleared on blur if no value is selected.
     *
     * Set it to `true` if you want to help the user enter a new value.
     * Set it to `false` if you want to help the user resume their search.
     * @default !props.freeSolo
     */
    clearOnBlur: import_prop_types34.default.bool,
    /**
     * If `true`, clear all values when the user presses escape and the popup is closed.
     * @default false
     */
    clearOnEscape: import_prop_types34.default.bool,
    /**
     * Override the default text for the *clear* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Clear'
     */
    clearText: import_prop_types34.default.string,
    /**
     * Override the default text for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types34.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types34.default.shape({
      clearIndicator: import_prop_types34.default.object,
      paper: import_prop_types34.default.object,
      popper: import_prop_types34.default.object,
      popupIndicator: import_prop_types34.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     * @default props.multiple ? [] : null
     */
    defaultValue: chainPropTypes(import_prop_types34.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    /**
     * If `true`, the input can't be cleared.
     * @default false
     */
    disableClearable: import_prop_types34.default.bool,
    /**
     * If `true`, the popup won't close when a value is selected.
     * @default false
     */
    disableCloseOnSelect: import_prop_types34.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types34.default.bool,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types34.default.bool,
    /**
     * If `true`, the list box in the popup will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types34.default.bool,
    /**
     * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types34.default.bool,
    /**
     * A function that determines the filtered options to be rendered on search.
     *
     * @default createFilterOptions()
     * @param {Value[]} options The options to render.
     * @param {object} state The state of the component.
     * @returns {Value[]}
     */
    filterOptions: import_prop_types34.default.func,
    /**
     * If `true`, hide the selected options from the list box.
     * @default false
     */
    filterSelectedOptions: import_prop_types34.default.bool,
    /**
     * Force the visibility display of the popup icon.
     * @default 'auto'
     */
    forcePopupIcon: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["auto"]), import_prop_types34.default.bool]),
    /**
     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
     * @default false
     */
    freeSolo: import_prop_types34.default.bool,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types34.default.bool,
    /**
     * The label to display when the tags are truncated (`limitTags`).
     *
     * @param {number} more The number of truncated tags.
     * @returns {ReactNode}
     * @default (more) => `+${more}`
     */
    getLimitTagsText: import_prop_types34.default.func,
    /**
     * Used to determine the disabled state for a given option.
     *
     * @param {Value} option The option to test.
     * @returns {boolean}
     */
    getOptionDisabled: import_prop_types34.default.func,
    /**
     * Used to determine the key for a given option.
     * This can be useful when the labels of options are not unique (since labels are used as keys by default).
     *
     * @param {Value} option The option to get the key for.
     * @returns {string | number}
     */
    getOptionKey: import_prop_types34.default.func,
    /**
     * Used to determine the string value for a given option.
     * It's used to fill the input (and the list box options if `renderOption` is not provided).
     *
     * If used in free solo mode, it must accept both the type of the options and a string.
     *
     * @param {Value} option
     * @returns {string}
     * @default (option) => option.label ?? option
     */
    getOptionLabel: import_prop_types34.default.func,
    /**
     * If provided, the options will be grouped under the returned string.
     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
     *
     * @param {Value} options The options to group.
     * @returns {string}
     */
    groupBy: import_prop_types34.default.func,
    /**
     * If `true`, the component handles the "Home" and "End" keys when the popup is open.
     * It should move focus to the first option and last option, respectively.
     * @default !props.freeSolo
     */
    handleHomeEndKeys: import_prop_types34.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide an id it will fall back to a randomly generated one.
     */
    id: import_prop_types34.default.string,
    /**
     * If `true`, the highlight can move to the input.
     * @default false
     */
    includeInputInList: import_prop_types34.default.bool,
    /**
     * The input value.
     */
    inputValue: import_prop_types34.default.string,
    /**
     * Used to determine if the option represents the given value.
     * Uses strict equality by default.
     * ⚠️ Both arguments need to be handled, an option can only match with one value.
     *
     * @param {Value} option The option to test.
     * @param {Value} value The value to test against.
     * @returns {boolean}
     */
    isOptionEqualToValue: import_prop_types34.default.func,
    /**
     * The maximum number of tags that will be visible when not focused.
     * Set `-1` to disable the limit.
     * @default -1
     */
    limitTags: integerPropType_default,
    /**
     * The component used to render the listbox.
     * @default 'ul'
     */
    ListboxComponent: import_prop_types34.default.elementType,
    /**
     * Props applied to the Listbox element.
     */
    ListboxProps: import_prop_types34.default.object,
    /**
     * If `true`, the component is in a loading state.
     * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
     * @default false
     */
    loading: import_prop_types34.default.bool,
    /**
     * Text to display when in a loading state.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Loading…'
     */
    loadingText: import_prop_types34.default.node,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types34.default.bool,
    /**
     * Text to display when there are no options.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'No options'
     */
    noOptionsText: import_prop_types34.default.node,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value|Value[]} value The new value of the component.
     * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
     * @param {string} [details]
     */
    onChange: import_prop_types34.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
     */
    onClose: import_prop_types34.default.func,
    /**
     * Callback fired when the highlight option changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value} option The highlighted option.
     * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
     */
    onHighlightChange: import_prop_types34.default.func,
    /**
     * Callback fired when the input value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} value The new value of the text input.
     * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
     */
    onInputChange: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types34.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types34.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types34.default.bool,
    /**
     * If `true`, the popup will open on input focus.
     * @default false
     */
    openOnFocus: import_prop_types34.default.bool,
    /**
     * Override the default text for the *open popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Open'
     */
    openText: import_prop_types34.default.string,
    /**
     * Array of options.
     */
    options: import_prop_types34.default.array.isRequired,
    /**
     * The component used to render the body of the popup.
     * @default Paper
     */
    PaperComponent: import_prop_types34.default.elementType,
    /**
     * The component used to position the popup.
     * @default Popper
     */
    PopperComponent: import_prop_types34.default.elementType,
    /**
     * The icon to display in place of the default popup icon.
     * @default <ArrowDropDownIcon />
     */
    popupIcon: import_prop_types34.default.node,
    /**
     * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
     * @default false
     */
    readOnly: import_prop_types34.default.bool,
    /**
     * Render the group.
     *
     * @param {AutocompleteRenderGroupParams} params The group to render.
     * @returns {ReactNode}
     */
    renderGroup: import_prop_types34.default.func,
    /**
     * Render the input.
     *
     * @param {object} params
     * @returns {ReactNode}
     */
    renderInput: import_prop_types34.default.func.isRequired,
    /**
     * Render the option, use `getOptionLabel` by default.
     *
     * @param {object} props The props to apply on the li element.
     * @param {Value} option The option to render.
     * @param {object} state The state of each option.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderOption: import_prop_types34.default.func,
    /**
     * Render the selected value.
     *
     * @param {Value[]} value The `value` provided to the component.
     * @param {function} getTagProps A tag props getter.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderTags: import_prop_types34.default.func,
    /**
     * If `true`, the input's text is selected on focus.
     * It helps the user clear the selected value.
     * @default !props.freeSolo
     */
    selectOnFocus: import_prop_types34.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["small", "medium"]), import_prop_types34.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types34.default.shape({
      clearIndicator: import_prop_types34.default.object,
      paper: import_prop_types34.default.object,
      popper: import_prop_types34.default.object,
      popupIndicator: import_prop_types34.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    /**
     * The value of the autocomplete.
     *
     * The value must have reference equality with the option in order to be selected.
     * You can customize the equality behavior with the `isOptionEqualToValue` prop.
     */
    value: chainPropTypes(import_prop_types34.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  } : void 0;
  var Autocomplete_default = Autocomplete;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  init_extends();
  var React63 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());

  // node_modules/@mui/material/Fade/Fade.js
  init_extends();
  var React62 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded36 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React62.forwardRef(function Fade2(props, ref) {
    const theme2 = useTheme6();
    const defaultTimeout = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style6,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const enableStrictModeCompat = true;
    const nodeRef = React62.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style6,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node2.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style6,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node2.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React62.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style6, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types35.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types35.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types35.default.oneOfType([import_prop_types35.default.shape({
      enter: import_prop_types35.default.string,
      exit: import_prop_types35.default.string
    }), import_prop_types35.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types35.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types35.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types35.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types35.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types35.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types35.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types35.default.func,
    /**
     * @ignore
     */
    style: import_prop_types35.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.shape({
      appear: import_prop_types35.default.number,
      enter: import_prop_types35.default.number,
      exit: import_prop_types35.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var _excluded37 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default2("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.invisible && styles5.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React63.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses13(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx_default(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  true ? Backdrop.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types36.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types36.default.object,
    /**
     * @ignore
     */
    className: import_prop_types36.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types36.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types36.default.shape({
      Root: import_prop_types36.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types36.default.shape({
      root: import_prop_types36.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types36.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types36.default.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types36.default.shape({
      root: import_prop_types36.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types36.default.shape({
      root: import_prop_types36.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types36.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.shape({
      appear: import_prop_types36.default.number,
      enter: import_prop_types36.default.number,
      exit: import_prop_types36.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Box/Box.js
  var import_prop_types37 = __toESM(require_prop_types());

  // node_modules/@mui/material/Box/boxClasses.js
  var boxClasses = generateUtilityClasses("MuiBox", ["root"]);
  var boxClasses_default = boxClasses;

  // node_modules/@mui/material/Box/Box.js
  var defaultTheme3 = createTheme_default2();
  var Box = createBox({
    themeId: identifier_default,
    defaultTheme: defaultTheme3,
    defaultClassName: boxClasses_default.root,
    generateClassName: ClassNameGenerator_default.generate
  });
  true ? Box.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types37.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types37.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/material/Button/Button.js
  init_extends();
  var React66 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());
  var import_colorManipulator7 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Button/buttonClasses.js
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  var buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React64 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React64.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js
  var React65 = __toESM(require_react());
  var ButtonGroupButtonContext = /* @__PURE__ */ React65.createContext(void 0);
  if (true) {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  var ButtonGroupButtonContext_default = ButtonGroupButtonContext;

  // node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var _excluded38 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses14 = (ownerState) => {
    const {
      color: color3,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color3)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, `color${capitalize_default(color3)}`, disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["icon", "startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["icon", "endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], styles5[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles5[`size${capitalize_default(ownerState.size)}`], styles5[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles5.colorInherit, ownerState.disableElevation && styles5.disableElevation, ownerState.fullWidth && styles5.fullWidth];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme2.palette.mode === "light" ? theme2.palette.grey[300] : theme2.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme2.palette.mode === "light" ? theme2.palette.grey.A100 : theme2.palette.grey[700];
    return _extends({}, theme2.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme2.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator7.alpha)(theme2.palette.text.primary, theme2.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator7.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme2.vars || theme2).palette[ownerState.color].main}`,
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator7.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme2.vars ? theme2.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme2.vars || theme2).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme2.vars || theme2).shadows[2],
          backgroundColor: (theme2.vars || theme2).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme2.vars || theme2).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme2.vars || theme2).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme2.vars || theme2).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme2.vars || theme2).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme2.vars || theme2).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme2.vars || theme2).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme2.vars || theme2).palette.action.disabled,
        boxShadow: (theme2.vars || theme2).shadows[0],
        backgroundColor: (theme2.vars || theme2).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].main,
      border: theme2.vars ? `1px solid rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, import_colorManipulator7.alpha)(theme2.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme2.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme2.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme2.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme2.palette.grey[300]),
      backgroundColor: theme2.vars ? theme2.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme2.vars || theme2).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].contrastText,
      backgroundColor: (theme2.vars || theme2).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.startIcon, styles5[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.endIcon, styles5[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button = /* @__PURE__ */ React66.forwardRef(function Button2(inProps, ref) {
    const contextProps = React66.useContext(ButtonGroupContext_default);
    const buttonGroupButtonContextPositionClassName = React66.useContext(ButtonGroupButtonContext_default);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useDefaultProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color3 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const ownerState = _extends({}, props, {
      color: color3,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses14(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: clsx_default(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types38.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types38.default.object,
    /**
     * @ignore
     */
    className: import_prop_types38.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types38.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types38.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types38.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types38.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types38.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types38.default.bool,
    /**
     * Element placed after the children.
     */
    endIcon: import_prop_types38.default.node,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types38.default.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types38.default.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types38.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["small", "medium", "large"]), import_prop_types38.default.string]),
    /**
     * Element placed before the children.
     */
    startIcon: import_prop_types38.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    /**
     * @ignore
     */
    type: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["button", "reset", "submit"]), import_prop_types38.default.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["contained", "outlined", "text"]), import_prop_types38.default.string])
  } : void 0;
  var Button_default = Button;

  // node_modules/@mui/material/Card/Card.js
  init_extends();
  var React67 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());

  // node_modules/@mui/material/Card/cardClasses.js
  function getCardUtilityClass(slot) {
    return generateUtilityClass("MuiCard", slot);
  }
  var cardClasses = generateUtilityClasses("MuiCard", ["root"]);

  // node_modules/@mui/material/Card/Card.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var _excluded39 = ["className", "raised"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getCardUtilityClass, classes);
  };
  var CardRoot = styled_default2(Paper_default, {
    name: "MuiCard",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(() => {
    return {
      overflow: "hidden"
    };
  });
  var Card = /* @__PURE__ */ React67.forwardRef(function Card2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCard"
    });
    const {
      className,
      raised = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
    const ownerState = _extends({}, props, {
      raised
    });
    const classes = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CardRoot, _extends({
      className: clsx_default(classes.root, className),
      elevation: raised ? 8 : void 0,
      ref,
      ownerState
    }, other));
  });
  true ? Card.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types39.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types39.default.object,
    /**
     * @ignore
     */
    className: import_prop_types39.default.string,
    /**
     * If `true`, the card will use raised styling.
     * @default false
     */
    raised: chainPropTypes(import_prop_types39.default.bool, (props) => {
      if (props.raised && props.variant === "outlined") {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }
      return null;
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object])
  } : void 0;
  var Card_default = Card;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  init_extends();
  var React72 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());
  var import_colorManipulator8 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/SwitchBase.js
  init_extends();
  var React68 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/switchBaseClasses.js
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var _excluded40 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  var SwitchBaseRoot = styled_default2(ButtonBase_default)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  var SwitchBaseInput = styled_default2("input", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React68.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus3 = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses16(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus3,
      onBlur: handleBlur,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  true ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types40.default.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types40.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types40.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types40.default.object,
    /**
     * @ignore
     */
    className: import_prop_types40.default.string,
    /**
     * @ignore
     */
    defaultChecked: import_prop_types40.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types40.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types40.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types40.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types40.default.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types40.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types40.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /*
     * @ignore
     */
    name: import_prop_types40.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types40.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types40.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types40.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types40.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types40.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types40.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    /**
     * The input component prop `type`.
     */
    type: import_prop_types40.default.string.isRequired,
    /**
     * The value of the component.
     */
    value: import_prop_types40.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React69 = __toESM(require_react());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React70 = __toESM(require_react());
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime51.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React71 = __toESM(require_react());
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  var checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  var checkboxClasses_default = checkboxClasses;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var _excluded41 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color3,
      size
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color3)}`, `size${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var CheckboxRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.indeterminate && styles5.indeterminate, styles5[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    color: (theme2.vars || theme2).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${ownerState.color === "default" ? theme2.vars.palette.action.activeChannel : theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator8.alpha)(ownerState.color === "default" ? theme2.palette.action.active : theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: (theme2.vars || theme2).palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.action.disabled
    }
  }));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React72.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color3 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color3,
      indeterminate,
      size
    });
    const classes = useUtilityClasses17(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React72.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ React72.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? Checkbox.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types41.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: import_prop_types41.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types41.default.object,
    /**
     * @ignore
     */
    className: import_prop_types41.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types41.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types41.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types41.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types41.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: import_prop_types41.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types41.default.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: import_prop_types41.default.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: import_prop_types41.default.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types41.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types41.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types41.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["medium", "small"]), import_prop_types41.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types41.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js
  var React73 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React73.useRef(false);
    const nodeRef = React73.useRef(null);
    const activatedRef = React73.useRef(false);
    const syntheticEventRef = React73.useRef(false);
    React73.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(
      // @ts-expect-error TODO upstream fix
      children.ref,
      nodeRef
    );
    const handleClickAway = useEventCallback_default((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React73.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React73.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(React73.Fragment, {
      children: /* @__PURE__ */ React73.cloneElement(children, childrenProps)
    });
  }
  true ? ClickAwayListener.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The wrapped element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: import_prop_types42.default.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: import_prop_types42.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: import_prop_types42.default.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: import_prop_types42.default.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (true) {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }

  // node_modules/@mui/material/Dialog/Dialog.js
  init_extends();
  var React78 = __toESM(require_react());
  var import_prop_types45 = __toESM(require_prop_types());

  // node_modules/@mui/material/Modal/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property: property2
      }) => {
        if (value) {
          el.style.setProperty(property2, value);
        } else {
          el.style.removeProperty(property2);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/material/Modal/Modal.js
  init_extends();
  var React76 = __toESM(require_react());
  var import_prop_types44 = __toESM(require_prop_types());

  // node_modules/@mui/material/Unstable_TrapFocus/FocusTrap.js
  var React74 = __toESM(require_react());
  var import_prop_types43 = __toESM(require_prop_types());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root2) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React74.useRef(false);
    const sentinelStart = React74.useRef(null);
    const sentinelEnd = React74.useRef(null);
    const nodeToRestore = React74.useRef(null);
    const reactFocusEventTarget = React74.useRef(null);
    const activated = React74.useRef(false);
    const rootRef = React74.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React74.useRef(null);
    React74.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React74.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React74.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(React74.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React74.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types43.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types43.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types43.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types43.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types43.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types43.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  var FocusTrap_default = FocusTrap;

  // node_modules/@mui/material/Modal/useModal.js
  init_extends();
  var React75 = __toESM(require_react());
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React75.useRef({});
    const mountNodeRef = React75.useRef(null);
    const modalRef = React75.useRef(null);
    const handleRef = useForkRef(modalRef, rootRef);
    const [exited, setExited] = React75.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback_default(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React75.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback_default((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React75.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React75.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React75.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers_default(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
      return _extends({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }
  var useModal_default = useModal;

  // node_modules/@mui/material/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalClasses = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var _excluded43 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  var useUtilityClasses18 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  var ModalRoot = styled_default2("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.open && ownerState.exited && styles5.hidden];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme2.vars || theme2).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default2(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles5) => {
      return styles5.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React76.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useDefaultProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal_default(_extends({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited
    });
    const classes = useUtilityClasses18(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps_default({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
    });
    const backdropProps = useSlotProps_default({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: clsx_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Portal_default, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(RootSlot, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(BackdropSlot, _extends({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(FocusTrap_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React76.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types44.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types44.default.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types44.default.object,
    /**
     * @ignore
     */
    className: import_prop_types44.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types44.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types44.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types44.default.shape({
      Backdrop: import_prop_types44.default.elementType,
      Root: import_prop_types44.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types44.default.shape({
      backdrop: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types44.default.oneOfType([HTMLElementType, import_prop_types44.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types44.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types44.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types44.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types44.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types44.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types44.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types44.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types44.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types44.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types44.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types44.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types44.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types44.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types44.default.shape({
      backdrop: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types44.default.shape({
      backdrop: import_prop_types44.default.elementType,
      root: import_prop_types44.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/Dialog/dialogClasses.js
  function getDialogUtilityClass(slot) {
    return generateUtilityClass("MuiDialog", slot);
  }
  var dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  var dialogClasses_default = dialogClasses;

  // node_modules/@mui/material/Dialog/DialogContext.js
  var React77 = __toESM(require_react());
  var DialogContext = /* @__PURE__ */ React77.createContext({});
  if (true) {
    DialogContext.displayName = "DialogContext";
  }
  var DialogContext_default = DialogContext;

  // node_modules/@mui/material/Dialog/Dialog.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var _excluded44 = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var DialogBackdrop = styled_default2(Backdrop_default, {
    name: "MuiDialog",
    slot: "Backdrop",
    overrides: (props, styles5) => styles5.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes,
      scroll,
      maxWidth: maxWidth3,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ["root"],
      container: ["container", `scroll${capitalize_default(scroll)}`],
      paper: ["paper", `paperScroll${capitalize_default(scroll)}`, `paperWidth${capitalize_default(String(maxWidth3))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
    };
    return composeClasses(slots, getDialogUtilityClass, classes);
  };
  var DialogRoot = styled_default2(Modal_default, {
    name: "MuiDialog",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    "@media print": {
      // Use !important to override the Modal inline-style.
      position: "absolute !important"
    }
  });
  var DialogContainer = styled_default2("div", {
    name: "MuiDialog",
    slot: "Container",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.container, styles5[`scroll${capitalize_default(ownerState.scroll)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    height: "100%",
    "@media print": {
      height: "auto"
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }, ownerState.scroll === "paper" && {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.scroll === "body" && {
    overflowY: "auto",
    overflowX: "hidden",
    textAlign: "center",
    "&::after": {
      content: '""',
      display: "inline-block",
      verticalAlign: "middle",
      height: "100%",
      width: "0"
    }
  }));
  var DialogPaper = styled_default2(Paper_default, {
    name: "MuiDialog",
    slot: "Paper",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.paper, styles5[`scrollPaper${capitalize_default(ownerState.scroll)}`], styles5[`paperWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles5.paperFullWidth, ownerState.fullScreen && styles5.paperFullScreen];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    margin: 32,
    position: "relative",
    overflowY: "auto",
    // Fix IE11 issue, to remove at some point.
    "@media print": {
      overflowY: "visible",
      boxShadow: "none"
    }
  }, ownerState.scroll === "paper" && {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100% - 64px)"
  }, ownerState.scroll === "body" && {
    display: "inline-block",
    verticalAlign: "middle",
    textAlign: "left"
    // 'initial' doesn't work on IE11
  }, !ownerState.maxWidth && {
    maxWidth: "calc(100% - 64px)"
  }, ownerState.maxWidth === "xs" && {
    maxWidth: theme2.breakpoints.unit === "px" ? Math.max(theme2.breakpoints.values.xs, 444) : `max(${theme2.breakpoints.values.xs}${theme2.breakpoints.unit}, 444px)`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme2.breakpoints.down(Math.max(theme2.breakpoints.values.xs, 444) + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
    maxWidth: `${theme2.breakpoints.values[ownerState.maxWidth]}${theme2.breakpoints.unit}`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme2.breakpoints.down(theme2.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.fullWidth && {
    width: "calc(100% - 64px)"
  }, ownerState.fullScreen && {
    margin: 0,
    width: "100%",
    maxWidth: "100%",
    height: "100%",
    maxHeight: "none",
    borderRadius: 0,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      margin: 0,
      maxWidth: "100%"
    }
  }));
  var Dialog = /* @__PURE__ */ React78.forwardRef(function Dialog2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialog"
    });
    const theme2 = useTheme6();
    const defaultTransitionDuration = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth: maxWidth3 = "sm",
      onBackdropClick,
      onClick,
      onClose,
      open,
      PaperComponent = Paper_default,
      PaperProps = {},
      scroll = "paper",
      TransitionComponent = Fade_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
    const ownerState = _extends({}, props, {
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth: maxWidth3,
      scroll
    });
    const classes = useUtilityClasses19(ownerState);
    const backdropClick = React78.useRef();
    const handleMouseDown = (event) => {
      backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event) => {
      if (onClick) {
        onClick(event);
      }
      if (!backdropClick.current) {
        return;
      }
      backdropClick.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const ariaLabelledby = useId(ariaLabelledbyProp);
    const dialogContextValue = React78.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DialogRoot, _extends({
      className: clsx_default(classes.root, className),
      closeAfterTransition: true,
      components: {
        Backdrop: DialogBackdrop
      },
      componentsProps: {
        backdrop: _extends({
          transitionDuration,
          as: BackdropComponent
        }, BackdropProps)
      },
      disableEscapeKeyDown,
      onClose,
      open,
      ref,
      onClick: handleBackdropClick,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DialogContainer, {
          className: clsx_default(classes.container),
          onMouseDown: handleMouseDown,
          ownerState,
          children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DialogPaper, _extends({
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby,
            "aria-labelledby": ariaLabelledby
          }, PaperProps, {
            className: clsx_default(classes.paper, PaperProps.className),
            ownerState,
            children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DialogContext_default.Provider, {
              value: dialogContextValue,
              children
            })
          }))
        })
      }))
    }));
  });
  true ? Dialog.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    "aria-describedby": import_prop_types45.default.string,
    /**
     * The id(s) of the element(s) that label the dialog.
     */
    "aria-labelledby": import_prop_types45.default.string,
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types45.default.elementType,
    /**
     * @ignore
     */
    BackdropProps: import_prop_types45.default.object,
    /**
     * Dialog children, usually the included sub-components.
     */
    children: import_prop_types45.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types45.default.object,
    /**
     * @ignore
     */
    className: import_prop_types45.default.string,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types45.default.bool,
    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: import_prop_types45.default.bool,
    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: import_prop_types45.default.bool,
    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types45.default.string]),
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types45.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types45.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types45.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types45.default.bool.isRequired,
    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: import_prop_types45.default.elementType,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: import_prop_types45.default.object,
    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: import_prop_types45.default.oneOf(["body", "paper"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types45.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types45.default.oneOfType([import_prop_types45.default.number, import_prop_types45.default.shape({
      appear: import_prop_types45.default.number,
      enter: import_prop_types45.default.number,
      exit: import_prop_types45.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types45.default.object
  } : void 0;
  var Dialog_default = Dialog;

  // node_modules/@mui/material/DialogActions/DialogActions.js
  init_extends();
  var React79 = __toESM(require_react());
  var import_prop_types46 = __toESM(require_prop_types());

  // node_modules/@mui/material/DialogActions/dialogActionsClasses.js
  function getDialogActionsUtilityClass(slot) {
    return generateUtilityClass("MuiDialogActions", slot);
  }
  var dialogActionsClasses = generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);

  // node_modules/@mui/material/DialogActions/DialogActions.js
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var _excluded45 = ["className", "disableSpacing"];
  var useUtilityClasses20 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return composeClasses(slots, getDialogActionsUtilityClass, classes);
  };
  var DialogActionsRoot = styled_default2("div", {
    name: "MuiDialogActions",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.disableSpacing && styles5.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end",
    flex: "0 0 auto"
  }, !ownerState.disableSpacing && {
    "& > :not(style) ~ :not(style)": {
      marginLeft: 8
    }
  }));
  var DialogActions = /* @__PURE__ */ React79.forwardRef(function DialogActions2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses20(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(DialogActionsRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogActions.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types46.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types46.default.object,
    /**
     * @ignore
     */
    className: import_prop_types46.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types46.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object])
  } : void 0;
  var DialogActions_default = DialogActions;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  init_extends();
  var React80 = __toESM(require_react());
  var import_prop_types47 = __toESM(require_prop_types());

  // node_modules/@mui/material/DialogContent/dialogContentClasses.js
  function getDialogContentUtilityClass(slot) {
    return generateUtilityClass("MuiDialogContent", slot);
  }
  var dialogContentClasses = generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);

  // node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
  function getDialogTitleUtilityClass(slot) {
    return generateUtilityClass("MuiDialogTitle", slot);
  }
  var dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
  var dialogTitleClasses_default = dialogTitleClasses;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var _excluded46 = ["className", "dividers"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      classes,
      dividers
    } = ownerState;
    const slots = {
      root: ["root", dividers && "dividers"]
    };
    return composeClasses(slots, getDialogContentUtilityClass, classes);
  };
  var DialogContentRoot = styled_default2("div", {
    name: "MuiDialogContent",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.dividers && styles5.dividers];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    overflowY: "auto",
    padding: "20px 24px"
  }, ownerState.dividers ? {
    padding: "16px 24px",
    borderTop: `1px solid ${(theme2.vars || theme2).palette.divider}`,
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`
  } : {
    [`.${dialogTitleClasses_default.root} + &`]: {
      paddingTop: 0
    }
  }));
  var DialogContent = /* @__PURE__ */ React80.forwardRef(function DialogContent2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogContent"
    });
    const {
      className,
      dividers = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
    const ownerState = _extends({}, props, {
      dividers
    });
    const classes = useUtilityClasses21(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DialogContentRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types47.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types47.default.object,
    /**
     * @ignore
     */
    className: import_prop_types47.default.string,
    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: import_prop_types47.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object])
  } : void 0;
  var DialogContent_default = DialogContent;

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  init_extends();
  var React81 = __toESM(require_react());
  var import_prop_types48 = __toESM(require_prop_types());

  // node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js
  function getDialogContentTextUtilityClass(slot) {
    return generateUtilityClass("MuiDialogContentText", slot);
  }
  var dialogContentTextClasses = generateUtilityClasses("MuiDialogContentText", ["root"]);

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var _excluded47 = ["children", "className"];
  var useUtilityClasses22 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var DialogContentTextRoot = styled_default2(Typography_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiDialogContentText",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var DialogContentText = /* @__PURE__ */ React81.forwardRef(function DialogContentText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogContentText"
    });
    const {
      className
    } = props, ownerState = _objectWithoutPropertiesLoose(props, _excluded47);
    const classes = useUtilityClasses22(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(DialogContentTextRoot, _extends({
      component: "p",
      variant: "body1",
      color: "text.secondary",
      ref,
      ownerState,
      className: clsx_default(classes.root, className)
    }, props, {
      classes
    }));
  });
  true ? DialogContentText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types48.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types48.default.object,
    /**
     * @ignore
     */
    className: import_prop_types48.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object])
  } : void 0;
  var DialogContentText_default = DialogContentText;

  // node_modules/@mui/material/DialogTitle/DialogTitle.js
  init_extends();
  var React82 = __toESM(require_react());
  var import_prop_types49 = __toESM(require_prop_types());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var _excluded48 = ["className", "id"];
  var useUtilityClasses23 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getDialogTitleUtilityClass, classes);
  };
  var DialogTitleRoot = styled_default2(Typography_default, {
    name: "MuiDialogTitle",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    padding: "16px 24px",
    flex: "0 0 auto"
  });
  var DialogTitle = /* @__PURE__ */ React82.forwardRef(function DialogTitle2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogTitle"
    });
    const {
      className,
      id: idProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
    const ownerState = props;
    const classes = useUtilityClasses23(ownerState);
    const {
      titleId = idProp
    } = React82.useContext(DialogContext_default);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DialogTitleRoot, _extends({
      component: "h2",
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      variant: "h6",
      id: idProp != null ? idProp : titleId
    }, other));
  });
  true ? DialogTitle.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types49.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types49.default.object,
    /**
     * @ignore
     */
    className: import_prop_types49.default.string,
    /**
     * @ignore
     */
    id: import_prop_types49.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object])
  } : void 0;
  var DialogTitle_default = DialogTitle;

  // node_modules/@mui/material/Divider/Divider.js
  init_extends();
  var React83 = __toESM(require_react());
  var import_prop_types50 = __toESM(require_prop_types());
  var import_colorManipulator9 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Divider/dividerClasses.js
  function getDividerUtilityClass(slot) {
    return generateUtilityClass("MuiDivider", slot);
  }
  var dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // node_modules/@mui/material/Divider/Divider.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var _excluded49 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  var useUtilityClasses24 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return composeClasses(slots, getDividerUtilityClass, classes);
  };
  var DividerRoot = styled_default2("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.absolute && styles5.absolute, styles5[ownerState.variant], ownerState.light && styles5.light, ownerState.orientation === "vertical" && styles5.vertical, ownerState.flexItem && styles5.flexItem, ownerState.children && styles5.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles5.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles5.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles5.textAlignLeft];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme2.vars || theme2).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme2.vars ? `rgba(${theme2.vars.palette.dividerChannel} / 0.08)` : (0, import_colorManipulator9.alpha)(theme2.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme2.spacing(2),
    marginRight: theme2.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme2.spacing(1),
    marginBottom: theme2.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    borderTopStyle: "solid",
    borderLeftStyle: "solid",
    "&::before, &::after": {
      content: '""',
      alignSelf: "center"
    }
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation !== "vertical" && {
    "&::before, &::after": {
      width: "100%",
      borderTop: `thin solid ${(theme2.vars || theme2).palette.divider}`,
      borderTopStyle: "inherit"
    }
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      borderLeft: `thin solid ${(theme2.vars || theme2).palette.divider}`,
      borderLeftStyle: "inherit"
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  var DividerWrapper = styled_default2("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.wrapper, ownerState.orientation === "vertical" && styles5.wrapperVertical];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme2.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme2.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme2.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme2.spacing(1)} * 1.2)`
  }));
  var Divider = /* @__PURE__ */ React83.forwardRef(function Divider2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    });
    const classes = useUtilityClasses24(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(DividerRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  Divider.muiSkipListHighlight = true;
  true ? Divider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: import_prop_types50.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types50.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types50.default.object,
    /**
     * @ignore
     */
    className: import_prop_types50.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types50.default.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: import_prop_types50.default.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
     */
    light: import_prop_types50.default.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types50.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: import_prop_types50.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: import_prop_types50.default.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types50.default.string])
  } : void 0;
  var Divider_default = Divider;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  init_extends();
  var React84 = __toESM(require_react());
  var import_deepmerge10 = __toESM(require_deepmerge2());
  var import_prop_types51 = __toESM(require_prop_types());
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var _excluded50 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses25 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles5), !ownerState.disableUnderline && styles5.underline];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _palette;
    const light2 = theme2.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor3 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3,
      borderTopLeftRadius: (theme2.vars || theme2).shape.borderRadius,
      borderTopRightRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create("background-color", {
        duration: theme2.transitions.duration.shorter,
        easing: theme2.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(_palette = (theme2.vars || theme2).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme2.transitions.create("transform", {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme2.vars || theme2).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme2.transitions.create("border-bottom-color", {
          duration: theme2.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
  });
  var FilledInputInput = styled_default2(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme2.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
      caretColor: theme2.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme2.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme2.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }));
  var FilledInput = /* @__PURE__ */ React84.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses25(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge10.default)(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types51.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types51.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types51.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["primary", "secondary"]), import_prop_types51.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types51.default.shape({
      Input: import_prop_types51.default.elementType,
      Root: import_prop_types51.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types51.default.shape({
      input: import_prop_types51.default.object,
      root: import_prop_types51.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types51.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types51.default.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: import_prop_types51.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types51.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types51.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types51.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types51.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types51.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types51.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types51.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types51.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types51.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types51.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types51.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types51.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types51.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types51.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types51.default.shape({
      input: import_prop_types51.default.object,
      root: import_prop_types51.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types51.default.shape({
      input: import_prop_types51.default.elementType,
      root: import_prop_types51.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types51.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types51.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types51.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/FormControl.js
  init_extends();
  var React85 = __toESM(require_react());
  var import_prop_types52 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var _excluded51 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses26 = (ownerState) => {
    const {
      classes,
      margin: margin3,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin3 !== "none" && `margin${capitalize_default(margin3)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default2("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles5) => {
      return _extends({}, styles5.root, styles5[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles5.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React85.forwardRef(function FormControl2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color3 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin3 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const ownerState = _extends({}, props, {
      color: color3,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin3,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses26(ownerState);
    const [adornedStart, setAdornedStart] = React85.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React85.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React85.useState(() => {
      let initialFilled = false;
      if (children) {
        React85.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React85.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React85.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React85.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color3,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color3, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types52.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types52.default.object,
    /**
     * @ignore
     */
    className: import_prop_types52.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types52.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types52.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types52.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types52.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types52.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types52.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types52.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types52.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types52.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["medium", "small"]), import_prop_types52.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types52.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  init_extends();
  var React86 = __toESM(require_react());
  var import_prop_types54 = __toESM(require_prop_types());

  // node_modules/@mui/material/Stack/Stack.js
  var import_prop_types53 = __toESM(require_prop_types());
  var Stack = createStack({
    createStyledComponent: styled_default2("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles5) => styles5.root
    }),
    useThemeProps: (inProps) => useDefaultProps2({
      props: inProps,
      name: "MuiStack"
    })
  });
  true ? Stack.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types53.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types53.default.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types53.default.arrayOf(import_prop_types53.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types53.default.object]),
    /**
     * Add an element between each child.
     */
    divider: import_prop_types53.default.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string])), import_prop_types53.default.number, import_prop_types53.default.object, import_prop_types53.default.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
     * @default false
     */
    useFlexGap: import_prop_types53.default.bool
  } : void 0;
  var Stack_default = Stack;

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var _excluded52 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
  var useUtilityClasses27 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };
  var FormControlLabelRoot = styled_default2("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles5.label
      }, styles5.root, styles5[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme2.vars || theme2).palette.text.disabled
      }
    }
  }));
  var AsteriskComponent = styled_default2("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles5) => styles5.asterisk
  })(({
    theme: theme2
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }));
  var FormControlLabel = /* @__PURE__ */ React86.forwardRef(function FormControlLabel2(inProps, ref) {
    var _ref, _slotProps$typography;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      required: requiredProp,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const muiFormControl = useFormControl();
    const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
    const required = requiredProp != null ? requiredProp : control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    });
    const classes = useUtilityClasses27(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Typography_default, _extends({
        component: "span"
      }, typographySlotProps, {
        className: clsx_default(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(FormControlLabelRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React86.cloneElement(control, controlProps), required ? /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(Stack_default, {
        display: "block",
        children: [label, /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }) : label]
    }));
  });
  true ? FormControlLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component appears selected.
     */
    checked: import_prop_types54.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types54.default.object,
    /**
     * @ignore
     */
    className: import_prop_types54.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types54.default.shape({
      typography: import_prop_types54.default.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: import_prop_types54.default.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: import_prop_types54.default.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: import_prop_types54.default.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: import_prop_types54.default.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: import_prop_types54.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: import_prop_types54.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types54.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types54.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types54.default.shape({
      typography: import_prop_types54.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
    /**
     * The value of the component.
     */
    value: import_prop_types54.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  init_extends();
  var React87 = __toESM(require_react());
  var import_prop_types55 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var _span;
  var _excluded53 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses28 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default2("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.size && styles5[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles5.contained, ownerState.filled && styles5.filled];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    color: (theme2.vars || theme2).palette.text.secondary
  }, theme2.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React87.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses28(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      ) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types55.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types55.default.object,
    /**
     * @ignore
     */
    className: import_prop_types55.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types55.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types55.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types55.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types55.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types55.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types55.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types55.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["filled", "outlined", "standard"]), import_prop_types55.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  init_extends();
  var React88 = __toESM(require_react());
  var import_prop_types56 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var _excluded54 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses29 = (ownerState) => {
    const {
      classes,
      color: color3,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color3)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default2("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles5) => {
      return _extends({}, styles5.root, ownerState.color === "secondary" && styles5.colorSecondary, ownerState.filled && styles5.filled);
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    color: (theme2.vars || theme2).palette.text.secondary
  }, theme2.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme2.vars || theme2).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }));
  var AsteriskComponent2 = styled_default2("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles5) => styles5.asterisk
  })(({
    theme: theme2
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React88.forwardRef(function FormLabel2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses29(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types56.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types56.default.object,
    /**
     * @ignore
     */
    className: import_prop_types56.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types56.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types56.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types56.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types56.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types56.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types56.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types56.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grid/Grid.js
  init_extends();
  var React90 = __toESM(require_react());
  var import_prop_types57 = __toESM(require_prop_types());
  var import_styleFunctionSx8 = __toESM(require_styleFunctionSx2());

  // node_modules/@mui/material/Grid/GridContext.js
  var React89 = __toESM(require_react());
  var GridContext = /* @__PURE__ */ React89.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // node_modules/@mui/material/Grid/gridClasses.js
  function getGridUtilityClass(slot) {
    return generateUtilityClass("MuiGrid", slot);
  }
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = generateUtilityClasses("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS.map((spacing3) => `spacing-xs-${spacing3}`),
    // direction values
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  var gridClasses_default = gridClasses;

  // node_modules/@mui/material/Grid/Grid.js
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var _excluded55 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
  function getOffset(val) {
    const parse3 = parseFloat(val);
    return `${parse3}${String(val).replace(String(parse3), "") || "px"}`;
  }
  function generateGrid({
    theme: theme2,
    ownerState
  }) {
    let size;
    return theme2.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles5 = {};
      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }
      if (!size) {
        return globalStyles;
      }
      if (size === true) {
        styles5 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size === "auto") {
        styles5 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = resolveBreakpointValues({
          values: ownerState.columns,
          breakpoints: theme2.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width3 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme2.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width3} + ${getOffset(themeSpacing)})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles5 = _extends({
          flexBasis: width3,
          flexGrow: 0,
          maxWidth: width3
        }, more);
      }
      if (theme2.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles5);
      } else {
        globalStyles[theme2.breakpoints.up(breakpoint)] = styles5;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme: theme2,
    ownerState
  }) {
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme2.breakpoints.values
    });
    return handleBreakpoints({
      theme: theme2
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.indexOf("column") === 0) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function extractZeroValueBreakpointKeys({
    breakpoints,
    values: values4
  }) {
    let nonZeroKey = "";
    Object.keys(values4).forEach((key) => {
      if (nonZeroKey !== "") {
        return;
      }
      if (values4[key] !== 0) {
        nonZeroKey = key;
      }
    });
    const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
      return breakpoints[a] - breakpoints[b];
    });
    return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
  }
  function generateRowGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles5 = {};
    if (container && rowSpacing !== 0) {
      const rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof rowSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: rowSpacingValues
        });
      }
      styles5 = handleBreakpoints({
        theme: theme2
      }, rowSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK;
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
          return {};
        }
        return {
          marginTop: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: 0
          }
        };
      });
    }
    return styles5;
  }
  function generateColumnGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles5 = {};
    if (container && columnSpacing !== 0) {
      const columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof columnSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: columnSpacingValues
        });
      }
      styles5 = handleBreakpoints({
        theme: theme2
      }, columnSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK2;
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
          return {};
        }
        return {
          width: "100%",
          marginLeft: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: 0
          }
        };
      });
    }
    return styles5;
  }
  function resolveSpacingStyles(spacing3, breakpoints, styles5 = {}) {
    if (!spacing3 || spacing3 <= 0) {
      return [];
    }
    if (typeof spacing3 === "string" && !Number.isNaN(Number(spacing3)) || typeof spacing3 === "number") {
      return [styles5[`spacing-xs-${String(spacing3)}`]];
    }
    const spacingStyles = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing3[breakpoint];
      if (Number(value) > 0) {
        spacingStyles.push(styles5[`spacing-${breakpoint}-${String(value)}`]);
      }
    });
    return spacingStyles;
  }
  var GridRoot = styled_default2("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        container,
        direction,
        item,
        spacing: spacing3,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingStyles = [];
      if (container) {
        spacingStyles = resolveSpacingStyles(spacing3, breakpoints, styles5);
      }
      const breakpointsStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsStyles.push(styles5[`grid-${breakpoint}-${String(value)}`]);
        }
      });
      return [styles5.root, container && styles5.container, item && styles5.item, zeroMinWidth && styles5.zeroMinWidth, ...spacingStyles, direction !== "row" && styles5[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles5[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: "border-box"
  }, ownerState.container && {
    display: "flex",
    flexWrap: "wrap",
    width: "100%"
  }, ownerState.item && {
    margin: 0
    // For instance, it's useful when used with a `figure` element.
  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
  function resolveSpacingClasses(spacing3, breakpoints) {
    if (!spacing3 || spacing3 <= 0) {
      return [];
    }
    if (typeof spacing3 === "string" && !Number.isNaN(Number(spacing3)) || typeof spacing3 === "number") {
      return [`spacing-xs-${String(spacing3)}`];
    }
    const classes = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing3[breakpoint];
      if (Number(value) > 0) {
        const className = `spacing-${breakpoint}-${String(value)}`;
        classes.push(className);
      }
    });
    return classes;
  }
  var useUtilityClasses30 = (ownerState) => {
    const {
      classes,
      container,
      direction,
      item,
      spacing: spacing3,
      wrap,
      zeroMinWidth,
      breakpoints
    } = ownerState;
    let spacingClasses = [];
    if (container) {
      spacingClasses = resolveSpacingClasses(spacing3, breakpoints);
    }
    const breakpointsClasses = [];
    breakpoints.forEach((breakpoint) => {
      const value = ownerState[breakpoint];
      if (value) {
        breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
      }
    });
    const slots = {
      root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
    };
    return composeClasses(slots, getGridUtilityClass, classes);
  };
  var Grid = /* @__PURE__ */ React90.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useDefaultProps2({
      props: inProps,
      name: "MuiGrid"
    });
    const {
      breakpoints
    } = useTheme6();
    const props = (0, import_styleFunctionSx8.extendSxProp)(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container = false,
      direction = "row",
      item = false,
      rowSpacing: rowSpacingProp,
      spacing: spacing3 = 0,
      wrap = "wrap",
      zeroMinWidth = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
    const rowSpacing = rowSpacingProp || spacing3;
    const columnSpacing = columnSpacingProp || spacing3;
    const columnsContext = React90.useContext(GridContext_default);
    const columns = container ? columnsProp || 12 : columnsContext;
    const breakpointsValues = {};
    const otherFiltered = _extends({}, other);
    breakpoints.keys.forEach((breakpoint) => {
      if (other[breakpoint] != null) {
        breakpointsValues[breakpoint] = other[breakpoint];
        delete otherFiltered[breakpoint];
      }
    });
    const ownerState = _extends({}, props, {
      columns,
      container,
      direction,
      item,
      rowSpacing,
      columnSpacing,
      wrap,
      zeroMinWidth,
      spacing: spacing3
    }, breakpointsValues, {
      breakpoints: breakpoints.keys
    });
    const classes = useUtilityClasses30(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(GridRoot, _extends({
        ownerState,
        className: clsx_default(classes.root, className),
        as: component,
        ref
      }, otherFiltered))
    });
  });
  true ? Grid.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types57.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types57.default.object,
    /**
     * @ignore
     */
    className: import_prop_types57.default.string,
    /**
     * The number of columns.
     * @default 12
     */
    columns: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.number), import_prop_types57.default.number, import_prop_types57.default.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.string])), import_prop_types57.default.number, import_prop_types57.default.object, import_prop_types57.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types57.default.elementType,
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: import_prop_types57.default.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types57.default.arrayOf(import_prop_types57.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types57.default.object]),
    /**
     * If `true`, the component will have the flex *item* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    item: import_prop_types57.default.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.bool]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.string])), import_prop_types57.default.number, import_prop_types57.default.object, import_prop_types57.default.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.bool]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.string])), import_prop_types57.default.number, import_prop_types57.default.object, import_prop_types57.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object]),
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: import_prop_types57.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.bool]),
    /**
     * If `true`, it sets `min-width: 0` on the item.
     * Refer to the limitations section of the documentation to better understand the use case.
     * @default false
     */
    zeroMinWidth: import_prop_types57.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = _extends({}, Grid.propTypes, {
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var Grid_default = Grid;

  // node_modules/@mui/material/Grow/Grow.js
  init_extends();
  var React91 = __toESM(require_react());
  var import_prop_types58 = __toESM(require_prop_types());
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var _excluded56 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles3 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React91.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style6,
      timeout: timeout2 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
    const timer = useTimeout();
    const autoTimeout = React91.useRef();
    const theme2 = useTheme6();
    const nodeRef = React91.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style6,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style6,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.start(autoTimeout.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React91.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles3[state], style6, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types58.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types58.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types58.default.oneOfType([import_prop_types58.default.shape({
      enter: import_prop_types58.default.string,
      exit: import_prop_types58.default.string
    }), import_prop_types58.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types58.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types58.default.func,
    /**
     * @ignore
     */
    style: import_prop_types58.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["auto"]), import_prop_types58.default.number, import_prop_types58.default.shape({
      appear: import_prop_types58.default.number,
      enter: import_prop_types58.default.number,
      exit: import_prop_types58.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Input/Input.js
  init_extends();
  var React92 = __toESM(require_react());
  var import_prop_types59 = __toESM(require_prop_types());
  var import_deepmerge11 = __toESM(require_deepmerge2());
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var _excluded57 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses31 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles5), !ownerState.disableUnderline && styles5.underline];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const light2 = theme2.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme2.vars) {
      bottomLineColor = `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(theme2.vars || theme2).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme2.transitions.create("transform", {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme2.vars || theme2).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme2.transitions.create("border-bottom-color", {
          duration: theme2.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
        borderBottom: `2px solid ${(theme2.vars || theme2).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default2(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React92.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
    const classes = useUtilityClasses31(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge11.default)(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types59.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types59.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types59.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["primary", "secondary"]), import_prop_types59.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types59.default.shape({
      Input: import_prop_types59.default.elementType,
      Root: import_prop_types59.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types59.default.shape({
      input: import_prop_types59.default.object,
      root: import_prop_types59.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types59.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types59.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: import_prop_types59.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types59.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types59.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types59.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types59.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types59.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types59.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types59.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types59.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types59.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types59.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types59.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types59.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types59.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types59.default.shape({
      input: import_prop_types59.default.object,
      root: import_prop_types59.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types59.default.shape({
      input: import_prop_types59.default.elementType,
      root: import_prop_types59.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types59.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types59.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types59.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  init_extends();
  var React93 = __toESM(require_react());
  var import_prop_types60 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
  function getInputAdornmentUtilityClass(slot) {
    return generateUtilityClass("MuiInputAdornment", slot);
  }
  var inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  var inputAdornmentClasses_default = inputAdornmentClasses;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var _span2;
  var _excluded58 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
  var overridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`], ownerState.disablePointerEvents === true && styles5.disablePointerEvents, styles5[ownerState.variant]];
  };
  var useUtilityClasses32 = (ownerState) => {
    const {
      classes,
      disablePointerEvents,
      hiddenLabel,
      position: position2,
      size,
      variant
    } = ownerState;
    const slots = {
      root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize_default(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getInputAdornmentUtilityClass, classes);
  };
  var InputAdornmentRoot = styled_default2("div", {
    name: "MuiInputAdornment",
    slot: "Root",
    overridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "flex",
    height: "0.01em",
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: "2em",
    alignItems: "center",
    whiteSpace: "nowrap",
    color: (theme2.vars || theme2).palette.action.active
  }, ownerState.variant === "filled" && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses_default.positionStart}&:not(.${inputAdornmentClasses_default.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === "start" && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === "end" && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: "none"
  }));
  var InputAdornment = /* @__PURE__ */ React93.forwardRef(function InputAdornment2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInputAdornment"
    });
    const {
      children,
      className,
      component = "div",
      disablePointerEvents = false,
      disableTypography = false,
      position: position2,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
    const muiFormControl = useFormControl() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    const ownerState = _extends({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position: position2,
      variant
    });
    const classes = useUtilityClasses32(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(FormControlContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(InputAdornmentRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Typography_default, {
          color: "text.secondary",
          children
        }) : /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(React93.Fragment, {
          children: [position2 === "start" ? (
            /* notranslate needed while Google Translate will not fix zero-width space issue */
            _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("span", {
              className: "notranslate",
              children: "\u200B"
            }))
          ) : null, children]
        })
      }))
    });
  });
  true ? InputAdornment.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: import_prop_types60.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types60.default.object,
    /**
     * @ignore
     */
    className: import_prop_types60.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types60.default.elementType,
    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: import_prop_types60.default.bool,
    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: import_prop_types60.default.bool,
    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: import_prop_types60.default.oneOf(["end", "start"]).isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object]),
    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: import_prop_types60.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputAdornment_default = InputAdornment;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  init_extends();
  var React94 = __toESM(require_react());
  var import_prop_types61 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var _excluded59 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  var useUtilityClasses33 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${capitalize_default(size)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default2(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles5.asterisk
      }, styles5.root, ownerState.formControl && styles5.formControl, ownerState.size === "small" && styles5.sizeSmall, ownerState.shrink && styles5.shrink, !ownerState.disableAnimation && styles5.animated, ownerState.focused && styles5.focused, styles5[ownerState.variant]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme2.transitions.create(["color", "transform", "max-width"], {
      duration: theme2.transitions.duration.shorter,
      easing: theme2.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React94.forwardRef(function InputLabel2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    });
    const classes = useUtilityClasses33(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types61.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types61.default.object,
    /**
     * @ignore
     */
    className: import_prop_types61.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types61.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types61.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types61.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types61.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types61.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types61.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types61.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types61.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["normal", "small"]), import_prop_types61.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types61.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/List/List.js
  init_extends();
  var React96 = __toESM(require_react());
  var import_prop_types62 = __toESM(require_prop_types());

  // node_modules/@mui/material/List/ListContext.js
  var React95 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React95.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  var _excluded60 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses34 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default2("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.disablePadding && styles5.padding, ownerState.dense && styles5.dense, ownerState.subheader && styles5.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React96.forwardRef(function List2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
    const context = React96.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses34(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types62.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types62.default.object,
    /**
     * @ignore
     */
    className: import_prop_types62.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types62.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types62.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types62.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types62.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types62.default.oneOfType([import_prop_types62.default.arrayOf(import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object, import_prop_types62.default.bool])), import_prop_types62.default.func, import_prop_types62.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/ListItem/ListItem.js
  init_extends();
  var React99 = __toESM(require_react());
  var import_prop_types65 = __toESM(require_prop_types());
  var import_colorManipulator11 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/ListItem/listItemClasses.js
  function getListItemUtilityClass(slot) {
    return generateUtilityClass("MuiListItem", slot);
  }
  var listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
  var listItemClasses_default = listItemClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  init_extends();
  var React97 = __toESM(require_react());
  var import_prop_types63 = __toESM(require_prop_types());
  var import_colorManipulator10 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
  function getListItemButtonUtilityClass(slot) {
    return generateUtilityClass("MuiListItemButton", slot);
  }
  var listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  var listItemButtonClasses_default = listItemButtonClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var _excluded61 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
  var overridesResolver2 = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dense && styles5.dense, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters];
  };
  var useUtilityClasses35 = (ownerState) => {
    const {
      alignItems,
      classes,
      dense,
      disabled,
      disableGutters,
      divider,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var ListItemButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiListItemButton",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "flex",
    flexGrow: 1,
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minWidth: 0,
    boxSizing: "border-box",
    textAlign: "left",
    paddingTop: 8,
    paddingBottom: 8,
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme2.vars || theme2).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemButtonClasses_default.selected}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator10.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
      [`&.${listItemButtonClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator10.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.selected}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator10.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator10.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`&.${listItemButtonClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    }
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }));
  var ListItemButton = /* @__PURE__ */ React97.forwardRef(function ListItemButton2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemButton"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      component = "div",
      children,
      dense = false,
      disableGutters = false,
      divider = false,
      focusVisibleClassName,
      selected = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
    const context = React97.useContext(ListContext_default);
    const childContext = React97.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React97.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      alignItems,
      dense: childContext.dense,
      disableGutters,
      divider,
      selected
    });
    const classes = useUtilityClasses35(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ListItemButtonRoot, _extends({
        ref: handleRef,
        href: other.href || other.to,
        component: (other.href || other.to) && component === "div" ? "button" : component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        ownerState,
        className: clsx_default(classes.root, className)
      }, other, {
        classes,
        children
      }))
    });
  });
  true ? ListItemButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types63.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types63.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: import_prop_types63.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types63.default.object,
    /**
     * @ignore
     */
    className: import_prop_types63.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types63.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types63.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types63.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types63.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types63.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types63.default.string,
    /**
     * @ignore
     */
    href: import_prop_types63.default.string,
    /**
     * Use to apply selected styling.
     * @default false
     */
    selected: import_prop_types63.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
  } : void 0;
  var ListItemButton_default = ListItemButton;

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  init_extends();
  var React98 = __toESM(require_react());
  var import_prop_types64 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
  function getListItemSecondaryActionClassesUtilityClass(slot) {
    return generateUtilityClass("MuiListItemSecondaryAction", slot);
  }
  var listItemSecondaryActionClasses = generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var _excluded62 = ["className"];
  var useUtilityClasses36 = (ownerState) => {
    const {
      disableGutters,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disableGutters && "disableGutters"]
    };
    return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
  };
  var ListItemSecondaryActionRoot = styled_default2("div", {
    name: "MuiListItemSecondaryAction",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.disableGutters && styles5.disableGutters];
    }
  })(({
    ownerState
  }) => _extends({
    position: "absolute",
    right: 16,
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.disableGutters && {
    right: 0
  }));
  var ListItemSecondaryAction = /* @__PURE__ */ React98.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemSecondaryAction"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const context = React98.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      disableGutters: context.disableGutters
    });
    const classes = useUtilityClasses36(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ListItemSecondaryActionRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemSecondaryAction.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or selection control.
     */
    children: import_prop_types64.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types64.default.object,
    /**
     * @ignore
     */
    className: import_prop_types64.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object])
  } : void 0;
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  var ListItemSecondaryAction_default = ListItemSecondaryAction;

  // node_modules/@mui/material/ListItem/ListItem.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var _excluded63 = ["className"];
  var _excluded211 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
  var overridesResolver3 = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dense && styles5.dense, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters, !ownerState.disablePadding && styles5.padding, ownerState.button && styles5.button, ownerState.hasSecondaryAction && styles5.secondaryAction];
  };
  var useUtilityClasses37 = (ownerState) => {
    const {
      alignItems,
      button,
      classes,
      dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
      container: ["container"]
    };
    return composeClasses(slots, getListItemUtilityClass, classes);
  };
  var ListItemRoot = styled_default2("div", {
    name: "MuiListItem",
    slot: "Root",
    overridesResolver: overridesResolver3
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    width: "100%",
    boxSizing: "border-box",
    textAlign: "left"
  }, !ownerState.disablePadding && _extends({
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, !!ownerState.secondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }), !!ownerState.secondaryAction && {
    [`& > .${listItemButtonClasses_default.root}`]: {
      paddingRight: 48
    }
  }, {
    [`&.${listItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`&.${listItemClasses_default.selected}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator11.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
      [`&.${listItemClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator11.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    },
    [`&.${listItemClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    }
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.button && {
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme2.vars || theme2).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemClasses_default.selected}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator11.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator11.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
      }
    }
  }, ownerState.hasSecondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }));
  var ListItemContainer = styled_default2("li", {
    name: "MuiListItem",
    slot: "Container",
    overridesResolver: (props, styles5) => styles5.container
  })({
    position: "relative"
  });
  var ListItem = /* @__PURE__ */ React99.forwardRef(function ListItem2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItem"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      button = false,
      children: childrenProp,
      className,
      component: componentProp,
      components = {},
      componentsProps = {},
      ContainerComponent = "li",
      ContainerProps: {
        className: ContainerClassName
      } = {},
      dense = false,
      disabled = false,
      disableGutters = false,
      disablePadding = false,
      divider = false,
      focusVisibleClassName,
      secondaryAction,
      selected = false,
      slotProps = {},
      slots = {}
    } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded63), other = _objectWithoutPropertiesLoose(props, _excluded211);
    const context = React99.useContext(ListContext_default);
    const childContext = React99.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React99.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const children = React99.Children.toArray(childrenProp);
    const hasSecondaryAction = children.length && isMuiElement_default(children[children.length - 1], ["ListItemSecondaryAction"]);
    const ownerState = _extends({}, props, {
      alignItems,
      autoFocus,
      button,
      dense: childContext.dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    });
    const classes = useUtilityClasses37(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    const Root = slots.root || components.Root || ListItemRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const componentProps = _extends({
      className: clsx_default(classes.root, rootProps.className, className),
      disabled
    }, other);
    let Component6 = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = clsx_default(listItemClasses_default.focusVisible, focusVisibleClassName);
      Component6 = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component6 = !componentProps.component && !componentProp ? "div" : Component6;
      if (ContainerComponent === "li") {
        if (Component6 === "li") {
          Component6 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(ListItemContainer, _extends({
          as: ContainerComponent,
          className: clsx_default(classes.container, ContainerClassName),
          ref: handleRef,
          ownerState
        }, ContainerProps, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
            as: Component6,
            ownerState: _extends({}, ownerState, rootProps.ownerState)
          }, componentProps, {
            children
          })), children.pop()]
        }))
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(Root, _extends({}, rootProps, {
        as: Component6,
        ref: handleRef
      }, !isHostComponent_default(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, componentProps, {
        children: [children, secondaryAction && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ListItemSecondaryAction_default, {
          children: secondaryAction
        })]
      }))
    });
  });
  true ? ListItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types65.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    autoFocus: import_prop_types65.default.bool,
    /**
     * If `true`, the list item is a button (using `ButtonBase`). Props intended
     * for `ButtonBase` can then be applied to `ListItem`.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    button: import_prop_types65.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: chainPropTypes(import_prop_types65.default.node, (props) => {
      const children = React99.Children.toArray(props.children);
      let secondaryActionIndex = -1;
      for (let i = children.length - 1; i >= 0; i -= 1) {
        const child = children[i];
        if (isMuiElement_default(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types65.default.object,
    /**
     * @ignore
     */
    className: import_prop_types65.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types65.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types65.default.shape({
      Root: import_prop_types65.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types65.default.shape({
      root: import_prop_types65.default.object
    }),
    /**
     * The container component used when a `ListItemSecondaryAction` is the last child.
     * @default 'li'
     * @deprecated
     */
    ContainerComponent: elementTypeAcceptingRef_default,
    /**
     * Props applied to the container component if used.
     * @default {}
     * @deprecated
     */
    ContainerProps: import_prop_types65.default.object,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types65.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    disabled: import_prop_types65.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types65.default.bool,
    /**
     * If `true`, all padding is removed.
     * @default false
     */
    disablePadding: import_prop_types65.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types65.default.bool,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types65.default.string,
    /**
     * The element to display at the end of ListItem.
     */
    secondaryAction: import_prop_types65.default.node,
    /**
     * Use to apply selected styling.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    selected: import_prop_types65.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types65.default.shape({
      root: import_prop_types65.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types65.default.shape({
      root: import_prop_types65.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object])
  } : void 0;
  var ListItem_default = ListItem;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  init_extends();
  var React100 = __toESM(require_react());
  var import_prop_types66 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass("MuiListItemIcon", slot);
  }
  var listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var _excluded64 = ["className"];
  var useUtilityClasses38 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses(slots, getListItemIconUtilityClass, classes);
  };
  var ListItemIconRoot = styled_default2("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme2.vars || theme2).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemIcon = /* @__PURE__ */ React100.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
    const context = React100.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses38(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemIconRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: import_prop_types66.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types66.default.object,
    /**
     * @ignore
     */
    className: import_prop_types66.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  init_extends();
  var React101 = __toESM(require_react());
  var import_prop_types67 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass("MuiListItemText", slot);
  }
  var listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var _excluded65 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  var useUtilityClasses39 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return composeClasses(slots, getListItemTextUtilityClass, classes);
  };
  var ListItemTextRoot = styled_default2("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles5.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles5.secondary
      }, styles5.root, ownerState.inset && styles5.inset, ownerState.primary && ownerState.secondary && styles5.multiline, ownerState.dense && styles5.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  var ListItemText = /* @__PURE__ */ React101.forwardRef(function ListItemText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
    const {
      dense
    } = React101.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses39(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(ListItemTextRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  true ? ListItemText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Alias for the `primary` prop.
     */
    children: import_prop_types67.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types67.default.object,
    /**
     * @ignore
     */
    className: import_prop_types67.default.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types67.default.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: import_prop_types67.default.bool,
    /**
     * The main content element.
     */
    primary: import_prop_types67.default.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: import_prop_types67.default.object,
    /**
     * The secondary content element.
     */
    secondary: import_prop_types67.default.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: import_prop_types67.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types67.default.oneOfType([import_prop_types67.default.arrayOf(import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.object, import_prop_types67.default.bool])), import_prop_types67.default.func, import_prop_types67.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // node_modules/@mui/material/Menu/Menu.js
  init_extends();
  var React104 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is3());
  var import_prop_types70 = __toESM(require_prop_types());

  // node_modules/@mui/material/MenuList/MenuList.js
  init_extends();
  var React102 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is3());
  var import_prop_types68 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var _excluded66 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React102.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
    const listRef = React102.useRef(null);
    const textCriteriaRef = React102.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React102.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, {
        direction
      }) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React102.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React102.isValidElement(child)) {
        if (activeItemIndex === index) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React102.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React102.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types68.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types68.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types68.default.node,
    /**
     * @ignore
     */
    className: import_prop_types68.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types68.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types68.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types68.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types68.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Popover/Popover.js
  init_extends();
  var React103 = __toESM(require_react());
  var import_prop_types69 = __toESM(require_prop_types());

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var _excluded67 = ["onEntering"];
  var _excluded212 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"];
  var _excluded310 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses40 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default2(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var PopoverPaper = styled_default2(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles5) => styles5.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React103.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded67), other = _objectWithoutPropertiesLoose(props, _excluded212);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React103.useRef();
    const handlePaperRef = useForkRef_default(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses40(ownerState);
    const getAnchorOffset = React103.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React103.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React103.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React103.useState(open);
    const setPositioningStyles = React103.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React103.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React103.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React103.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React103.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps_default({
      elementType: PaperSlot,
      externalSlotProps: _extends({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx_default(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps_default({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded310);
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(RootSlot, _extends({}, rootProps, !isHostComponent_default(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(PaperSlot, _extends({}, paperProps, {
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType_default,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(import_prop_types69.default.oneOfType([HTMLElementType, import_prop_types69.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types69.default.shape({
      horizontal: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["center", "left", "right"]), import_prop_types69.default.number]).isRequired,
      vertical: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["bottom", "center", "top"]), import_prop_types69.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types69.default.shape({
      left: import_prop_types69.default.number.isRequired,
      top: import_prop_types69.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types69.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: import_prop_types69.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types69.default.object,
    /**
     * @ignore
     */
    className: import_prop_types69.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types69.default.oneOfType([HTMLElementType, import_prop_types69.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types69.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType_default,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types69.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types69.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types69.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types69.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types69.default.shape({
      paper: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object]),
      root: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types69.default.shape({
      paper: import_prop_types69.default.elementType,
      root: import_prop_types69.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types69.default.shape({
      horizontal: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["center", "left", "right"]), import_prop_types69.default.number]).isRequired,
      vertical: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["bottom", "center", "top"]), import_prop_types69.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types69.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["auto"]), import_prop_types69.default.number, import_prop_types69.default.shape({
      appear: import_prop_types69.default.number,
      enter: import_prop_types69.default.number,
      exit: import_prop_types69.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types69.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var _excluded68 = ["onEntering"];
  var _excluded213 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses41 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default2(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var MenuPaper = styled_default2(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles5) => styles5.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default2(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles5) => styles5.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu = /* @__PURE__ */ React104.forwardRef(function Menu2(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded68), other = _objectWithoutPropertiesLoose(props, _excluded213);
    const isRtl = useRtl();
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses41(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React104.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, {
          direction: isRtl ? "rtl" : "ltr"
        });
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React104.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React104.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps_default({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const paperSlotProps = useSlotProps_default({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes.paper
    });
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types70.default.oneOfType([HTMLElementType, import_prop_types70.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types70.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types70.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types70.default.object,
    /**
     * @ignore
     */
    className: import_prop_types70.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types70.default.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: import_prop_types70.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types70.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types70.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types70.default.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types70.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types70.default.shape({
      paper: import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object]),
      root: import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types70.default.shape({
      paper: import_prop_types70.default.elementType,
      root: import_prop_types70.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object, import_prop_types70.default.bool])), import_prop_types70.default.func, import_prop_types70.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types70.default.oneOfType([import_prop_types70.default.oneOf(["auto"]), import_prop_types70.default.number, import_prop_types70.default.shape({
      appear: import_prop_types70.default.number,
      enter: import_prop_types70.default.number,
      exit: import_prop_types70.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types70.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types70.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  init_extends();
  var React105 = __toESM(require_react());
  var import_prop_types71 = __toESM(require_prop_types());
  var import_colorManipulator12 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  var menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var _excluded69 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  var overridesResolver4 = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dense && styles5.dense, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters];
  };
  var useUtilityClasses42 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var MenuItemRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver4
  })(({
    theme: theme2,
    ownerState
  }) => _extends({}, theme2.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme2.vars || theme2).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator12.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator12.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator12.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator12.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme2.spacing(1),
      marginBottom: theme2.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme2.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    // https://m2.material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme2.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  var MenuItem = /* @__PURE__ */ React105.forwardRef(function MenuItem2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
    const context = React105.useContext(ListContext_default);
    const childContext = React105.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React105.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses42(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        className: clsx_default(classes.root, className)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  true ? MenuItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types71.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types71.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types71.default.object,
    /**
     * @ignore
     */
    className: import_prop_types71.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types71.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: import_prop_types71.default.bool,
    /**
     * @ignore
     */
    disabled: import_prop_types71.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types71.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: import_prop_types71.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types71.default.string,
    /**
     * @ignore
     */
    role: import_prop_types71.default.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: import_prop_types71.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types71.default.number
  } : void 0;
  var MenuItem_default = MenuItem;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  init_extends();
  var React106 = __toESM(require_react());
  var import_prop_types72 = __toESM(require_prop_types());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var _excluded70 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses43 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme: theme2
  }) => _extends({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends({}, theme2.vars ? {
      backgroundColor: `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme2.vars || theme2).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme2.vars || theme2).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme2.vars || theme2).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default2("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp_default,
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.select, styles5[ownerState.variant], ownerState.error && styles5.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles5.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme: theme2
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme2.vars || theme2).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default2("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.icon, ownerState.variant && styles5[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles5.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React106.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses43(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(React106.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime90.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types72.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types72.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types72.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types72.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types72.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types72.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType_default,
    /**
     * @ignore
     */
    multiple: import_prop_types72.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types72.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types72.default.func,
    /**
     * The input value.
     */
    value: import_prop_types72.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types72.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  init_extends();
  var React108 = __toESM(require_react());
  var import_prop_types74 = __toESM(require_prop_types());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  init_extends();
  var React107 = __toESM(require_react());
  var import_prop_types73 = __toESM(require_prop_types());
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var _span3;
  var _excluded71 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default2("fieldset", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default2("legend", {
    shouldForwardProp: rootShouldForwardProp_default
  })(({
    ownerState,
    theme: theme2
  }) => _extends({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme2.transitions.create("width", {
      duration: 150,
      easing: theme2.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme2.transitions.create("max-width", {
      duration: 50,
      easing: theme2.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme2.transitions.create("max-width", {
      duration: 100,
      easing: theme2.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types73.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types73.default.object,
    /**
     * @ignore
     */
    className: import_prop_types73.default.string,
    /**
     * The label.
     */
    label: import_prop_types73.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types73.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types73.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var _excluded72 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => {
    const borderColor3 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor3
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default2(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles5) => styles5.notchedOutline
  })(({
    theme: theme2
  }) => {
    const borderColor3 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor3
    };
  });
  var OutlinedInputInput = styled_default2(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme2.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
      caretColor: theme2.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme2.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme2.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React108.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
    const classes = useUtilityClasses44(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(React108.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types74.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types74.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types74.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["primary", "secondary"]), import_prop_types74.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types74.default.shape({
      Input: import_prop_types74.default.elementType,
      Root: import_prop_types74.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types74.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types74.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types74.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types74.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types74.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types74.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types74.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types74.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types74.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types74.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types74.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types74.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types74.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types74.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types74.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types74.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types74.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types74.default.shape({
      input: import_prop_types74.default.elementType,
      root: import_prop_types74.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types74.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types74.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types74.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/Select/Select.js
  init_extends();
  var React110 = __toESM(require_react());
  var import_prop_types76 = __toESM(require_prop_types());
  var import_deepmerge12 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/Select/SelectInput.js
  init_extends();
  var React109 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  var import_prop_types75 = __toESM(require_prop_types());

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var _span4;
  var _excluded73 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default2("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles5.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles5[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles5.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles5.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default2("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.icon, ownerState.variant && styles5[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles5.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default2("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles5) => styles5.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty3(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses45 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React109.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React109.useRef(null);
    const displayRef = React109.useRef(null);
    const [displayNode, setDisplayNode] = React109.useState(null);
    const {
      current: isOpenControlled
    } = React109.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React109.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React109.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React109.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React109.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React109.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React109.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React109.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React109.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : (0, import_formatMuiErrorMessage.default)(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React109.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React109.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values4 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values4.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses45(ownerState);
    const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    const listboxId = useId();
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(React109.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime95.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": listboxId,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty3(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span4 || (_span4 = /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        ) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true,
          id: listboxId
        }, MenuProps.MenuListProps),
        slotProps: _extends({}, MenuProps.slotProps, {
          paper: _extends({}, paperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types75.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types75.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types75.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types75.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types75.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types75.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types75.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types75.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types75.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types75.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types75.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types75.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types75.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType_default,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types75.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types75.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types75.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types75.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types75.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types75.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types75.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types75.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types75.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types75.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types75.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types75.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types75.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types75.default.any,
    /**
     * The input value.
     */
    value: import_prop_types75.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types75.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var _excluded74 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var _excluded214 = ["root"];
  var useUtilityClasses46 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles5) => styles5.root,
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default2(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default2(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default2(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React110.forwardRef(function Select2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses46(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded214);
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(React110.Fragment, {
      children: /* @__PURE__ */ React110.cloneElement(InputComponent, _extends({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? (0, import_deepmerge12.default)(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, (multiple && native || displayEmpty) && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes.root)
      }, !input && {
        variant
      }, other))
    });
  });
  true ? Select.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types76.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types76.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types76.default.object,
    /**
     * @ignore
     */
    className: import_prop_types76.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types76.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types76.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types76.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types76.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types76.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types76.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types76.default.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types76.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types76.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types76.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types76.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types76.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types76.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types76.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types76.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types76.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types76.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types76.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types76.default.oneOfType([import_prop_types76.default.arrayOf(import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object, import_prop_types76.default.bool])), import_prop_types76.default.func, import_prop_types76.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types76.default.oneOfType([import_prop_types76.default.oneOf([""]), import_prop_types76.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types76.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/Slider/Slider.js
  init_extends();
  var React113 = __toESM(require_react());
  var import_prop_types78 = __toESM(require_prop_types());
  var import_colorManipulator13 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Slider/useSlider.js
  init_extends();
  var React111 = __toESM(require_react());

  // node_modules/@mui/material/utils/areArraysEqual.js
  function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
    return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
  }
  var areArraysEqual_default = areArraysEqual;

  // node_modules/@mui/material/Slider/useSlider.js
  var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function asc(a, b) {
    return a - b;
  }
  function findClosest(values4, currentValue) {
    var _values$reduce;
    const {
      index: closestIndex
    } = (_values$reduce = values4.reduce((acc, value, index) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index
        };
      }
      return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
        const touch = touchEvent.changedTouches[i];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min2, max2) {
    return (value - min2) * 100 / (max2 - min2);
  }
  function percentToValue(percent, min2, max2) {
    return (max2 - min2) * percent + min2;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min2) {
    const nearest = Math.round((value - min2) / step) * step + min2;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values4,
    newValue,
    index
  }) {
    const output = values4.slice();
    output[index] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = ownerDocument(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
      var _sliderRef$current2;
      (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  function areValuesEqual(newValue, oldValue) {
    if (typeof newValue === "number" && typeof oldValue === "number") {
      return newValue === oldValue;
    }
    if (typeof newValue === "object" && typeof oldValue === "object") {
      return areArraysEqual_default(newValue, oldValue);
    }
    return false;
  }
  var axisProps = {
    horizontal: {
      offset: (percent) => ({
        left: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent) => ({
        right: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: (percent) => ({
        bottom: `${percent}%`
      }),
      leap: (percent) => ({
        height: `${percent}%`
      })
    }
  };
  var Identity = (x) => x;
  var cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      rootRef: ref,
      scale = Identity,
      step = 1,
      shiftStep = 10,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React111.useRef();
    const [active, setActive] = React111.useState(-1);
    const [open, setOpen] = React111.useState(-1);
    const [dragging, setDragging] = React111.useState(false);
    const moveCount = React111.useRef(0);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min2,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values4 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values4 = values4.map((value) => value == null ? min2 : clamp_default(value, min2, max2));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_2, index) => ({
      value: min2 + step * index
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusedThumbIndex, setFocusedThumbIndex] = React111.useState(-1);
    const sliderRef = React111.useRef();
    const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
    const handleRef = useForkRef(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      const index = Number(event.currentTarget.getAttribute("data-index"));
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusedThumbIndex(index);
      }
      setOpen(index);
      otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    const changeValue = (event, valueInput) => {
      const index = Number(event.currentTarget.getAttribute("data-index"));
      const value = values4[index];
      const marksIndex = marksValues.indexOf(value);
      let newValue = valueInput;
      if (marks && step == null) {
        const maxMarksValue = marksValues[marksValues.length - 1];
        if (newValue > maxMarksValue) {
          newValue = maxMarksValue;
        } else if (newValue < marksValues[0]) {
          newValue = marksValues[0];
        } else {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
      }
      newValue = clamp_default(newValue, min2, max2);
      if (range) {
        if (disableSwap) {
          newValue = clamp_default(newValue, values4[index - 1] || -Infinity, values4[index + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values4,
          newValue,
          index
        });
        let activeIndex = index;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, index);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };
    const createHandleHiddenInputKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      if (step !== null) {
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value = values4[index];
        let newValue = null;
        if ((event.key === "ArrowLeft" || event.key === "ArrowDown") && event.shiftKey || event.key === "PageDown") {
          newValue = Math.max(value - shiftStep, min2);
        } else if ((event.key === "ArrowRight" || event.key === "ArrowUp") && event.shiftKey || event.key === "PageUp") {
          newValue = Math.min(value + shiftStep, max2);
        }
        if (newValue !== null) {
          changeValue(event, newValue);
          event.preventDefault();
        }
      }
      otherHandlers == null || (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    };
    useEnhancedEffect_default(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        var _document$activeEleme;
        (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      var _otherHandlers$onChan;
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
      changeValue(event, event.target.valueAsNumber);
    };
    const previousIndex = React111.useRef();
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width: width3,
        height: height3,
        bottom: bottom2,
        left: left2
      } = slider.getBoundingClientRect();
      let percent;
      if (axis.indexOf("vertical") === 0) {
        percent = (bottom2 - finger.y) / height3;
      } else {
        percent = (finger.x - left2) / width3;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent = 1 - percent;
      }
      let newValue;
      newValue = percentToValue(percent, min2, max2);
      if (step) {
        newValue = roundValueToStep(newValue, step, min2);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp_default(newValue, min2, max2);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values4, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp_default(newValue, values4[activeIndex - 1] || -Infinity, values4[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values4,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = useEventCallback_default((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = useEventCallback_default((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = useEventCallback_default((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("touchend", handleTouchEnd, {
        passive: true
      });
    });
    const stopListening = React111.useCallback(() => {
      const doc = ownerDocument(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React111.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart);
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React111.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent(range ? values4[0] : min2, min2, max2);
    const trackLeap = valueToPercent(values4[values4.length - 1], min2, max2) - trackOffset;
    const getRootProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({}, externalProps, {
        ref: handleRef
      }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
      const index = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous3;
      (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
      setOpen(-1);
    };
    const getThumbProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(externalHandlers || {}),
        onMouseLeave: createHandleMouseLeave(externalHandlers || {})
      };
      return _extends({}, externalProps, externalHandlers, ownEventHandlers);
    };
    const getThumbStyle = (index) => {
      return {
        // So the non active thumb doesn't show its label on hover.
        pointerEvents: active !== -1 && active !== index ? "none" : void 0
      };
    };
    const getHiddenInputProps = (externalProps = {}) => {
      var _parameters$step;
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(externalHandlers || {}),
        onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
        onBlur: createHandleHiddenInputBlur(externalHandlers || {}),
        onKeyDown: createHandleHiddenInputKeyDown(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max2),
        "aria-valuemin": scale(min2),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: parameters.step === null && parameters.marks ? "any" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
        disabled
      }, externalProps, mergedEventHandlers, {
        style: _extends({}, visuallyHidden_default, {
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      rootRef: handleRef,
      trackLeap,
      trackOffset,
      values: values4,
      getThumbStyle
    };
  }

  // node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent_default(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var React112 = __toESM(require_react());
  var import_prop_types77 = __toESM(require_prop_types());

  // node_modules/@mui/material/Slider/sliderClasses.js
  function getSliderUtilityClass(slot) {
    return generateUtilityClass("MuiSlider", slot);
  }
  var sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
  var sliderClasses_default = sliderClasses;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var useValueLabelClasses = (props) => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx_default(open && sliderClasses_default.valueLabelOpen),
      circle: sliderClasses_default.valueLabelCircle,
      label: sliderClasses_default.valueLabelLabel
    };
    return utilityClasses;
  };
  function SliderValueLabel(props) {
    const {
      children,
      className,
      value
    } = props;
    const classes = useValueLabelClasses(props);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ React112.cloneElement(children, {
      className: clsx_default(children.props.className)
    }, /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(React112.Fragment, {
      children: [children.props.children, /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("span", {
        className: clsx_default(classes.offset, className),
        "aria-hidden": true,
        children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("span", {
          className: classes.circle,
          children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("span", {
            className: classes.label,
            children: value
          })
        })
      })]
    }));
  }
  true ? SliderValueLabel.propTypes = {
    children: import_prop_types77.default.element.isRequired,
    className: import_prop_types77.default.string,
    value: import_prop_types77.default.node
  } : void 0;

  // node_modules/@mui/material/Slider/Slider.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var _excluded75 = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "shiftStep", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
  function Identity2(x) {
    return x;
  }
  var SliderRoot = styled_default2("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles5.marked, ownerState.orientation === "vertical" && styles5.vertical, ownerState.track === "inverted" && styles5.trackInverted, ownerState.track === false && styles5.trackFalse];
    }
  })(({
    theme: theme2
  }) => {
    var _theme$vars;
    return {
      borderRadius: 12,
      boxSizing: "content-box",
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      touchAction: "none",
      WebkitTapHighlightColor: "transparent",
      "@media print": {
        colorAdjust: "exact"
      },
      [`&.${sliderClasses_default.disabled}`]: {
        pointerEvents: "none",
        cursor: "default",
        color: (theme2.vars || theme2).palette.grey[400]
      },
      [`&.${sliderClasses_default.dragging}`]: {
        [`& .${sliderClasses_default.thumb}, & .${sliderClasses_default.track}`]: {
          transition: "none"
        }
      },
      variants: [...Object.keys(((_theme$vars = theme2.vars) != null ? _theme$vars : theme2).palette).filter((key) => {
        var _theme$vars2;
        return ((_theme$vars2 = theme2.vars) != null ? _theme$vars2 : theme2).palette[key].main;
      }).map((color3) => ({
        props: {
          color: color3
        },
        style: {
          color: (theme2.vars || theme2).palette[color3].main
        }
      })), {
        props: {
          orientation: "horizontal"
        },
        style: {
          height: 4,
          width: "100%",
          padding: "13px 0",
          // The primary input mechanism of the device includes a pointing device of limited accuracy.
          "@media (pointer: coarse)": {
            // Reach 42px touch target, about ~8mm on screen.
            padding: "20px 0"
          }
        }
      }, {
        props: {
          orientation: "horizontal",
          size: "small"
        },
        style: {
          height: 2
        }
      }, {
        props: {
          orientation: "horizontal",
          marked: true
        },
        style: {
          marginBottom: 20
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          height: "100%",
          width: 4,
          padding: "0 13px",
          // The primary input mechanism of the device includes a pointing device of limited accuracy.
          "@media (pointer: coarse)": {
            // Reach 42px touch target, about ~8mm on screen.
            padding: "0 20px"
          }
        }
      }, {
        props: {
          orientation: "vertical",
          size: "small"
        },
        style: {
          width: 2
        }
      }, {
        props: {
          orientation: "vertical",
          marked: true
        },
        style: {
          marginRight: 44
        }
      }]
    };
  });
  var SliderRail = styled_default2("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props, styles5) => styles5.rail
  })({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38,
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        width: "100%",
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        height: "100%",
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }
    }, {
      props: {
        track: "inverted"
      },
      style: {
        opacity: 1
      }
    }]
  });
  var SliderTrack = styled_default2("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props, styles5) => styles5.track
  })(({
    theme: theme2
  }) => {
    var _theme$vars3;
    return {
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme2.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme2.transitions.duration.shortest
      }),
      variants: [{
        props: {
          size: "small"
        },
        style: {
          border: "none"
        }
      }, {
        props: {
          orientation: "horizontal"
        },
        style: {
          height: "inherit",
          top: "50%",
          transform: "translateY(-50%)"
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          width: "inherit",
          left: "50%",
          transform: "translateX(-50%)"
        }
      }, {
        props: {
          track: false
        },
        style: {
          display: "none"
        }
      }, ...Object.keys(((_theme$vars3 = theme2.vars) != null ? _theme$vars3 : theme2).palette).filter((key) => {
        var _theme$vars4;
        return ((_theme$vars4 = theme2.vars) != null ? _theme$vars4 : theme2).palette[key].main;
      }).map((color3) => ({
        props: {
          color: color3,
          track: "inverted"
        },
        style: _extends({}, theme2.vars ? {
          backgroundColor: theme2.vars.palette.Slider[`${color3}Track`],
          borderColor: theme2.vars.palette.Slider[`${color3}Track`]
        } : _extends({
          backgroundColor: (0, import_colorManipulator13.lighten)(theme2.palette[color3].main, 0.62),
          borderColor: (0, import_colorManipulator13.lighten)(theme2.palette[color3].main, 0.62)
        }, theme2.applyStyles("dark", {
          backgroundColor: (0, import_colorManipulator13.darken)(theme2.palette[color3].main, 0.5)
        }), theme2.applyStyles("dark", {
          borderColor: (0, import_colorManipulator13.darken)(theme2.palette[color3].main, 0.5)
        })))
      }))]
    };
  });
  var SliderThumb = styled_default2("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.thumb, styles5[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`thumbSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2
  }) => {
    var _theme$vars5;
    return {
      position: "absolute",
      width: 20,
      height: 20,
      boxSizing: "border-box",
      borderRadius: "50%",
      outline: 0,
      backgroundColor: "currentColor",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: theme2.transitions.create(["box-shadow", "left", "bottom"], {
        duration: theme2.transitions.duration.shortest
      }),
      "&::before": {
        position: "absolute",
        content: '""',
        borderRadius: "inherit",
        width: "100%",
        height: "100%",
        boxShadow: (theme2.vars || theme2).shadows[2]
      },
      "&::after": {
        position: "absolute",
        content: '""',
        borderRadius: "50%",
        // 42px is the hit target
        width: 42,
        height: 42,
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      },
      [`&.${sliderClasses_default.disabled}`]: {
        "&:hover": {
          boxShadow: "none"
        }
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          width: 12,
          height: 12,
          "&::before": {
            boxShadow: "none"
          }
        }
      }, {
        props: {
          orientation: "horizontal"
        },
        style: {
          top: "50%",
          transform: "translate(-50%, -50%)"
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          left: "50%",
          transform: "translate(-50%, 50%)"
        }
      }, ...Object.keys(((_theme$vars5 = theme2.vars) != null ? _theme$vars5 : theme2).palette).filter((key) => {
        var _theme$vars6;
        return ((_theme$vars6 = theme2.vars) != null ? _theme$vars6 : theme2).palette[key].main;
      }).map((color3) => ({
        props: {
          color: color3
        },
        style: {
          [`&:hover, &.${sliderClasses_default.focusVisible}`]: _extends({}, theme2.vars ? {
            boxShadow: `0px 0px 0px 8px rgba(${theme2.vars.palette[color3].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 8px ${(0, import_colorManipulator13.alpha)(theme2.palette[color3].main, 0.16)}`
          }, {
            "@media (hover: none)": {
              boxShadow: "none"
            }
          }),
          [`&.${sliderClasses_default.active}`]: _extends({}, theme2.vars ? {
            boxShadow: `0px 0px 0px 14px rgba(${theme2.vars.palette[color3].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 14px ${(0, import_colorManipulator13.alpha)(theme2.palette[color3].main, 0.16)}`
          })
        }
      }))]
    };
  });
  var SliderValueLabel2 = styled_default2(SliderValueLabel, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props, styles5) => styles5.valueLabel
  })(({
    theme: theme2
  }) => _extends({
    zIndex: 1,
    whiteSpace: "nowrap"
  }, theme2.typography.body2, {
    fontWeight: 500,
    transition: theme2.transitions.create(["transform"], {
      duration: theme2.transitions.duration.shortest
    }),
    position: "absolute",
    backgroundColor: (theme2.vars || theme2).palette.grey[600],
    borderRadius: 2,
    color: (theme2.vars || theme2).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        transform: "translateY(-100%) scale(0)",
        top: "-10px",
        transformOrigin: "bottom center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, 50%) rotate(45deg)",
          backgroundColor: "inherit",
          bottom: 0,
          left: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-100%) scale(1)"
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        transform: "translateY(-50%) scale(0)",
        right: "30px",
        top: "50%",
        transformOrigin: "right center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, -50%) rotate(45deg)",
          backgroundColor: "inherit",
          right: -8,
          top: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-50%) scale(1)"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        fontSize: theme2.typography.pxToRem(12),
        padding: "0.25rem 0.5rem"
      }
    }, {
      props: {
        orientation: "vertical",
        size: "small"
      },
      style: {
        right: "20px"
      }
    }]
  }));
  var SliderMark = styled_default2("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markActive",
    overridesResolver: (props, styles5) => {
      const {
        markActive
      } = props;
      return [styles5.mark, markActive && styles5.markActive];
    }
  })(({
    theme: theme2
  }) => ({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: "50%",
        transform: "translate(-1px, -50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: "50%",
        transform: "translate(-50%, 1px)"
      }
    }, {
      props: {
        markActive: true
      },
      style: {
        backgroundColor: (theme2.vars || theme2).palette.background.paper,
        opacity: 0.8
      }
    }]
  }));
  var SliderMarkLabel = styled_default2("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markLabelActive",
    overridesResolver: (props, styles5) => styles5.markLabel
  })(({
    theme: theme2
  }) => _extends({}, theme2.typography.body2, {
    color: (theme2.vars || theme2).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: 30,
        transform: "translateX(-50%)",
        "@media (pointer: coarse)": {
          top: 40
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: 36,
        transform: "translateY(50%)",
        "@media (pointer: coarse)": {
          left: 44
        }
      }
    }, {
      props: {
        markLabelActive: true
      },
      style: {
        color: (theme2.vars || theme2).palette.text.primary
      }
    }]
  }));
  var useUtilityClasses47 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes,
      color: color3,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color3 && `color${capitalize_default(color3)}`, size && `size${capitalize_default(size)}`],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize_default(size)}`, color3 && `thumbColor${capitalize_default(color3)}`],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return composeClasses(slots, getSliderUtilityClass, classes);
  };
  var Forward = ({
    children
  }) => children;
  var Slider = /* @__PURE__ */ React113.forwardRef(function Slider2(inputProps, ref) {
    var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
    const props = useDefaultProps2({
      props: inputProps,
      name: "MuiSlider"
    });
    const isRtl = useRtl();
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      // eslint-disable-next-line react/prop-types
      component = "span",
      components = {},
      componentsProps = {},
      color: color3 = "primary",
      classes: classesProp,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      orientation = "horizontal",
      shiftStep = 10,
      size = "medium",
      step = 1,
      scale = Identity2,
      slotProps,
      slots,
      track = "normal",
      valueLabelDisplay = "off",
      valueLabelFormat = Identity2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
    const ownerState = _extends({}, props, {
      isRtl,
      max: max2,
      min: min2,
      classes: classesProp,
      disabled,
      disableSwap,
      orientation,
      marks: marksProp,
      color: color3,
      size,
      step,
      shiftStep,
      scale,
      track,
      valueLabelDisplay,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      open,
      active,
      axis,
      focusedThumbIndex,
      range,
      dragging,
      marks,
      values: values4,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider(_extends({}, ownerState, {
      rootRef: ref
    }));
    ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
    ownerState.dragging = dragging;
    ownerState.focusedThumbIndex = focusedThumbIndex;
    const classes = useUtilityClasses47(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
    const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
    const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
    const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
    const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel2;
    const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
    const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
    const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
    const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
    const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
    const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
    const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
    const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
    const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
    const rootProps = useSlotProps_default({
      elementType: RootSlot,
      getSlotProps: getRootProps,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: _extends({}, shouldSpreadAdditionalProps_default(RootSlot) && {
        as: component
      }),
      ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      className: [classes.root, className]
    });
    const railProps = useSlotProps_default({
      elementType: RailSlot,
      externalSlotProps: railSlotProps,
      ownerState,
      className: classes.rail
    });
    const trackProps = useSlotProps_default({
      elementType: TrackSlot,
      externalSlotProps: trackSlotProps,
      additionalProps: {
        style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState: _extends({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
      className: classes.track
    });
    const thumbProps = useSlotProps_default({
      elementType: ThumbSlot,
      getSlotProps: getThumbProps,
      externalSlotProps: thumbSlotProps,
      ownerState: _extends({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
      className: classes.thumb
    });
    const valueLabelProps = useSlotProps_default({
      elementType: ValueLabelSlot,
      externalSlotProps: valueLabelSlotProps,
      ownerState: _extends({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
      className: classes.valueLabel
    });
    const markProps = useSlotProps_default({
      elementType: MarkSlot,
      externalSlotProps: markSlotProps,
      ownerState,
      className: classes.mark
    });
    const markLabelProps = useSlotProps_default({
      elementType: MarkLabelSlot,
      externalSlotProps: markLabelSlotProps,
      ownerState,
      className: classes.markLabel
    });
    const inputSliderProps = useSlotProps_default({
      elementType: InputSlot,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: inputSlotProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime100.jsx)(RailSlot, _extends({}, railProps)), /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TrackSlot, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index) => {
        const percent = valueToPercent(mark.value, min2, max2);
        const style6 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values4.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values4[0] && mark.value <= values4[values4.length - 1] : mark.value <= values4[0]) || track === "inverted" && (range ? mark.value <= values4[0] || mark.value >= values4[values4.length - 1] : mark.value >= values4[0]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(React113.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime100.jsx)(MarkSlot, _extends({
            "data-index": index
          }, markProps, !isHostComponent_default(MarkSlot) && {
            markActive
          }, {
            style: _extends({}, style6, markProps.style),
            className: clsx_default(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(MarkLabelSlot, _extends({
            "aria-hidden": true,
            "data-index": index
          }, markLabelProps, !isHostComponent_default(MarkLabelSlot) && {
            markLabelActive: markActive
          }, {
            style: _extends({}, style6, markLabelProps.style),
            className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index);
      }), values4.map((value, index) => {
        const percent = valueToPercent(value, min2, max2);
        const style6 = axisProps2[axis].offset(percent);
        const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
        return (
          /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
          /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(ValueLabelComponent, _extends({}, !isHostComponent_default(ValueLabelComponent) && {
            valueLabelFormat,
            valueLabelDisplay,
            value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
            index,
            open: open === index || active === index || valueLabelDisplay === "on",
            disabled
          }, valueLabelProps, {
            children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(ThumbSlot, _extends({
              "data-index": index
            }, thumbProps, {
              className: clsx_default(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
              style: _extends({}, style6, getThumbStyle(index), thumbProps.style),
              children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(InputSlot, _extends({
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                value: values4[index]
              }, inputSliderProps))
            }))
          }), index)
        );
      })]
    }));
  });
  true ? Slider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The label of the slider.
     */
    "aria-label": chainPropTypes(import_prop_types78.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": import_prop_types78.default.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": chainPropTypes(import_prop_types78.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: import_prop_types78.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types78.default.object,
    /**
     * @ignore
     */
    className: import_prop_types78.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types78.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    components: import_prop_types78.default.shape({
      Input: import_prop_types78.default.elementType,
      Mark: import_prop_types78.default.elementType,
      MarkLabel: import_prop_types78.default.elementType,
      Rail: import_prop_types78.default.elementType,
      Root: import_prop_types78.default.elementType,
      Thumb: import_prop_types78.default.elementType,
      Track: import_prop_types78.default.elementType,
      ValueLabel: import_prop_types78.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    componentsProps: import_prop_types78.default.shape({
      input: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      mark: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      markLabel: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      rail: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      root: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      thumb: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      track: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      valueLabel: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.shape({
        children: import_prop_types78.default.element,
        className: import_prop_types78.default.string,
        open: import_prop_types78.default.bool,
        style: import_prop_types78.default.object,
        value: import_prop_types78.default.number,
        valueLabelDisplay: import_prop_types78.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.number), import_prop_types78.default.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types78.default.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: import_prop_types78.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: import_prop_types78.default.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: import_prop_types78.default.func,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.shape({
      label: import_prop_types78.default.node,
      value: import_prop_types78.default.number.isRequired
    })), import_prop_types78.default.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: import_prop_types78.default.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: import_prop_types78.default.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: import_prop_types78.default.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: import_prop_types78.default.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: import_prop_types78.default.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types78.default.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: import_prop_types78.default.func,
    /**
     * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
     * @default 10
     */
    shiftStep: import_prop_types78.default.number,
    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["small", "medium"]), import_prop_types78.default.string]),
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: import_prop_types78.default.shape({
      input: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      mark: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      markLabel: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      rail: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      root: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      thumb: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      track: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      valueLabel: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.shape({
        children: import_prop_types78.default.element,
        className: import_prop_types78.default.string,
        open: import_prop_types78.default.bool,
        style: import_prop_types78.default.object,
        value: import_prop_types78.default.number,
        valueLabelDisplay: import_prop_types78.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types78.default.shape({
      input: import_prop_types78.default.elementType,
      mark: import_prop_types78.default.elementType,
      markLabel: import_prop_types78.default.elementType,
      rail: import_prop_types78.default.elementType,
      root: import_prop_types78.default.elementType,
      thumb: import_prop_types78.default.elementType,
      track: import_prop_types78.default.elementType,
      valueLabel: import_prop_types78.default.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: import_prop_types78.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object]),
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: import_prop_types78.default.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: import_prop_types78.default.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.number), import_prop_types78.default.number]),
    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: import_prop_types78.default.oneOf(["auto", "off", "on"]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.string])
  } : void 0;
  var Slider_default = Slider;

  // node_modules/@mui/material/Snackbar/Snackbar.js
  init_extends();
  var React116 = __toESM(require_react());
  var import_prop_types80 = __toESM(require_prop_types());

  // node_modules/@mui/material/Snackbar/useSnackbar.js
  init_extends();
  var React114 = __toESM(require_react());
  function useSnackbar(parameters = {}) {
    const {
      autoHideDuration = null,
      disableWindowBlurListener = false,
      onClose,
      open,
      resumeHideDuration
    } = parameters;
    const timerAutoHide = useTimeout();
    React114.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (!nativeEvent.defaultPrevented) {
          if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
            onClose == null || onClose(nativeEvent, "escapeKeyDown");
          }
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [open, onClose]);
    const handleClose = useEventCallback_default((event, reason) => {
      onClose == null || onClose(event, reason);
    });
    const setAutoHideTimer = useEventCallback_default((autoHideDurationParam) => {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      timerAutoHide.start(autoHideDurationParam, () => {
        handleClose(null, "timeout");
      });
    });
    React114.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return timerAutoHide.clear;
    }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);
    const handleClickAway = (event) => {
      onClose == null || onClose(event, "clickaway");
    };
    const handlePause = timerAutoHide.clear;
    const handleResume = React114.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    const createHandleBlur = (otherHandlers) => (event) => {
      const onBlurCallback = otherHandlers.onBlur;
      onBlurCallback == null || onBlurCallback(event);
      handleResume();
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      const onFocusCallback = otherHandlers.onFocus;
      onFocusCallback == null || onFocusCallback(event);
      handlePause();
    };
    const createMouseEnter = (otherHandlers) => (event) => {
      const onMouseEnterCallback = otherHandlers.onMouseEnter;
      onMouseEnterCallback == null || onMouseEnterCallback(event);
      handlePause();
    };
    const createMouseLeave = (otherHandlers) => (event) => {
      const onMouseLeaveCallback = otherHandlers.onMouseLeave;
      onMouseLeaveCallback == null || onMouseLeaveCallback(event);
      handleResume();
    };
    React114.useEffect(() => {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return () => {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, open, handleResume, handlePause]);
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers_default(parameters), extractEventHandlers_default(externalProps));
      return _extends({
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, externalProps, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onMouseEnter: createMouseEnter(externalEventHandlers),
        onMouseLeave: createMouseLeave(externalEventHandlers)
      });
    };
    return {
      getRootProps,
      onClickAway: handleClickAway
    };
  }
  var useSnackbar_default = useSnackbar;

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  init_extends();
  var React115 = __toESM(require_react());
  var import_prop_types79 = __toESM(require_prop_types());
  var import_colorManipulator14 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
  function getSnackbarContentUtilityClass(slot) {
    return generateUtilityClass("MuiSnackbarContent", slot);
  }
  var snackbarContentClasses = generateUtilityClasses("MuiSnackbarContent", ["root", "message", "action"]);

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var _excluded76 = ["action", "className", "message", "role"];
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      action: ["action"],
      message: ["message"]
    };
    return composeClasses(slots, getSnackbarContentUtilityClass, classes);
  };
  var SnackbarContentRoot = styled_default2(Paper_default, {
    name: "MuiSnackbarContent",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => {
    const emphasis = theme2.palette.mode === "light" ? 0.8 : 0.98;
    const backgroundColor3 = (0, import_colorManipulator14.emphasize)(theme2.palette.background.default, emphasis);
    return _extends({}, theme2.typography.body2, {
      color: theme2.vars ? theme2.vars.palette.SnackbarContent.color : theme2.palette.getContrastText(backgroundColor3),
      backgroundColor: theme2.vars ? theme2.vars.palette.SnackbarContent.bg : backgroundColor3,
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap",
      padding: "6px 16px",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      flexGrow: 1,
      [theme2.breakpoints.up("sm")]: {
        flexGrow: "initial",
        minWidth: 288
      }
    });
  });
  var SnackbarContentMessage = styled_default2("div", {
    name: "MuiSnackbarContent",
    slot: "Message",
    overridesResolver: (props, styles5) => styles5.message
  })({
    padding: "8px 0"
  });
  var SnackbarContentAction = styled_default2("div", {
    name: "MuiSnackbarContent",
    slot: "Action",
    overridesResolver: (props, styles5) => styles5.action
  })({
    display: "flex",
    alignItems: "center",
    marginLeft: "auto",
    paddingLeft: 16,
    marginRight: -8
  });
  var SnackbarContent = /* @__PURE__ */ React115.forwardRef(function SnackbarContent2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSnackbarContent"
    });
    const {
      action,
      className,
      message,
      role = "alert"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
    const ownerState = props;
    const classes = useUtilityClasses48(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(SnackbarContentRoot, _extends({
      role,
      square: true,
      elevation: 6,
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime102.jsx)(SnackbarContentMessage, {
        className: classes.message,
        ownerState,
        children: message
      }), action ? /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(SnackbarContentAction, {
        className: classes.action,
        ownerState,
        children: action
      }) : null]
    }));
  });
  true ? SnackbarContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types79.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types79.default.object,
    /**
     * @ignore
     */
    className: import_prop_types79.default.string,
    /**
     * The message to display.
     */
    message: import_prop_types79.default.node,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types79.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types79.default.oneOfType([import_prop_types79.default.arrayOf(import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object, import_prop_types79.default.bool])), import_prop_types79.default.func, import_prop_types79.default.object])
  } : void 0;
  var SnackbarContent_default = SnackbarContent;

  // node_modules/@mui/material/Snackbar/snackbarClasses.js
  function getSnackbarUtilityClass(slot) {
    return generateUtilityClass("MuiSnackbar", slot);
  }
  var snackbarClasses = generateUtilityClasses("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);

  // node_modules/@mui/material/Snackbar/Snackbar.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var _excluded77 = ["onEnter", "onExited"];
  var _excluded215 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var useUtilityClasses49 = (ownerState) => {
    const {
      classes,
      anchorOrigin
    } = ownerState;
    const slots = {
      root: ["root", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`]
    };
    return composeClasses(slots, getSnackbarUtilityClass, classes);
  };
  var SnackbarRoot = styled_default2("div", {
    name: "MuiSnackbar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const center = {
      left: "50%",
      right: "auto",
      transform: "translateX(-50%)"
    };
    return _extends({
      zIndex: (theme2.vars || theme2).zIndex.snackbar,
      position: "fixed",
      display: "flex",
      left: 8,
      right: 8,
      justifyContent: "center",
      alignItems: "center"
    }, ownerState.anchorOrigin.vertical === "top" ? {
      top: 8
    } : {
      bottom: 8
    }, ownerState.anchorOrigin.horizontal === "left" && {
      justifyContent: "flex-start"
    }, ownerState.anchorOrigin.horizontal === "right" && {
      justifyContent: "flex-end"
    }, {
      [theme2.breakpoints.up("sm")]: _extends({}, ownerState.anchorOrigin.vertical === "top" ? {
        top: 24
      } : {
        bottom: 24
      }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && {
        left: 24,
        right: "auto"
      }, ownerState.anchorOrigin.horizontal === "right" && {
        right: 24,
        left: "auto"
      })
    });
  });
  var Snackbar = /* @__PURE__ */ React116.forwardRef(function Snackbar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSnackbar"
    });
    const theme2 = useTheme6();
    const defaultTransitionDuration = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      action,
      anchorOrigin: {
        vertical,
        horizontal
      } = {
        vertical: "bottom",
        horizontal: "left"
      },
      autoHideDuration = null,
      children,
      className,
      ClickAwayListenerProps,
      ContentProps,
      disableWindowBlurListener = false,
      message,
      open,
      TransitionComponent = Grow_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps: {
        onEnter,
        onExited
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded77), other = _objectWithoutPropertiesLoose(props, _excluded215);
    const ownerState = _extends({}, props, {
      anchorOrigin: {
        vertical,
        horizontal
      },
      autoHideDuration,
      disableWindowBlurListener,
      TransitionComponent,
      transitionDuration
    });
    const classes = useUtilityClasses49(ownerState);
    const {
      getRootProps,
      onClickAway
    } = useSnackbar_default(_extends({}, ownerState));
    const [exited, setExited] = React116.useState(true);
    const rootProps = useSlotProps_default({
      elementType: SnackbarRoot,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      ownerState,
      additionalProps: {
        ref
      },
      className: [classes.root, className]
    });
    const handleExited = (node2) => {
      setExited(true);
      if (onExited) {
        onExited(node2);
      }
    };
    const handleEnter = (node2, isAppearing) => {
      setExited(false);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    };
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(ClickAwayListener, _extends({
      onClickAway
    }, ClickAwayListenerProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(SnackbarRoot, _extends({}, rootProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          direction: vertical === "top" ? "down" : "up",
          onEnter: handleEnter,
          onExited: handleExited
        }, TransitionProps, {
          children: children || /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(SnackbarContent_default, _extends({
            message,
            action
          }, ContentProps))
        }))
      }))
    }));
  });
  true ? Snackbar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types80.default.node,
    /**
     * The anchor of the `Snackbar`.
     * On smaller screens, the component grows to occupy all the available width,
     * the horizontal alignment is ignored.
     * @default { vertical: 'bottom', horizontal: 'left' }
     */
    anchorOrigin: import_prop_types80.default.shape({
      horizontal: import_prop_types80.default.oneOf(["center", "left", "right"]).isRequired,
      vertical: import_prop_types80.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: import_prop_types80.default.number,
    /**
     * Replace the `SnackbarContent` component.
     */
    children: import_prop_types80.default.element,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types80.default.object,
    /**
     * @ignore
     */
    className: import_prop_types80.default.string,
    /**
     * Props applied to the `ClickAwayListener` element.
     */
    ClickAwayListenerProps: import_prop_types80.default.object,
    /**
     * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.
     */
    ContentProps: import_prop_types80.default.object,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: import_prop_types80.default.bool,
    /**
     * When displaying multiple consecutive snackbars using a single parent-rendered
     * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
     * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
     * in place, and features like `autoHideDuration` could be affected.
     */
    key: () => null,
    /**
     * The message to display.
     */
    message: import_prop_types80.default.node,
    /**
     * @ignore
     */
    onBlur: import_prop_types80.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: import_prop_types80.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types80.default.func,
    /**
     * @ignore
     */
    onMouseEnter: import_prop_types80.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types80.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types80.default.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: import_prop_types80.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object, import_prop_types80.default.bool])), import_prop_types80.default.func, import_prop_types80.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types80.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.shape({
      appear: import_prop_types80.default.number,
      enter: import_prop_types80.default.number,
      exit: import_prop_types80.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types80.default.object
  } : void 0;
  var Snackbar_default = Snackbar;

  // node_modules/@mui/material/Tab/Tab.js
  init_extends();
  var React117 = __toESM(require_react());
  var import_prop_types81 = __toESM(require_prop_types());

  // node_modules/@mui/material/Tab/tabClasses.js
  function getTabUtilityClass(slot) {
    return generateUtilityClass("MuiTab", slot);
  }
  var tabClasses = generateUtilityClasses("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
  var tabClasses_default = tabClasses;

  // node_modules/@mui/material/Tab/Tab.js
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var _excluded78 = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
  var useUtilityClasses50 = (ownerState) => {
    const {
      classes,
      textColor,
      fullWidth,
      wrapped,
      icon,
      label,
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", icon && label && "labelIcon", `textColor${capitalize_default(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
      iconWrapper: ["iconWrapper"]
    };
    return composeClasses(slots, getTabUtilityClass, classes);
  };
  var TabRoot = styled_default2(ButtonBase_default, {
    name: "MuiTab",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.label && ownerState.icon && styles5.labelIcon, styles5[`textColor${capitalize_default(ownerState.textColor)}`], ownerState.fullWidth && styles5.fullWidth, ownerState.wrapped && styles5.wrapped, {
        [`& .${tabClasses_default.iconWrapper}`]: styles5.iconWrapper
      }];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({}, theme2.typography.button, {
    maxWidth: 360,
    minWidth: 90,
    position: "relative",
    minHeight: 48,
    flexShrink: 0,
    padding: "12px 16px",
    overflow: "hidden",
    whiteSpace: "normal",
    textAlign: "center"
  }, ownerState.label && {
    flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
  }, {
    lineHeight: 1.25
  }, ownerState.icon && ownerState.label && {
    minHeight: 72,
    paddingTop: 9,
    paddingBottom: 9,
    [`& > .${tabClasses_default.iconWrapper}`]: _extends({}, ownerState.iconPosition === "top" && {
      marginBottom: 6
    }, ownerState.iconPosition === "bottom" && {
      marginTop: 6
    }, ownerState.iconPosition === "start" && {
      marginRight: theme2.spacing(1)
    }, ownerState.iconPosition === "end" && {
      marginLeft: theme2.spacing(1)
    })
  }, ownerState.textColor === "inherit" && {
    color: "inherit",
    opacity: 0.6,
    // same opacity as theme.palette.text.secondary
    [`&.${tabClasses_default.selected}`]: {
      opacity: 1
    },
    [`&.${tabClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    }
  }, ownerState.textColor === "primary" && {
    color: (theme2.vars || theme2).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme2.vars || theme2).palette.primary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    }
  }, ownerState.textColor === "secondary" && {
    color: (theme2.vars || theme2).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme2.vars || theme2).palette.secondary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    }
  }, ownerState.fullWidth && {
    flexShrink: 1,
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: "none"
  }, ownerState.wrapped && {
    fontSize: theme2.typography.pxToRem(12)
  }));
  var Tab = /* @__PURE__ */ React117.forwardRef(function Tab2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTab"
    });
    const {
      className,
      disabled = false,
      disableFocusRipple = false,
      // eslint-disable-next-line react/prop-types
      fullWidth,
      icon: iconProp,
      iconPosition = "top",
      // eslint-disable-next-line react/prop-types
      indicator,
      label,
      onChange,
      onClick,
      onFocus,
      // eslint-disable-next-line react/prop-types
      selected,
      // eslint-disable-next-line react/prop-types
      selectionFollowsFocus,
      // eslint-disable-next-line react/prop-types
      textColor = "inherit",
      value,
      wrapped = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
    const ownerState = _extends({}, props, {
      disabled,
      disableFocusRipple,
      selected,
      icon: !!iconProp,
      iconPosition,
      label: !!label,
      fullWidth,
      textColor,
      wrapped
    });
    const classes = useUtilityClasses50(ownerState);
    const icon = iconProp && label && /* @__PURE__ */ React117.isValidElement(iconProp) ? /* @__PURE__ */ React117.cloneElement(iconProp, {
      className: clsx_default(classes.iconWrapper, iconProp.props.className)
    }) : iconProp;
    const handleClick = (event) => {
      if (!selected && onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const handleFocus3 = (event) => {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(TabRoot, _extends({
      focusRipple: !disableFocusRipple,
      className: clsx_default(classes.root, className),
      ref,
      role: "tab",
      "aria-selected": selected,
      disabled,
      onClick: handleClick,
      onFocus: handleFocus3,
      ownerState,
      tabIndex: selected ? 0 : -1
    }, other, {
      children: [iconPosition === "top" || iconPosition === "start" ? /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(React117.Fragment, {
        children: [icon, label]
      }) : /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(React117.Fragment, {
        children: [label, icon]
      }), indicator]
    }));
  });
  true ? Tab.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types81.default.object,
    /**
     * @ignore
     */
    className: import_prop_types81.default.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types81.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types81.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types81.default.bool,
    /**
     * The icon to display.
     */
    icon: import_prop_types81.default.oneOfType([import_prop_types81.default.element, import_prop_types81.default.string]),
    /**
     * The position of the icon relative to the label.
     * @default 'top'
     */
    iconPosition: import_prop_types81.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * The label element.
     */
    label: import_prop_types81.default.node,
    /**
     * @ignore
     */
    onChange: import_prop_types81.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types81.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types81.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object]),
    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: import_prop_types81.default.any,
    /**
     * Tab labels appear in a single row.
     * They can use a second line if needed.
     * @default false
     */
    wrapped: import_prop_types81.default.bool
  } : void 0;
  var Tab_default = Tab;

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  var React118 = __toESM(require_react());
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  var React119 = __toESM(require_react());
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime107.jsx)("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/Tabs/Tabs.js
  init_extends();
  var React122 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is3());
  var import_prop_types84 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/animate.js
  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }
  function animate(property2, element, to, options = {}, cb = () => {
  }) {
    const {
      ease = easeInOutSin,
      duration: duration2 = 300
      // standard
    } = options;
    let start2 = null;
    const from2 = element[property2];
    let cancelled = false;
    const cancel = () => {
      cancelled = true;
    };
    const step = (timestamp) => {
      if (cancelled) {
        cb(new Error("Animation cancelled"));
        return;
      }
      if (start2 === null) {
        start2 = timestamp;
      }
      const time = Math.min(1, (timestamp - start2) / duration2);
      element[property2] = ease(time) * (to - from2) + from2;
      if (time >= 1) {
        requestAnimationFrame(() => {
          cb(null);
        });
        return;
      }
      requestAnimationFrame(step);
    };
    if (from2 === to) {
      cb(new Error("Element already at target position"));
      return cancel;
    }
    requestAnimationFrame(step);
    return cancel;
  }

  // node_modules/@mui/material/Tabs/ScrollbarSize.js
  init_extends();
  var React120 = __toESM(require_react());
  var import_prop_types82 = __toESM(require_prop_types());
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var _excluded79 = ["onChange"];
  var styles4 = {
    width: 99,
    height: 99,
    position: "absolute",
    top: -9999,
    overflow: "scroll"
  };
  function ScrollbarSize(props) {
    const {
      onChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const scrollbarHeight = React120.useRef();
    const nodeRef = React120.useRef(null);
    const setMeasurements = () => {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };
    useEnhancedEffect_default2(() => {
      const handleResize = debounce_default(() => {
        const prevHeight = scrollbarHeight.current;
        setMeasurements();
        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      const containerWindow = ownerWindow_default(nodeRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [onChange]);
    React120.useEffect(() => {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("div", _extends({
      style: styles4,
      ref: nodeRef
    }, other));
  }
  true ? ScrollbarSize.propTypes = {
    onChange: import_prop_types82.default.func.isRequired
  } : void 0;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  init_extends();
  var React121 = __toESM(require_react());
  var import_prop_types83 = __toESM(require_prop_types());

  // node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js
  function getTabScrollButtonUtilityClass(slot) {
    return generateUtilityClass("MuiTabScrollButton", slot);
  }
  var tabScrollButtonClasses = generateUtilityClasses("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
  var tabScrollButtonClasses_default = tabScrollButtonClasses;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var _excluded80 = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes,
      orientation,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation, disabled && "disabled"]
    };
    return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
  };
  var TabScrollButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiTabScrollButton",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.orientation && styles5[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: 40,
    flexShrink: 0,
    opacity: 0.8,
    [`&.${tabScrollButtonClasses_default.disabled}`]: {
      opacity: 0
    }
  }, ownerState.orientation === "vertical" && {
    width: "100%",
    height: 40,
    "& svg": {
      transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
    }
  }));
  var TabScrollButton = /* @__PURE__ */ React121.forwardRef(function TabScrollButton2(inProps, ref) {
    var _slots$StartScrollBut, _slots$EndScrollButto;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTabScrollButton"
    });
    const {
      className,
      slots = {},
      slotProps = {},
      direction
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
    const isRtl = useRtl();
    const ownerState = _extends({
      isRtl
    }, props);
    const classes = useUtilityClasses51(ownerState);
    const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft_default;
    const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight_default;
    const startButtonIconProps = useSlotProps_default({
      elementType: StartButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    const endButtonIconProps = useSlotProps_default({
      elementType: EndButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TabScrollButtonRoot, _extends({
      component: "div",
      className: clsx_default(classes.root, className),
      ref,
      role: null,
      ownerState,
      tabIndex: null
    }, other, {
      children: direction === "left" ? /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(StartButtonIcon, _extends({}, startButtonIconProps)) : /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(EndButtonIcon, _extends({}, endButtonIconProps))
    }));
  });
  true ? TabScrollButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types83.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types83.default.object,
    /**
     * @ignore
     */
    className: import_prop_types83.default.string,
    /**
     * The direction the button should indicate.
     */
    direction: import_prop_types83.default.oneOf(["left", "right"]).isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types83.default.bool,
    /**
     * The component orientation (layout flow direction).
     */
    orientation: import_prop_types83.default.oneOf(["horizontal", "vertical"]).isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types83.default.shape({
      endScrollButtonIcon: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      startScrollButtonIcon: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types83.default.shape({
      EndScrollButtonIcon: import_prop_types83.default.elementType,
      StartScrollButtonIcon: import_prop_types83.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object])
  } : void 0;
  var TabScrollButton_default = TabScrollButton;

  // node_modules/@mui/material/Tabs/tabsClasses.js
  function getTabsUtilityClass(slot) {
    return generateUtilityClass("MuiTabs", slot);
  }
  var tabsClasses = generateUtilityClasses("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
  var tabsClasses_default = tabsClasses;

  // node_modules/@mui/material/Tabs/Tabs.js
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var _excluded81 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
  var nextItem2 = (list, item) => {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return list.firstChild;
  };
  var previousItem2 = (list, item) => {
    if (list === item) {
      return list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return list.lastChild;
  };
  var moveFocus2 = (list, currentFocus, traversalFunction) => {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus);
      } else {
        nextFocus.focus();
        return;
      }
    }
  };
  var useUtilityClasses52 = (ownerState) => {
    const {
      vertical,
      fixed,
      hideScrollbar,
      scrollableX,
      scrollableY,
      centered,
      scrollButtonsHideMobile,
      classes
    } = ownerState;
    const slots = {
      root: ["root", vertical && "vertical"],
      scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
      flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
      indicator: ["indicator"],
      scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
      scrollableX: [scrollableX && "scrollableX"],
      hideScrollbar: [hideScrollbar && "hideScrollbar"]
    };
    return composeClasses(slots, getTabsUtilityClass, classes);
  };
  var TabsRoot = styled_default2("div", {
    name: "MuiTabs",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${tabsClasses_default.scrollButtons}`]: styles5.scrollButtons
      }, {
        [`& .${tabsClasses_default.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles5.scrollButtonsHideMobile
      }, styles5.root, ownerState.vertical && styles5.vertical];
    }
  })(({
    ownerState,
    theme: theme2
  }) => _extends({
    overflow: "hidden",
    minHeight: 48,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.scrollButtonsHideMobile && {
    [`& .${tabsClasses_default.scrollButtons}`]: {
      [theme2.breakpoints.down("sm")]: {
        display: "none"
      }
    }
  }));
  var TabsScroller = styled_default2("div", {
    name: "MuiTabs",
    slot: "Scroller",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.scroller, ownerState.fixed && styles5.fixed, ownerState.hideScrollbar && styles5.hideScrollbar, ownerState.scrollableX && styles5.scrollableX, ownerState.scrollableY && styles5.scrollableY];
    }
  })(({
    ownerState
  }) => _extends({
    position: "relative",
    display: "inline-block",
    flex: "1 1 auto",
    whiteSpace: "nowrap"
  }, ownerState.fixed && {
    overflowX: "hidden",
    width: "100%"
  }, ownerState.hideScrollbar && {
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  }, ownerState.scrollableX && {
    overflowX: "auto",
    overflowY: "hidden"
  }, ownerState.scrollableY && {
    overflowY: "auto",
    overflowX: "hidden"
  }));
  var FlexContainer = styled_default2("div", {
    name: "MuiTabs",
    slot: "FlexContainer",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.flexContainer, ownerState.vertical && styles5.flexContainerVertical, ownerState.centered && styles5.centered];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.centered && {
    justifyContent: "center"
  }));
  var TabsIndicator = styled_default2("span", {
    name: "MuiTabs",
    slot: "Indicator",
    overridesResolver: (props, styles5) => styles5.indicator
  })(({
    ownerState,
    theme: theme2
  }) => _extends({
    position: "absolute",
    height: 2,
    bottom: 0,
    width: "100%",
    transition: theme2.transitions.create()
  }, ownerState.indicatorColor === "primary" && {
    backgroundColor: (theme2.vars || theme2).palette.primary.main
  }, ownerState.indicatorColor === "secondary" && {
    backgroundColor: (theme2.vars || theme2).palette.secondary.main
  }, ownerState.vertical && {
    height: "100%",
    width: 2,
    right: 0
  }));
  var TabsScrollbarSize = styled_default2(ScrollbarSize)({
    overflowX: "auto",
    overflowY: "hidden",
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  });
  var defaultIndicatorStyle = {};
  var warnedOnceTabPresent = false;
  var Tabs = /* @__PURE__ */ React122.forwardRef(function Tabs2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTabs"
    });
    const theme2 = useTheme6();
    const isRtl = useRtl();
    const {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      action,
      centered = false,
      children: childrenProp,
      className,
      component = "div",
      allowScrollButtonsMobile = false,
      indicatorColor = "primary",
      onChange,
      orientation = "horizontal",
      ScrollButtonComponent = TabScrollButton_default,
      scrollButtons = "auto",
      selectionFollowsFocus,
      slots = {},
      slotProps = {},
      TabIndicatorProps = {},
      TabScrollButtonProps = {},
      textColor = "primary",
      value,
      variant = "standard",
      visibleScrollbar = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
    const scrollable = variant === "scrollable";
    const vertical = orientation === "vertical";
    const scrollStart = vertical ? "scrollTop" : "scrollLeft";
    const start2 = vertical ? "top" : "left";
    const end2 = vertical ? "bottom" : "right";
    const clientSize = vertical ? "clientHeight" : "clientWidth";
    const size = vertical ? "height" : "width";
    const ownerState = _extends({}, props, {
      component,
      allowScrollButtonsMobile,
      indicatorColor,
      orientation,
      vertical,
      scrollButtons,
      textColor,
      variant,
      visibleScrollbar,
      fixed: !scrollable,
      hideScrollbar: scrollable && !visibleScrollbar,
      scrollableX: scrollable && !vertical,
      scrollableY: scrollable && vertical,
      centered: centered && !scrollable,
      scrollButtonsHideMobile: !allowScrollButtonsMobile
    });
    const classes = useUtilityClasses52(ownerState);
    const startScrollButtonIconProps = useSlotProps_default({
      elementType: slots.StartScrollButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      ownerState
    });
    const endScrollButtonIconProps = useSlotProps_default({
      elementType: slots.EndScrollButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      ownerState
    });
    if (true) {
      if (centered && scrollable) {
        console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
      }
    }
    const [mounted, setMounted] = React122.useState(false);
    const [indicatorStyle, setIndicatorStyle] = React122.useState(defaultIndicatorStyle);
    const [displayStartScroll, setDisplayStartScroll] = React122.useState(false);
    const [displayEndScroll, setDisplayEndScroll] = React122.useState(false);
    const [updateScrollObserver, setUpdateScrollObserver] = React122.useState(false);
    const [scrollerStyle, setScrollerStyle] = React122.useState({
      overflow: "hidden",
      scrollbarWidth: 0
    });
    const valueToIndex = /* @__PURE__ */ new Map();
    const tabsRef = React122.useRef(null);
    const tabListRef = React122.useRef(null);
    const getTabsMeta = () => {
      const tabsNode = tabsRef.current;
      let tabsMeta;
      if (tabsNode) {
        const rect = tabsNode.getBoundingClientRect();
        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, isRtl ? "rtl" : "ltr"),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }
      let tabMeta;
      if (tabsNode && value !== false) {
        const children2 = tabListRef.current.children;
        if (children2.length > 0) {
          const tab = children2[valueToIndex.get(value)];
          if (true) {
            if (!tab) {
              console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(", ")}.` : null].join("\n"));
            }
          }
          tabMeta = tab ? tab.getBoundingClientRect() : null;
          if (true) {
            if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0 && // if the whole Tabs component is hidden, don't warn
            tabsMeta.clientWidth !== 0) {
              tabsMeta = null;
              console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join("\n"));
              warnedOnceTabPresent = true;
            }
          }
        }
      }
      return {
        tabsMeta,
        tabMeta
      };
    };
    const updateIndicatorState = useEventCallback_default2(() => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      let startValue = 0;
      let startIndicator;
      if (vertical) {
        startIndicator = "top";
        if (tabMeta && tabsMeta) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        }
      } else {
        startIndicator = isRtl ? "right" : "left";
        if (tabMeta && tabsMeta) {
          const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
        }
      }
      const newIndicatorStyle = {
        [startIndicator]: startValue,
        // May be wrong until the font is loaded.
        [size]: tabMeta ? tabMeta[size] : 0
      };
      if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
        const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });
    const scroll = (scrollValue, {
      animation = true
    } = {}) => {
      if (animation) {
        animate(scrollStart, tabsRef.current, scrollValue, {
          duration: theme2.transitions.duration.standard
        });
      } else {
        tabsRef.current[scrollStart] = scrollValue;
      }
    };
    const moveTabsScroll = (delta) => {
      let scrollValue = tabsRef.current[scrollStart];
      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1);
        scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
      }
      scroll(scrollValue);
    };
    const getScrollSize = () => {
      const containerSize = tabsRef.current[clientSize];
      let totalSize = 0;
      const children2 = Array.from(tabListRef.current.children);
      for (let i = 0; i < children2.length; i += 1) {
        const tab = children2[i];
        if (totalSize + tab[clientSize] > containerSize) {
          if (i === 0) {
            totalSize = containerSize;
          }
          break;
        }
        totalSize += tab[clientSize];
      }
      return totalSize;
    };
    const handleStartScrollClick = () => {
      moveTabsScroll(-1 * getScrollSize());
    };
    const handleEndScrollClick = () => {
      moveTabsScroll(getScrollSize());
    };
    const handleScrollbarSizeChange = React122.useCallback((scrollbarWidth) => {
      setScrollerStyle({
        overflow: null,
        scrollbarWidth
      });
    }, []);
    const getConditionalElements = () => {
      const conditionalElements2 = {};
      conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TabsScrollbarSize, {
        onChange: handleScrollbarSizeChange,
        className: clsx_default(classes.scrollableX, classes.hideScrollbar)
      }) : null;
      const scrollButtonsActive = displayStartScroll || displayEndScroll;
      const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
      conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ScrollButtonComponent, _extends({
        slots: {
          StartScrollButtonIcon: slots.StartScrollButtonIcon
        },
        slotProps: {
          startScrollButtonIcon: startScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "right" : "left",
        onClick: handleStartScrollClick,
        disabled: !displayStartScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ScrollButtonComponent, _extends({
        slots: {
          EndScrollButtonIcon: slots.EndScrollButtonIcon
        },
        slotProps: {
          endScrollButtonIcon: endScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "left" : "right",
        onClick: handleEndScrollClick,
        disabled: !displayEndScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      return conditionalElements2;
    };
    const scrollSelectedIntoView = useEventCallback_default2((animation) => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      if (!tabMeta || !tabsMeta) {
        return;
      }
      if (tabMeta[start2] < tabsMeta[start2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start2] - tabsMeta[start2]);
        scroll(nextScrollStart, {
          animation
        });
      } else if (tabMeta[end2] > tabsMeta[end2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end2] - tabsMeta[end2]);
        scroll(nextScrollStart, {
          animation
        });
      }
    });
    const updateScrollButtonState = useEventCallback_default2(() => {
      if (scrollable && scrollButtons !== false) {
        setUpdateScrollObserver(!updateScrollObserver);
      }
    });
    React122.useEffect(() => {
      const handleResize = debounce_default(() => {
        if (tabsRef.current) {
          updateIndicatorState();
        }
      });
      let resizeObserver;
      const handleMutation = (records) => {
        records.forEach((record) => {
          record.removedNodes.forEach((item) => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.unobserve(item);
          });
          record.addedNodes.forEach((item) => {
            var _resizeObserver2;
            (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.observe(item);
          });
        });
        handleResize();
        updateScrollButtonState();
      };
      const win = ownerWindow_default(tabsRef.current);
      win.addEventListener("resize", handleResize);
      let mutationObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        Array.from(tabListRef.current.children).forEach((child) => {
          resizeObserver.observe(child);
        });
      }
      if (typeof MutationObserver !== "undefined") {
        mutationObserver = new MutationObserver(handleMutation);
        mutationObserver.observe(tabListRef.current, {
          childList: true
        });
      }
      return () => {
        var _mutationObserver, _resizeObserver3;
        handleResize.clear();
        win.removeEventListener("resize", handleResize);
        (_mutationObserver = mutationObserver) == null || _mutationObserver.disconnect();
        (_resizeObserver3 = resizeObserver) == null || _resizeObserver3.disconnect();
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    React122.useEffect(() => {
      const tabListChildren = Array.from(tabListRef.current.children);
      const length2 = tabListChildren.length;
      if (typeof IntersectionObserver !== "undefined" && length2 > 0 && scrollable && scrollButtons !== false) {
        const firstTab = tabListChildren[0];
        const lastTab = tabListChildren[length2 - 1];
        const observerOptions = {
          root: tabsRef.current,
          threshold: 0.99
        };
        const handleScrollButtonStart = (entries) => {
          setDisplayStartScroll(!entries[0].isIntersecting);
        };
        const firstObserver = new IntersectionObserver(handleScrollButtonStart, observerOptions);
        firstObserver.observe(firstTab);
        const handleScrollButtonEnd = (entries) => {
          setDisplayEndScroll(!entries[0].isIntersecting);
        };
        const lastObserver = new IntersectionObserver(handleScrollButtonEnd, observerOptions);
        lastObserver.observe(lastTab);
        return () => {
          firstObserver.disconnect();
          lastObserver.disconnect();
        };
      }
      return void 0;
    }, [scrollable, scrollButtons, updateScrollObserver, childrenProp == null ? void 0 : childrenProp.length]);
    React122.useEffect(() => {
      setMounted(true);
    }, []);
    React122.useEffect(() => {
      updateIndicatorState();
    });
    React122.useEffect(() => {
      scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
    }, [scrollSelectedIntoView, indicatorStyle]);
    React122.useImperativeHandle(action, () => ({
      updateIndicator: updateIndicatorState,
      updateScrollButtons: updateScrollButtonState
    }), [updateIndicatorState, updateScrollButtonState]);
    const indicator = /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TabsIndicator, _extends({}, TabIndicatorProps, {
      className: clsx_default(classes.indicator, TabIndicatorProps.className),
      ownerState,
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));
    let childIndex = 0;
    const children = React122.Children.map(childrenProp, (child) => {
      if (!/* @__PURE__ */ React122.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      const childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      const selected = childValue === value;
      childIndex += 1;
      return /* @__PURE__ */ React122.cloneElement(child, _extends({
        fullWidth: variant === "fullWidth",
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      }, childIndex === 1 && value === false && !child.props.tabIndex ? {
        tabIndex: 0
      } : {}));
    });
    const handleKeyDown2 = (event) => {
      const list = tabListRef.current;
      const currentFocus = ownerDocument_default(list).activeElement;
      const role = currentFocus.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
      let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
      if (orientation === "horizontal" && isRtl) {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event.key) {
        case previousItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, previousItem2);
          break;
        case nextItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, nextItem2);
          break;
        case "Home":
          event.preventDefault();
          moveFocus2(list, null, nextItem2);
          break;
        case "End":
          event.preventDefault();
          moveFocus2(list, null, previousItem2);
          break;
        default:
          break;
      }
    };
    const conditionalElements = getConditionalElements();
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(TabsRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      as: component
    }, other, {
      children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(TabsScroller, {
        className: classes.scroller,
        ownerState,
        style: {
          overflow: scrollerStyle.overflow,
          [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
        },
        ref: tabsRef,
        children: [/* @__PURE__ */ (0, import_jsx_runtime110.jsx)(FlexContainer, {
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-orientation": orientation === "vertical" ? "vertical" : null,
          className: classes.flexContainer,
          ownerState,
          onKeyDown: handleKeyDown2,
          ref: tabListRef,
          role: "tablist",
          children
        }), mounted && indicator]
      }), conditionalElements.scrollButtonEnd]
    }));
  });
  true ? Tabs.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Callback fired when the component mounts.
     * This is useful when you want to trigger an action programmatically.
     * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
     *
     * @param {object} actions This object contains all possible actions
     * that can be triggered programmatically.
     */
    action: refType_default,
    /**
     * If `true`, the scroll buttons aren't forced hidden on mobile.
     * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
     * @default false
     */
    allowScrollButtonsMobile: import_prop_types84.default.bool,
    /**
     * The label for the Tabs as a string.
     */
    "aria-label": import_prop_types84.default.string,
    /**
     * An id or list of ids separated by a space that label the Tabs.
     */
    "aria-labelledby": import_prop_types84.default.string,
    /**
     * If `true`, the tabs are centered.
     * This prop is intended for large views.
     * @default false
     */
    centered: import_prop_types84.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types84.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types84.default.object,
    /**
     * @ignore
     */
    className: import_prop_types84.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types84.default.elementType,
    /**
     * Determines the color of the indicator.
     * @default 'primary'
     */
    indicatorColor: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["primary", "secondary"]), import_prop_types84.default.string]),
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child (number)
     */
    onChange: import_prop_types84.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types84.default.oneOf(["horizontal", "vertical"]),
    /**
     * The component used to render the scroll buttons.
     * @default TabScrollButton
     */
    ScrollButtonComponent: import_prop_types84.default.elementType,
    /**
     * Determine behavior of scroll buttons when tabs are set to scroll:
     *
     * - `auto` will only present them when not all the items are visible.
     * - `true` will always present them.
     * - `false` will never present them.
     *
     * By default the scroll buttons are hidden on mobile.
     * This behavior can be disabled with `allowScrollButtonsMobile`.
     * @default 'auto'
     */
    scrollButtons: import_prop_types84.default.oneOf(["auto", false, true]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: import_prop_types84.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types84.default.shape({
      endScrollButtonIcon: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object]),
      startScrollButtonIcon: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types84.default.shape({
      EndScrollButtonIcon: import_prop_types84.default.elementType,
      StartScrollButtonIcon: import_prop_types84.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object, import_prop_types84.default.bool])), import_prop_types84.default.func, import_prop_types84.default.object]),
    /**
     * Props applied to the tab indicator element.
     * @default  {}
     */
    TabIndicatorProps: import_prop_types84.default.object,
    /**
     * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
     * @default {}
     */
    TabScrollButtonProps: import_prop_types84.default.object,
    /**
     * Determines the color of the `Tab`.
     * @default 'primary'
     */
    textColor: import_prop_types84.default.oneOf(["inherit", "primary", "secondary"]),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `false`.
     */
    value: import_prop_types84.default.any,
    /**
     * Determines additional display behavior of the tabs:
     *
     *  - `scrollable` will invoke scrolling properties and allow for horizontally
     *  scrolling (or swiping) of the tab bar.
     *  - `fullWidth` will make the tabs grow to use all the available space,
     *  which should be used for small views, like on mobile.
     *  - `standard` will render the default state.
     * @default 'standard'
     */
    variant: import_prop_types84.default.oneOf(["fullWidth", "scrollable", "standard"]),
    /**
     * If `true`, the scrollbar is visible. It can be useful when displaying
     * a long vertical list of tabs.
     * @default false
     */
    visibleScrollbar: import_prop_types84.default.bool
  } : void 0;
  var Tabs_default = Tabs;

  // node_modules/@mui/material/TextField/TextField.js
  init_extends();
  var React123 = __toESM(require_react());
  var import_prop_types85 = __toESM(require_prop_types());

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var _excluded82 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default2(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var TextField = /* @__PURE__ */ React123.forwardRef(function TextField2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color3 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color3,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses53(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(TextFieldRoot, _extends({
      className: clsx_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color3,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types85.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types85.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types85.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types85.default.object,
    /**
     * @ignore
     */
    className: import_prop_types85.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types85.default.oneOfType([import_prop_types85.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types85.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types85.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types85.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types85.default.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types85.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types85.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types85.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types85.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types85.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types85.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types85.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types85.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types85.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types85.default.oneOfType([import_prop_types85.default.number, import_prop_types85.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types85.default.oneOfType([import_prop_types85.default.number, import_prop_types85.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types85.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types85.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types85.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types85.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types85.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types85.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types85.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types85.default.oneOfType([import_prop_types85.default.number, import_prop_types85.default.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types85.default.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: import_prop_types85.default.object,
    /**
     * The size of the component.
     */
    size: import_prop_types85.default.oneOfType([import_prop_types85.default.oneOf(["medium", "small"]), import_prop_types85.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types85.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types85.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types85.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // node_modules/@mui/lab/TabContext/TabContext.js
  var React124 = __toESM(require_react());
  var import_prop_types86 = __toESM(require_prop_types());
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var Context = /* @__PURE__ */ React124.createContext(null);
  if (true) {
    Context.displayName = "TabContext";
  }
  function useUniquePrefix() {
    const [id, setId] = React124.useState(null);
    React124.useEffect(() => {
      setId(`mui-p-${Math.round(Math.random() * 1e5)}`);
    }, []);
    return id;
  }
  function TabContext(props) {
    const {
      children,
      value
    } = props;
    const idPrefix = useUniquePrefix();
    const context = React124.useMemo(() => {
      return {
        idPrefix,
        value
      };
    }, [idPrefix, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(Context.Provider, {
      value: context,
      children
    });
  }
  true ? TabContext.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types86.default.node,
    /**
     * The value of the currently selected `Tab`.
     */
    value: import_prop_types86.default.oneOfType([import_prop_types86.default.number, import_prop_types86.default.string]).isRequired
  } : void 0;
  function useTabContext() {
    return React124.useContext(Context);
  }
  function getPanelId(context, value) {
    const {
      idPrefix
    } = context;
    if (idPrefix === null) {
      return null;
    }
    return `${context.idPrefix}-P-${value}`;
  }
  function getTabId(context, value) {
    const {
      idPrefix
    } = context;
    if (idPrefix === null) {
      return null;
    }
    return `${context.idPrefix}-T-${value}`;
  }

  // node_modules/@mui/lab/TabList/TabList.js
  init_extends();
  var React125 = __toESM(require_react());
  var import_prop_types87 = __toESM(require_prop_types());
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var _excluded83 = ["children"];
  var TabList = /* @__PURE__ */ React125.forwardRef(function TabList2(props, ref) {
    const {
      children: childrenProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
    const context = useTabContext();
    if (context === null) {
      throw new TypeError("No TabContext provided");
    }
    const children = React125.Children.map(childrenProp, (child) => {
      if (!/* @__PURE__ */ React125.isValidElement(child)) {
        return null;
      }
      return /* @__PURE__ */ React125.cloneElement(child, {
        // SOMEDAY: `Tabs` will set those themselves
        "aria-controls": getPanelId(context, child.props.value),
        id: getTabId(context, child.props.value)
      });
    });
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Tabs_default, _extends({}, other, {
      ref,
      value: context.value,
      children
    }));
  });
  true ? TabList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A list of `<Tab />` elements.
     */
    children: import_prop_types87.default.node
  } : void 0;
  var TabList_default = TabList;

  // node_modules/@mui/lab/TabPanel/TabPanel.js
  init_extends();
  var React126 = __toESM(require_react());
  var import_prop_types88 = __toESM(require_prop_types());

  // node_modules/@mui/lab/TabPanel/tabPanelClasses.js
  function getTabPanelUtilityClass(slot) {
    return generateUtilityClass("MuiTabPanel", slot);
  }
  var tabPanelClasses = generateUtilityClasses("MuiTabPanel", ["root"]);

  // node_modules/@mui/lab/TabPanel/TabPanel.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var _excluded84 = ["children", "className", "value"];
  var useUtilityClasses54 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTabPanelUtilityClass, classes);
  };
  var TabPanelRoot = styled_default2("div", {
    name: "MuiTabPanel",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    padding: theme2.spacing(3)
  }));
  var TabPanel = /* @__PURE__ */ React126.forwardRef(function TabPanel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTabPanel"
    });
    const {
      children,
      className,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
    const ownerState = _extends({}, props);
    const classes = useUtilityClasses54(ownerState);
    const context = useTabContext();
    if (context === null) {
      throw new TypeError("No TabContext provided");
    }
    const id = getPanelId(context, value);
    const tabId = getTabId(context, value);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TabPanelRoot, _extends({
      "aria-labelledby": tabId,
      className: clsx_default(classes.root, className),
      hidden: value !== context.value,
      id,
      ref,
      role: "tabpanel",
      ownerState
    }, other, {
      children: value === context.value && children
    }));
  });
  true ? TabPanel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types88.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types88.default.object,
    /**
     * @ignore
     */
    className: import_prop_types88.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
    /**
     * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when
     * no `value` was passed to `Tab`.
     */
    value: import_prop_types88.default.string.isRequired
  } : void 0;
  var TabPanel_default = TabPanel;

  // node_modules/@mui/icons-material/esm/ArrowBack.js
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var ArrowBack_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime117.jsx)("path", {
    d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z"
  }), "ArrowBack");

  // node_modules/@mui/icons-material/esm/ArrowCircleLeftOutlined.js
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var ArrowCircleLeftOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime118.jsx)("path", {
    d: "M2 12c0 5.52 4.48 10 10 10s10-4.48 10-10S17.52 2 12 2 2 6.48 2 12m18 0c0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8 8 3.58 8 8M8 12l4-4 1.41 1.41L11.83 11H16v2h-4.17l1.59 1.59L12 16z"
  }), "ArrowCircleLeftOutlined");

  // node_modules/@mui/icons-material/esm/ArrowCircleRightOutlined.js
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var ArrowCircleRightOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime119.jsx)("path", {
    d: "M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12s4.48 10 10 10 10-4.48 10-10M4 12c0-4.42 3.58-8 8-8s8 3.58 8 8-3.58 8-8 8-8-3.58-8-8m12 0-4 4-1.41-1.41L12.17 13H8v-2h4.17l-1.59-1.59L12 8z"
  }), "ArrowCircleRightOutlined");

  // node_modules/@mui/icons-material/esm/CheckCircleOutline.js
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var CheckCircleOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime120.jsx)("path", {
    d: "M16.59 7.58 10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8"
  }), "CheckCircleOutline");

  // node_modules/@mui/icons-material/esm/Delete.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var Delete_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime121.jsx)("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z"
  }), "Delete");

  // node_modules/@mui/icons-material/esm/Edit.js
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var Edit_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime122.jsx)("path", {
    d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z"
  }), "Edit");

  // node_modules/@mui/icons-material/esm/Google.js
  var React127 = __toESM(require_react());
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  var Google_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime123.jsx)("path", {
    d: "M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
  }), "Google");

  // node_modules/@mui/icons-material/esm/Settings.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var Settings_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime124.jsx)("path", {
    d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6"
  }), "Settings");

  // build/utils/StringUtils.js
  var StringUtils = class {
    static removeAllSpaces(value) {
      return value ? value.replace(/\s+/g, "") : "";
    }
    static replaceAll(str, find, with_str, ignore = false) {
      return str ? str.replace(new RegExp(find.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), ignore ? "gi" : "g"), typeof with_str == "string" ? with_str.replace(/\$/g, "$$$$") : with_str) : "";
    }
    static leadingZero(value, places = 2) {
      return String(value).padStart(places, "0");
    }
    static format(...values4) {
      let text = "";
      if (values4.length > 0) {
        text = values4[0];
        let i;
        let n = values4.length;
        for (i = 1; i < n; i++) {
          text = text.replace(new RegExp("\\{" + (i - 1) + "\\}", "gi"), values4[i]);
        }
      }
      return text;
    }
    static countOccurances(text, values4) {
      if (text == null || values4 == null)
        return 0;
      let count = 0;
      let len = text.length;
      let i;
      for (i = 0; i < len; i++) {
        if (values4.indexOf(text.charAt(i)) >= 0) {
          count++;
        }
      }
      return count;
    }
    static countUppercase(text) {
      if (text == null)
        return 0;
      let count = 0;
      let len = text.length;
      let i;
      for (i = 0; i < len; i++) {
        if (/^[A-Z]*$/.test(text.charAt(i))) {
          count++;
        }
      }
      return count;
    }
    static countLowercase(text) {
      if (text == null)
        return 0;
      let count = 0;
      let len = text.length;
      let i;
      for (i = 0; i < len; i++) {
        if (/^[a-z]*$/.test(text.charAt(i))) {
          count++;
        }
      }
      return count;
    }
    static isEmailAddress(email) {
      return email.toLowerCase().match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/) ? true : false;
    }
    static isUuid(uuid) {
      return uuid == null || uuid == void 0 || uuid == "" || uuid.match(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/) ? true : false;
    }
    static truncate(value, len) {
      if (value.length > len && value.length > 3)
        return value.substring(0, len - 3) + "...";
      else
        return value;
    }
    static isIpAddress(value) {
      let parts = value.split(".");
      if (parts.length !== 4)
        return false;
      let i;
      for (i = 0; i < parts.length; i++) {
        if (Number.isNaN(parts[i]) || !Number.isInteger(parseInt(parts[i])))
          return false;
      }
      return true;
    }
    static fileSizeToString(size, digits = 1) {
      if (size == 0)
        return "0 B";
      let i = Math.floor(Math.log(size) / Math.log(1024));
      let fsize = size / Math.pow(1024, i);
      return fsize.toFixed(digits) + " " + ["B", "KB", "MB", "GB", "TB"][i];
    }
    static toMixedCase(str) {
      return str.replace(/(^|\s)\S/g, (t) => {
        return t.toUpperCase();
      });
    }
  };
  StringUtils.ELLIPSE = "\u2026";
  StringUtils.COLON = ":";
  StringUtils.SPACE = " ";
  StringUtils.NUMBERS = "0123456789";
  StringUtils.SPECIAL = ".,<>?':;{}`[]~!@#$%^&*()_-+=";
  var StringUtils_default = StringUtils;

  // build/utils/ObjectUtils.js
  var ObjectUtils = class _ObjectUtils {
    static merge(obj1, obj2) {
      let obj3 = {};
      let attr;
      for (attr in obj1) {
        obj3[attr] = obj1[attr];
      }
      for (attr in obj2) {
        obj3[attr] = obj2[attr];
      }
      return obj3;
    }
    static copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    static copyTemplate(obj, template) {
      for (let prop in template) {
        if (typeof obj[prop] == "object") {
          template[prop] = _ObjectUtils.copyTemplate(obj[prop], template[prop]);
        } else if (obj[prop] != void 0) {
          template[prop] = obj[prop];
        }
      }
      return template;
    }
    static isNull(value) {
      return value == null || value == void 0;
    }
    static notNull(value) {
      return !_ObjectUtils.isNull(value);
    }
    static isString(value) {
      return typeof value == "string";
    }
    static isNumber(value) {
      return typeof value == "number";
    }
    static getNumber(value) {
      if (_ObjectUtils.isString(value)) {
        return parseInt(value);
      } else if (_ObjectUtils.isNumber(value)) {
        return value;
      } else {
        return 0;
      }
    }
    static isBoolean(value) {
      return typeof value == "boolean" || _ObjectUtils.isString(value) && (value == "true" || value == "false");
    }
    static getBoolean(value) {
      return typeof value == "boolean" ? value : value === "true";
    }
    static isObject(value) {
      return typeof value == "object";
    }
    static isArray(value) {
      return value instanceof Array;
    }
    static isPrimitiveArray(value) {
      if (_ObjectUtils.isArray(value) && value.length > 0) {
        return _ObjectUtils.isObject(value[0]) ? false : true;
      } else {
        return false;
      }
    }
    static isDate(value) {
      return value instanceof Date;
    }
  };

  // build/net/Network.js
  var Network;
  (function(Network2) {
    let Status;
    (function(Status2) {
      Status2[Status2["OK"] = 200] = "OK";
      Status2[Status2["CREATED"] = 201] = "CREATED";
      Status2[Status2["ACCEPTED"] = 202] = "ACCEPTED";
      Status2[Status2["NON_AUTHORITATIVE_INFO"] = 203] = "NON_AUTHORITATIVE_INFO";
      Status2[Status2["NO_CONTENT"] = 204] = "NO_CONTENT";
      Status2[Status2["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
      Status2[Status2["MULTI_STATUS"] = 207] = "MULTI_STATUS";
      Status2[Status2["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
      Status2[Status2["IM_USED"] = 226] = "IM_USED";
      Status2[Status2["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
      Status2[Status2["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
      Status2[Status2["FOUND"] = 302] = "FOUND";
      Status2[Status2["SEE_OTHER"] = 303] = "SEE_OTHER";
      Status2[Status2["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
      Status2[Status2["USE_PROXY"] = 305] = "USE_PROXY";
      Status2[Status2["TEMP_REDIRECT"] = 307] = "TEMP_REDIRECT";
      Status2[Status2["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
      Status2[Status2["BAD_REQUEST"] = 400] = "BAD_REQUEST";
      Status2[Status2["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
      Status2[Status2["PAYMENT_REQD"] = 402] = "PAYMENT_REQD";
      Status2[Status2["FORBIDDEN"] = 403] = "FORBIDDEN";
      Status2[Status2["NOT_FOUND"] = 404] = "NOT_FOUND";
      Status2[Status2["NOT_ALLOWED"] = 405] = "NOT_ALLOWED";
      Status2[Status2["NOT_ACCEPTED"] = 406] = "NOT_ACCEPTED";
      Status2[Status2["PROXY_AUTH_REQD"] = 407] = "PROXY_AUTH_REQD";
      Status2[Status2["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
      Status2[Status2["CONFLICT"] = 409] = "CONFLICT";
      Status2[Status2["GONE"] = 410] = "GONE";
      Status2[Status2["LENGTH_REQD"] = 411] = "LENGTH_REQD";
      Status2[Status2["PRE_CONDITION_FAILED"] = 412] = "PRE_CONDITION_FAILED";
      Status2[Status2["REQUEST_ENTITY_TOO_LONG"] = 413] = "REQUEST_ENTITY_TOO_LONG";
      Status2[Status2["REQUEST_URI_TOO_LONG"] = 414] = "REQUEST_URI_TOO_LONG";
      Status2[Status2["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
      Status2[Status2["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
      Status2[Status2["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
      Status2[Status2["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
      Status2[Status2["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
      Status2[Status2["LOCKED"] = 423] = "LOCKED";
      Status2[Status2["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
      Status2[Status2["TOO_EARLY"] = 425] = "TOO_EARLY";
      Status2[Status2["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
      Status2[Status2["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
      Status2[Status2["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
      Status2[Status2["REQUEST_HEADER_TOO_LARGE"] = 431] = "REQUEST_HEADER_TOO_LARGE";
      Status2[Status2["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
      Status2[Status2["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
      Status2[Status2["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
      Status2[Status2["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
      Status2[Status2["SERVICE_UNAVAIL"] = 503] = "SERVICE_UNAVAIL";
      Status2[Status2["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
      Status2[Status2["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
      Status2[Status2["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
      Status2[Status2["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
      Status2[Status2["LOOP_DETECED"] = 508] = "LOOP_DETECED";
      Status2[Status2["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
      Status2[Status2["NETWORK_AUTH_REQUIRED"] = 511] = "NETWORK_AUTH_REQUIRED";
    })(Status = Network2.Status || (Network2.Status = {}));
    let Protocol;
    (function(Protocol2) {
      Protocol2["FILE"] = "file";
      Protocol2["HTTP"] = "http";
      Protocol2["HTTPS"] = "https";
      Protocol2["SFTP"] = "sftp";
    })(Protocol = Network2.Protocol || (Network2.Protocol = {}));
    let Method;
    (function(Method2) {
      Method2["GET"] = "GET";
      Method2["PUT"] = "PUT";
      Method2["POST"] = "POST";
      Method2["DELETE"] = "DELETE";
      Method2["HEAD"] = "HEAD";
      Method2["PATCH"] = "PATCH";
      Method2["OPTIONS"] = "OPTIONS";
    })(Method = Network2.Method || (Network2.Method = {}));
    let MimeType;
    (function(MimeType2) {
      MimeType2["JSON"] = "application/json";
      MimeType2["XML"] = "application/xml";
      MimeType2["BIN"] = "application/octet-stream";
      MimeType2["GZIP"] = "application/gzip";
      MimeType2["TAR"] = "application/x-tar";
      MimeType2["ZIP"] = "application/zip";
      MimeType2["PDF"] = "application/pdf";
      MimeType2["TEXT"] = "text/plain";
      MimeType2["HTML"] = "text/html";
      MimeType2["CSS"] = "text/css";
      MimeType2["CSV"] = "text/csv";
      MimeType2["ICS"] = "text/ics";
      MimeType2["JS"] = "text/javascript";
      MimeType2["MP3"] = "audio/mpeg";
      MimeType2["WAVE"] = "audio/wav";
      MimeType2["MP4"] = "video/mp4";
      MimeType2["MPEG"] = "video/mpeg";
      MimeType2["JPEG"] = "image/jpeg";
      MimeType2["PNG"] = "image/png";
      MimeType2["GIF"] = "image/gif";
      MimeType2["BMP"] = "image/bmp";
    })(MimeType = Network2.MimeType || (Network2.MimeType = {}));
    function url(protocol, host, port, uri) {
      let url2 = protocol;
      url2 += "://";
      url2 += host;
      if (port && port > 0) {
        url2 += ":";
        url2 += port;
      }
      if (uri) {
        if (uri.charAt(0) != "/")
          url2 += "/";
        url2 += uri;
      }
      return url2;
    }
    Network2.url = url;
    function uriParts(request_uri) {
      let str = request_uri.toLowerCase();
      let reqs = str.split("/");
      reqs = reqs.filter((n) => n);
      return reqs;
    }
    Network2.uriParts = uriParts;
    function sameUri(request_uri, endpt_uri) {
      return sameUriArray(uriParts(request_uri), uriParts(endpt_uri));
    }
    Network2.sameUri = sameUri;
    function sameUriArray(request_uri, endpt_uri) {
      if (request_uri[request_uri.length - 1].indexOf("?") > 0) {
        request_uri[request_uri.length - 1] = request_uri[request_uri.length - 1].substring(0, request_uri[request_uri.length - 1].lastIndexOf("?"));
      }
      if (endpt_uri[endpt_uri.length - 1] == "*") {
        endpt_uri.pop();
        while (request_uri.length > endpt_uri.length) {
          request_uri.pop();
        }
      }
      let i;
      let len = endpt_uri.length;
      for (i = 0; i < len; i++) {
        if (endpt_uri[i].charAt(0) == ":") {
          if (request_uri[i] != void 0) {
            request_uri[i] = endpt_uri[i];
          } else if (i == len - 1 && endpt_uri[i].charAt(endpt_uri[i].length - 1) == "?") {
            endpt_uri.splice(i, 1);
            break;
          } else {
            return false;
          }
        }
      }
      if (request_uri.length != endpt_uri.length)
        return false;
      return request_uri.join("/") === endpt_uri.join("/");
    }
    Network2.sameUriArray = sameUriArray;
  })(Network || (Network = {}));

  // build/net/Endpoint.js
  var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Endpoint;
  (function(Endpoint2) {
    let Headers;
    (function(Headers2) {
      Headers2["APP_ID"] = "x-appid";
      Headers2["TRANSACTION_ID"] = "x-transactionid";
      Headers2["SESSION_ID"] = "x-sessionid";
      Headers2["DEVKEY"] = "x-devkey";
    })(Headers = Endpoint2.Headers || (Endpoint2.Headers = {}));
    let Source;
    (function(Source2) {
      Source2["HEADER"] = "header";
      Source2["PARAM"] = "param";
      Source2["QUERY"] = "query";
      Source2["BODY"] = "body";
    })(Source = Endpoint2.Source || (Endpoint2.Source = {}));
    let Error2;
    (function(Error3) {
      Error3["NOT_IMPLEMENTED"] = "not_implemented";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
      Error3["NOT_FOUND"] = "not_found";
      Error3["DELETED"] = "deleted";
    })(Error2 = Endpoint2.Error || (Endpoint2.Error = {}));
    let SortDirection;
    (function(SortDirection2) {
      SortDirection2["ASCENDING"] = "asc";
      SortDirection2["DESCENDING"] = "desc";
    })(SortDirection = Endpoint2.SortDirection || (Endpoint2.SortDirection = {}));
    let PropertyType;
    (function(PropertyType2) {
      PropertyType2["STRING"] = "string";
      PropertyType2["NUMBER"] = "number";
      PropertyType2["ARRAY"] = "array";
      PropertyType2["OBJECT"] = "object";
      PropertyType2["BOOLEAN"] = "boolean";
    })(PropertyType = Endpoint2.PropertyType || (Endpoint2.PropertyType = {}));
    Endpoint2.InitValue = void 0;
    class Definition {
      constructor(method, url, auth = true, timeout2 = null) {
        this.method = Network.Method.GET;
        this.url = "";
        this.request = null;
        this.method = method;
        this.url = url;
        this.auth = auth;
        this.timeout = timeout2;
        this.reset();
      }
      dump() {
        console.log({ method: this.method, url: this.url });
      }
      reset() {
      }
      sortBy(sortby, default_by) {
        return sortby != Endpoint2.InitValue ? sortby : default_by;
      }
      execute(auth) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.failure(Network.Status.NOT_IMPLEMENTED, Error2.NOT_IMPLEMENTED, "request not implemented yet " + this.method + " @ " + this.url);
        });
      }
      validate(request) {
        if (this.method == Network.Method.GET && ObjectUtils.notNull(this.body)) {
          return this.failure(Network.Status.BAD_REQUEST, Endpoint2.Error.MISSING_OR_BAD_DATA, "GET cannot have BODY attributes");
        } else {
          let check = this.validateData(request);
          if (!check.ok)
            return this.failure(Network.Status.BAD_REQUEST, Endpoint2.Error.MISSING_OR_BAD_DATA, check.message);
        }
        return { status: Network.Status.OK };
      }
      validateData(request) {
        let reply = { ok: true };
        let key;
        let field;
        for (key in this.datamap) {
          field = ObjectUtils.notNull(this.datamap[key].field) ? this.datamap[key].field : key;
          switch (this.datamap[key].source) {
            case Source.HEADER:
              this.request[key] = request.headers[field] != void 0 ? request.headers[field] : null;
              break;
            case Source.PARAM:
              this.request[key] = request.params[field] != void 0 ? request.params[field] : null;
              break;
            case Source.QUERY:
              this.request[key] = request.query[field] != void 0 ? request.query[field] : null;
              break;
            case Source.BODY:
              this.request[key] = request.body[field] != void 0 ? request.body[field] : null;
              break;
            default:
              console.warn("unknown source of " + this.datamap[key].source + " in " + this.url);
              break;
          }
          if (this.datamap[key].required && (this.request[key] == Endpoint2.InitValue || this.request[key] == null) && reply.ok) {
            reply.message = "required data at '" + key + "'/'" + field + "' in " + this.datamap[key].source + " for " + this.url + " is missing";
            reply.ok = false;
          }
        }
        return reply;
      }
      data(source) {
        let data = null;
        let key;
        let field;
        if (this.request != Endpoint2.InitValue) {
          for (key in this.datamap) {
            field = ObjectUtils.notNull(this.datamap[key].field) ? this.datamap[key].field : key;
            if (this.datamap[key].source == source) {
              if (this.request[key] != Endpoint2.InitValue) {
                if (ObjectUtils.isNull(data))
                  data = {};
                data[field] = this.request[key];
              }
            }
          }
        }
        return data;
      }
      get headers() {
        return this.data(Source.HEADER);
      }
      get body() {
        return this.data(Source.BODY);
      }
      getEndpoint() {
        return this.url;
      }
      getUrl(ignore_url_service = false) {
        let url_with_params = "";
        url_with_params = this.getEndpoint();
        let params = this.data(Source.PARAM);
        let queries = this.data(Source.QUERY);
        let key;
        if (params) {
          for (key in params) {
            url_with_params = StringUtils_default.replaceAll(url_with_params, ":" + key, params[key]);
          }
        }
        let first_query = true;
        if (queries) {
          for (key in queries) {
            if (first_query) {
              url_with_params += "?";
              first_query = false;
            } else {
              url_with_params += "&";
            }
            url_with_params += key + "=" + queries[key].toString();
          }
        }
        return url_with_params;
      }
      errorCode(code) {
        return code;
      }
      failure(status, code, message) {
        return { status, data: { code, message } };
      }
    }
    Endpoint2.Definition = Definition;
  })(Endpoint || (Endpoint = {}));

  // build/api/getLayoutEndpoint.js
  var getLayoutEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/layout", false);
      this.datamap = {};
    }
    reset() {
      this.request = {};
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getLayoutEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getLayoutEndpoint2.Error || (getLayoutEndpoint2.Error = {}));
  })(getLayoutEndpoint || (getLayoutEndpoint = {}));

  // build/api/getSettingsEndpoint.js
  var getSettingsEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/settings", false);
      this.datamap = {};
    }
    reset() {
      this.request = {};
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getSettingsEndpoint2) {
    let UnitsOfMeasure;
    (function(UnitsOfMeasure2) {
      UnitsOfMeasure2["STANDARD"] = "standard";
      UnitsOfMeasure2["METRIC"] = "metric";
    })(UnitsOfMeasure = getSettingsEndpoint2.UnitsOfMeasure || (getSettingsEndpoint2.UnitsOfMeasure = {}));
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getSettingsEndpoint2.Error || (getSettingsEndpoint2.Error = {}));
  })(getSettingsEndpoint || (getSettingsEndpoint = {}));

  // build/api/getConfigEndpoint.js
  var getConfigEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/config", false);
      this.datamap = {};
    }
    reset() {
      this.request = {};
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getConfigEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getConfigEndpoint2.Error || (getConfigEndpoint2.Error = {}));
  })(getConfigEndpoint || (getConfigEndpoint = {}));

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn2, thisArg) {
    return function wrap() {
      return fn2.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  var { toString } = Object.prototype;
  var { getPrototypeOf } = Object;
  var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  var kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type;
  };
  var typeOfTest = (type) => (thing) => typeof thing === type;
  var { isArray } = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  var isString = typeOfTest("string");
  var isFunction = typeOfTest("function");
  var isNumber = typeOfTest("number");
  var isObject = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject3 = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject(val) && isFunction(val.pipe);
  var isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
  var trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn2, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i = 0, l = obj.length; i < l; i++) {
        fn2.call(null, obj[i], i, obj);
      }
    } else {
      const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys2.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys2[i];
        fn2.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys2 = Object.keys(obj);
    let i = keys2.length;
    let _key;
    while (i-- > 0) {
      _key = keys2[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  var _global = (() => {
    if (typeof globalThis !== "undefined")
      return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
  })();
  var isContextDefined = (context) => !isUndefined(context) && context !== _global;
  function merge3() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue2 = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject3(result[targetKey]) && isPlainObject3(val)) {
        result[targetKey] = merge3(result[targetKey], val);
      } else if (isPlainObject3(val)) {
        result[targetKey] = merge3({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue2);
    }
    return result;
  }
  var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, { allOwnKeys });
    return a;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter3, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter3 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter3 || filter3(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position2) => {
    str = String(str);
    if (position2 === void 0 || position2 > str.length) {
      position2 = str.length;
    }
    position2 -= searchString.length;
    const lastIndex = str.indexOf(searchString, position2);
    return lastIndex !== -1 && lastIndex === position2;
  };
  var toArray = (thing) => {
    if (!thing)
      return null;
    if (isArray(thing))
      return thing;
    let i = thing.length;
    if (!isNumber(i))
      return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };
  var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn2) => {
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn2.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty14 }) => (obj, prop) => hasOwnProperty14.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
        return false;
      }
      const value = obj[name];
      if (!isFunction(value))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter2) => {
    const obj = {};
    const define2 = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter2));
    return obj;
  };
  var noop2 = () => {
  };
  var toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };
  var ALPHA = "abcdefghijklmnopqrstuvwxyz";
  var DIGIT = "0123456789";
  var ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const { length: length2 } = alphabet;
    while (size--) {
      str += alphabet[Math.random() * length2 | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i) => {
      if (isObject(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i] = source;
          const target = isArray(source) ? [] : {};
          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });
          stack[i] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  var isAsyncFn = kindOfTest("AsyncFunction");
  var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
  var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }
    return postMessageSupported ? ((token3, callbacks) => {
      _global.addEventListener("message", ({ source, data }) => {
        if (source === _global && data === token3) {
          callbacks.length && callbacks.shift()();
        }
      }, false);
      return (cb) => {
        callbacks.push(cb);
        _global.postMessage(token3, "*");
      };
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === "function",
    isFunction(_global.postMessage)
  );
  var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
  var utils_default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject,
    isPlainObject: isPlainObject3,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge3,
    extend,
    trim: trim2,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop2,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap
  };

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils_default.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code) => {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error, axiosError, function filter3(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/helpers/null.js
  var null_default = null;

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key) {
    return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey(path, key, dots) {
    if (!path)
      return key;
    return path.concat(key).map(function each(token3, i) {
      token3 = removeBrackets(token3);
      return !dots && i ? "[" + token3 + "]" : token3;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils_default.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
          key = removeBrackets(key);
          arr.forEach(function each(el, index) {
            !(utils_default.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path, key, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path) {
      if (utils_default.isUndefined(value))
        return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each(el, key) {
        const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils_default.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
      return charMap[match2];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append2(name, value) {
    this._pairs.push([name, value]);
  };
  prototype2.toString = function toString2(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url, params, options) {
    if (!params) {
      return url;
    }
    const _encode = options && options.encode || encode2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn2) {
      utils_default.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn2(h);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default = typeof FormData !== "undefined" ? FormData : null;

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  var Blob_default = typeof Blob !== "undefined" ? Blob : null;

  // node_modules/axios/lib/platform/browser/index.js
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default,
      Blob: Blob_default
    },
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/platform/common/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    hasBrowserEnv: () => hasBrowserEnv,
    hasStandardBrowserEnv: () => hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
    navigator: () => _navigator,
    origin: () => origin
  });
  var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
  var _navigator = typeof navigator === "object" && navigator || void 0;
  var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
  var hasStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  var origin = hasBrowserEnv && window.location.href || "http://localhost";

  // node_modules/axios/lib/platform/index.js
  var platform_default = {
    ...utils_exports,
    ...browser_default
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (platform_default.isNode && utils_default.isBuffer(value)) {
          this.append(key, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
      return match2[0] === "[]" ? "" : match2[1] || match2[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys2 = Object.keys(arr);
    let i;
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      if (name === "__proto__")
        return true;
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils_default.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils_default.isObject(target[name])) {
        target[name] = [];
      }
      const result = buildPath(path, value, target[name], index);
      if (result && utils_default.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/defaults/index.js
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: ["xhr", "http", "fetch"],
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
      }
      if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
        return data;
      }
      if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: platform_default.classes.FormData,
      Blob: platform_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults.headers[method] = {};
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line2) {
      i = line2.indexOf(":");
      key = line2.substring(0, i).trim().toLowerCase();
      val = line2.substring(i + 1).trim();
      if (!key || parsed[key] && ignoreDuplicateOf[key]) {
        return;
      }
      if (key === "set-cookie") {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  var $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match2;
    while (match2 = tokensRE.exec(str)) {
      tokens[match2[1]] = match2[2];
    }
    return tokens;
  }
  var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context, value, header, filter3, isHeaderNameFilter) {
    if (utils_default.isFunction(filter3)) {
      return filter3.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils_default.isString(value))
      return;
    if (utils_default.isString(filter3)) {
      return value.indexOf(filter3) !== -1;
    }
    if (utils_default.isRegExp(filter3)) {
      return filter3.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char2, str) => {
      return char2.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var AxiosHeaders = class {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key = utils_default.findKey(self2, lHeader);
        if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
          self2[key || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders_default(header), valueOrRewrite);
      } else if (utils_default.isHeaders(header)) {
        for (const [key, value] of header.entries()) {
          setHeader(value, key, rewrite);
        }
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        if (key) {
          const value = this[key];
          if (!parser) {
            return value;
          }
          if (parser === true) {
            return parseTokens(value);
          }
          if (utils_default.isFunction(parser)) {
            return parser.call(this, value, key);
          }
          if (utils_default.isRegExp(parser)) {
            return parser.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key = utils_default.findKey(self2, _header);
          if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
            delete self2[key];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys2 = Object.keys(this);
      let i = keys2.length;
      let deleted = false;
      while (i--) {
        const key = keys2[i];
        if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value, header) => {
        const key = utils_default.findKey(headers, header);
        if (key) {
          self2[key] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils_default.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  };
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context = response || config;
    const headers = AxiosHeaders_default.from(context.headers);
    let data = context.data;
    utils_default.forEach(fns, function transform(fn2) {
      data = fn2.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/core/settle.js
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match2 && match2[1] || "";
  }

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min2) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min2 = min2 !== void 0 ? min2 : 1e3;
    return function push(chunkLength) {
      const now2 = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now2;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now2;
      let i = tail;
      let bytesCount = 0;
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now2 - firstSampleTS < min2) {
        return;
      }
      const passed = startedAt && now2 - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/helpers/throttle.js
  function throttle(fn2, freq) {
    let timestamp = 0;
    let threshold = 1e3 / freq;
    let lastArgs;
    let timer;
    const invoke = (args, now2 = Date.now()) => {
      timestamp = now2;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn2.apply(null, args);
    };
    const throttled = (...args) => {
      const now2 = Date.now();
      const passed = now2 - timestamp;
      if (passed >= threshold) {
        invoke(args, now2);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };
    const flush = () => lastArgs && invoke(lastArgs);
    return [throttled, flush];
  }
  var throttle_default = throttle;

  // node_modules/axios/lib/helpers/progressEventReducer.js
  var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return throttle_default((e) => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e,
        lengthComputable: total != null,
        [isDownloadStream ? "download" : "upload"]: true
      };
      listener(data);
    }, freq);
  };
  var progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null;
    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };
  var asyncDecorator = (fn2) => (...args) => utils_default.asap(() => fn2(...args));

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv() {
      const msie = platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    /* @__PURE__ */ function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }()
  );

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = platform_default.hasStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + "=" + encodeURIComponent(value)];
        utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
        utils_default.isString(path) && cookie.push("path=" + path);
        utils_default.isString(domain) && cookie.push("domain=" + domain);
        secure === true && cookie.push("secure");
        document.cookie = cookie.join("; ");
      },
      read(name) {
        const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match2 ? decodeURIComponent(match2[3]) : null;
      },
      remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    }
  ) : (
    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {
      },
      read() {
        return null;
      },
      remove() {
      }
    }
  );

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/core/mergeConfig.js
  var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({ caseless }, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, caseless) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge6 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge6(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge6 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }

  // node_modules/axios/lib/helpers/resolveConfig.js
  var resolveConfig_default = (config) => {
    const newConfig = mergeConfig({}, config);
    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
    newConfig.headers = headers = AxiosHeaders_default.from(headers);
    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
    if (auth) {
      headers.set(
        "Authorization",
        "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
      );
    }
    let contentType;
    if (utils_default.isFormData(data)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(void 0);
      } else if ((contentType = headers.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token3) => token3.trim()).filter(Boolean) : [];
        headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }
    return newConfig;
  };

  // node_modules/axios/lib/adapters/xhr.js
  var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  var xhr_default = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig_default(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
      let { responseType, onUploadProgress, onDownloadProgress } = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;
      function done() {
        flushUpload && flushUpload();
        flushDownload && flushDownload();
        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
        _config.signal && _config.signal.removeEventListener("abort", onCanceled);
      }
      let request = new XMLHttpRequest();
      request.open(_config.method.toUpperCase(), _config.url, true);
      request.timeout = _config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          "getAllResponseHeaders" in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = _config.transitional || transitional_default;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config,
          request
        ));
        request = null;
      };
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }
      if (!utils_default.isUndefined(_config.withCredentials)) {
        request.withCredentials = !!_config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = _config.responseType;
      }
      if (onDownloadProgress) {
        [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
        request.addEventListener("progress", downloadThrottled);
      }
      if (onUploadProgress && request.upload) {
        [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
        request.upload.addEventListener("progress", uploadThrottled);
        request.upload.addEventListener("loadend", flushUpload);
      }
      if (_config.cancelToken || _config.signal) {
        onCanceled = (cancel) => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
          request.abort();
          request = null;
        };
        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(_config.url);
      if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
        return;
      }
      request.send(requestData || null);
    });
  };

  // node_modules/axios/lib/helpers/composeSignals.js
  var composeSignals = (signals, timeout2) => {
    const { length: length2 } = signals = signals ? signals.filter(Boolean) : [];
    if (timeout2 || length2) {
      let controller = new AbortController();
      let aborted;
      const onabort = function(reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
        }
      };
      let timer = timeout2 && setTimeout(() => {
        timer = null;
        onabort(new AxiosError_default(`timeout ${timeout2} of ms exceeded`, AxiosError_default.ETIMEDOUT));
      }, timeout2);
      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach((signal2) => {
            signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
          });
          signals = null;
        }
      };
      signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
      const { signal } = controller;
      signal.unsubscribe = () => utils_default.asap(unsubscribe);
      return signal;
    }
  };
  var composeSignals_default = composeSignals;

  // node_modules/axios/lib/helpers/trackStream.js
  var streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength;
    if (!chunkSize || len < chunkSize) {
      yield chunk;
      return;
    }
    let pos = 0;
    let end2;
    while (pos < len) {
      end2 = pos + chunkSize;
      yield chunk.slice(pos, end2);
      pos = end2;
    }
  };
  var readBytes = async function* (iterable, chunkSize, encode4) {
    for await (const chunk of iterable) {
      yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode4(String(chunk)), chunkSize);
    }
  };
  var trackStream = (stream, chunkSize, onProgress, onFinish, encode4) => {
    const iterator = readBytes(stream, chunkSize, encode4);
    let bytes = 0;
    let done;
    let _onFinish = (e) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e);
      }
    };
    return new ReadableStream({
      async pull(controller) {
        try {
          const { done: done2, value } = await iterator.next();
          if (done2) {
            _onFinish();
            controller.close();
            return;
          }
          let len = value.byteLength;
          if (onProgress) {
            let loadedBytes = bytes += len;
            onProgress(loadedBytes);
          }
          controller.enqueue(new Uint8Array(value));
        } catch (err) {
          _onFinish(err);
          throw err;
        }
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator.return();
      }
    }, {
      highWaterMark: 2
    });
  };

  // node_modules/axios/lib/adapters/fetch.js
  var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
  var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
  var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
  var test = (fn2, ...args) => {
    try {
      return !!fn2(...args);
    } catch (e) {
      return false;
    }
  };
  var supportsRequestStream = isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform_default.origin, {
      body: new ReadableStream(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  var DEFAULT_CHUNK_SIZE = 64 * 1024;
  var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
  var resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && ((res) => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_2, config) => {
        throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
      });
    });
  })(new Response());
  var getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }
    if (utils_default.isBlob(body)) {
      return body.size;
    }
    if (utils_default.isSpecCompliantForm(body)) {
      const _request = new Request(platform_default.origin, {
        method: "POST",
        body
      });
      return (await _request.arrayBuffer()).byteLength;
    }
    if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
      return body.byteLength;
    }
    if (utils_default.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils_default.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };
  var resolveBodyLength = async (headers, body) => {
    const length2 = utils_default.toFiniteNumber(headers.getContentLength());
    return length2 == null ? getBodyLength(body) : length2;
  };
  var fetch_default = isFetchSupported && (async (config) => {
    let {
      url,
      method,
      data,
      signal,
      cancelToken,
      timeout: timeout2,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig_default(config);
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
    let request;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request(url, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);
        }
      }
      if (!utils_default.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = "credentials" in Request.prototype;
      request = new Request(url, {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      });
      let response = await fetch(request);
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response = new Response(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }, encodeText),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && unsubscribe && unsubscribe();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders_default.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError_default.from(err, err && err.code, config, request);
    }
  });

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters = {
    http: null_default,
    xhr: xhr_default,
    fetch: fetch_default
  };
  utils_default.forEach(knownAdapters, (fn2, value) => {
    if (fn2) {
      try {
        Object.defineProperty(fn2, "name", { value });
      } catch (e) {
      }
      Object.defineProperty(fn2, "adapterName", { value });
    }
  });
  var renderReason = (reason) => `- ${reason}`;
  var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
  var adapters_default = {
    getAdapter: (adapters) => {
      adapters = utils_default.isArray(adapters) ? adapters : [adapters];
      const { length: length2 } = adapters;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i = 0; i < length2; i++) {
        nameOrAdapter = adapters[i];
        let id;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError_default(`Unknown adapter '${id}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id || "#" + i] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s = length2 ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError_default(
          `There is no suitable adapter to dispatch the request ` + s,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters
  };

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default(null, config);
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(
      config,
      config.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.7.6";

  // node_modules/axios/lib/helpers/validator.js
  var validators = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
    validators[type] = function validator2(thing) {
      return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators.transitional = function transitional(validator2, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator2 === false) {
        throw new AxiosError_default(
          formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError_default.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator2 ? validator2(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys2 = Object.keys(options);
    let i = keys2.length;
    while (i-- > 0) {
      const opt = keys2[i];
      const validator2 = schema[opt];
      if (validator2) {
        const value = options[opt];
        const result = value === void 0 || validator2(value, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators
  };

  // node_modules/axios/lib/core/Axios.js
  var validators2 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy;
          Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
          try {
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          } catch (e) {
          }
        }
        throw err;
      }
    }
    _request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      const { transitional: transitional2, paramsSerializer, headers } = config;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils_default.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator_default.assertOptions(paramsSerializer, {
            encode: validators2.function,
            serialize: validators2.function
          }, true);
        }
      }
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils_default.merge(
        headers.common,
        headers[config.method]
      );
      headers && utils_default.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method) => {
          delete headers[method];
        }
      );
      config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i = 0;
      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i = 0;
      len = responseInterceptorChain.length;
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
      return promise;
    }
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url,
          data
        }));
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken = class _CancelToken {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token3 = this;
      this.promise.then((cancel) => {
        if (!token3._listeners)
          return;
        let i = token3._listeners.length;
        while (i-- > 0) {
          token3._listeners[i](cancel);
        }
        token3._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve) => {
          token3.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token3.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message, config, request) {
        if (token3.reason) {
          return;
        }
        token3.reason = new CanceledError_default(message, config, request);
        resolvePromise(token3.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
    toAbortSignal() {
      const controller = new AbortController();
      const abort = (err) => {
        controller.abort(err);
      };
      this.subscribe(abort);
      controller.signal.unsubscribe = () => this.unsubscribe(abort);
      return controller.signal;
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token3 = new _CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token3,
        cancel
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key, value]) => {
    HttpStatusCode[value] = key;
  });
  var HttpStatusCode_default = HttpStatusCode;

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
    utils_default.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders_default;
  axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters_default.getAdapter;
  axios.HttpStatusCode = HttpStatusCode_default;
  axios.default = axios;
  var axios_default = axios;

  // node_modules/axios/index.js
  var {
    Axios: Axios2,
    AxiosError: AxiosError2,
    CanceledError: CanceledError2,
    isCancel: isCancel2,
    CancelToken: CancelToken2,
    VERSION: VERSION2,
    all: all2,
    Cancel,
    isAxiosError: isAxiosError2,
    spread: spread2,
    toFormData: toFormData2,
    AxiosHeaders: AxiosHeaders2,
    HttpStatusCode: HttpStatusCode2,
    formToJSON,
    getAdapter,
    mergeConfig: mergeConfig2
  } = axios_default;

  // build/utils/Constants.js
  var Constants = class {
  };
  Constants.MINUTES_TO_MS = 6e4;
  Constants.HOURS_TO_MS = 36e5;
  Constants.DAYS_TO_MS = 864e5;
  Constants.MINUTES_TO_DAY = 1440;
  Constants.MILES_TO_METERS = 1609.344;

  // build/net/netClient.js
  var __awaiter2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var netClient = class _netClient {
    constructor(base_url, default_headers = {}, timeout2 = 1e3) {
      this.base_url = base_url;
      this.default_headers = default_headers;
      this.default_timeout = timeout2;
      this.cache = [];
      this.client = axios_default.create({ baseURL: base_url, headers: this.default_headers });
      this.timer = null;
      this.checkCache = this.checkCache.bind(this);
    }
    passHeaders(headers, names2) {
      let i;
      for (i = 0; i < names2.length; i++) {
        if (headers[names2[i]]) {
          this.setHeader(names2[i], headers[names2[i]]);
        }
      }
    }
    setHeader(name, value) {
      this.default_headers[name] = value;
    }
    deleteHeader(name) {
      if (ObjectUtils.notNull(this.default_headers[name])) {
        delete this.default_headers[name];
      }
    }
    clear() {
      this.cache = [];
      if (ObjectUtils.notNull(this.timer)) {
        clearInterval(this.timer);
        this.timer = null;
      }
    }
    getHeaders() {
      return this.default_headers;
    }
    compareEndpts(endpt1, endpt2) {
      if (endpt1.url == endpt2.url && endpt1.method == endpt2.method) {
        if (JSON.stringify(endpt1.request) === JSON.stringify(endpt2.request))
          return true;
      }
      return false;
    }
    checkCache() {
      const now2 = (/* @__PURE__ */ new Date()).getTime();
      let i = 0;
      while (i < this.cache.length) {
        if (this.cache[i].last_access + this.cache[i].lifespan * Constants.MINUTES_TO_MS < now2) {
          this.cache.splice(i, 1);
        } else {
          i++;
        }
      }
      if (this.cache.length == 0) {
        clearInterval(this.timer);
        this.timer = null;
      }
    }
    findCache(endpt) {
      let i;
      const now2 = (/* @__PURE__ */ new Date()).getTime();
      for (i = 0; i < this.cache.length; i++) {
        if (this.compareEndpts(this.cache[i].endpoint, endpt)) {
          if (this.cache[i].last_access + this.cache[i].lifespan * 1e3 * 60 < now2) {
            console.log("cache died");
            this.cache.splice(i, 1);
            if (this.cache.length == 0) {
              clearInterval(this.timer);
              this.timer = null;
            }
            return null;
          } else {
            return this.cache[i];
          }
        }
      }
      return null;
    }
    fetchLocal(endpt_1) {
      return __awaiter2(this, arguments, void 0, function* (endpt, options = null) {
        return yield this.fetch(endpt, {
          timeout: ObjectUtils.notNull(options) && ObjectUtils.notNull(options.timeout) ? options.timeout : null,
          cache: ObjectUtils.notNull(options) && ObjectUtils.notNull(options.cache) ? options.cache : null,
          lifespan: ObjectUtils.notNull(options) && ObjectUtils.notNull(options.lifespan) ? options.lifespan : null,
          ignoreUriService: true
        });
      });
    }
    fetch(endpt_1) {
      return __awaiter2(this, arguments, void 0, function* (endpt, options = null) {
        if (ObjectUtils.notNull(options) && options.cache && endpt.method === Network.Method.GET) {
          let cached = this.findCache(endpt);
          if (ObjectUtils.notNull(cached)) {
            cached.last_access = (/* @__PURE__ */ new Date()).getTime();
            return cached.reply;
          }
        }
        let reply = yield this.request(endpt.method, endpt.getUrl(ObjectUtils.notNull(options) && ObjectUtils.notNull(options.ignoreUriService) ? options.ignoreUriService : false), null, endpt.body, endpt.headers, ObjectUtils.notNull(options) && ObjectUtils.notNull(options.timeout) ? options.timeout : ObjectUtils.notNull(endpt.timeout) ? endpt.timeout : null);
        if (ObjectUtils.notNull(options) && ObjectUtils.notNull(options.cache) && options.cache === true && endpt.method === Network.Method.GET && reply.ok) {
          this.cache.push({ endpoint: endpt, last_access: (/* @__PURE__ */ new Date()).getTime(), reply, lifespan: options.lifespan ? options.lifespan : 15 });
          if (this.cache.length == 1) {
            this.timer = setInterval(this.checkCache, 1e3 * 60 * 5);
          }
        }
        return reply;
      });
    }
    head(url_1) {
      return __awaiter2(this, arguments, void 0, function* (url, parameters = null, data = {}, headers = {}, timeout2 = null) {
        return yield this.request("head", url, parameters, data, ObjectUtils.merge(headers, this.default_headers), timeout2);
      });
    }
    post(url_1) {
      return __awaiter2(this, arguments, void 0, function* (url, parameters = null, data = {}, headers = {}, timeout2 = null) {
        return yield this.request("post", url, parameters, data, ObjectUtils.merge(headers, this.default_headers), timeout2);
      });
    }
    get(url_1) {
      return __awaiter2(this, arguments, void 0, function* (url, parameters = null, headers = {}, timeout2 = null) {
        return yield this.request("get", url, parameters, null, ObjectUtils.merge(headers, this.default_headers), timeout2);
      });
    }
    put(url_1) {
      return __awaiter2(this, arguments, void 0, function* (url, parameters = null, data = {}, headers = {}, timeout2 = null) {
        return yield this.request("put", url, parameters, data, ObjectUtils.merge(headers, this.default_headers), timeout2);
      });
    }
    delete(url_1) {
      return __awaiter2(this, arguments, void 0, function* (url, parameters = null, data = {}, headers = {}, timeout2 = null) {
        return yield this.request("delete", url, parameters, data, ObjectUtils.merge(headers, this.default_headers), timeout2);
      });
    }
    static queryString(parameters) {
      if (ObjectUtils.isNull(parameters))
        return "";
      let params = [];
      let name;
      for (name in parameters) {
        params.push(StringUtils_default.format("{0}={1}", name, parameters[name].toString()));
      }
      return params.join("&");
    }
    request(method_1, url_1) {
      return __awaiter2(this, arguments, void 0, function* (method, url, parameters = null, data = null, headers = null, timeout2 = null) {
        let reply = { ok: true, duration: 0 };
        let start2 = Date.now();
        try {
          let args = _netClient.queryString(parameters);
          if (args.length > 0)
            url = url + "?" + args;
          const response = yield this.client.request({
            url,
            method,
            data,
            headers: ObjectUtils.merge(headers, this.default_headers),
            timeout: ObjectUtils.notNull(timeout2) ? timeout2 : this.default_timeout
          });
          reply.ok = response.status >= 200 && response.status <= 299;
          reply.headers = Object.assign({}, response.headers);
          reply.data = response.data;
          reply.duration = Date.now() - start2;
          return reply;
        } catch (err) {
          const error = err;
          let error_code = error.code ? error.code : "EXCEPTION";
          let error_messsage = "server error at: " + method + ":" + url;
          let error_status = error.code && error.code == "ECONNABORTED" ? 504 : 500;
          reply.duration = Date.now() - start2;
          reply.ok = false;
          if (error.response) {
            error_status = error.response.status;
            if (error.response.data != null) {
              if (error.response.data.code)
                error_code = error.response.data.code;
              if (error.response.data.message)
                error_messsage = error.response.data.message;
            }
          } else if (error.request) {
          } else {
            error_code = "UNKNOWN";
          }
          reply.error = { status: error_status, code: error_code, message: error_messsage };
          return reply;
        }
      });
    }
  };
  netClient.SHARED_HEADERS = [
    Endpoint.Headers.APP_ID,
    Endpoint.Headers.DEVKEY,
    Endpoint.Headers.TRANSACTION_ID
  ];

  // build/client/AppData.js
  var __awaiter3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var AppData = class _AppData {
    constructor() {
      this.host = "http://localhost:8080";
      this.begin_window = 6;
      this.end_window = 22;
      this.layout = { pages: [] };
      this.settings = null;
    }
    clear() {
      return __awaiter3(this, void 0, void 0, function* () {
      });
    }
    static instance() {
      if (_AppData._instance == null) {
        _AppData._instance = new _AppData();
      }
      return _AppData._instance;
    }
    nextUpdate(tm) {
      const now2 = /* @__PURE__ */ new Date();
      return now2.getHours() >= this.begin_window && now2.getHours() <= this.end_window ? tm : (24 - now2.getHours() + this.begin_window - 1) * Constants.HOURS_TO_MS;
    }
    initialize(main3) {
      return __awaiter3(this, void 0, void 0, function* () {
        let headers = {};
        this.webserver = new netClient(this.host, headers);
        const config_endpt = new getConfigEndpoint();
        const config_reply = yield this.webserver.fetch(config_endpt);
        if (config_reply.ok) {
          this.config = config_reply.data;
        }
        const endpt = new getLayoutEndpoint();
        const init_reply = yield this.webserver.fetch(endpt);
        if (init_reply.ok) {
          this.layout = init_reply.data.layout;
        }
        const settings_endpt = new getSettingsEndpoint();
        const settings_reply = yield this.webserver.fetch(settings_endpt);
        if (settings_reply.ok) {
          this.settings = settings_reply.data;
          console.log("settings", this.settings);
        }
        main3();
      });
    }
  };
  AppData.event_colors = ["#7986CB", "#33B679", "#8E24AA", "#E67C73", "#F6BF26", "#F4511E", "#039BE5", "#616161", "#3F51B5", "#0B8043", "#D50000"];
  var AppData_default = AppData;

  // build/client/Page.js
  var React252 = __toESM(require_react(), 1);

  // build/client/modules/space/Space.js
  var React128 = __toESM(require_react(), 1);
  function Space(props) {
    return React128.createElement("div", null);
  }

  // build/client/modules/clock/Clock.js
  var React129 = __toESM(require_react(), 1);
  function Clock(props) {
    const [time, setTime] = React129.useState("");
    const [seconds, setSeconds] = React129.useState("");
    const [date, setDate] = React129.useState("");
    const [dow, setDow] = React129.useState("");
    const [ampm, setAmPm] = React129.useState("");
    React129.useEffect(() => pageLoaded(), []);
    React129.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      update();
    }
    function update() {
      const dows = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      const now2 = /* @__PURE__ */ new Date();
      const hours = now2.getHours() > 12 ? now2.getHours() - 12 : now2.getHours();
      setTime(hours + ":" + StringUtils_default.leadingZero(now2.getMinutes(), 2));
      if (props.config.seconds)
        setSeconds(":" + StringUtils_default.leadingZero(now2.getSeconds(), 2));
      let display_date = months[now2.getMonth()] + " " + now2.getDate();
      if (props.config.date == "DM")
        display_date = now2.getDate() + " " + months[now2.getMonth()];
      setDow(dows[now2.getDay()] + ", " + display_date);
      setSeconds(":" + StringUtils_default.leadingZero(now2.getSeconds(), 2));
      setAmPm(now2.getHours() >= 12 ? "PM" : "AM");
      setTimeout(update, 1e3);
    }
    function pageUnloaded() {
    }
    return React129.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 0 },
      React129.createElement(
        Stack_default,
        { direction: "row", justifyContent: "flex-start", spacing: 1 },
        React129.createElement(Typography_default, { sx: { fontSize: 175, lineHeight: 1 }, component: "div", color: "text.primary" }, time),
        React129.createElement(
          Stack_default,
          { direction: "column", justifyContent: "flex-start", spacing: 3 },
          React129.createElement(Typography_default, { sx: { fontSize: 34, lineHeight: 1, paddingTop: "65px" }, component: "div", color: "text.secondary" }, seconds),
          React129.createElement(Typography_default, { sx: { fontSize: 34, lineHeight: 1 }, component: "div", color: "text.secondary" }, ampm)
        )
      ),
      React129.createElement(
        Stack_default,
        { direction: "row", justifyContent: "flex-start", spacing: 0, width: "100%" },
        React129.createElement(Typography_default, { align: "center", sx: { fontSize: 42, lineHeight: 1 }, color: "text.secondary", gutterBottom: true }, dow)
      )
    );
  }

  // build/client/modules/timezones/TimeZones.js
  var React131 = __toESM(require_react(), 1);

  // build/client/modules/timezones/TimeZone.js
  var React130 = __toESM(require_react(), 1);
  function TimeZone(props) {
    const [location, setLocation] = React130.useState("New York");
    const [clock, setClock] = React130.useState("12:36 AM");
    const tz_offset = React130.useRef(0);
    React130.useEffect(() => pageLoaded(), []);
    React130.useEffect(updateClock, [props.time]);
    React130.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      let parts = props.city.split("/");
      let locale = StringUtils_default.replaceAll(parts[1], "_", " ");
      setLocation(locale);
      updateClock();
    }
    function updateClock() {
      const utc = new Date(props.time.toLocaleString("en", { timeZone: props.city }));
      let hrs = utc.getHours() >= 12 ? utc.getHours() - 12 : utc.getHours();
      if (hrs == 0)
        hrs = 12;
      const fmt = StringUtils_default.format("{0}:{1} {2}", hrs, StringUtils_default.leadingZero(utc.getMinutes(), 2), utc.getHours() >= 12 ? "PM" : "AM");
      setClock(fmt);
    }
    function pageUnloaded() {
      console.log("TimeZone unloaded");
    }
    return React130.createElement(
      Stack_default,
      { direction: "row", spacing: 0, gap: 0, sx: { width: "100%", paddingTope: "5px" } },
      React130.createElement(
        Box_default,
        { sx: { width: "50%", paddingLeft: "10px" } },
        React130.createElement(Typography_default, { sx: { fontSize: 36, lineHeight: 1 }, component: "div", color: "text.primary" }, location)
      ),
      React130.createElement(
        Box_default,
        { sx: { width: "50%", display: "flex", justifyContent: "flex-end", paddingRight: "10px" } },
        React130.createElement(Typography_default, { sx: { fontSize: 36, lineHeight: 1 }, component: "div", color: "text.primary" }, clock)
      )
    );
  }

  // build/client/modules/timezones/TimeZones.js
  function TimeZones(props) {
    const [tzs, setTimezones] = React131.useState([]);
    const [clock, setClock] = React131.useState(/* @__PURE__ */ new Date());
    const timer_id = React131.useRef(null);
    React131.useEffect(() => pageLoaded(), []);
    React131.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      setTimezones(props.config.tzs);
      const seconds_to_minute = 61 - clock.getSeconds();
      setTimeout(startClock, seconds_to_minute * 1e3);
    }
    function pageUnloaded() {
      clearInterval(timer_id.current);
    }
    function startClock() {
      updateClock();
      timer_id.current = setInterval(updateClock, Constants.MINUTES_TO_MS);
    }
    function updateClock() {
      setClock(/* @__PURE__ */ new Date());
    }
    return React131.createElement(Stack_default, { direction: "column", spacing: 0, gap: 1 }, tzs.map((tz, index) => {
      return React131.createElement(TimeZone, { key: tz, city: tz, time: clock });
    }));
  }

  // build/client/modules/weather/Weather.js
  var React147 = __toESM(require_react(), 1);

  // build/api/getWxNowEndpoint.js
  var getWxNowEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/wx/now", false);
      this.datamap = {
        location: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true },
        units: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true }
      };
    }
    reset() {
      this.request = {
        location: Endpoint.InitValue,
        units: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getWxNowEndpoint2) {
    let Units;
    (function(Units2) {
      Units2["STANDARD"] = "standard";
      Units2["METRIC"] = "metric";
      Units2["IMPERIAL"] = "imperial";
    })(Units = getWxNowEndpoint2.Units || (getWxNowEndpoint2.Units = {}));
    let Conditions;
    (function(Conditions2) {
      Conditions2["CLEAR"] = "clear";
      Conditions2["PARTLY_ClOUDY"] = "partly_cloudy";
      Conditions2["CLOUDY"] = "cloudy";
      Conditions2["OVERCAST"] = "overcast";
      Conditions2["DRIZZLE"] = "drizzle";
      Conditions2["SHOWERS"] = "showers";
      Conditions2["RAIN"] = "rain";
      Conditions2["THUNDERSTORM"] = "thunderstorms";
      Conditions2["SNOW"] = "snow";
      Conditions2["SLEET"] = "sleet";
      Conditions2["MIST"] = "mist";
      Conditions2["FOG"] = "fog";
      Conditions2["WIND"] = "wind";
    })(Conditions = getWxNowEndpoint2.Conditions || (getWxNowEndpoint2.Conditions = {}));
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getWxNowEndpoint2.Error || (getWxNowEndpoint2.Error = {}));
  })(getWxNowEndpoint || (getWxNowEndpoint = {}));

  // build/client/modules/weather/Wind.js
  var React132 = __toESM(require_react(), 1);
  function Wind(props) {
    const svg_container = React132.useRef(null);
    React132.useEffect(() => pageLoaded(), []);
    React132.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
    }
    function pageUnloaded() {
      console.log("wx unloaded");
    }
    let speed = props.minSpeed + "-" + props.maxSpeed;
    if (props.minSpeed == props.maxSpeed || props.maxSpeed == 0)
      speed = props.minSpeed.toString();
    const arrow2 = [props.size / 2 - 5 + ",0", props.size / 2 + 5 + ",0", props.size / 2 + ",15"];
    const tranform = StringUtils_default.format("rotate({0} {1} {2})", props.direction, props.size / 2, props.size / 2);
    return React132.createElement(
      "div",
      null,
      React132.createElement(
        "svg",
        { width: props.size, height: props.size },
        React132.createElement(
          "g",
          null,
          React132.createElement("circle", { stroke: "white", cx: props.size / 2, cy: props.size / 2, r: props.size / 2 - 2, strokeWidth: 2, fillOpacity: 0 }),
          React132.createElement("text", { x: "50%", y: "25%", textAnchor: "middle", fill: "white", fontSize: "10", strokeWidth: "2px", dy: ".3em" }, "Wind"),
          React132.createElement("text", { x: "50%", y: "50%", textAnchor: "middle", fill: "white", fontSize: "20", strokeWidth: "2px", dy: ".3em" }, speed),
          React132.createElement("text", { x: "50%", y: "75%", textAnchor: "middle", fill: "white", fontSize: "10", strokeWidth: "2px", dy: ".3em" }, props.units),
          React132.createElement("polygon", { points: arrow2.join(" "), fill: "white", transform: tranform })
        )
      )
    );
  }

  // build/client/modules/weather/Humidity.js
  var React133 = __toESM(require_react(), 1);
  function Humidity(props) {
    React133.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
    }
    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
      var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;
      return {
        x: centerX + radius * Math.cos(angleInRadians),
        y: centerY + radius * Math.sin(angleInRadians)
      };
    }
    function describeArc(x, y, radius, spread3, startAngle, endAngle) {
      var innerStart = polarToCartesian(x, y, radius, endAngle);
      var innerEnd = polarToCartesian(x, y, radius, startAngle);
      var outerStart = polarToCartesian(x, y, radius + spread3, endAngle);
      var outerEnd = polarToCartesian(x, y, radius + spread3, startAngle);
      var largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
      var d = [
        "M",
        outerStart.x,
        outerStart.y,
        "A",
        radius + spread3,
        radius + spread3,
        0,
        largeArcFlag,
        0,
        outerEnd.x,
        outerEnd.y,
        "L",
        innerEnd.x,
        innerEnd.y,
        "A",
        radius,
        radius,
        0,
        largeArcFlag,
        1,
        innerStart.x,
        innerStart.y,
        "L",
        outerStart.x,
        outerStart.y,
        "Z"
      ].join(" ");
      return d;
    }
    let color3 = "white";
    if (props.value >= 30 && props.value <= 55)
      color3 = "green";
    else if (props.value > 55 && props.value <= 75)
      color3 = "yellow";
    else if (props.value > 75)
      color3 = "red";
    return React133.createElement(
      "div",
      null,
      React133.createElement(
        "svg",
        { width: props.size, height: props.size },
        React133.createElement(
          "g",
          null,
          React133.createElement("path", { d: describeArc(props.size / 2, props.size / 2, props.size / 2 - 9, 6, 0, 359.9 * (props.value / 100)), fill: color3, fillOpacity: 0.6 }),
          React133.createElement("circle", { stroke: "white", cx: props.size / 2, cy: props.size / 2, r: props.size / 2 - 2, strokeWidth: 2, fillOpacity: 0 }),
          React133.createElement("text", { x: "50%", y: "30%", textAnchor: "middle", fill: "white", fontSize: "10", strokeWidth: "2px", dy: ".3em" }, "Humidity"),
          React133.createElement(
            "text",
            { x: "50%", y: "60%", textAnchor: "middle", fill: "white", fontSize: "20", strokeWidth: "2px", dy: ".3em" },
            Math.round(props.value),
            "%"
          )
        )
      )
    );
  }

  // build/client/modules/weather/WxIcon.js
  var React146 = __toESM(require_react(), 1);

  // build/client/modules/weather/icons/SnowIcon.js
  var import_react9 = __toESM(require_react(), 1);
  var Icon = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react9.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react9.default.createElement("path", { d: "M11.9994 3V7M11.9994 7V17M11.9994 7L8.99943 4M11.9994 7L14.9994 4M11.9994 17V21M11.9994 17L8.99943 20M11.9994 17L14.9994 20M4.20624 7.49999L7.67034 9.49999M7.67034 9.49999L16.3306 14.5M7.67034 9.49999L3.57227 10.5981M7.67034 9.49999L6.57227 5.40191M16.3306 14.5L19.7947 16.5M16.3306 14.5L17.4287 18.5981M16.3306 14.5L20.4287 13.4019M4.2067 16.5L7.6708 14.5M7.6708 14.5L16.3311 9.49999M7.6708 14.5L3.57273 13.4019M7.6708 14.5L6.57273 18.5981M16.3311 9.49999L19.7952 7.49999M16.3311 9.49999L17.4291 5.40192M16.3311 9.49999L20.4291 10.5981", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/CloudyAltIcon.js
  var import_react10 = __toESM(require_react(), 1);
  var Icon2 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react10.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react10.default.createElement("path", { d: "M5.38846 12.7023C3.98522 12.1237 3 10.7636 3 9.17807C3 7.42863 4.3 5.8125 6.25 5.5C6.86168 4.0617 8.30934 3 9.9978 3C12.1607 3 13.9285 4.65893 14.05 6.75C14.8721 7.10549 15.5169 7.83126 15.8166 8.69914M5.38846 12.7023C4.50928 13.5938 4 14.7867 4 16.0315C4 18.7755 6.28335 21 9.1 21L16.75 21C19.0972 21 21 19.1279 21 16.8185C21 15.1039 19.951 13.5202 18.45 12.875C18.3457 11.0905 17.3135 9.5483 15.8166 8.69914M5.38846 12.7023C6.11557 11.9651 7.0957 11.4339 8.25 11.25C9.04989 9.3802 10.943 8 13.151 8C14.1227 8 15.0333 8.25474 15.8166 8.69914", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/ThunderstormIcon.js
  var import_react11 = __toESM(require_react(), 1);
  var Icon3 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react11.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react11.default.createElement("path", { d: "M13 11L10 16H15L12 21M6 16.4438C4.22194 15.5683 3 13.7502 3 11.6493C3 9.20008 4.8 6.9375 7.5 6.5C8.34694 4.48637 10.3514 3 12.6893 3C15.684 3 18.1317 5.32251 18.3 8.25C19.8893 8.94488 21 10.6503 21 12.4969C21 14.0582 20.206 15.4339 19 16.2417", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/ShowersIcon.js
  var import_react12 = __toESM(require_react(), 1);
  var Icon4 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react12.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react12.default.createElement("path", { d: "M7.45508 2V3M11.3438 3.61084L10.6366 4.31795M4.27344 10.6821L3.56633 11.3892M1.95508 7.5H2.95508M3.56641 3.61084L4.27351 4.31795M6.50049 9.21251C6.38862 9.15163 6.2832 9.08038 6.18553 9.00006C5.73952 8.63325 5.45508 8.07714 5.45508 7.45459C5.45508 6.35002 6.35051 5.45459 7.45508 5.45459C8.21398 5.45459 8.87416 5.87727 9.21303 6.50006C9.29756 6.65541 9.3621 6.82321 9.40319 7M9.8 21C7.14903 21 5 18.9466 5 16.4137C5 14.3144 6.6 12.375 9 12C9.75283 10.274 11.5346 9 13.6127 9C16.2747 9 18.4504 10.9907 18.6 13.5C20.0127 14.0956 21 15.5574 21 17.1402C21 19.2719 19.2091 21 17 21L9.8 21Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/RainIcon.js
  var import_react13 = __toESM(require_react(), 1);
  var Icon5 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react13.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react13.default.createElement("path", { d: "M4 14.7519C3.37037 13.8768 3 12.8059 3 11.6493C3 9.20008 4.8 6.9375 7.5 6.5C8.34694 4.48637 10.3514 3 12.6893 3C15.684 3 18.1317 5.32251 18.3 8.25C19.8893 8.94488 21 10.6503 21 12.4969C21 13.5693 20.6254 14.5541 20 15.3275M12.5 12.9995L10.5 21.0008M8.5 11.9995L6.5 20.0008M16.5 12L14.5 20.0013", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/FewCloudsIcon.js
  var import_react14 = __toESM(require_react(), 1);
  var Icon6 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react14.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react14.default.createElement("path", { d: "M11.0947 8.02658C11.5476 5.73111 13.5717 4 16 4C18.7614 4 21 6.23858 21 9C21 11.0345 19.7849 12.7852 18.0408 13.5659M11.0947 8.02658C9.24194 8.21766 7.68947 9.4193 7 11C4.6 11.375 3 13.3144 3 15.4137C3 17.9466 5.14903 20 7.8 20L15 20C17.2091 20 19 18.2719 19 16.1402C19 15.1829 18.6388 14.2698 18.0408 13.5659M11.0947 8.02658C11.265 8.00902 11.4378 8 11.6127 8C14.2747 8 16.4504 9.99072 16.6 12.5C17.1583 12.7354 17.6501 13.106 18.0408 13.5659", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/FogIcon.js
  var import_react15 = __toESM(require_react(), 1);
  var Icon7 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react15.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react15.default.createElement("path", { d: "M3 18H7M10 18H21M5 21H12M16 21H19M8.8 15C6.14903 15 4 12.9466 4 10.4137C4 8.31435 5.6 6.375 8 6C8.75283 4.27403 10.5346 3 12.6127 3C15.2747 3 17.4504 4.99072 17.6 7.5C19.0127 8.09561 20 9.55741 20 11.1402C20 13.2719 18.2091 15 16 15L8.8 15Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/SunAltIcon.js
  var import_react16 = __toESM(require_react(), 1);
  var Icon8 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react16.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
    import_react16.default.createElement("path", { d: "M5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12ZM5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM12,5a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5Zm5.66,2.34a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34Zm-12-.29a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5ZM12,19a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19Z", fill: color3 })
  );

  // build/client/modules/weather/icons/SleetIcon.js
  var import_react17 = __toESM(require_react(), 1);
  function Icon9({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) {
    return import_react17.default.createElement(
      "svg",
      { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      import_react17.default.createElement("path", { d: "M6 18L4 21M9.5 20V19M9.5 19V18M9.5 19H10.5M9.5 19H8.5M14.5 18L12.5 21M18 20V19M18 19V18M18 19H19M18 19H17M8.8 15C6.14903 15 4 12.9466 4 10.4137C4 8.31435 5.6 6.375 8 6C8.75283 4.27403 10.5346 3 12.6127 3C15.2747 3 17.4504 4.99072 17.6 7.5C19.0127 8.09561 20 9.55741 20 11.1402C20 13.2719 18.2091 15 16 15L8.8 15Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
    );
  }

  // build/client/modules/weather/icons/DrizzleIcon.js
  var import_react18 = __toESM(require_react(), 1);
  var Icon10 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react18.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react18.default.createElement("path", { d: "M9 18H9.01M15 18H15.01M9 20.5H9.01M12 18H12.01M12 21H12.01M15 20.5H15.01M8.8 15C6.14903 15 4 12.9466 4 10.4137C4 8.31435 5.6 6.375 8 6C8.75283 4.27403 10.5346 3 12.6127 3C15.2747 3 17.4504 4.99072 17.6 7.5C19.0127 8.09561 20 9.55741 20 11.1402C20 13.2719 18.2091 15 16 15L8.8 15Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/weather/icons/MistIcon.js
  var import_react19 = __toESM(require_react(), 1);
  var Icon11 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react19.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react19.default.createElement("path", { d: "M17,15a1.73,1.73,0,0,1-.86-.23,3.11,3.11,0,0,0-3.27,0,1.73,1.73,0,0,1-1.73,0,3.11,3.11,0,0,0-3.27,0A1.74,1.74,0,0,1,7,15a1,1,0,0,0,0,2,3.72,3.72,0,0,0,1.9-.52,1.13,1.13,0,0,1,1.2,0,3.75,3.75,0,0,0,3.8,0,1.13,1.13,0,0,1,1.2,0A3.72,3.72,0,0,0,17,17a1,1,0,0,0,0-2Zm0,4a1.73,1.73,0,0,1-.86-.23,3.11,3.11,0,0,0-3.27,0,1.73,1.73,0,0,1-1.73,0,3.11,3.11,0,0,0-3.27,0A1.74,1.74,0,0,1,7,19a1,1,0,0,0,0,2,3.72,3.72,0,0,0,1.9-.52,1.13,1.13,0,0,1,1.2,0,3.75,3.75,0,0,0,3.8,0,1.13,1.13,0,0,1,1.2,0A3.72,3.72,0,0,0,17,21a1,1,0,0,0,0-2ZM18.42,7.21A7,7,0,0,0,5.06,9.11,4,4,0,0,0,2,13a4,4,0,0,0,1.34,3,1,1,0,0,0,.66.25,1,1,0,0,0,.75-.35,1,1,0,0,0-.09-1.41A1.93,1.93,0,0,1,4,13a2,2,0,0,1,2-2,1,1,0,0,0,1-1,5,5,0,0,1,9.73-1.61,1,1,0,0,0,.78.66A3,3,0,0,1,20,12a2.93,2.93,0,0,1-.74,2,1,1,0,1,0,1.48,1.33A4.91,4.91,0,0,0,22,12,5,5,0,0,0,18.42,7.21Z", fill: color3 })
  );

  // build/client/modules/weather/icons/WindIcon.js
  var import_react20 = __toESM(require_react(), 1);
  var Icon12 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react20.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react20.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M6.25 5.5C6.25 3.70508 7.70507 2.25 9.5 2.25C11.2949 2.25 12.75 3.70507 12.75 5.5C12.75 7.29493 11.2949 8.75 9.5 8.75H3C2.58579 8.75 2.25 8.41421 2.25 8C2.25 7.58579 2.58579 7.25 3 7.25H9.5C10.4665 7.25 11.25 6.4665 11.25 5.5C11.25 4.5335 10.4665 3.75 9.5 3.75C8.5335 3.75 7.75 4.5335 7.75 5.5V5.85714C7.75 6.27136 7.41421 6.60714 7 6.60714C6.58579 6.60714 6.25 6.27136 6.25 5.85714V5.5ZM14.25 7.5C14.25 5.15279 16.1528 3.25 18.5 3.25C20.8472 3.25 22.75 5.15279 22.75 7.5C22.75 9.84721 20.8472 11.75 18.5 11.75H2C1.58579 11.75 1.25 11.4142 1.25 11C1.25 10.5858 1.58579 10.25 2 10.25H18.5C20.0188 10.25 21.25 9.01878 21.25 7.5C21.25 5.98122 20.0188 4.75 18.5 4.75C16.9812 4.75 15.75 5.98122 15.75 7.5V8C15.75 8.41421 15.4142 8.75 15 8.75C14.5858 8.75 14.25 8.41421 14.25 8V7.5ZM3.25 14C3.25 13.5858 3.58579 13.25 4 13.25H18.5C20.8472 13.25 22.75 15.1528 22.75 17.5C22.75 19.8472 20.8472 21.75 18.5 21.75C16.1528 21.75 14.25 19.8472 14.25 17.5V17C14.25 16.5858 14.5858 16.25 15 16.25C15.4142 16.25 15.75 16.5858 15.75 17V17.5C15.75 19.0188 16.9812 20.25 18.5 20.25C20.0188 20.25 21.25 19.0188 21.25 17.5C21.25 15.9812 20.0188 14.75 18.5 14.75H4C3.58579 14.75 3.25 14.4142 3.25 14Z", fill: color3 })
  );

  // build/client/modules/weather/WxIcon.js
  function WxIcon(value, size, color3 = "white") {
    switch (value) {
      case getWxNowEndpoint.Conditions.CLEAR:
        return React146.createElement(Icon8, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.PARTLY_ClOUDY:
        return React146.createElement(Icon6, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.CLOUDY:
        return React146.createElement(Icon2, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.OVERCAST:
        return React146.createElement(Icon2, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.MIST:
        return React146.createElement(Icon11, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.DRIZZLE:
        return React146.createElement(Icon10, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.SHOWERS:
        return React146.createElement(Icon4, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.RAIN:
        return React146.createElement(Icon5, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.THUNDERSTORM:
        return React146.createElement(Icon3, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.SNOW:
        return React146.createElement(Icon, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.SLEET:
        return React146.createElement(Icon9, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.FOG:
        return React146.createElement(Icon7, { color: color3, width: size + "px", height: size + "px" });
        break;
      case getWxNowEndpoint.Conditions.WIND:
        return React146.createElement(Icon12, { color: color3, width: size + "px", height: size + "px" });
        break;
      default:
        return React146.createElement(Icon8, { color: color3, width: size + "px", height: size + "px" });
    }
  }

  // build/client/modules/weather/Weather.js
  var __awaiter4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function Weather(props) {
    const [appdata2, setAppData] = React147.useState(AppData_default.instance());
    const [icon, setIcon] = React147.useState(getWxNowEndpoint.Conditions.CLEAR);
    const [temperature, setTemperature] = React147.useState("");
    const [feels_like, setFeelsLike] = React147.useState("");
    const [diff_temps, setDiffTemps] = React147.useState(true);
    const [wind_speed, setWindSpeed] = React147.useState(0);
    const [wind_gust, setWindGust] = React147.useState(0);
    const [wind_direction, setWindDirection] = React147.useState(0);
    const [humidity, setHumidity] = React147.useState(0);
    React147.useEffect(() => pageLoaded(), []);
    React147.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      refresh();
    }
    function pageUnloaded() {
    }
    function refresh() {
      return __awaiter4(this, void 0, void 0, function* () {
        const endpt = new getWxNowEndpoint();
        endpt.request.location = props.config.location;
        endpt.request.units = props.config.units;
        const reply = yield appdata2.webserver.fetch(endpt, { cache: true, lifespan: 15 });
        if (reply.ok) {
          const data = reply.data;
          const temp = Math.ceil(data.reports[0].temperature);
          const like = Math.ceil(data.reports[0].feels_like);
          setTemperature(temp.toString() + "\xB0");
          setFeelsLike(like.toString() + "\xB0");
          setDiffTemps(Math.abs(temp - like) > 2);
          setIcon(data.reports[0].conditions);
          setWindSpeed(Math.ceil(data.reports[0].wind.speed));
          setWindGust(Math.ceil(data.reports[0].wind.gust));
          setWindDirection(data.reports[0].wind.direction);
          setHumidity(data.reports[0].humidity);
        }
        setTimeout(refresh, appdata2.nextUpdate(props.config.update_hours * Constants.HOURS_TO_MS));
      });
    }
    return React147.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 0, width: "100%" },
      React147.createElement(
        Stack_default,
        { direction: "row", justifyContent: "flex-start", spacing: 1, width: "100%" },
        WxIcon(icon, 175, "white"),
        React147.createElement(
          Stack_default,
          { direction: "column", alignContent: "center", spacing: 1 },
          React147.createElement(Typography_default, { sx: { fontSize: 87, lineHeight: 1 }, component: "div", color: "text.primary" }, temperature),
          diff_temps ? React147.createElement(Typography_default, { sx: { fontSize: 20, lineHeight: 1 }, component: "div", color: "text.secondary" }, "Feels Like") : null,
          diff_temps ? React147.createElement(Typography_default, { sx: { fontSize: 40, lineHeight: 1 }, component: "div", color: "text.secondary" }, feels_like) : null
        )
      ),
      React147.createElement(
        Stack_default,
        { direction: "row", alignContent: "flex-start", spacing: 1, width: "100%" },
        wind_speed > 0 || wind_gust > 0 ? React147.createElement(Wind, { size: 75, minSpeed: wind_speed, maxSpeed: wind_gust, direction: wind_direction, units: "MPH" }) : null,
        React147.createElement(Humidity, { size: 75, value: humidity })
      )
    );
  }

  // build/client/modules/weather/WeatherForecast.js
  var React149 = __toESM(require_react(), 1);

  // build/api/getWxForecastEndpoint.js
  var getWxForecastEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/wx/forecast", false);
      this.datamap = {
        location: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true },
        units: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true },
        days: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.QUERY, required: true }
      };
    }
    reset() {
      this.request = {
        location: Endpoint.InitValue,
        units: Endpoint.InitValue,
        days: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getWxForecastEndpoint2) {
    let Units;
    (function(Units2) {
      Units2["STANDARD"] = "standard";
      Units2["METRIC"] = "metric";
      Units2["IMPERIAL"] = "imperial";
    })(Units = getWxForecastEndpoint2.Units || (getWxForecastEndpoint2.Units = {}));
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getWxForecastEndpoint2.Error || (getWxForecastEndpoint2.Error = {}));
  })(getWxForecastEndpoint || (getWxForecastEndpoint = {}));

  // build/client/widgets/Title.js
  var React148 = __toESM(require_react(), 1);
  function Title(props) {
    return React148.createElement(
      Box_default,
      { component: "section", width: "100%", height: "20px", sx: { borderBottom: 1, borderColor: "text.secondary" } },
      React148.createElement(Typography_default, { component: "div", color: "text.secondary", sx: { fontSize: 18, lineHeight: 1 } }, props.label)
    );
  }

  // build/client/modules/weather/WeatherForecast.js
  var __awaiter5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Direction;
  (function(Direction4) {
    Direction4["HORIZONTAL"] = "horizontal";
    Direction4["VERTICAL"] = "vertical";
  })(Direction || (Direction = {}));
  function WeatherForecast(props) {
    const [appdata2, setAppData] = React149.useState(AppData_default.instance());
    const dow = React149.useRef(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    const [forecast, setForecast] = React149.useState([]);
    React149.useEffect(() => pageLoaded(), []);
    React149.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      refresh();
    }
    function pageUnloaded() {
    }
    function refresh() {
      return __awaiter5(this, void 0, void 0, function* () {
        const endpt = new getWxForecastEndpoint();
        endpt.request.location = props.config.location;
        endpt.request.units = props.config.units;
        endpt.request.days = props.config.days;
        const reply = yield appdata2.webserver.fetch(endpt, { cache: true, lifespan: 60 });
        if (reply.ok) {
          const data = reply.data;
          setForecast(data.reports);
        }
        setTimeout(refresh, appdata2.nextUpdate(props.config.update_hours * Constants.HOURS_TO_MS));
      });
    }
    function renderWx(day, index) {
      let date = /* @__PURE__ */ new Date();
      date.setTime(day.date * 1e3 + date.getTimezoneOffset() * Constants.MINUTES_TO_MS);
      let elem = React149.createElement(
        Box_default,
        { key: day.date, sx: { display: "flex", justifyContent: "center", alignItems: "center" }, width: "80px" },
        React149.createElement(
          Stack_default,
          { direction: "column", spacing: 0, gap: 0.5, sx: { display: "flex", justifyContent: "center", alignItems: "center" }, width: "100%" },
          React149.createElement(Typography_default, { component: "div", color: "text.primary" }, index == 0 ? "Today" : dow.current[date.getDay()]),
          WxIcon(day.conditions, 75),
          React149.createElement(
            Stack_default,
            { direction: "row", spacing: 0, gap: 0, width: "100%" },
            React149.createElement(Typography_default, { component: "div", color: "text.secondary", sx: { fontSize: 12, lineHeight: 1, paddingTop: "4px" } }, Math.floor(day.min_temp) + "\xB0"),
            React149.createElement(Box_default, { sx: { flexGrow: 1 } }),
            React149.createElement(Typography_default, { component: "div", color: "text.primary", sx: { fontSize: 18, lineHeight: 1 } }, Math.ceil(day.max_temp) + "\xB0")
          )
        )
      );
      return elem;
    }
    return React149.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 0, width: "100%" },
      props.config.title ? React149.createElement(Title, { label: "Forecast: " + props.config.name }) : null,
      React149.createElement(Stack_default, { direction: props.config.direction == Direction.HORIZONTAL ? "row" : "column", spacing: 0, gap: 5 }, forecast.map((day, index) => {
        return renderWx(day, index);
      }))
    );
  }

  // build/client/modules/calendar/Calendar.js
  var React229 = __toESM(require_react(), 1);

  // build/client/modules/calendar/MonthlyView.js
  var React228 = __toESM(require_react(), 1);

  // build/api/getCalendarEndpoint.js
  var getCalendarEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/calendar", false);
      this.datamap = {
        start_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.QUERY, required: true },
        end_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.QUERY, required: true },
        ids: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: false }
      };
    }
    reset() {
      this.request = {
        start_date: Endpoint.InitValue,
        end_date: Endpoint.InitValue,
        ids: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getCalendarEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getCalendarEndpoint2.Error || (getCalendarEndpoint2.Error = {}));
  })(getCalendarEndpoint || (getCalendarEndpoint = {}));

  // build/client/widgets/AlertPrompt.js
  var React150 = __toESM(require_react(), 1);
  var AlertAction2;
  (function(AlertAction3) {
    AlertAction3["CANCEL"] = "cancel";
    AlertAction3["NO"] = "no";
    AlertAction3["YES"] = "yes";
  })(AlertAction2 || (AlertAction2 = {}));
  function AlertPrompt(props) {
    const [open, setOpen] = React150.useState(props.open);
    React150.useEffect(() => propsChanged(), [props]);
    function propsChanged() {
      setOpen(props.open);
    }
    function onClose() {
      props.onAction(AlertAction2.CANCEL);
    }
    function onAction(action) {
      props.onAction(action);
    }
    return React150.createElement(
      Dialog_default,
      { open, onClose },
      React150.createElement(DialogTitle_default, { id: "alert-dialog-title" }, props.title),
      React150.createElement(
        DialogContent_default,
        null,
        React150.createElement(DialogContentText_default, { id: "alert-dialog-description" }, props.message)
      ),
      React150.createElement(
        DialogActions_default,
        null,
        props.canelText ? React150.createElement(Button_default, { onClick: () => onAction(AlertAction2.CANCEL) }, props.canelText) : null,
        props.noText ? React150.createElement(Button_default, { onClick: () => onAction(AlertAction2.NO) }, props.noText) : null,
        React150.createElement(Button_default, { onClick: () => onAction(AlertAction2.YES), autoFocus: true }, props.yesText)
      )
    );
  }

  // build/client/modules/calendar/EditEvent.js
  var React226 = __toESM(require_react(), 1);
  var import_dayjs2 = __toESM(require_dayjs_min(), 1);

  // node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
  init_extends();
  var React164 = __toESM(require_react());
  var import_prop_types91 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
  init_extends();
  var React152 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
  init_extends();
  var React151 = __toESM(require_react());
  var import_prop_types89 = __toESM(require_prop_types());
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var _excluded85 = ["localeText"];
  var MuiPickersAdapterContext = /* @__PURE__ */ React151.createContext(null);
  if (true) {
    MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
  }
  var LocalizationProvider = function LocalizationProvider2(inProps) {
    const {
      localeText: inLocaleText
    } = inProps, otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded85);
    const {
      utils: parentUtils,
      localeText: parentLocaleText
    } = React151.useContext(MuiPickersAdapterContext) ?? {
      utils: void 0,
      localeText: void 0
    };
    const props = useThemeProps2({
      // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
      // We will then merge this theme value with our value manually
      props: otherInProps,
      name: "MuiLocalizationProvider"
    });
    const {
      children,
      dateAdapter: DateAdapter,
      dateFormats,
      dateLibInstance,
      adapterLocale,
      localeText: themeLocaleText
    } = props;
    const localeText = React151.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
    const utils = React151.useMemo(() => {
      if (!DateAdapter) {
        if (parentUtils) {
          return parentUtils;
        }
        return null;
      }
      const adapter = new DateAdapter({
        locale: adapterLocale,
        formats: dateFormats,
        instance: dateLibInstance
      });
      if (!adapter.isMUIAdapter) {
        throw new Error(["MUI X: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation"].join(`
`));
      }
      return adapter;
    }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
    const defaultDates = React151.useMemo(() => {
      if (!utils) {
        return null;
      }
      return {
        minDate: utils.date("1900-01-01T00:00:00.000"),
        maxDate: utils.date("2099-12-31T00:00:00.000")
      };
    }, [utils]);
    const contextValue = React151.useMemo(() => {
      return {
        utils,
        defaultDates,
        localeText
      };
    }, [defaultDates, utils, localeText]);
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(MuiPickersAdapterContext.Provider, {
      value: contextValue,
      children
    });
  };
  true ? LocalizationProvider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Locale for the date library you are using
     */
    adapterLocale: import_prop_types89.default.any,
    children: import_prop_types89.default.node,
    /**
     * Date library adapter class function.
     * @see See the localization provider {@link https://mui.com/x/react-date-pickers/getting-started/#setup-your-date-library-adapter date adapter setup section} for more details.
     */
    dateAdapter: import_prop_types89.default.func,
    /**
     * Formats that are used for any child pickers
     */
    dateFormats: import_prop_types89.default.shape({
      dayOfMonth: import_prop_types89.default.string,
      dayOfMonthFull: import_prop_types89.default.string,
      fullDate: import_prop_types89.default.string,
      fullTime: import_prop_types89.default.string,
      fullTime12h: import_prop_types89.default.string,
      fullTime24h: import_prop_types89.default.string,
      hours12h: import_prop_types89.default.string,
      hours24h: import_prop_types89.default.string,
      keyboardDate: import_prop_types89.default.string,
      keyboardDateTime: import_prop_types89.default.string,
      keyboardDateTime12h: import_prop_types89.default.string,
      keyboardDateTime24h: import_prop_types89.default.string,
      meridiem: import_prop_types89.default.string,
      minutes: import_prop_types89.default.string,
      month: import_prop_types89.default.string,
      monthShort: import_prop_types89.default.string,
      normalDate: import_prop_types89.default.string,
      normalDateWithWeekday: import_prop_types89.default.string,
      seconds: import_prop_types89.default.string,
      shortDate: import_prop_types89.default.string,
      weekday: import_prop_types89.default.string,
      weekdayShort: import_prop_types89.default.string,
      year: import_prop_types89.default.string
    }),
    /**
     * Date library instance you are using, if it has some global overrides
     * ```jsx
     * dateLibInstance={momentTimeZone}
     * ```
     */
    dateLibInstance: import_prop_types89.default.any,
    /**
     * Locale for components texts
     */
    localeText: import_prop_types89.default.object
  } : void 0;

  // node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
  init_extends();
  var getPickersLocalization = (pickersTranslations) => {
    return {
      components: {
        MuiLocalizationProvider: {
          defaultProps: {
            localeText: _extends({}, pickersTranslations)
          }
        }
      }
    };
  };

  // node_modules/@mui/x-date-pickers/locales/enUS.js
  var enUSPickers = {
    // Calendar navigation
    previousMonth: "Previous month",
    nextMonth: "Next month",
    // View navigation
    openPreviousView: "Open previous view",
    openNextView: "Open next view",
    calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
    // DateRange labels
    start: "Start",
    end: "End",
    startDate: "Start date",
    startTime: "Start time",
    endDate: "End date",
    endTime: "End time",
    // Action bar
    cancelButtonLabel: "Cancel",
    clearButtonLabel: "Clear",
    okButtonLabel: "OK",
    todayButtonLabel: "Today",
    // Toolbar titles
    datePickerToolbarTitle: "Select date",
    dateTimePickerToolbarTitle: "Select date & time",
    timePickerToolbarTitle: "Select time",
    dateRangePickerToolbarTitle: "Select date range",
    // Clock labels
    clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
    hoursClockNumberText: (hours) => `${hours} hours`,
    minutesClockNumberText: (minutes) => `${minutes} minutes`,
    secondsClockNumberText: (seconds) => `${seconds} seconds`,
    // Digital clock labels
    selectViewText: (view) => `Select ${view}`,
    // Calendar labels
    calendarWeekNumberHeaderLabel: "Week number",
    calendarWeekNumberHeaderText: "#",
    calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
    calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
    // Open picker labels
    openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose date, selected date is ${utils.format(value, "fullDate")}` : "Choose date",
    openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose time, selected time is ${utils.format(value, "fullTime")}` : "Choose time",
    fieldClearLabel: "Clear value",
    // Table labels
    timeTableLabel: "pick time",
    dateTableLabel: "pick date",
    // Field section placeholders
    fieldYearPlaceholder: (params) => "Y".repeat(params.digitAmount),
    fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
    fieldDayPlaceholder: () => "DD",
    fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
    fieldHoursPlaceholder: () => "hh",
    fieldMinutesPlaceholder: () => "mm",
    fieldSecondsPlaceholder: () => "ss",
    fieldMeridiemPlaceholder: () => "aa",
    // View names
    year: "Year",
    month: "Month",
    day: "Day",
    weekDay: "Week day",
    hours: "Hours",
    minutes: "Minutes",
    seconds: "Seconds",
    meridiem: "Meridiem",
    // Common
    empty: "Empty"
  };
  var DEFAULT_LOCALE = enUSPickers;
  var enUS = getPickersLocalization(enUSPickers);

  // node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
  var useLocalizationContext = () => {
    const localization = React152.useContext(MuiPickersAdapterContext);
    if (localization === null) {
      throw new Error(["MUI X: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join("\n"));
    }
    if (localization.utils === null) {
      throw new Error(["MUI X: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join("\n"));
    }
    const localeText = React152.useMemo(() => _extends({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
    return React152.useMemo(() => _extends({}, localization, {
      localeText
    }), [localization, localeText]);
  };
  var useUtils = () => useLocalizationContext().utils;
  var useDefaultDates = () => useLocalizationContext().defaultDates;
  var useNow = (timezone) => {
    const utils = useUtils();
    const now2 = React152.useRef();
    if (now2.current === void 0) {
      now2.current = utils.date(void 0, timezone);
    }
    return now2.current;
  };

  // node_modules/@mui/x-date-pickers/hooks/usePickersTranslations.js
  var usePickersTranslations = () => useLocalizationContext().localeText;

  // node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
  init_extends();
  var React155 = __toESM(require_react());

  // node_modules/@mui/system/RtlProvider/index.js
  var React153 = __toESM(require_react());
  var import_prop_types90 = __toESM(require_prop_types());
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var RtlContext2 = /* @__PURE__ */ React153.createContext();
  function RtlProvider2({
    value,
    ...props
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(RtlContext2.Provider, {
      value: value ?? true,
      ...props
    });
  }
  true ? RtlProvider2.propTypes = {
    children: import_prop_types90.default.node,
    value: import_prop_types90.default.bool
  } : void 0;
  var useRtl2 = () => {
    const value = React153.useContext(RtlContext2);
    return value ?? false;
  };

  // node_modules/@mui/x-date-pickers/icons/index.js
  var React154 = __toESM(require_react());
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var ArrowDropDownIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");
  var ArrowLeftIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
  }), "ArrowLeft");
  var ArrowRightIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  }), "ArrowRight");
  var CalendarIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
  }), "Calendar");
  var ClockIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(React154.Fragment, {
    children: [/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
      d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
      d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
    })]
  }), "Clock");
  var DateRangeIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
  }), "DateRange");
  var TimeIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(React154.Fragment, {
    children: [/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
      d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
      d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
    })]
  }), "Time");
  var ClearIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime127.jsx)("path", {
    d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Clear");

  // node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/pickersArrowSwitcherClasses.js
  function getPickersArrowSwitcherUtilityClass(slot) {
    return generateUtilityClass("MuiPickersArrowSwitcher", slot);
  }
  var pickersArrowSwitcherClasses = generateUtilityClasses("MuiPickersArrowSwitcher", ["root", "spacer", "button", "previousIconButton", "nextIconButton", "leftArrowIcon", "rightArrowIcon"]);

  // node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var _excluded86 = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel", "labelId"];
  var _excluded216 = ["ownerState"];
  var _excluded311 = ["ownerState"];
  var PickersArrowSwitcherRoot = styled_default2("div", {
    name: "MuiPickersArrowSwitcher",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "flex"
  });
  var PickersArrowSwitcherSpacer = styled_default2("div", {
    name: "MuiPickersArrowSwitcher",
    slot: "Spacer",
    overridesResolver: (props, styles5) => styles5.spacer
  })(({
    theme: theme2
  }) => ({
    width: theme2.spacing(3)
  }));
  var PickersArrowSwitcherButton = styled_default2(IconButton_default, {
    name: "MuiPickersArrowSwitcher",
    slot: "Button",
    overridesResolver: (props, styles5) => styles5.button
  })({
    variants: [{
      props: {
        hidden: true
      },
      style: {
        visibility: "hidden"
      }
    }]
  });
  var useUtilityClasses55 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      spacer: ["spacer"],
      button: ["button"],
      previousIconButton: ["previousIconButton"],
      nextIconButton: ["nextIconButton"],
      leftArrowIcon: ["leftArrowIcon"],
      rightArrowIcon: ["rightArrowIcon"]
    };
    return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
  };
  var PickersArrowSwitcher = /* @__PURE__ */ React155.forwardRef(function PickersArrowSwitcher2(inProps, ref) {
    const isRtl = useRtl2();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersArrowSwitcher"
    });
    const {
      children,
      className,
      slots,
      slotProps,
      isNextDisabled,
      isNextHidden,
      onGoToNext,
      nextLabel,
      isPreviousDisabled,
      isPreviousHidden,
      onGoToPrevious,
      previousLabel,
      labelId
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
    const ownerState = props;
    const classes = useUtilityClasses55(ownerState);
    const nextProps = {
      isDisabled: isNextDisabled,
      isHidden: isNextHidden,
      goTo: onGoToNext,
      label: nextLabel
    };
    const previousProps = {
      isDisabled: isPreviousDisabled,
      isHidden: isPreviousHidden,
      goTo: onGoToPrevious,
      label: previousLabel
    };
    const PreviousIconButton = slots?.previousIconButton ?? PickersArrowSwitcherButton;
    const previousIconButtonProps = useSlotProps_default({
      elementType: PreviousIconButton,
      externalSlotProps: slotProps?.previousIconButton,
      additionalProps: {
        size: "medium",
        title: previousProps.label,
        "aria-label": previousProps.label,
        disabled: previousProps.isDisabled,
        edge: "end",
        onClick: previousProps.goTo
      },
      ownerState: _extends({}, ownerState, {
        hidden: previousProps.isHidden
      }),
      className: clsx_default(classes.button, classes.previousIconButton)
    });
    const NextIconButton = slots?.nextIconButton ?? PickersArrowSwitcherButton;
    const nextIconButtonProps = useSlotProps_default({
      elementType: NextIconButton,
      externalSlotProps: slotProps?.nextIconButton,
      additionalProps: {
        size: "medium",
        title: nextProps.label,
        "aria-label": nextProps.label,
        disabled: nextProps.isDisabled,
        edge: "start",
        onClick: nextProps.goTo
      },
      ownerState: _extends({}, ownerState, {
        hidden: nextProps.isHidden
      }),
      className: clsx_default(classes.button, classes.nextIconButton)
    });
    const LeftArrowIcon = slots?.leftArrowIcon ?? ArrowLeftIcon;
    const _useSlotProps = useSlotProps_default({
      elementType: LeftArrowIcon,
      externalSlotProps: slotProps?.leftArrowIcon,
      additionalProps: {
        fontSize: "inherit"
      },
      ownerState,
      className: classes.leftArrowIcon
    }), leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded216);
    const RightArrowIcon = slots?.rightArrowIcon ?? ArrowRightIcon;
    const _useSlotProps2 = useSlotProps_default({
      elementType: RightArrowIcon,
      externalSlotProps: slotProps?.rightArrowIcon,
      additionalProps: {
        fontSize: "inherit"
      },
      ownerState,
      className: classes.rightArrowIcon
    }), rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded311);
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsxs)(PickersArrowSwitcherRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime128.jsx)(PreviousIconButton, _extends({}, previousIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps)) : /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps))
      })), children ? /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(Typography_default, {
        variant: "subtitle1",
        component: "span",
        id: labelId,
        children
      }) : /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(PickersArrowSwitcherSpacer, {
        className: classes.spacer,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(NextIconButton, _extends({}, nextIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps)) : /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps))
      }))]
    }));
  });

  // node_modules/@mui/x-date-pickers/internals/utils/views.js
  var areViewsEqual = (views, expectedViews) => {
    if (views.length !== expectedViews.length) {
      return false;
    }
    return expectedViews.every((expectedView) => views.includes(expectedView));
  };
  var applyDefaultViewProps = ({
    openTo,
    defaultOpenTo,
    views,
    defaultViews
  }) => {
    const viewsWithDefault = views ?? defaultViews;
    let openToWithDefault;
    if (openTo != null) {
      openToWithDefault = openTo;
    } else if (viewsWithDefault.includes(defaultOpenTo)) {
      openToWithDefault = defaultOpenTo;
    } else if (viewsWithDefault.length > 0) {
      openToWithDefault = viewsWithDefault[0];
    } else {
      throw new Error("MUI X: The `views` prop must contain at least one view.");
    }
    return {
      views: viewsWithDefault,
      openTo: openToWithDefault
    };
  };

  // node_modules/@mui/x-date-pickers/internals/utils/time-utils.js
  var timeViews = ["hours", "minutes", "seconds"];
  var isTimeView = (view) => timeViews.includes(view);
  var isInternalTimeView = (view) => timeViews.includes(view) || view === "meridiem";
  var getMeridiem = (date, utils) => {
    if (!date) {
      return null;
    }
    return utils.getHours(date) >= 12 ? "pm" : "am";
  };
  var convertValueToMeridiem = (value, meridiem, ampm) => {
    if (ampm) {
      const currentMeridiem = value >= 12 ? "pm" : "am";
      if (currentMeridiem !== meridiem) {
        return meridiem === "am" ? value - 12 : value + 12;
      }
    }
    return value;
  };
  var convertToMeridiem = (time, meridiem, ampm, utils) => {
    const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
    return utils.setHours(time, newHoursAmount);
  };
  var getSecondsInDay = (date, utils) => {
    return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
  };
  var createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
    if (disableIgnoringDatePartForTimeValidation) {
      return utils.isAfter(dateLeft, dateRight);
    }
    return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
  };
  var resolveTimeFormat = (utils, {
    format,
    views,
    ampm
  }) => {
    if (format != null) {
      return format;
    }
    const formats = utils.formats;
    if (areViewsEqual(views, ["hours"])) {
      return ampm ? `${formats.hours12h} ${formats.meridiem}` : formats.hours24h;
    }
    if (areViewsEqual(views, ["minutes"])) {
      return formats.minutes;
    }
    if (areViewsEqual(views, ["seconds"])) {
      return formats.seconds;
    }
    if (areViewsEqual(views, ["minutes", "seconds"])) {
      return `${formats.minutes}:${formats.seconds}`;
    }
    if (areViewsEqual(views, ["hours", "minutes", "seconds"])) {
      return ampm ? `${formats.hours12h}:${formats.minutes}:${formats.seconds} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}:${formats.seconds}`;
    }
    return ampm ? `${formats.hours12h}:${formats.minutes} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}`;
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useViews.js
  var React156 = __toESM(require_react());
  var warnedOnceNotValidView = false;
  function useViews({
    onChange,
    onViewChange,
    openTo,
    view: inView,
    views,
    autoFocus,
    focusedView: inFocusedView,
    onFocusedViewChange
  }) {
    if (true) {
      if (!warnedOnceNotValidView) {
        if (inView != null && !views.includes(inView)) {
          console.warn(`MUI X: \`view="${inView}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
          warnedOnceNotValidView = true;
        }
        if (inView == null && openTo != null && !views.includes(openTo)) {
          console.warn(`MUI X: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
          warnedOnceNotValidView = true;
        }
      }
    }
    const previousOpenTo = React156.useRef(openTo);
    const previousViews = React156.useRef(views);
    const defaultView = React156.useRef(views.includes(openTo) ? openTo : views[0]);
    const [view, setView] = useControlled({
      name: "useViews",
      state: "view",
      controlled: inView,
      default: defaultView.current
    });
    const defaultFocusedView = React156.useRef(autoFocus ? view : null);
    const [focusedView, setFocusedView] = useControlled({
      name: "useViews",
      state: "focusedView",
      controlled: inFocusedView,
      default: defaultFocusedView.current
    });
    React156.useEffect(() => {
      if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some((previousView2) => !views.includes(previousView2))) {
        setView(views.includes(openTo) ? openTo : views[0]);
        previousViews.current = views;
        previousOpenTo.current = openTo;
      }
    }, [openTo, setView, view, views]);
    const viewIndex = views.indexOf(view);
    const previousView = views[viewIndex - 1] ?? null;
    const nextView = views[viewIndex + 1] ?? null;
    const handleFocusedViewChange = useEventCallback_default((viewToFocus, hasFocus) => {
      if (hasFocus) {
        setFocusedView(viewToFocus);
      } else {
        setFocusedView(
          (prevFocusedView) => viewToFocus === prevFocusedView ? null : prevFocusedView
          // If false the blur is due to view switching
        );
      }
      onFocusedViewChange?.(viewToFocus, hasFocus);
    });
    const handleChangeView = useEventCallback_default((newView) => {
      handleFocusedViewChange(newView, true);
      if (newView === view) {
        return;
      }
      setView(newView);
      if (onViewChange) {
        onViewChange(newView);
      }
    });
    const goToNextView = useEventCallback_default(() => {
      if (nextView) {
        handleChangeView(nextView);
      }
    });
    const setValueAndGoToNextView = useEventCallback_default((value, currentViewSelectionState, selectedView) => {
      const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
      const hasMoreViews = selectedView ? (
        // handles case like `DateTimePicker`, where a view might return a `finish` selection state
        // but when it's not the final view given all `views` -> overall selection state should be `partial`.
        views.indexOf(selectedView) < views.length - 1
      ) : Boolean(nextView);
      const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? "partial" : currentViewSelectionState;
      onChange(value, globalSelectionState, selectedView);
      if (selectedView && selectedView !== view) {
        const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];
        if (nextViewAfterSelected) {
          handleChangeView(nextViewAfterSelected);
        }
      } else if (isSelectionFinishedOnCurrentView) {
        goToNextView();
      }
    });
    return {
      view,
      setView: handleChangeView,
      focusedView,
      setFocusedView: handleFocusedViewChange,
      nextView,
      previousView,
      // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)
      defaultView: views.includes(openTo) ? openTo : views[0],
      goToNextView,
      setValueAndGoToNextView
    };
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/date-helpers-hooks.js
  var React157 = __toESM(require_react());
  function useNextMonthDisabled(month, {
    disableFuture,
    maxDate,
    timezone
  }) {
    const utils = useUtils();
    return React157.useMemo(() => {
      const now2 = utils.date(void 0, timezone);
      const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now2, maxDate) ? now2 : maxDate);
      return !utils.isAfter(lastEnabledMonth, month);
    }, [disableFuture, maxDate, month, utils, timezone]);
  }
  function usePreviousMonthDisabled(month, {
    disablePast,
    minDate,
    timezone
  }) {
    const utils = useUtils();
    return React157.useMemo(() => {
      const now2 = utils.date(void 0, timezone);
      const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now2, minDate) ? now2 : minDate);
      return !utils.isBefore(firstEnabledMonth, month);
    }, [disablePast, minDate, month, utils, timezone]);
  }
  function useMeridiemMode(date, ampm, onChange, selectionState) {
    const utils = useUtils();
    const meridiemMode = getMeridiem(date, utils);
    const handleMeridiemChange = React157.useCallback((mode) => {
      const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
      onChange(timeWithMeridiem, selectionState ?? "partial");
    }, [ampm, date, onChange, selectionState, utils]);
    return {
      meridiemMode,
      handleMeridiemChange
    };
  }

  // node_modules/@mui/x-date-pickers/internals/constants/dimensions.js
  var DAY_SIZE = 36;
  var DAY_MARGIN = 2;
  var DIALOG_WIDTH = 320;
  var MAX_CALENDAR_HEIGHT = 280;
  var VIEW_HEIGHT = 336;
  var DIGITAL_CLOCK_VIEW_HEIGHT = 232;
  var MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;

  // node_modules/@mui/x-date-pickers/internals/components/PickerViewRoot/PickerViewRoot.js
  var PickerViewRoot = styled_default2("div")({
    overflow: "hidden",
    width: DIALOG_WIDTH,
    maxHeight: VIEW_HEIGHT,
    display: "flex",
    flexDirection: "column",
    margin: "0 auto"
  });

  // node_modules/@mui/x-date-pickers/TimeClock/timeClockClasses.js
  function getTimeClockUtilityClass(slot) {
    return generateUtilityClass("MuiTimeClock", slot);
  }
  var timeClockClasses = generateUtilityClasses("MuiTimeClock", ["root", "arrowSwitcher"]);

  // node_modules/@mui/x-date-pickers/TimeClock/Clock.js
  init_extends();
  var React159 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
  init_extends();
  var React158 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/TimeClock/shared.js
  var CLOCK_WIDTH = 220;
  var CLOCK_HOUR_WIDTH = 36;
  var clockCenter = {
    x: CLOCK_WIDTH / 2,
    y: CLOCK_WIDTH / 2
  };
  var baseClockPoint = {
    x: clockCenter.x,
    y: 0
  };
  var cx = baseClockPoint.x - clockCenter.x;
  var cy = baseClockPoint.y - clockCenter.y;
  var rad2deg = (rad) => rad * (180 / Math.PI);
  var getAngleValue = (step, offsetX, offsetY) => {
    const x = offsetX - clockCenter.x;
    const y = offsetY - clockCenter.y;
    const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
    let deg = rad2deg(atan);
    deg = Math.round(deg / step) * step;
    deg %= 360;
    const value = Math.floor(deg / step) || 0;
    const delta = x ** 2 + y ** 2;
    const distance = Math.sqrt(delta);
    return {
      value,
      distance
    };
  };
  var getMinutes = (offsetX, offsetY, step = 1) => {
    const angleStep = step * 6;
    let {
      value
    } = getAngleValue(angleStep, offsetX, offsetY);
    value = value * step % 60;
    return value;
  };
  var getHours = (offsetX, offsetY, ampm) => {
    const {
      value,
      distance
    } = getAngleValue(30, offsetX, offsetY);
    let hour = value || 12;
    if (!ampm) {
      if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
        hour += 12;
        hour %= 24;
      }
    } else {
      hour %= 12;
    }
    return hour;
  };

  // node_modules/@mui/x-date-pickers/TimeClock/clockPointerClasses.js
  function getClockPointerUtilityClass(slot) {
    return generateUtilityClass("MuiClockPointer", slot);
  }
  var clockPointerClasses = generateUtilityClasses("MuiClockPointer", ["root", "thumb"]);

  // node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var _excluded87 = ["className", "hasSelected", "isInner", "type", "viewValue"];
  var useUtilityClasses56 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      thumb: ["thumb"]
    };
    return composeClasses(slots, getClockPointerUtilityClass, classes);
  };
  var ClockPointerRoot = styled_default2("div", {
    name: "MuiClockPointer",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    width: 2,
    backgroundColor: (theme2.vars || theme2).palette.primary.main,
    position: "absolute",
    left: "calc(50% - 1px)",
    bottom: "50%",
    transformOrigin: "center bottom 0px",
    variants: [{
      props: {
        shouldAnimate: true
      },
      style: {
        transition: theme2.transitions.create(["transform", "height"])
      }
    }]
  }));
  var ClockPointerThumb = styled_default2("div", {
    name: "MuiClockPointer",
    slot: "Thumb",
    overridesResolver: (_2, styles5) => styles5.thumb
  })(({
    theme: theme2
  }) => ({
    width: 4,
    height: 4,
    backgroundColor: (theme2.vars || theme2).palette.primary.contrastText,
    borderRadius: "50%",
    position: "absolute",
    top: -21,
    left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
    border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme2.vars || theme2).palette.primary.main}`,
    boxSizing: "content-box",
    variants: [{
      props: {
        hasSelected: true
      },
      style: {
        backgroundColor: (theme2.vars || theme2).palette.primary.main
      }
    }]
  }));
  function ClockPointer(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiClockPointer"
    });
    const {
      className,
      isInner,
      type,
      viewValue
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
    const previousType = React158.useRef(type);
    React158.useEffect(() => {
      previousType.current = type;
    }, [type]);
    const ownerState = _extends({}, props, {
      shouldAnimate: previousType.current !== type
    });
    const classes = useUtilityClasses56(ownerState);
    const getAngleStyle = () => {
      const max2 = type === "hours" ? 12 : 60;
      let angle = 360 / max2 * viewValue;
      if (type === "hours" && viewValue > 12) {
        angle -= 360;
      }
      return {
        height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
        transform: `rotateZ(${angle}deg)`
      };
    };
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ClockPointerRoot, _extends({
      style: getAngleStyle(),
      className: clsx_default(className, classes.root),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ClockPointerThumb, {
        ownerState,
        className: classes.thumb
      })
    }));
  }

  // node_modules/@mui/x-date-pickers/TimeClock/clockClasses.js
  function getClockUtilityClass(slot) {
    return generateUtilityClass("MuiClock", slot);
  }
  var clockClasses = generateUtilityClasses("MuiClock", ["root", "clock", "wrapper", "squareMask", "pin", "amButton", "pmButton", "meridiemText", "selected"]);

  // node_modules/@mui/x-date-pickers/internals/utils/date-utils.js
  var mergeDateAndTime = (utils, dateParam, timeParam) => {
    let mergedDate = dateParam;
    mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));
    mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));
    mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));
    mergedDate = utils.setMilliseconds(mergedDate, utils.getMilliseconds(timeParam));
    return mergedDate;
  };
  var findClosestEnabledDate = ({
    date,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    isDateDisabled,
    utils,
    timezone
  }) => {
    const today = mergeDateAndTime(utils, utils.date(void 0, timezone), date);
    if (disablePast && utils.isBefore(minDate, today)) {
      minDate = today;
    }
    if (disableFuture && utils.isAfter(maxDate, today)) {
      maxDate = today;
    }
    let forward = date;
    let backward = date;
    if (utils.isBefore(date, minDate)) {
      forward = minDate;
      backward = null;
    }
    if (utils.isAfter(date, maxDate)) {
      if (backward) {
        backward = maxDate;
      }
      forward = null;
    }
    while (forward || backward) {
      if (forward && utils.isAfter(forward, maxDate)) {
        forward = null;
      }
      if (backward && utils.isBefore(backward, minDate)) {
        backward = null;
      }
      if (forward) {
        if (!isDateDisabled(forward)) {
          return forward;
        }
        forward = utils.addDays(forward, 1);
      }
      if (backward) {
        if (!isDateDisabled(backward)) {
          return backward;
        }
        backward = utils.addDays(backward, -1);
      }
    }
    return null;
  };
  var replaceInvalidDateByNull = (utils, value) => value == null || !utils.isValid(value) ? null : value;
  var applyDefaultDate = (utils, value, defaultValue) => {
    if (value == null || !utils.isValid(value)) {
      return defaultValue;
    }
    return value;
  };
  var areDatesEqual = (utils, a, b) => {
    if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {
      return true;
    }
    return utils.isEqual(a, b);
  };
  var getMonthsInYear = (utils, year) => {
    const firstMonth = utils.startOfYear(year);
    const months = [firstMonth];
    while (months.length < 12) {
      const prevMonth = months[months.length - 1];
      months.push(utils.addMonths(prevMonth, 1));
    }
    return months;
  };
  var getTodayDate = (utils, timezone, valueType) => valueType === "date" ? utils.startOfDay(utils.date(void 0, timezone)) : utils.date(void 0, timezone);
  var formatMeridiem = (utils, meridiem) => {
    const date = utils.setHours(utils.date(), meridiem === "am" ? 2 : 14);
    return utils.format(date, "meridiem");
  };
  var dateViews = ["year", "month", "day"];
  var isDatePickerView = (view) => dateViews.includes(view);
  var resolveDateFormat = (utils, {
    format,
    views
  }, isInToolbar) => {
    if (format != null) {
      return format;
    }
    const formats = utils.formats;
    if (areViewsEqual(views, ["year"])) {
      return formats.year;
    }
    if (areViewsEqual(views, ["month"])) {
      return formats.month;
    }
    if (areViewsEqual(views, ["day"])) {
      return formats.dayOfMonth;
    }
    if (areViewsEqual(views, ["month", "year"])) {
      return `${formats.month} ${formats.year}`;
    }
    if (areViewsEqual(views, ["day", "month"])) {
      return `${formats.month} ${formats.dayOfMonth}`;
    }
    if (isInToolbar) {
      return /en/.test(utils.getCurrentLocaleCode()) ? formats.normalDateWithWeekday : formats.normalDate;
    }
    return formats.keyboardDate;
  };
  var getWeekdays = (utils, date) => {
    const start2 = utils.startOfWeek(date);
    return [0, 1, 2, 3, 4, 5, 6].map((diff) => utils.addDays(start2, diff));
  };

  // node_modules/@mui/x-date-pickers/TimeClock/Clock.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  var useUtilityClasses57 = (ownerState) => {
    const {
      classes,
      meridiemMode
    } = ownerState;
    const slots = {
      root: ["root"],
      clock: ["clock"],
      wrapper: ["wrapper"],
      squareMask: ["squareMask"],
      pin: ["pin"],
      amButton: ["amButton", meridiemMode === "am" && "selected"],
      pmButton: ["pmButton", meridiemMode === "pm" && "selected"],
      meridiemText: ["meridiemText"]
    };
    return composeClasses(slots, getClockUtilityClass, classes);
  };
  var ClockRoot = styled_default2("div", {
    name: "MuiClock",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    margin: theme2.spacing(2)
  }));
  var ClockClock = styled_default2("div", {
    name: "MuiClock",
    slot: "Clock",
    overridesResolver: (_2, styles5) => styles5.clock
  })({
    backgroundColor: "rgba(0,0,0,.07)",
    borderRadius: "50%",
    height: 220,
    width: 220,
    flexShrink: 0,
    position: "relative",
    pointerEvents: "none"
  });
  var ClockWrapper = styled_default2("div", {
    name: "MuiClock",
    slot: "Wrapper",
    overridesResolver: (_2, styles5) => styles5.wrapper
  })({
    "&:focus": {
      outline: "none"
    }
  });
  var ClockSquareMask = styled_default2("div", {
    name: "MuiClock",
    slot: "SquareMask",
    overridesResolver: (_2, styles5) => styles5.squareMask
  })({
    width: "100%",
    height: "100%",
    position: "absolute",
    pointerEvents: "auto",
    outline: 0,
    // Disable scroll capabilities.
    touchAction: "none",
    userSelect: "none",
    variants: [{
      props: {
        disabled: false
      },
      style: {
        "@media (pointer: fine)": {
          cursor: "pointer",
          borderRadius: "50%"
        },
        "&:active": {
          cursor: "move"
        }
      }
    }]
  });
  var ClockPin = styled_default2("div", {
    name: "MuiClock",
    slot: "Pin",
    overridesResolver: (_2, styles5) => styles5.pin
  })(({
    theme: theme2
  }) => ({
    width: 6,
    height: 6,
    borderRadius: "50%",
    backgroundColor: (theme2.vars || theme2).palette.primary.main,
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  }));
  var meridiemButtonCommonStyles = (theme2, meridiemMode) => ({
    zIndex: 1,
    bottom: 8,
    paddingLeft: 4,
    paddingRight: 4,
    width: CLOCK_HOUR_WIDTH,
    variants: [{
      props: {
        meridiemMode
      },
      style: {
        backgroundColor: (theme2.vars || theme2).palette.primary.main,
        color: (theme2.vars || theme2).palette.primary.contrastText,
        "&:hover": {
          backgroundColor: (theme2.vars || theme2).palette.primary.light
        }
      }
    }]
  });
  var ClockAmButton = styled_default2(IconButton_default, {
    name: "MuiClock",
    slot: "AmButton",
    overridesResolver: (_2, styles5) => styles5.amButton
  })(({
    theme: theme2
  }) => _extends({}, meridiemButtonCommonStyles(theme2, "am"), {
    // keeping it here to make TS happy
    position: "absolute",
    left: 8
  }));
  var ClockPmButton = styled_default2(IconButton_default, {
    name: "MuiClock",
    slot: "PmButton",
    overridesResolver: (_2, styles5) => styles5.pmButton
  })(({
    theme: theme2
  }) => _extends({}, meridiemButtonCommonStyles(theme2, "pm"), {
    // keeping it here to make TS happy
    position: "absolute",
    right: 8
  }));
  var ClockMeridiemText = styled_default2(Typography_default, {
    name: "MuiClock",
    slot: "meridiemText",
    overridesResolver: (_2, styles5) => styles5.meridiemText
  })({
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  });
  function Clock2(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiClock"
    });
    const {
      ampm,
      ampmInClock,
      autoFocus,
      children,
      value,
      handleMeridiemChange,
      isTimeDisabled,
      meridiemMode,
      minutesStep = 1,
      onChange,
      selectedId,
      type,
      viewValue,
      disabled = false,
      readOnly,
      className
    } = props;
    const ownerState = props;
    const utils = useUtils();
    const translations = usePickersTranslations();
    const isMoving = React159.useRef(false);
    const classes = useUtilityClasses57(ownerState);
    const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
    const isPointerInner = !ampm && type === "hours" && (viewValue < 1 || viewValue > 12);
    const handleValueChange = (newValue, isFinish) => {
      if (disabled || readOnly) {
        return;
      }
      if (isTimeDisabled(newValue, type)) {
        return;
      }
      onChange(newValue, isFinish);
    };
    const setTime = (event, isFinish) => {
      let {
        offsetX,
        offsetY
      } = event;
      if (offsetX === void 0) {
        const rect = event.target.getBoundingClientRect();
        offsetX = event.changedTouches[0].clientX - rect.left;
        offsetY = event.changedTouches[0].clientY - rect.top;
      }
      const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
      handleValueChange(newSelectedValue, isFinish);
    };
    const handleTouchSelection = (event) => {
      isMoving.current = true;
      setTime(event, "shallow");
    };
    const handleTouchEnd = (event) => {
      if (isMoving.current) {
        setTime(event, "finish");
        isMoving.current = false;
      }
    };
    const handleMouseMove = (event) => {
      if (event.buttons > 0) {
        setTime(event.nativeEvent, "shallow");
      }
    };
    const handleMouseUp = (event) => {
      if (isMoving.current) {
        isMoving.current = false;
      }
      setTime(event.nativeEvent, "finish");
    };
    const hasSelected = React159.useMemo(() => {
      if (type === "hours") {
        return true;
      }
      return viewValue % 5 === 0;
    }, [type, viewValue]);
    const keyboardControlStep = type === "minutes" ? minutesStep : 1;
    const listboxRef = React159.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        listboxRef.current.focus();
      }
    }, [autoFocus]);
    const handleKeyDown2 = (event) => {
      if (isMoving.current) {
        return;
      }
      switch (event.key) {
        case "Home":
          handleValueChange(0, "partial");
          event.preventDefault();
          break;
        case "End":
          handleValueChange(type === "minutes" ? 59 : 23, "partial");
          event.preventDefault();
          break;
        case "ArrowUp":
          handleValueChange(viewValue + keyboardControlStep, "partial");
          event.preventDefault();
          break;
        case "ArrowDown":
          handleValueChange(viewValue - keyboardControlStep, "partial");
          event.preventDefault();
          break;
        case "Enter":
        case " ":
          handleValueChange(viewValue, "finish");
          event.preventDefault();
          break;
        default:
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(ClockRoot, {
      className: clsx_default(className, classes.root),
      children: [/* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(ClockClock, {
        className: classes.clock,
        children: [/* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockSquareMask, {
          onTouchMove: handleTouchSelection,
          onTouchStart: handleTouchSelection,
          onTouchEnd: handleTouchEnd,
          onMouseUp: handleMouseUp,
          onMouseMove: handleMouseMove,
          ownerState: {
            disabled
          },
          className: classes.squareMask
        }), !isSelectedTimeDisabled && /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(React159.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockPin, {
            className: classes.pin
          }), value != null && /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockPointer, {
            type,
            viewValue,
            isInner: isPointerInner,
            hasSelected
          })]
        }), /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockWrapper, {
          "aria-activedescendant": selectedId,
          "aria-label": translations.clockLabelText(type, value, utils),
          ref: listboxRef,
          role: "listbox",
          onKeyDown: handleKeyDown2,
          tabIndex: 0,
          className: classes.wrapper,
          children
        })]
      }), ampm && ampmInClock && /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(React159.Fragment, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockAmButton, {
          onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
          disabled: disabled || meridiemMode === null,
          ownerState,
          className: classes.amButton,
          title: formatMeridiem(utils, "am"),
          children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockMeridiemText, {
            variant: "caption",
            className: classes.meridiemText,
            children: formatMeridiem(utils, "am")
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockPmButton, {
          disabled: disabled || meridiemMode === null,
          onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
          ownerState,
          className: classes.pmButton,
          title: formatMeridiem(utils, "pm"),
          children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ClockMeridiemText, {
            variant: "caption",
            className: classes.meridiemText,
            children: formatMeridiem(utils, "pm")
          })
        })]
      })]
    });
  }

  // node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
  var React161 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
  init_extends();
  var React160 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/TimeClock/clockNumberClasses.js
  function getClockNumberUtilityClass(slot) {
    return generateUtilityClass("MuiClockNumber", slot);
  }
  var clockNumberClasses = generateUtilityClasses("MuiClockNumber", ["root", "selected", "disabled"]);

  // node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  var _excluded88 = ["className", "disabled", "index", "inner", "label", "selected"];
  var useUtilityClasses58 = (ownerState) => {
    const {
      classes,
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled"]
    };
    return composeClasses(slots, getClockNumberUtilityClass, classes);
  };
  var ClockNumberRoot = styled_default2("span", {
    name: "MuiClockNumber",
    slot: "Root",
    overridesResolver: (_2, styles5) => [styles5.root, {
      [`&.${clockNumberClasses.disabled}`]: styles5.disabled
    }, {
      [`&.${clockNumberClasses.selected}`]: styles5.selected
    }]
  })(({
    theme: theme2
  }) => ({
    height: CLOCK_HOUR_WIDTH,
    width: CLOCK_HOUR_WIDTH,
    position: "absolute",
    left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: "50%",
    color: (theme2.vars || theme2).palette.text.primary,
    fontFamily: theme2.typography.fontFamily,
    "&:focused": {
      backgroundColor: (theme2.vars || theme2).palette.background.paper
    },
    [`&.${clockNumberClasses.selected}`]: {
      color: (theme2.vars || theme2).palette.primary.contrastText
    },
    [`&.${clockNumberClasses.disabled}`]: {
      pointerEvents: "none",
      color: (theme2.vars || theme2).palette.text.disabled
    },
    variants: [{
      props: {
        inner: true
      },
      style: _extends({}, theme2.typography.body2, {
        color: (theme2.vars || theme2).palette.text.secondary
      })
    }]
  }));
  function ClockNumber(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiClockNumber"
    });
    const {
      className,
      disabled,
      index,
      inner,
      label,
      selected
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
    const ownerState = props;
    const classes = useUtilityClasses58(ownerState);
    const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
    const length2 = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
    const x = Math.round(Math.cos(angle) * length2);
    const y = Math.round(Math.sin(angle) * length2);
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ClockNumberRoot, _extends({
      className: clsx_default(className, classes.root),
      "aria-disabled": disabled ? true : void 0,
      "aria-selected": selected ? true : void 0,
      role: "option",
      style: {
        transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
      },
      ownerState
    }, other, {
      children: label
    }));
  }

  // node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var getHourNumbers = ({
    ampm,
    value,
    getClockNumberText,
    isDisabled,
    selectedId,
    utils
  }) => {
    const currentHours = value ? utils.getHours(value) : null;
    const hourNumbers = [];
    const startHour = ampm ? 1 : 0;
    const endHour = ampm ? 12 : 23;
    const isSelected = (hour) => {
      if (currentHours === null) {
        return false;
      }
      if (ampm) {
        if (hour === 12) {
          return currentHours === 12 || currentHours === 0;
        }
        return currentHours === hour || currentHours - 12 === hour;
      }
      return currentHours === hour;
    };
    for (let hour = startHour; hour <= endHour; hour += 1) {
      let label = hour.toString();
      if (hour === 0) {
        label = "00";
      }
      const inner = !ampm && (hour === 0 || hour > 12);
      label = utils.formatNumber(label);
      const selected = isSelected(hour);
      hourNumbers.push(/* @__PURE__ */ (0, import_jsx_runtime132.jsx)(ClockNumber, {
        id: selected ? selectedId : void 0,
        index: hour,
        inner,
        selected,
        disabled: isDisabled(hour),
        label,
        "aria-label": getClockNumberText(label)
      }, hour));
    }
    return hourNumbers;
  };
  var getMinutesNumbers = ({
    utils,
    value,
    isDisabled,
    getClockNumberText,
    selectedId
  }) => {
    const f = utils.formatNumber;
    return [[5, f("05")], [10, f("10")], [15, f("15")], [20, f("20")], [25, f("25")], [30, f("30")], [35, f("35")], [40, f("40")], [45, f("45")], [50, f("50")], [55, f("55")], [0, f("00")]].map(([numberValue, label], index) => {
      const selected = numberValue === value;
      return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(ClockNumber, {
        label,
        id: selected ? selectedId : void 0,
        index: index + 1,
        inner: false,
        disabled: isDisabled(numberValue),
        selected,
        "aria-label": getClockNumberText(label)
      }, numberValue);
    });
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js
  var React162 = __toESM(require_react());
  var useValueWithTimezone = ({
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager
  }) => {
    const utils = useUtils();
    const firstDefaultValue = React162.useRef(defaultValue);
    const inputValue = valueProp ?? firstDefaultValue.current ?? valueManager.emptyValue;
    const inputTimezone = React162.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);
    const setInputTimezone = useEventCallback_default((newValue) => {
      if (inputTimezone == null) {
        return newValue;
      }
      return valueManager.setTimezone(utils, inputTimezone, newValue);
    });
    const timezoneToRender = timezoneProp ?? inputTimezone ?? "default";
    const valueWithTimezoneToRender = React162.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
    const handleValueChange = useEventCallback_default((newValue, ...otherParams) => {
      const newValueWithInputTimezone = setInputTimezone(newValue);
      onChange?.(newValueWithInputTimezone, ...otherParams);
    });
    return {
      value: valueWithTimezoneToRender,
      handleValueChange,
      timezone: timezoneToRender
    };
  };
  var useControlledValueWithTimezone = ({
    name,
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange: onChangeProp,
    valueManager
  }) => {
    const [valueWithInputTimezone, setValue] = useControlled({
      name,
      state: "value",
      controlled: valueProp,
      default: defaultValue ?? valueManager.emptyValue
    });
    const onChange = useEventCallback_default((newValue, ...otherParams) => {
      setValue(newValue);
      onChangeProp?.(newValue, ...otherParams);
    });
    return useValueWithTimezone({
      timezone: timezoneProp,
      value: valueWithInputTimezone,
      defaultValue: void 0,
      onChange,
      valueManager
    });
  };

  // node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js
  var SECTION_TYPE_GRANULARITY = {
    year: 1,
    month: 2,
    day: 3,
    hours: 4,
    minutes: 5,
    seconds: 6,
    milliseconds: 7
  };
  var getSectionTypeGranularity = (sections) => Math.max(...sections.map((section) => SECTION_TYPE_GRANULARITY[section.type] ?? 1));
  var roundDate = (utils, granularity, date) => {
    if (granularity === SECTION_TYPE_GRANULARITY.year) {
      return utils.startOfYear(date);
    }
    if (granularity === SECTION_TYPE_GRANULARITY.month) {
      return utils.startOfMonth(date);
    }
    if (granularity === SECTION_TYPE_GRANULARITY.day) {
      return utils.startOfDay(date);
    }
    let roundedDate = date;
    if (granularity < SECTION_TYPE_GRANULARITY.minutes) {
      roundedDate = utils.setMinutes(roundedDate, 0);
    }
    if (granularity < SECTION_TYPE_GRANULARITY.seconds) {
      roundedDate = utils.setSeconds(roundedDate, 0);
    }
    if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {
      roundedDate = utils.setMilliseconds(roundedDate, 0);
    }
    return roundedDate;
  };
  var getDefaultReferenceDate = ({
    props,
    utils,
    granularity,
    timezone,
    getTodayDate: inGetTodayDate
  }) => {
    let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));
    if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {
      referenceDate = roundDate(utils, granularity, props.minDate);
    }
    if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {
      referenceDate = roundDate(utils, granularity, props.maxDate);
    }
    const isAfter = createIsAfterIgnoreDatePart(props.disableIgnoringDatePartForTimeValidation ?? false, utils);
    if (props.minTime != null && isAfter(props.minTime, referenceDate)) {
      referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));
    }
    if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {
      referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));
    }
    return referenceDate;
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js
  var getDateSectionConfigFromFormatToken = (utils, formatToken) => {
    const config = utils.formatTokenMap[formatToken];
    if (config == null) {
      throw new Error([`MUI X: The token "${formatToken}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join("\n"));
    }
    if (typeof config === "string") {
      return {
        type: config,
        contentType: config === "meridiem" ? "letter" : "digit",
        maxLength: void 0
      };
    }
    return {
      type: config.sectionType,
      contentType: config.contentType,
      maxLength: config.maxLength
    };
  };
  var getDeltaFromKeyCode = (keyCode) => {
    switch (keyCode) {
      case "ArrowUp":
        return 1;
      case "ArrowDown":
        return -1;
      case "PageUp":
        return 5;
      case "PageDown":
        return -5;
      default:
        return 0;
    }
  };
  var getDaysInWeekStr = (utils, timezone, format) => {
    const elements = [];
    const now2 = utils.date(void 0, timezone);
    const startDate = utils.startOfWeek(now2);
    const endDate = utils.endOfWeek(now2);
    let current = startDate;
    while (utils.isBefore(current, endDate)) {
      elements.push(current);
      current = utils.addDays(current, 1);
    }
    return elements.map((weekDay) => utils.formatByString(weekDay, format));
  };
  var getLetterEditingOptions = (utils, timezone, sectionType, format) => {
    switch (sectionType) {
      case "month": {
        return getMonthsInYear(utils, utils.date(void 0, timezone)).map((month) => utils.formatByString(month, format));
      }
      case "weekDay": {
        return getDaysInWeekStr(utils, timezone, format);
      }
      case "meridiem": {
        const now2 = utils.date(void 0, timezone);
        return [utils.startOfDay(now2), utils.endOfDay(now2)].map((date) => utils.formatByString(date, format));
      }
      default: {
        return [];
      }
    }
  };
  var FORMAT_SECONDS_NO_LEADING_ZEROS = "s";
  var NON_LOCALIZED_DIGITS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
  var getLocalizedDigits = (utils) => {
    const today = utils.date(void 0);
    const formattedZero = utils.formatByString(utils.setSeconds(today, 0), FORMAT_SECONDS_NO_LEADING_ZEROS);
    if (formattedZero === "0") {
      return NON_LOCALIZED_DIGITS;
    }
    return Array.from({
      length: 10
    }).map((_2, index) => utils.formatByString(utils.setSeconds(today, index), FORMAT_SECONDS_NO_LEADING_ZEROS));
  };
  var removeLocalizedDigits = (valueStr, localizedDigits) => {
    if (localizedDigits[0] === "0") {
      return valueStr;
    }
    const digits = [];
    let currentFormattedDigit = "";
    for (let i = 0; i < valueStr.length; i += 1) {
      currentFormattedDigit += valueStr[i];
      const matchingDigitIndex = localizedDigits.indexOf(currentFormattedDigit);
      if (matchingDigitIndex > -1) {
        digits.push(matchingDigitIndex.toString());
        currentFormattedDigit = "";
      }
    }
    return digits.join("");
  };
  var applyLocalizedDigits = (valueStr, localizedDigits) => {
    if (localizedDigits[0] === "0") {
      return valueStr;
    }
    return valueStr.split("").map((char2) => localizedDigits[Number(char2)]).join("");
  };
  var isStringNumber = (valueStr, localizedDigits) => {
    const nonLocalizedValueStr = removeLocalizedDigits(valueStr, localizedDigits);
    return nonLocalizedValueStr !== " " && !Number.isNaN(Number(nonLocalizedValueStr));
  };
  var cleanLeadingZeros = (valueStr, size) => {
    let cleanValueStr = valueStr;
    cleanValueStr = Number(cleanValueStr).toString();
    while (cleanValueStr.length < size) {
      cleanValueStr = `0${cleanValueStr}`;
    }
    return cleanValueStr;
  };
  var cleanDigitSectionValue = (utils, value, sectionBoundaries, localizedDigits, section) => {
    if (true) {
      if (section.type !== "day" && section.contentType === "digit-with-letter") {
        throw new Error([`MUI X: The token "${section.format}" is a digit format with letter in it.'
             This type of format is only supported for 'day' sections`].join("\n"));
      }
    }
    if (section.type === "day" && section.contentType === "digit-with-letter") {
      const date = utils.setDate(sectionBoundaries.longestMonth, value);
      return utils.formatByString(date, section.format);
    }
    let valueStr = value.toString();
    if (section.hasLeadingZerosInInput) {
      valueStr = cleanLeadingZeros(valueStr, section.maxLength);
    }
    return applyLocalizedDigits(valueStr, localizedDigits);
  };
  var adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, localizedDigits, activeDate, stepsAttributes) => {
    const delta = getDeltaFromKeyCode(keyCode);
    const isStart = keyCode === "Home";
    const isEnd = keyCode === "End";
    const shouldSetAbsolute = section.value === "" || isStart || isEnd;
    const adjustDigitSection = () => {
      const sectionBoundaries = sectionsValueBoundaries[section.type]({
        currentDate: activeDate,
        format: section.format,
        contentType: section.contentType
      });
      const getCleanValue = (value) => cleanDigitSectionValue(utils, value, sectionBoundaries, localizedDigits, section);
      const step = section.type === "minutes" && stepsAttributes?.minutesStep ? stepsAttributes.minutesStep : 1;
      const currentSectionValue = parseInt(removeLocalizedDigits(section.value, localizedDigits), 10);
      let newSectionValueNumber = currentSectionValue + delta * step;
      if (shouldSetAbsolute) {
        if (section.type === "year" && !isEnd && !isStart) {
          return utils.formatByString(utils.date(void 0, timezone), section.format);
        }
        if (delta > 0 || isStart) {
          newSectionValueNumber = sectionBoundaries.minimum;
        } else {
          newSectionValueNumber = sectionBoundaries.maximum;
        }
      }
      if (newSectionValueNumber % step !== 0) {
        if (delta < 0 || isStart) {
          newSectionValueNumber += step - (step + newSectionValueNumber) % step;
        }
        if (delta > 0 || isEnd) {
          newSectionValueNumber -= newSectionValueNumber % step;
        }
      }
      if (newSectionValueNumber > sectionBoundaries.maximum) {
        return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
      }
      if (newSectionValueNumber < sectionBoundaries.minimum) {
        return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
      }
      return getCleanValue(newSectionValueNumber);
    };
    const adjustLetterSection = () => {
      const options = getLetterEditingOptions(utils, timezone, section.type, section.format);
      if (options.length === 0) {
        return section.value;
      }
      if (shouldSetAbsolute) {
        if (delta > 0 || isStart) {
          return options[0];
        }
        return options[options.length - 1];
      }
      const currentOptionIndex = options.indexOf(section.value);
      const newOptionIndex = (currentOptionIndex + delta) % options.length;
      const clampedIndex = (newOptionIndex + options.length) % options.length;
      return options[clampedIndex];
    };
    if (section.contentType === "digit" || section.contentType === "digit-with-letter") {
      return adjustDigitSection();
    }
    return adjustLetterSection();
  };
  var getSectionVisibleValue = (section, target, localizedDigits) => {
    let value = section.value || section.placeholder;
    const hasLeadingZeros = target === "non-input" ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
    if (target === "non-input" && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
      value = Number(removeLocalizedDigits(value, localizedDigits)).toString();
    }
    const shouldAddInvisibleSpace = ["input-rtl", "input-ltr"].includes(target) && section.contentType === "digit" && !hasLeadingZeros && value.length === 1;
    if (shouldAddInvisibleSpace) {
      value = `${value}\u200E`;
    }
    if (target === "input-rtl") {
      value = `\u2068${value}\u2069`;
    }
    return value;
  };
  var changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {
    if (true) {
      if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === "weekDay") {
        throw new Error("changeSectionValueFormat doesn't support week day formats");
      }
    }
    return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);
  };
  var isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.date(void 0, timezone), format).length === 4;
  var doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {
    if (contentType !== "digit") {
      return false;
    }
    const now2 = utils.date(void 0, timezone);
    switch (sectionType) {
      case "year": {
        if (isFourDigitYearFormat(utils, timezone, format)) {
          const formatted0001 = utils.formatByString(utils.setYear(now2, 1), format);
          return formatted0001 === "0001";
        }
        const formatted2001 = utils.formatByString(utils.setYear(now2, 2001), format);
        return formatted2001 === "01";
      }
      case "month": {
        return utils.formatByString(utils.startOfYear(now2), format).length > 1;
      }
      case "day": {
        return utils.formatByString(utils.startOfMonth(now2), format).length > 1;
      }
      case "weekDay": {
        return utils.formatByString(utils.startOfWeek(now2), format).length > 1;
      }
      case "hours": {
        return utils.formatByString(utils.setHours(now2, 1), format).length > 1;
      }
      case "minutes": {
        return utils.formatByString(utils.setMinutes(now2, 1), format).length > 1;
      }
      case "seconds": {
        return utils.formatByString(utils.setSeconds(now2, 1), format).length > 1;
      }
      default: {
        throw new Error("Invalid section type");
      }
    }
  };
  var getDateFromDateSections = (utils, sections, localizedDigits) => {
    const shouldSkipWeekDays = sections.some((section) => section.type === "day");
    const sectionFormats = [];
    const sectionValues = [];
    for (let i = 0; i < sections.length; i += 1) {
      const section = sections[i];
      const shouldSkip = shouldSkipWeekDays && section.type === "weekDay";
      if (!shouldSkip) {
        sectionFormats.push(section.format);
        sectionValues.push(getSectionVisibleValue(section, "non-input", localizedDigits));
      }
    }
    const formatWithoutSeparator = sectionFormats.join(" ");
    const dateWithoutSeparatorStr = sectionValues.join(" ");
    return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
  };
  var createDateStrForV7HiddenInputFromSections = (sections) => sections.map((section) => {
    return `${section.startSeparator}${section.value || section.placeholder}${section.endSeparator}`;
  }).join("");
  var createDateStrForV6InputFromSections = (sections, localizedDigits, isRtl) => {
    const formattedSections = sections.map((section) => {
      const dateValue = getSectionVisibleValue(section, isRtl ? "input-rtl" : "input-ltr", localizedDigits);
      return `${section.startSeparator}${dateValue}${section.endSeparator}`;
    });
    const dateStr = formattedSections.join("");
    if (!isRtl) {
      return dateStr;
    }
    return `\u2066${dateStr}\u2069`;
  };
  var getSectionsBoundaries = (utils, localizedDigits, timezone) => {
    const today = utils.date(void 0, timezone);
    const endOfYear = utils.endOfYear(today);
    const endOfDay = utils.endOfDay(today);
    const {
      maxDaysInMonth,
      longestMonth
    } = getMonthsInYear(utils, today).reduce((acc, month) => {
      const daysInMonth = utils.getDaysInMonth(month);
      if (daysInMonth > acc.maxDaysInMonth) {
        return {
          maxDaysInMonth: daysInMonth,
          longestMonth: month
        };
      }
      return acc;
    }, {
      maxDaysInMonth: 0,
      longestMonth: null
    });
    return {
      year: ({
        format
      }) => ({
        minimum: 0,
        maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99
      }),
      month: () => ({
        minimum: 1,
        // Assumption: All years have the same amount of months
        maximum: utils.getMonth(endOfYear) + 1
      }),
      day: ({
        currentDate
      }) => ({
        minimum: 1,
        maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,
        longestMonth
      }),
      weekDay: ({
        format,
        contentType
      }) => {
        if (contentType === "digit") {
          const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);
          return {
            minimum: Math.min(...daysInWeek),
            maximum: Math.max(...daysInWeek)
          };
        }
        return {
          minimum: 1,
          maximum: 7
        };
      },
      hours: ({
        format
      }) => {
        const lastHourInDay = utils.getHours(endOfDay);
        const hasMeridiem = removeLocalizedDigits(utils.formatByString(utils.endOfDay(today), format), localizedDigits) !== lastHourInDay.toString();
        if (hasMeridiem) {
          return {
            minimum: 1,
            maximum: Number(removeLocalizedDigits(utils.formatByString(utils.startOfDay(today), format), localizedDigits))
          };
        }
        return {
          minimum: 0,
          maximum: lastHourInDay
        };
      },
      minutes: () => ({
        minimum: 0,
        // Assumption: All years have the same amount of minutes
        maximum: utils.getMinutes(endOfDay)
      }),
      seconds: () => ({
        minimum: 0,
        // Assumption: All years have the same amount of seconds
        maximum: utils.getSeconds(endOfDay)
      }),
      meridiem: () => ({
        minimum: 0,
        maximum: 1
      }),
      empty: () => ({
        minimum: 0,
        maximum: 0
      })
    };
  };
  var warnedOnceInvalidSection = false;
  var validateSections = (sections, valueType) => {
    if (true) {
      if (!warnedOnceInvalidSection) {
        const supportedSections = ["empty"];
        if (["date", "date-time"].includes(valueType)) {
          supportedSections.push("weekDay", "day", "month", "year");
        }
        if (["time", "date-time"].includes(valueType)) {
          supportedSections.push("hours", "minutes", "seconds", "meridiem");
        }
        const invalidSection = sections.find((section) => !supportedSections.includes(section.type));
        if (invalidSection) {
          console.warn(`MUI X: The field component you are using is not compatible with the "${invalidSection.type}" date section.`, `The supported date sections are ["${supportedSections.join('", "')}"]\`.`);
          warnedOnceInvalidSection = true;
        }
      }
    }
  };
  var transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {
    switch (section.type) {
      case "year": {
        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));
      }
      case "month": {
        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));
      }
      case "weekDay": {
        const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);
        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);
        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
        return utils.addDays(dateToTransferFrom, diff);
      }
      case "day": {
        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));
      }
      case "meridiem": {
        const isAM = utils.getHours(dateToTransferFrom) < 12;
        const mergedDateHours = utils.getHours(dateToTransferTo);
        if (isAM && mergedDateHours >= 12) {
          return utils.addHours(dateToTransferTo, -12);
        }
        if (!isAM && mergedDateHours < 12) {
          return utils.addHours(dateToTransferTo, 12);
        }
        return dateToTransferTo;
      }
      case "hours": {
        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));
      }
      case "minutes": {
        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));
      }
      case "seconds": {
        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));
      }
      default: {
        return dateToTransferTo;
      }
    }
  };
  var reliableSectionModificationOrder = {
    year: 1,
    month: 2,
    day: 3,
    weekDay: 4,
    hours: 5,
    minutes: 6,
    seconds: 7,
    meridiem: 8,
    empty: 9
  };
  var mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => (
    // cloning sections before sort to avoid mutating it
    [...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {
      if (!shouldLimitToEditedSections || section.modified) {
        return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);
      }
      return mergedDate;
    }, referenceDate)
  );
  var isAndroid = () => navigator.userAgent.toLowerCase().includes("android");
  var getSectionOrder = (sections, shouldApplyRTL) => {
    const neighbors = {};
    if (!shouldApplyRTL) {
      sections.forEach((_2, index) => {
        const leftIndex = index === 0 ? null : index - 1;
        const rightIndex = index === sections.length - 1 ? null : index + 1;
        neighbors[index] = {
          leftIndex,
          rightIndex
        };
      });
      return {
        neighbors,
        startIndex: 0,
        endIndex: sections.length - 1
      };
    }
    const rtl2ltr = {};
    const ltr2rtl = {};
    let groupedSectionsStart = 0;
    let groupedSectionsEnd = 0;
    let RTLIndex = sections.length - 1;
    while (RTLIndex >= 0) {
      groupedSectionsEnd = sections.findIndex(
        // eslint-disable-next-line @typescript-eslint/no-loop-func
        (section, index) => index >= groupedSectionsStart && section.endSeparator?.includes(" ") && // Special case where the spaces were not there in the initial input
        section.endSeparator !== " / "
      );
      if (groupedSectionsEnd === -1) {
        groupedSectionsEnd = sections.length - 1;
      }
      for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
        ltr2rtl[i] = RTLIndex;
        rtl2ltr[RTLIndex] = i;
        RTLIndex -= 1;
      }
      groupedSectionsStart = groupedSectionsEnd + 1;
    }
    sections.forEach((_2, index) => {
      const rtlIndex = ltr2rtl[index];
      const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
      const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
      neighbors[index] = {
        leftIndex,
        rightIndex
      };
    });
    return {
      neighbors,
      startIndex: rtl2ltr[0],
      endIndex: rtl2ltr[sections.length - 1]
    };
  };
  var parseSelectedSections = (selectedSections, sections) => {
    if (selectedSections == null) {
      return null;
    }
    if (selectedSections === "all") {
      return "all";
    }
    if (typeof selectedSections === "string") {
      return sections.findIndex((section) => section.type === selectedSections);
    }
    return selectedSections;
  };
  var getSectionValueText = (section, utils) => {
    if (!section.value) {
      return void 0;
    }
    switch (section.type) {
      case "month": {
        if (section.contentType === "digit") {
          return utils.format(utils.setMonth(utils.date(), Number(section.value) - 1), "month");
        }
        const parsedDate = utils.parse(section.value, section.format);
        return parsedDate ? utils.format(parsedDate, "month") : void 0;
      }
      case "day":
        return section.contentType === "digit" ? utils.format(utils.setDate(utils.startOfYear(utils.date()), Number(section.value)), "dayOfMonthFull") : section.value;
      case "weekDay":
        return void 0;
      default:
        return void 0;
    }
  };
  var getSectionValueNow = (section, utils) => {
    if (!section.value) {
      return void 0;
    }
    switch (section.type) {
      case "weekDay": {
        if (section.contentType === "letter") {
          return void 0;
        }
        return Number(section.value);
      }
      case "meridiem": {
        const parsedDate = utils.parse(`01:00 ${section.value}`, `${utils.formats.hours12h}:${utils.formats.minutes} ${section.format}`);
        if (parsedDate) {
          return utils.getHours(parsedDate) >= 12 ? 1 : 0;
        }
        return void 0;
      }
      case "day":
        return section.contentType === "digit-with-letter" ? parseInt(section.value, 10) : Number(section.value);
      case "month": {
        if (section.contentType === "digit") {
          return Number(section.value);
        }
        const parsedDate = utils.parse(section.value, section.format);
        return parsedDate ? utils.getMonth(parsedDate) + 1 : void 0;
      }
      default:
        return section.contentType !== "letter" ? Number(section.value) : void 0;
    }
  };

  // node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js
  var _excluded89 = ["value", "referenceDate"];
  var singleItemValueManager = {
    emptyValue: null,
    getTodayValue: getTodayDate,
    getInitialReferenceValue: (_ref) => {
      let {
        value,
        referenceDate
      } = _ref, params = _objectWithoutPropertiesLoose(_ref, _excluded89);
      if (value != null && params.utils.isValid(value)) {
        return value;
      }
      if (referenceDate != null) {
        return referenceDate;
      }
      return getDefaultReferenceDate(params);
    },
    cleanValue: replaceInvalidDateByNull,
    areValuesEqual: areDatesEqual,
    isSameError: (a, b) => a === b,
    hasError: (error) => error != null,
    defaultErrorState: null,
    getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),
    setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)
  };
  var singleItemFieldValueManager = {
    updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
    getSectionsFromValue: (utils, date, prevSections, getSectionsFromDate) => {
      const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
      if (shouldReUsePrevDateSections) {
        return prevSections;
      }
      return getSectionsFromDate(date);
    },
    getV7HiddenInputValueFromSections: createDateStrForV7HiddenInputFromSections,
    getV6InputValueFromSections: createDateStrForV6InputFromSections,
    getActiveDateManager: (utils, state) => ({
      date: state.value,
      referenceDate: state.referenceValue,
      getSections: (sections) => sections,
      getNewValuesFromNewActiveDate: (newActiveDate) => ({
        value: newActiveDate,
        referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
      })
    }),
    parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useClockReferenceDate.js
  var React163 = __toESM(require_react());
  var useClockReferenceDate = ({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  }) => {
    const referenceDate = React163.useMemo(
      () => singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        props,
        referenceDate: referenceDateProp,
        granularity: SECTION_TYPE_GRANULARITY.day,
        timezone,
        getTodayDate: () => getTodayDate(utils, timezone, "date")
      }),
      // We only want to compute the reference date on mount.
      []
      // eslint-disable-line react-hooks/exhaustive-deps
    );
    return value ?? referenceDate;
  };

  // node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  var _excluded90 = ["ampm", "ampmInClock", "autoFocus", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableTime", "showViewSwitcher", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "timezone"];
  var useUtilityClasses59 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      arrowSwitcher: ["arrowSwitcher"]
    };
    return composeClasses(slots, getTimeClockUtilityClass, classes);
  };
  var TimeClockRoot = styled_default2(PickerViewRoot, {
    name: "MuiTimeClock",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "flex",
    flexDirection: "column",
    position: "relative"
  });
  var TimeClockArrowSwitcher = styled_default2(PickersArrowSwitcher, {
    name: "MuiTimeClock",
    slot: "ArrowSwitcher",
    overridesResolver: (props, styles5) => styles5.arrowSwitcher
  })({
    position: "absolute",
    right: 12,
    top: 15
  });
  var TIME_CLOCK_DEFAULT_VIEWS = ["hours", "minutes"];
  var TimeClock = /* @__PURE__ */ React164.forwardRef(function TimeClock2(inProps, ref) {
    const utils = useUtils();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTimeClock"
    });
    const {
      ampm = utils.is12HourCycleInCurrentLocale(),
      ampmInClock = false,
      autoFocus,
      slots,
      slotProps,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disableIgnoringDatePartForTimeValidation = false,
      maxTime,
      minTime,
      disableFuture,
      disablePast,
      minutesStep = 1,
      shouldDisableTime,
      showViewSwitcher,
      onChange,
      view: inView,
      views = TIME_CLOCK_DEFAULT_VIEWS,
      openTo,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      className,
      disabled,
      readOnly,
      timezone: timezoneProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
    const {
      value,
      handleValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "TimeClock",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const valueOrReferenceDate = useClockReferenceDate({
      value,
      referenceDate: referenceDateProp,
      utils,
      props,
      timezone
    });
    const translations = usePickersTranslations();
    const now2 = useNow(timezone);
    const {
      view,
      setView,
      previousView,
      nextView,
      setValueAndGoToNextView
    } = useViews({
      view: inView,
      views,
      openTo,
      onViewChange,
      onChange: handleValueChange,
      focusedView,
      onFocusedViewChange
    });
    const {
      meridiemMode,
      handleMeridiemChange
    } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);
    const isTimeDisabled = React164.useCallback((rawValue, viewType) => {
      const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
      const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
      const containsValidTime = ({
        start: start2,
        end: end2
      }) => {
        if (minTime && isAfter(minTime, end2)) {
          return false;
        }
        if (maxTime && isAfter(start2, maxTime)) {
          return false;
        }
        if (disableFuture && isAfter(start2, now2)) {
          return false;
        }
        if (disablePast && isAfter(now2, shouldCheckPastEnd ? end2 : start2)) {
          return false;
        }
        return true;
      };
      const isValidValue = (timeValue, step = 1) => {
        if (timeValue % step !== 0) {
          return false;
        }
        if (shouldDisableTime) {
          switch (viewType) {
            case "hours":
              return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
            case "minutes":
              return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
            case "seconds":
              return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
            default:
              return false;
          }
        }
        return true;
      };
      switch (viewType) {
        case "hours": {
          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
          const start2 = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
          const end2 = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(valueWithMeridiem);
        }
        case "minutes": {
          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
          const start2 = utils.setSeconds(dateWithNewMinutes, 0);
          const end2 = utils.setSeconds(dateWithNewMinutes, 59);
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(rawValue, minutesStep);
        }
        case "seconds": {
          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
          const start2 = dateWithNewSeconds;
          const end2 = dateWithNewSeconds;
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(rawValue);
        }
        default:
          throw new Error("not supported");
      }
    }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils, disableFuture, disablePast, now2, views]);
    const selectedId = useId();
    const viewProps = React164.useMemo(() => {
      switch (view) {
        case "hours": {
          const handleHoursChange = (hourValue, isFinish) => {
            const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish, "hours");
          };
          return {
            onChange: handleHoursChange,
            viewValue: utils.getHours(valueOrReferenceDate),
            children: getHourNumbers({
              value,
              utils,
              ampm,
              onChange: handleHoursChange,
              getClockNumberText: translations.hoursClockNumberText,
              isDisabled: (hourValue) => disabled || isTimeDisabled(hourValue, "hours"),
              selectedId
            })
          };
        }
        case "minutes": {
          const minutesValue = utils.getMinutes(valueOrReferenceDate);
          const handleMinutesChange = (minuteValue, isFinish) => {
            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish, "minutes");
          };
          return {
            viewValue: minutesValue,
            onChange: handleMinutesChange,
            children: getMinutesNumbers({
              utils,
              value: minutesValue,
              onChange: handleMinutesChange,
              getClockNumberText: translations.minutesClockNumberText,
              isDisabled: (minuteValue) => disabled || isTimeDisabled(minuteValue, "minutes"),
              selectedId
            })
          };
        }
        case "seconds": {
          const secondsValue = utils.getSeconds(valueOrReferenceDate);
          const handleSecondsChange = (secondValue, isFinish) => {
            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish, "seconds");
          };
          return {
            viewValue: secondsValue,
            onChange: handleSecondsChange,
            children: getMinutesNumbers({
              utils,
              value: secondsValue,
              onChange: handleSecondsChange,
              getClockNumberText: translations.secondsClockNumberText,
              isDisabled: (secondValue) => disabled || isTimeDisabled(secondValue, "seconds"),
              selectedId
            })
          };
        }
        default:
          throw new Error("You must provide the type for ClockView");
      }
    }, [view, utils, value, ampm, translations.hoursClockNumberText, translations.minutesClockNumberText, translations.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);
    const ownerState = props;
    const classes = useUtilityClasses59(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TimeClockRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime133.jsx)(Clock2, _extends({
        autoFocus: autoFocus ?? !!focusedView,
        ampmInClock: ampmInClock && views.includes("hours"),
        value,
        type: view,
        ampm,
        minutesStep,
        isTimeDisabled,
        meridiemMode,
        handleMeridiemChange,
        selectedId,
        disabled,
        readOnly
      }, viewProps)), showViewSwitcher && /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TimeClockArrowSwitcher, {
        className: classes.arrowSwitcher,
        slots,
        slotProps,
        onGoToPrevious: () => setView(previousView),
        isPreviousDisabled: !previousView,
        previousLabel: translations.openPreviousView,
        onGoToNext: () => setView(nextView),
        isNextDisabled: !nextView,
        nextLabel: translations.openNextView,
        ownerState
      })]
    }));
  });
  true ? TimeClock.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types91.default.bool,
    /**
     * Display ampm controls under the clock (instead of in the toolbar).
     * @default false
     */
    ampmInClock: import_prop_types91.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types91.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types91.default.object,
    className: import_prop_types91.default.string,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types91.default.object,
    /**
     * If `true`, the picker views and text field are disabled.
     * @default false
     */
    disabled: import_prop_types91.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types91.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types91.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types91.default.bool,
    /**
     * Controlled focused view.
     */
    focusedView: import_prop_types91.default.oneOf(["hours", "minutes", "seconds"]),
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types91.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types91.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types91.default.number,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TView The view type. Will be one of date or time views.
     * @param {TValue} value The new value.
     * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
     * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
     */
    onChange: import_prop_types91.default.func,
    /**
     * Callback fired on focused view change.
     * @template TView
     * @param {TView} view The new view to focus or not.
     * @param {boolean} hasFocus `true` if the view should be focused.
     */
    onFocusedViewChange: import_prop_types91.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types91.default.func,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types91.default.oneOf(["hours", "minutes", "seconds"]),
    /**
     * If `true`, the picker views and text field are read-only.
     * @default false
     */
    readOnly: import_prop_types91.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.
     */
    referenceDate: import_prop_types91.default.object,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types91.default.func,
    showViewSwitcher: import_prop_types91.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types91.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types91.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types91.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types91.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types91.default.oneOf(["hours", "minutes", "seconds"]),
    /**
     * Available views.
     * @default ['hours', 'minutes']
     */
    views: import_prop_types91.default.arrayOf(import_prop_types91.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
  } : void 0;

  // node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
  init_extends();
  var React165 = __toESM(require_react());
  var import_prop_types92 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DigitalClock/digitalClockClasses.js
  function getDigitalClockUtilityClass(slot) {
    return generateUtilityClass("MuiDigitalClock", slot);
  }
  var digitalClockClasses = generateUtilityClasses("MuiDigitalClock", ["root", "list", "item"]);

  // node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  var _excluded91 = ["ampm", "timeStep", "autoFocus", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableTime", "onChange", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled", "timezone"];
  var useUtilityClasses60 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      list: ["list"],
      item: ["item"]
    };
    return composeClasses(slots, getDigitalClockUtilityClass, classes);
  };
  var DigitalClockRoot = styled_default2(PickerViewRoot, {
    name: "MuiDigitalClock",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    overflowY: "auto",
    width: "100%",
    "@media (prefers-reduced-motion: no-preference)": {
      scrollBehavior: "auto"
    },
    maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
    variants: [{
      props: {
        alreadyRendered: true
      },
      style: {
        "@media (prefers-reduced-motion: no-preference)": {
          scrollBehavior: "smooth"
        }
      }
    }]
  });
  var DigitalClockList = styled_default2(MenuList_default, {
    name: "MuiDigitalClock",
    slot: "List",
    overridesResolver: (props, styles5) => styles5.list
  })({
    padding: 0
  });
  var DigitalClockItem = styled_default2(MenuItem_default, {
    name: "MuiDigitalClock",
    slot: "Item",
    overridesResolver: (props, styles5) => styles5.item
  })(({
    theme: theme2
  }) => ({
    padding: "8px 16px",
    margin: "2px 4px",
    "&:first-of-type": {
      marginTop: 4
    },
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity)
    },
    "&.Mui-selected": {
      backgroundColor: (theme2.vars || theme2).palette.primary.main,
      color: (theme2.vars || theme2).palette.primary.contrastText,
      "&:focus-visible, &:hover": {
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    },
    "&.Mui-focusVisible": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.focusOpacity)
    }
  }));
  var DigitalClock = /* @__PURE__ */ React165.forwardRef(function DigitalClock2(inProps, ref) {
    const utils = useUtils();
    const containerRef = React165.useRef(null);
    const handleRef = useForkRef(ref, containerRef);
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDigitalClock"
    });
    const {
      ampm = utils.is12HourCycleInCurrentLocale(),
      timeStep = 30,
      autoFocus,
      slots,
      slotProps,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disableIgnoringDatePartForTimeValidation = false,
      maxTime,
      minTime,
      disableFuture,
      disablePast,
      minutesStep = 1,
      shouldDisableTime,
      onChange,
      view: inView,
      openTo,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      className,
      disabled,
      readOnly,
      views = ["hours"],
      skipDisabled = false,
      timezone: timezoneProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const {
      value,
      handleValueChange: handleRawValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "DigitalClock",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const translations = usePickersTranslations();
    const now2 = useNow(timezone);
    const ownerState = React165.useMemo(() => _extends({}, props, {
      alreadyRendered: !!containerRef.current
    }), [props]);
    const classes = useUtilityClasses60(ownerState);
    const ClockItem = slots?.digitalClockItem ?? DigitalClockItem;
    const clockItemProps = useSlotProps_default({
      elementType: ClockItem,
      externalSlotProps: slotProps?.digitalClockItem,
      ownerState: {},
      className: classes.item
    });
    const valueOrReferenceDate = useClockReferenceDate({
      value,
      referenceDate: referenceDateProp,
      utils,
      props,
      timezone
    });
    const handleValueChange = useEventCallback_default((newValue) => handleRawValueChange(newValue, "finish", "hours"));
    const {
      setValueAndGoToNextView
    } = useViews({
      view: inView,
      views,
      openTo,
      onViewChange,
      onChange: handleValueChange,
      focusedView,
      onFocusedViewChange
    });
    const handleItemSelect = useEventCallback_default((newValue) => {
      setValueAndGoToNextView(newValue, "finish");
    });
    React165.useEffect(() => {
      if (containerRef.current === null) {
        return;
      }
      const activeItem = containerRef.current.querySelector('[role="listbox"] [role="option"][tabindex="0"], [role="listbox"] [role="option"][aria-selected="true"]');
      if (!activeItem) {
        return;
      }
      const offsetTop = activeItem.offsetTop;
      if (autoFocus || !!focusedView) {
        activeItem.focus();
      }
      containerRef.current.scrollTop = offsetTop - 4;
    });
    const isTimeDisabled = React165.useCallback((valueToCheck) => {
      const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
      const containsValidTime = () => {
        if (minTime && isAfter(minTime, valueToCheck)) {
          return false;
        }
        if (maxTime && isAfter(valueToCheck, maxTime)) {
          return false;
        }
        if (disableFuture && isAfter(valueToCheck, now2)) {
          return false;
        }
        if (disablePast && isAfter(now2, valueToCheck)) {
          return false;
        }
        return true;
      };
      const isValidValue = () => {
        if (utils.getMinutes(valueToCheck) % minutesStep !== 0) {
          return false;
        }
        if (shouldDisableTime) {
          return !shouldDisableTime(valueToCheck, "hours");
        }
        return true;
      };
      return !containsValidTime() || !isValidValue();
    }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now2, disablePast, minutesStep, shouldDisableTime]);
    const timeOptions = React165.useMemo(() => {
      const startOfDay = utils.startOfDay(valueOrReferenceDate);
      return [startOfDay, ...Array.from({
        length: Math.ceil(24 * 60 / timeStep) - 1
      }, (_2, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
    }, [valueOrReferenceDate, timeStep, utils]);
    const focusedOptionIndex = timeOptions.findIndex((option) => utils.isEqual(option, valueOrReferenceDate));
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DigitalClockRoot, _extends({
      ref: handleRef,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DigitalClockList, {
        role: "listbox",
        "aria-label": translations.timePickerToolbarTitle,
        className: classes.list,
        children: timeOptions.map((option, index) => {
          if (skipDisabled && isTimeDisabled(option)) {
            return null;
          }
          const isSelected = utils.isEqual(option, value);
          const formattedValue = utils.format(option, ampm ? "fullTime12h" : "fullTime24h");
          const tabIndex = focusedOptionIndex === index || focusedOptionIndex === -1 && index === 0 ? 0 : -1;
          return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ClockItem, _extends({
            onClick: () => !readOnly && handleItemSelect(option),
            selected: isSelected,
            disabled: disabled || isTimeDisabled(option),
            disableRipple: readOnly,
            role: "option",
            "aria-disabled": readOnly,
            "aria-selected": isSelected,
            tabIndex
          }, clockItemProps, {
            children: formattedValue
          }), formattedValue);
        })
      })
    }));
  });
  true ? DigitalClock.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types92.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types92.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types92.default.object,
    className: import_prop_types92.default.string,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types92.default.object,
    /**
     * If `true`, the picker views and text field are disabled.
     * @default false
     */
    disabled: import_prop_types92.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types92.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types92.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types92.default.bool,
    /**
     * Controlled focused view.
     */
    focusedView: import_prop_types92.default.oneOf(["hours"]),
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types92.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types92.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types92.default.number,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TView The view type. Will be one of date or time views.
     * @param {TValue} value The new value.
     * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
     * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
     */
    onChange: import_prop_types92.default.func,
    /**
     * Callback fired on focused view change.
     * @template TView
     * @param {TView} view The new view to focus or not.
     * @param {boolean} hasFocus `true` if the view should be focused.
     */
    onFocusedViewChange: import_prop_types92.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types92.default.func,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types92.default.oneOf(["hours"]),
    /**
     * If `true`, the picker views and text field are read-only.
     * @default false
     */
    readOnly: import_prop_types92.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.
     */
    referenceDate: import_prop_types92.default.object,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types92.default.func,
    /**
     * If `true`, disabled digital clock items will not be rendered.
     * @default false
     */
    skipDisabled: import_prop_types92.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types92.default.object,
    /**
     * Overrideable component slots.
     * @default {}
     */
    slots: import_prop_types92.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object]),
    /**
     * The time steps between two time options.
     * For example, if `timeStep = 45`, then the available time options will be `[00:00, 00:45, 01:30, 02:15, 03:00, etc.]`.
     * @default 30
     */
    timeStep: import_prop_types92.default.number,
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types92.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types92.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types92.default.oneOf(["hours"]),
    /**
     * Available views.
     * @default ['hours']
     */
    views: import_prop_types92.default.arrayOf(import_prop_types92.default.oneOf(["hours"]))
  } : void 0;

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
  init_extends();
  var React167 = __toESM(require_react());
  var import_prop_types93 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockClasses.js
  function getMultiSectionDigitalClockUtilityClass(slot) {
    return generateUtilityClass("MuiMultiSectionDigitalClock", slot);
  }
  var multiSectionDigitalClockClasses = generateUtilityClasses("MuiMultiSectionDigitalClock", ["root"]);

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
  init_extends();
  var React166 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockSectionClasses.js
  function getMultiSectionDigitalClockSectionUtilityClass(slot) {
    return generateUtilityClass("MuiMultiSectionDigitalClockSection", slot);
  }
  var multiSectionDigitalClockSectionClasses = generateUtilityClasses("MuiMultiSectionDigitalClockSection", ["root", "item"]);

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  var _excluded92 = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
  var useUtilityClasses61 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      item: ["item"]
    };
    return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes);
  };
  var MultiSectionDigitalClockSectionRoot = styled_default2(MenuList_default, {
    name: "MuiMultiSectionDigitalClockSection",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
    width: 56,
    padding: 0,
    overflow: "hidden",
    "@media (prefers-reduced-motion: no-preference)": {
      scrollBehavior: "auto"
    },
    "@media (pointer: fine)": {
      "&:hover": {
        overflowY: "auto"
      }
    },
    "@media (pointer: none), (pointer: coarse)": {
      overflowY: "auto"
    },
    "&:not(:first-of-type)": {
      borderLeft: `1px solid ${(theme2.vars || theme2).palette.divider}`
    },
    "&::after": {
      display: "block",
      content: '""',
      // subtracting the height of one item, extra margin and borders to make sure the max height is correct
      height: "calc(100% - 40px - 6px)"
    },
    variants: [{
      props: {
        alreadyRendered: true
      },
      style: {
        "@media (prefers-reduced-motion: no-preference)": {
          scrollBehavior: "smooth"
        }
      }
    }]
  }));
  var MultiSectionDigitalClockSectionItem = styled_default2(MenuItem_default, {
    name: "MuiMultiSectionDigitalClockSection",
    slot: "Item",
    overridesResolver: (_2, styles5) => styles5.item
  })(({
    theme: theme2
  }) => ({
    padding: 8,
    margin: "2px 4px",
    width: MULTI_SECTION_CLOCK_SECTION_WIDTH,
    justifyContent: "center",
    "&:first-of-type": {
      marginTop: 4
    },
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity)
    },
    "&.Mui-selected": {
      backgroundColor: (theme2.vars || theme2).palette.primary.main,
      color: (theme2.vars || theme2).palette.primary.contrastText,
      "&:focus-visible, &:hover": {
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    },
    "&.Mui-focusVisible": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.focusOpacity)
    }
  }));
  var MultiSectionDigitalClockSection = /* @__PURE__ */ React166.forwardRef(function MultiSectionDigitalClockSection2(inProps, ref) {
    const containerRef = React166.useRef(null);
    const handleRef = useForkRef(ref, containerRef);
    const previousActive = React166.useRef(null);
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMultiSectionDigitalClockSection"
    });
    const {
      autoFocus,
      onChange,
      className,
      disabled,
      readOnly,
      items,
      active,
      slots,
      slotProps,
      skipDisabled
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const ownerState = React166.useMemo(() => _extends({}, props, {
      alreadyRendered: !!containerRef.current
    }), [props]);
    const classes = useUtilityClasses61(ownerState);
    const DigitalClockSectionItem = slots?.digitalClockSectionItem ?? MultiSectionDigitalClockSectionItem;
    React166.useEffect(() => {
      if (containerRef.current === null) {
        return;
      }
      const activeItem = containerRef.current.querySelector('[role="option"][tabindex="0"], [role="option"][aria-selected="true"]');
      if (active && autoFocus && activeItem) {
        activeItem.focus();
      }
      if (!activeItem || previousActive.current === activeItem) {
        return;
      }
      previousActive.current = activeItem;
      const offsetTop = activeItem.offsetTop;
      containerRef.current.scrollTop = offsetTop - 4;
    });
    const focusedOptionIndex = items.findIndex((item) => item.isFocused(item.value));
    return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(MultiSectionDigitalClockSectionRoot, _extends({
      ref: handleRef,
      className: clsx_default(classes.root, className),
      ownerState,
      autoFocusItem: autoFocus && active,
      role: "listbox"
    }, other, {
      children: items.map((option, index) => {
        const isItemDisabled = option.isDisabled?.(option.value);
        const isDisabled = disabled || isItemDisabled;
        if (skipDisabled && isDisabled) {
          return null;
        }
        const isSelected = option.isSelected(option.value);
        const tabIndex = focusedOptionIndex === index || focusedOptionIndex === -1 && index === 0 ? 0 : -1;
        return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(DigitalClockSectionItem, _extends({
          onClick: () => !readOnly && onChange(option.value),
          selected: isSelected,
          disabled: isDisabled,
          disableRipple: readOnly,
          role: "option",
          "aria-disabled": readOnly || isDisabled || void 0,
          "aria-label": option.ariaLabel,
          "aria-selected": isSelected,
          tabIndex,
          className: classes.item
        }, slotProps?.digitalClockSectionItem, {
          children: option.label
        }), option.label);
      })
    }));
  });

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.utils.js
  var getHourSectionOptions = ({
    now: now2,
    value,
    utils,
    ampm,
    isDisabled,
    resolveAriaLabel,
    timeStep,
    valueOrReferenceDate
  }) => {
    const currentHours = value ? utils.getHours(value) : null;
    const result = [];
    const isSelected = (hour, overriddenCurrentHours) => {
      const resolvedCurrentHours = overriddenCurrentHours ?? currentHours;
      if (resolvedCurrentHours === null) {
        return false;
      }
      if (ampm) {
        if (hour === 12) {
          return resolvedCurrentHours === 12 || resolvedCurrentHours === 0;
        }
        return resolvedCurrentHours === hour || resolvedCurrentHours - 12 === hour;
      }
      return resolvedCurrentHours === hour;
    };
    const isFocused = (hour) => {
      return isSelected(hour, utils.getHours(valueOrReferenceDate));
    };
    const endHour = ampm ? 11 : 23;
    for (let hour = 0; hour <= endHour; hour += timeStep) {
      let label = utils.format(utils.setHours(now2, hour), ampm ? "hours12h" : "hours24h");
      const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
      label = utils.formatNumber(label);
      result.push({
        value: hour,
        label,
        isSelected,
        isDisabled,
        isFocused,
        ariaLabel
      });
    }
    return result;
  };
  var getTimeSectionOptions = ({
    value,
    utils,
    isDisabled,
    timeStep,
    resolveLabel,
    resolveAriaLabel,
    hasValue: hasValue2 = true
  }) => {
    const isSelected = (timeValue) => {
      if (value === null) {
        return false;
      }
      return hasValue2 && value === timeValue;
    };
    const isFocused = (timeValue) => {
      return value === timeValue;
    };
    return [...Array.from({
      length: Math.ceil(60 / timeStep)
    }, (_2, index) => {
      const timeValue = timeStep * index;
      return {
        value: timeValue,
        label: utils.formatNumber(resolveLabel(timeValue)),
        isDisabled,
        isSelected,
        isFocused,
        ariaLabel: resolveAriaLabel(timeValue.toString())
      };
    })];
  };

  // node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var _excluded93 = ["ampm", "timeSteps", "autoFocus", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableTime", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled", "timezone"];
  var useUtilityClasses62 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);
  };
  var MultiSectionDigitalClockRoot = styled_default2(PickerViewRoot, {
    name: "MuiMultiSectionDigitalClock",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    display: "flex",
    flexDirection: "row",
    width: "100%",
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`
  }));
  var MultiSectionDigitalClock = /* @__PURE__ */ React167.forwardRef(function MultiSectionDigitalClock2(inProps, ref) {
    const utils = useUtils();
    const isRtl = useRtl2();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMultiSectionDigitalClock"
    });
    const {
      ampm = utils.is12HourCycleInCurrentLocale(),
      timeSteps: inTimeSteps,
      autoFocus,
      slots,
      slotProps,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disableIgnoringDatePartForTimeValidation = false,
      maxTime,
      minTime,
      disableFuture,
      disablePast,
      minutesStep = 1,
      shouldDisableTime,
      onChange,
      view: inView,
      views: inViews = ["hours", "minutes"],
      openTo,
      onViewChange,
      focusedView: inFocusedView,
      onFocusedViewChange,
      className,
      disabled,
      readOnly,
      skipDisabled = false,
      timezone: timezoneProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
    const {
      value,
      handleValueChange: handleRawValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "MultiSectionDigitalClock",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const translations = usePickersTranslations();
    const now2 = useNow(timezone);
    const timeSteps = React167.useMemo(() => _extends({
      hours: 1,
      minutes: 5,
      seconds: 5
    }, inTimeSteps), [inTimeSteps]);
    const valueOrReferenceDate = useClockReferenceDate({
      value,
      referenceDate: referenceDateProp,
      utils,
      props,
      timezone
    });
    const handleValueChange = useEventCallback_default((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));
    const views = React167.useMemo(() => {
      if (!ampm || !inViews.includes("hours")) {
        return inViews;
      }
      return inViews.includes("meridiem") ? inViews : [...inViews, "meridiem"];
    }, [ampm, inViews]);
    const {
      view,
      setValueAndGoToNextView,
      focusedView
    } = useViews({
      view: inView,
      views,
      openTo,
      onViewChange,
      onChange: handleValueChange,
      focusedView: inFocusedView,
      onFocusedViewChange
    });
    const handleMeridiemValueChange = useEventCallback_default((newValue) => {
      setValueAndGoToNextView(newValue, "finish", "meridiem");
    });
    const {
      meridiemMode,
      handleMeridiemChange
    } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, "finish");
    const isTimeDisabled = React167.useCallback((rawValue, viewType) => {
      const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
      const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
      const containsValidTime = ({
        start: start2,
        end: end2
      }) => {
        if (minTime && isAfter(minTime, end2)) {
          return false;
        }
        if (maxTime && isAfter(start2, maxTime)) {
          return false;
        }
        if (disableFuture && isAfter(start2, now2)) {
          return false;
        }
        if (disablePast && isAfter(now2, shouldCheckPastEnd ? end2 : start2)) {
          return false;
        }
        return true;
      };
      const isValidValue = (timeValue, step = 1) => {
        if (timeValue % step !== 0) {
          return false;
        }
        if (shouldDisableTime) {
          switch (viewType) {
            case "hours":
              return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
            case "minutes":
              return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
            case "seconds":
              return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
            default:
              return false;
          }
        }
        return true;
      };
      switch (viewType) {
        case "hours": {
          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
          const start2 = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
          const end2 = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(valueWithMeridiem);
        }
        case "minutes": {
          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
          const start2 = utils.setSeconds(dateWithNewMinutes, 0);
          const end2 = utils.setSeconds(dateWithNewMinutes, 59);
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(rawValue, minutesStep);
        }
        case "seconds": {
          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
          const start2 = dateWithNewSeconds;
          const end2 = dateWithNewSeconds;
          return !containsValidTime({
            start: start2,
            end: end2
          }) || !isValidValue(rawValue);
        }
        default:
          throw new Error("not supported");
      }
    }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils, disableFuture, disablePast, now2, views]);
    const buildViewProps = React167.useCallback((viewToBuild) => {
      switch (viewToBuild) {
        case "hours": {
          return {
            onChange: (hours) => {
              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);
              setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), "finish", "hours");
            },
            items: getHourSectionOptions({
              now: now2,
              value,
              ampm,
              utils,
              isDisabled: (hours) => isTimeDisabled(hours, "hours"),
              timeStep: timeSteps.hours,
              resolveAriaLabel: translations.hoursClockNumberText,
              valueOrReferenceDate
            })
          };
        }
        case "minutes": {
          return {
            onChange: (minutes) => {
              setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes), "finish", "minutes");
            },
            items: getTimeSectionOptions({
              value: utils.getMinutes(valueOrReferenceDate),
              utils,
              isDisabled: (minutes) => isTimeDisabled(minutes, "minutes"),
              resolveLabel: (minutes) => utils.format(utils.setMinutes(now2, minutes), "minutes"),
              timeStep: timeSteps.minutes,
              hasValue: !!value,
              resolveAriaLabel: translations.minutesClockNumberText
            })
          };
        }
        case "seconds": {
          return {
            onChange: (seconds) => {
              setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds), "finish", "seconds");
            },
            items: getTimeSectionOptions({
              value: utils.getSeconds(valueOrReferenceDate),
              utils,
              isDisabled: (seconds) => isTimeDisabled(seconds, "seconds"),
              resolveLabel: (seconds) => utils.format(utils.setSeconds(now2, seconds), "seconds"),
              timeStep: timeSteps.seconds,
              hasValue: !!value,
              resolveAriaLabel: translations.secondsClockNumberText
            })
          };
        }
        case "meridiem": {
          const amLabel = formatMeridiem(utils, "am");
          const pmLabel = formatMeridiem(utils, "pm");
          return {
            onChange: handleMeridiemChange,
            items: [{
              value: "am",
              label: amLabel,
              isSelected: () => !!value && meridiemMode === "am",
              isFocused: () => !!valueOrReferenceDate && meridiemMode === "am",
              ariaLabel: amLabel
            }, {
              value: "pm",
              label: pmLabel,
              isSelected: () => !!value && meridiemMode === "pm",
              isFocused: () => !!valueOrReferenceDate && meridiemMode === "pm",
              ariaLabel: pmLabel
            }]
          };
        }
        default:
          throw new Error(`Unknown view: ${viewToBuild} found.`);
      }
    }, [now2, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, translations.hoursClockNumberText, translations.minutesClockNumberText, translations.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, handleMeridiemChange]);
    const viewsToRender = React167.useMemo(() => {
      if (!isRtl) {
        return views;
      }
      const digitViews = views.filter((v) => v !== "meridiem");
      digitViews.reverse();
      if (views.includes("meridiem")) {
        digitViews.push("meridiem");
      }
      return digitViews;
    }, [isRtl, views]);
    const viewTimeOptions = React167.useMemo(() => {
      return views.reduce((result, currentView) => {
        return _extends({}, result, {
          [currentView]: buildViewProps(currentView)
        });
      }, {});
    }, [views, buildViewProps]);
    const ownerState = props;
    const classes = useUtilityClasses62(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(MultiSectionDigitalClockRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState,
      role: "group"
    }, other, {
      children: viewsToRender.map((timeView) => /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(MultiSectionDigitalClockSection, {
        items: viewTimeOptions[timeView].items,
        onChange: viewTimeOptions[timeView].onChange,
        active: view === timeView,
        autoFocus: autoFocus ?? focusedView === timeView,
        disabled,
        readOnly,
        slots,
        slotProps,
        skipDisabled,
        "aria-label": translations.selectViewText(timeView)
      }, timeView))
    }));
  });
  true ? MultiSectionDigitalClock.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types93.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types93.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types93.default.object,
    className: import_prop_types93.default.string,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types93.default.object,
    /**
     * If `true`, the picker views and text field are disabled.
     * @default false
     */
    disabled: import_prop_types93.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types93.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types93.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types93.default.bool,
    /**
     * Controlled focused view.
     */
    focusedView: import_prop_types93.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types93.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types93.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types93.default.number,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TView The view type. Will be one of date or time views.
     * @param {TValue} value The new value.
     * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
     * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
     */
    onChange: import_prop_types93.default.func,
    /**
     * Callback fired on focused view change.
     * @template TView
     * @param {TView} view The new view to focus or not.
     * @param {boolean} hasFocus `true` if the view should be focused.
     */
    onFocusedViewChange: import_prop_types93.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types93.default.func,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types93.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
    /**
     * If `true`, the picker views and text field are read-only.
     * @default false
     */
    readOnly: import_prop_types93.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.
     */
    referenceDate: import_prop_types93.default.object,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types93.default.func,
    /**
     * If `true`, disabled digital clock items will not be rendered.
     * @default false
     */
    skipDisabled: import_prop_types93.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types93.default.object,
    /**
     * Overrideable component slots.
     * @default {}
     */
    slots: import_prop_types93.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object]),
    /**
     * The time steps between two time unit options.
     * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
     * @default{ hours: 1, minutes: 5, seconds: 5 }
     */
    timeSteps: import_prop_types93.default.shape({
      hours: import_prop_types93.default.number,
      minutes: import_prop_types93.default.number,
      seconds: import_prop_types93.default.number
    }),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types93.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types93.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types93.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
    /**
     * Available views.
     * @default ['hours', 'minutes']
     */
    views: import_prop_types93.default.arrayOf(import_prop_types93.default.oneOf(["hours", "meridiem", "minutes", "seconds"]).isRequired)
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
  init_extends();
  var React168 = __toESM(require_react());
  var import_prop_types94 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersDay/pickersDayClasses.js
  function getPickersDayUtilityClass(slot) {
    return generateUtilityClass("MuiPickersDay", slot);
  }
  var pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);

  // node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var _excluded94 = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"];
  var useUtilityClasses63 = (ownerState) => {
    const {
      selected,
      disableMargin,
      disableHighlightToday,
      today,
      disabled,
      outsideCurrentMonth,
      showDaysOutsideCurrentMonth,
      classes
    } = ownerState;
    const isHiddenDaySpacingFiller = outsideCurrentMonth && !showDaysOutsideCurrentMonth;
    const slots = {
      root: ["root", selected && !isHiddenDaySpacingFiller && "selected", disabled && "disabled", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth", isHiddenDaySpacingFiller && "hiddenDaySpacingFiller"],
      hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
    };
    return composeClasses(slots, getPickersDayUtilityClass, classes);
  };
  var styleArg = ({
    theme: theme2
  }) => _extends({}, theme2.typography.caption, {
    width: DAY_SIZE,
    height: DAY_SIZE,
    borderRadius: "50%",
    padding: 0,
    // explicitly setting to `transparent` to avoid potentially getting impacted by change from the overridden component
    backgroundColor: "transparent",
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.short
    }),
    color: (theme2.vars || theme2).palette.text.primary,
    "@media (pointer: fine)": {
      "&:hover": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity)
      }
    },
    "&:focus": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.focusOpacity),
      [`&.${pickersDayClasses.selected}`]: {
        willChange: "background-color",
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    },
    [`&.${pickersDayClasses.selected}`]: {
      color: (theme2.vars || theme2).palette.primary.contrastText,
      backgroundColor: (theme2.vars || theme2).palette.primary.main,
      fontWeight: theme2.typography.fontWeightMedium,
      "&:hover": {
        willChange: "background-color",
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    },
    [`&.${pickersDayClasses.disabled}:not(.${pickersDayClasses.selected})`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    },
    [`&.${pickersDayClasses.disabled}&.${pickersDayClasses.selected}`]: {
      opacity: 0.6
    },
    variants: [{
      props: {
        disableMargin: false
      },
      style: {
        margin: `0 ${DAY_MARGIN}px`
      }
    }, {
      props: {
        outsideCurrentMonth: true,
        showDaysOutsideCurrentMonth: true
      },
      style: {
        color: (theme2.vars || theme2).palette.text.secondary
      }
    }, {
      props: {
        disableHighlightToday: false,
        today: true
      },
      style: {
        [`&:not(.${pickersDayClasses.selected})`]: {
          border: `1px solid ${(theme2.vars || theme2).palette.text.secondary}`
        }
      }
    }]
  });
  var overridesResolver5 = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, !ownerState.disableMargin && styles5.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles5.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles5.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles5.hiddenDaySpacingFiller];
  };
  var PickersDayRoot = styled_default2(ButtonBase_default, {
    name: "MuiPickersDay",
    slot: "Root",
    overridesResolver: overridesResolver5
  })(styleArg);
  var PickersDayFiller = styled_default2("div", {
    name: "MuiPickersDay",
    slot: "Root",
    overridesResolver: overridesResolver5
  })(({
    theme: theme2
  }) => _extends({}, styleArg({
    theme: theme2
  }), {
    // visibility: 'hidden' does not work here as it hides the element from screen readers as well
    opacity: 0,
    pointerEvents: "none"
  }));
  var noop3 = () => {
  };
  var PickersDayRaw = /* @__PURE__ */ React168.forwardRef(function PickersDay(inProps, forwardedRef) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersDay"
    });
    const {
      autoFocus = false,
      className,
      day,
      disabled = false,
      disableHighlightToday = false,
      disableMargin = false,
      isAnimating,
      onClick,
      onDaySelect,
      onFocus = noop3,
      onBlur = noop3,
      onKeyDown = noop3,
      onMouseDown = noop3,
      onMouseEnter = noop3,
      outsideCurrentMonth,
      selected = false,
      showDaysOutsideCurrentMonth = false,
      children,
      today: isToday = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const ownerState = _extends({}, props, {
      autoFocus,
      disabled,
      disableHighlightToday,
      disableMargin,
      selected,
      showDaysOutsideCurrentMonth,
      today: isToday
    });
    const classes = useUtilityClasses63(ownerState);
    const utils = useUtils();
    const ref = React168.useRef(null);
    const handleRef = useForkRef(ref, forwardedRef);
    useEnhancedEffect_default(() => {
      if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
        ref.current.focus();
      }
    }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
    const handleMouseDown = (event) => {
      onMouseDown(event);
      if (outsideCurrentMonth) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!disabled) {
        onDaySelect(day);
      }
      if (outsideCurrentMonth) {
        event.currentTarget.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
      return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(PickersDayFiller, {
        className: clsx_default(classes.root, classes.hiddenDaySpacingFiller, className),
        ownerState,
        role: other.role
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(PickersDayRoot, _extends({
      className: clsx_default(classes.root, className),
      ref: handleRef,
      centerRipple: true,
      disabled,
      tabIndex: selected ? 0 : -1,
      onKeyDown: (event) => onKeyDown(event, day),
      onFocus: (event) => onFocus(event, day),
      onBlur: (event) => onBlur(event, day),
      onMouseEnter: (event) => onMouseEnter(event, day),
      onClick: handleClick,
      onMouseDown: handleMouseDown
    }, other, {
      ownerState,
      children: !children ? utils.format(day, "dayOfMonth") : children
    }));
  });
  true ? PickersDayRaw.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.shape({
      current: import_prop_types94.default.shape({
        focusVisible: import_prop_types94.default.func.isRequired
      })
    })]),
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types94.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types94.default.object,
    className: import_prop_types94.default.string,
    component: import_prop_types94.default.elementType,
    /**
     * The date to show.
     */
    day: import_prop_types94.default.object.isRequired,
    /**
     * If `true`, renders as disabled.
     * @default false
     */
    disabled: import_prop_types94.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types94.default.bool,
    /**
     * If `true`, days are rendering without margin. Useful for displaying linked range of days.
     * @default false
     */
    disableMargin: import_prop_types94.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types94.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types94.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types94.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types94.default.string,
    isAnimating: import_prop_types94.default.bool,
    /**
     * If `true`, day is the first visible cell of the month.
     * Either the first day of the month or the first day of the week depending on `showDaysOutsideCurrentMonth`.
     */
    isFirstVisibleCell: import_prop_types94.default.bool.isRequired,
    /**
     * If `true`, day is the last visible cell of the month.
     * Either the last day of the month or the last day of the week depending on `showDaysOutsideCurrentMonth`.
     */
    isLastVisibleCell: import_prop_types94.default.bool.isRequired,
    onBlur: import_prop_types94.default.func,
    onDaySelect: import_prop_types94.default.func.isRequired,
    onFocus: import_prop_types94.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types94.default.func,
    onKeyDown: import_prop_types94.default.func,
    onMouseEnter: import_prop_types94.default.func,
    /**
     * If `true`, day is outside of month and will be hidden.
     */
    outsideCurrentMonth: import_prop_types94.default.bool.isRequired,
    /**
     * If `true`, renders as selected.
     * @default false
     */
    selected: import_prop_types94.default.bool,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types94.default.bool,
    style: import_prop_types94.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types94.default.number,
    /**
     * If `true`, renders as today date.
     * @default false
     */
    today: import_prop_types94.default.bool,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types94.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.shape({
      current: import_prop_types94.default.shape({
        pulsate: import_prop_types94.default.func.isRequired,
        start: import_prop_types94.default.func.isRequired,
        stop: import_prop_types94.default.func.isRequired
      })
    })])
  } : void 0;
  var PickersDay2 = /* @__PURE__ */ React168.memo(PickersDayRaw);

  // node_modules/@mui/x-date-pickers/DateField/DateField.js
  init_extends();
  var React183 = __toESM(require_react());
  var import_prop_types102 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
  init_extends();
  var React174 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/hooks/useValidation.js
  var React169 = __toESM(require_react());
  function useValidation(props, validate, isSameError, defaultErrorState) {
    const {
      value,
      onError
    } = props;
    const adapter = useLocalizationContext();
    const previousValidationErrorRef = React169.useRef(defaultErrorState);
    const validationError = validate({
      adapter,
      value,
      props
    });
    React169.useEffect(() => {
      if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
        onError(validationError, value);
      }
      previousValidationErrorRef.current = validationError;
    }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
    return validationError;
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
  init_extends();
  var React170 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/buildSectionsFromFormat.js
  init_extends();
  var expandFormat = ({
    utils,
    format
  }) => {
    let formatExpansionOverflow = 10;
    let prevFormat = format;
    let nextFormat = utils.expandFormat(format);
    while (nextFormat !== prevFormat) {
      prevFormat = nextFormat;
      nextFormat = utils.expandFormat(prevFormat);
      formatExpansionOverflow -= 1;
      if (formatExpansionOverflow < 0) {
        throw new Error("MUI X: The format expansion seems to be in an infinite loop. Please open an issue with the format passed to the picker component.");
      }
    }
    return nextFormat;
  };
  var getEscapedPartsFromFormat = ({
    utils,
    expandedFormat
  }) => {
    const escapedParts = [];
    const {
      start: startChar,
      end: endChar
    } = utils.escapedCharacters;
    const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, "g");
    let match2 = null;
    while (match2 = regExp.exec(expandedFormat)) {
      escapedParts.push({
        start: match2.index,
        end: regExp.lastIndex - 1
      });
    }
    return escapedParts;
  };
  var getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, sectionFormat) => {
    switch (sectionConfig.type) {
      case "year": {
        return localeText.fieldYearPlaceholder({
          digitAmount: utils.formatByString(utils.date(void 0, timezone), sectionFormat).length,
          format: sectionFormat
        });
      }
      case "month": {
        return localeText.fieldMonthPlaceholder({
          contentType: sectionConfig.contentType,
          format: sectionFormat
        });
      }
      case "day": {
        return localeText.fieldDayPlaceholder({
          format: sectionFormat
        });
      }
      case "weekDay": {
        return localeText.fieldWeekDayPlaceholder({
          contentType: sectionConfig.contentType,
          format: sectionFormat
        });
      }
      case "hours": {
        return localeText.fieldHoursPlaceholder({
          format: sectionFormat
        });
      }
      case "minutes": {
        return localeText.fieldMinutesPlaceholder({
          format: sectionFormat
        });
      }
      case "seconds": {
        return localeText.fieldSecondsPlaceholder({
          format: sectionFormat
        });
      }
      case "meridiem": {
        return localeText.fieldMeridiemPlaceholder({
          format: sectionFormat
        });
      }
      default: {
        return sectionFormat;
      }
    }
  };
  var createSection = ({
    utils,
    timezone,
    date,
    shouldRespectLeadingZeros,
    localeText,
    localizedDigits,
    now: now2,
    token: token3,
    startSeparator
  }) => {
    if (token3 === "") {
      throw new Error("MUI X: Should not call `commitToken` with an empty token");
    }
    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token3);
    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token3);
    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === "digit";
    const isValidDate = date != null && utils.isValid(date);
    let sectionValue = isValidDate ? utils.formatByString(date, token3) : "";
    let maxLength = null;
    if (hasLeadingZerosInInput) {
      if (hasLeadingZerosInFormat) {
        maxLength = sectionValue === "" ? utils.formatByString(now2, token3).length : sectionValue.length;
      } else {
        if (sectionConfig.maxLength == null) {
          throw new Error(`MUI X: The token ${token3} should have a 'maxDigitNumber' property on it's adapter`);
        }
        maxLength = sectionConfig.maxLength;
        if (isValidDate) {
          sectionValue = applyLocalizedDigits(cleanLeadingZeros(removeLocalizedDigits(sectionValue, localizedDigits), maxLength), localizedDigits);
        }
      }
    }
    return _extends({}, sectionConfig, {
      format: token3,
      maxLength,
      value: sectionValue,
      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token3),
      hasLeadingZerosInFormat,
      hasLeadingZerosInInput,
      startSeparator,
      endSeparator: "",
      modified: false
    });
  };
  var buildSections = (params) => {
    const {
      utils,
      expandedFormat,
      escapedParts
    } = params;
    const now2 = utils.date(void 0);
    const sections = [];
    let startSeparator = "";
    const validTokens = Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length);
    const regExpFirstWordInFormat = /^([a-zA-Z]+)/;
    const regExpWordOnlyComposedOfTokens = new RegExp(`^(${validTokens.join("|")})*$`);
    const regExpFirstTokenInWord = new RegExp(`^(${validTokens.join("|")})`);
    const getEscapedPartOfCurrentChar = (i2) => escapedParts.find((escapeIndex) => escapeIndex.start <= i2 && escapeIndex.end >= i2);
    let i = 0;
    while (i < expandedFormat.length) {
      const escapedPartOfCurrentChar = getEscapedPartOfCurrentChar(i);
      const isEscapedChar = escapedPartOfCurrentChar != null;
      const firstWordInFormat = regExpFirstWordInFormat.exec(expandedFormat.slice(i))?.[1];
      if (!isEscapedChar && firstWordInFormat != null && regExpWordOnlyComposedOfTokens.test(firstWordInFormat)) {
        let word = firstWordInFormat;
        while (word.length > 0) {
          const firstWord = regExpFirstTokenInWord.exec(word)[1];
          word = word.slice(firstWord.length);
          sections.push(createSection(_extends({}, params, {
            now: now2,
            token: firstWord,
            startSeparator
          })));
          startSeparator = "";
        }
        i += firstWordInFormat.length;
      } else {
        const char2 = expandedFormat[i];
        const isEscapeBoundary = isEscapedChar && escapedPartOfCurrentChar?.start === i || escapedPartOfCurrentChar?.end === i;
        if (!isEscapeBoundary) {
          if (sections.length === 0) {
            startSeparator += char2;
          } else {
            sections[sections.length - 1].endSeparator += char2;
          }
        }
        i += 1;
      }
    }
    if (sections.length === 0 && startSeparator.length > 0) {
      sections.push({
        type: "empty",
        contentType: "letter",
        maxLength: null,
        format: "",
        value: "",
        placeholder: "",
        hasLeadingZerosInFormat: false,
        hasLeadingZerosInInput: false,
        startSeparator,
        endSeparator: "",
        modified: false
      });
    }
    return sections;
  };
  var postProcessSections = ({
    isRtl,
    formatDensity,
    sections
  }) => {
    return sections.map((section) => {
      const cleanSeparator = (separator) => {
        let cleanedSeparator = separator;
        if (isRtl && cleanedSeparator !== null && cleanedSeparator.includes(" ")) {
          cleanedSeparator = `\u2069${cleanedSeparator}\u2066`;
        }
        if (formatDensity === "spacious" && ["/", ".", "-"].includes(cleanedSeparator)) {
          cleanedSeparator = ` ${cleanedSeparator} `;
        }
        return cleanedSeparator;
      };
      section.startSeparator = cleanSeparator(section.startSeparator);
      section.endSeparator = cleanSeparator(section.endSeparator);
      return section;
    });
  };
  var buildSectionsFromFormat = (params) => {
    let expandedFormat = expandFormat(params);
    if (params.isRtl && params.enableAccessibleFieldDOMStructure) {
      expandedFormat = expandedFormat.split(" ").reverse().join(" ");
    }
    const escapedParts = getEscapedPartsFromFormat(_extends({}, params, {
      expandedFormat
    }));
    const sections = buildSections(_extends({}, params, {
      expandedFormat,
      escapedParts
    }));
    return postProcessSections(_extends({}, params, {
      sections
    }));
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
  var useFieldState = (params) => {
    const utils = useUtils();
    const translations = usePickersTranslations();
    const adapter = useLocalizationContext();
    const isRtl = useRtl2();
    const {
      valueManager,
      fieldValueManager,
      valueType,
      validator: validator2,
      internalProps,
      internalProps: {
        value: valueProp,
        defaultValue,
        referenceDate: referenceDateProp,
        onChange,
        format,
        formatDensity = "dense",
        selectedSections: selectedSectionsProp,
        onSelectedSectionsChange,
        shouldRespectLeadingZeros = false,
        timezone: timezoneProp,
        enableAccessibleFieldDOMStructure = false
      }
    } = params;
    const {
      timezone,
      value: valueFromTheOutside,
      handleValueChange
    } = useValueWithTimezone({
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager
    });
    const localizedDigits = React170.useMemo(() => getLocalizedDigits(utils), [utils]);
    const sectionsValueBoundaries = React170.useMemo(() => getSectionsBoundaries(utils, localizedDigits, timezone), [utils, localizedDigits, timezone]);
    const getSectionsFromValue = React170.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, (date) => buildSectionsFromFormat({
      utils,
      timezone,
      localeText: translations,
      localizedDigits,
      format,
      date,
      formatDensity,
      shouldRespectLeadingZeros,
      enableAccessibleFieldDOMStructure,
      isRtl
    })), [fieldValueManager, format, translations, localizedDigits, isRtl, shouldRespectLeadingZeros, utils, formatDensity, timezone, enableAccessibleFieldDOMStructure]);
    const [state, setState] = React170.useState(() => {
      const sections = getSectionsFromValue(valueFromTheOutside);
      validateSections(sections, valueType);
      const stateWithoutReferenceDate = {
        sections,
        value: valueFromTheOutside,
        referenceValue: valueManager.emptyValue,
        tempValueStrAndroid: null
      };
      const granularity = getSectionTypeGranularity(sections);
      const referenceValue = valueManager.getInitialReferenceValue({
        referenceDate: referenceDateProp,
        value: valueFromTheOutside,
        utils,
        props: internalProps,
        granularity,
        timezone
      });
      return _extends({}, stateWithoutReferenceDate, {
        referenceValue
      });
    });
    const [selectedSections, innerSetSelectedSections] = useControlled({
      controlled: selectedSectionsProp,
      default: null,
      name: "useField",
      state: "selectedSections"
    });
    const setSelectedSections = (newSelectedSections) => {
      innerSetSelectedSections(newSelectedSections);
      onSelectedSectionsChange?.(newSelectedSections);
    };
    const parsedSelectedSections = React170.useMemo(() => parseSelectedSections(selectedSections, state.sections), [selectedSections, state.sections]);
    const activeSectionIndex = parsedSelectedSections === "all" ? 0 : parsedSelectedSections;
    const publishValue = ({
      value,
      referenceValue,
      sections
    }) => {
      setState((prevState) => _extends({}, prevState, {
        sections,
        value,
        referenceValue,
        tempValueStrAndroid: null
      }));
      if (valueManager.areValuesEqual(utils, state.value, value)) {
        return;
      }
      const context = {
        validationError: validator2({
          adapter,
          value,
          props: _extends({}, internalProps, {
            value,
            timezone
          })
        })
      };
      handleValueChange(value, context);
    };
    const setSectionValue = (sectionIndex, newSectionValue) => {
      const newSections = [...state.sections];
      newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {
        value: newSectionValue,
        modified: true
      });
      return newSections;
    };
    const clearValue = () => {
      publishValue({
        value: valueManager.emptyValue,
        referenceValue: state.referenceValue,
        sections: getSectionsFromValue(valueManager.emptyValue)
      });
    };
    const clearActiveSection = () => {
      if (activeSectionIndex == null) {
        return;
      }
      const activeSection = state.sections[activeSectionIndex];
      const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
      const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter((section) => section.value !== "").length;
      const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === "" ? 0 : 1);
      const newSections = setSectionValue(activeSectionIndex, "");
      const newActiveDate = hasNoOtherNonEmptySections ? null : utils.getInvalidDate();
      const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
      publishValue(_extends({}, newValues, {
        sections: newSections
      }));
    };
    const updateValueFromValueStr = (valueStr) => {
      const parseDateStr = (dateStr, referenceDate) => {
        const date = utils.parse(dateStr, format);
        if (date == null || !utils.isValid(date)) {
          return null;
        }
        const sections = buildSectionsFromFormat({
          utils,
          timezone,
          localeText: translations,
          localizedDigits,
          format,
          date,
          formatDensity,
          shouldRespectLeadingZeros,
          enableAccessibleFieldDOMStructure,
          isRtl
        });
        return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);
      };
      const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
      const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);
      publishValue({
        value: newValue,
        referenceValue: newReferenceValue,
        sections: getSectionsFromValue(newValue, state.sections)
      });
    };
    const updateSectionValue = ({
      activeSection,
      newSectionValue,
      shouldGoToNextSection
    }) => {
      if (shouldGoToNextSection && activeSectionIndex < state.sections.length - 1) {
        setSelectedSections(activeSectionIndex + 1);
      }
      const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
      const newSections = setSectionValue(activeSectionIndex, newSectionValue);
      const newActiveDateSections = activeDateManager.getSections(newSections);
      const newActiveDate = getDateFromDateSections(utils, newActiveDateSections, localizedDigits);
      let values4;
      let shouldPublish;
      if (newActiveDate != null && utils.isValid(newActiveDate)) {
        const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
        values4 = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
        shouldPublish = true;
      } else {
        values4 = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
        shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));
      }
      if (shouldPublish) {
        return publishValue(_extends({}, values4, {
          sections: newSections
        }));
      }
      return setState((prevState) => _extends({}, prevState, values4, {
        sections: newSections,
        tempValueStrAndroid: null
      }));
    };
    const setTempAndroidValueStr = (tempValueStrAndroid) => setState((prev2) => _extends({}, prev2, {
      tempValueStrAndroid
    }));
    React170.useEffect(() => {
      const sections = getSectionsFromValue(state.value);
      validateSections(sections, valueType);
      setState((prevState) => _extends({}, prevState, {
        sections
      }));
    }, [format, utils.locale, isRtl]);
    React170.useEffect(() => {
      let shouldUpdate;
      if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {
        shouldUpdate = true;
      } else {
        shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);
      }
      if (shouldUpdate) {
        setState((prevState) => _extends({}, prevState, {
          value: valueFromTheOutside,
          referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),
          sections: getSectionsFromValue(valueFromTheOutside)
        }));
      }
    }, [valueFromTheOutside]);
    return {
      state,
      activeSectionIndex,
      parsedSelectedSections,
      setSelectedSections,
      clearValue,
      clearActiveSection,
      updateSectionValue,
      updateValueFromValueStr,
      setTempAndroidValueStr,
      getSectionsFromValue,
      sectionsValueBoundaries,
      localizedDigits,
      timezone
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js
  init_extends();
  var React171 = __toESM(require_react());
  var QUERY_LIFE_DURATION_MS = 5e3;
  var isQueryResponseWithoutValue = (response) => response.saveQuery != null;
  var useFieldCharacterEditing = ({
    sections,
    updateSectionValue,
    sectionsValueBoundaries,
    localizedDigits,
    setTempAndroidValueStr,
    timezone
  }) => {
    const utils = useUtils();
    const [query, setQuery] = React171.useState(null);
    const resetQuery = useEventCallback_default(() => setQuery(null));
    React171.useEffect(() => {
      if (query != null && sections[query.sectionIndex]?.type !== query.sectionType) {
        resetQuery();
      }
    }, [sections, query, resetQuery]);
    React171.useEffect(() => {
      if (query != null) {
        const timeout2 = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
        return () => {
          clearTimeout(timeout2);
        };
      }
      return () => {
      };
    }, [query, resetQuery]);
    const applyQuery = ({
      keyPressed,
      sectionIndex
    }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
      const cleanKeyPressed = keyPressed.toLowerCase();
      const activeSection = sections[sectionIndex];
      if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
        const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
        const queryResponse2 = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
        if (!isQueryResponseWithoutValue(queryResponse2)) {
          setQuery({
            sectionIndex,
            value: concatenatedQueryValue,
            sectionType: activeSection.type
          });
          return queryResponse2;
        }
      }
      const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
      if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
        resetQuery();
        return null;
      }
      setQuery({
        sectionIndex,
        value: cleanKeyPressed,
        sectionType: activeSection.type
      });
      if (isQueryResponseWithoutValue(queryResponse)) {
        return null;
      }
      return queryResponse;
    };
    const applyLetterEditing = (params) => {
      const findMatchingOptions = (format, options, queryValue) => {
        const matchingValues = options.filter((option) => option.toLowerCase().startsWith(queryValue));
        if (matchingValues.length === 0) {
          return {
            saveQuery: false
          };
        }
        return {
          sectionValue: matchingValues[0],
          shouldGoToNextSection: matchingValues.length === 1
        };
      };
      const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
        const getOptions = (format) => getLetterEditingOptions(utils, timezone, activeSection.type, format);
        if (activeSection.contentType === "letter") {
          return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
        }
        if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === "letter") {
          const fallbackOptions = getOptions(fallbackFormat);
          const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
          if (isQueryResponseWithoutValue(response)) {
            return {
              saveQuery: false
            };
          }
          return _extends({}, response, {
            sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
          });
        }
        return {
          saveQuery: false
        };
      };
      const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
        switch (activeSection.type) {
          case "month": {
            const formatFallbackValue = (fallbackValue) => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);
            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);
          }
          case "weekDay": {
            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);
          }
          case "meridiem": {
            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
          }
          default: {
            return {
              saveQuery: false
            };
          }
        }
      };
      return applyQuery(params, getFirstSectionValueMatchingWithQuery);
    };
    const applyNumericEditing = (params) => {
      const getNewSectionValue = (queryValue, section) => {
        const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);
        const queryValueNumber = Number(cleanQueryValue);
        const sectionBoundaries = sectionsValueBoundaries[section.type]({
          currentDate: null,
          format: section.format,
          contentType: section.contentType
        });
        if (queryValueNumber > sectionBoundaries.maximum) {
          return {
            saveQuery: false
          };
        }
        if (queryValueNumber < sectionBoundaries.minimum) {
          return {
            saveQuery: true
          };
        }
        const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;
        const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionBoundaries, localizedDigits, section);
        return {
          sectionValue: newSectionValue,
          shouldGoToNextSection
        };
      };
      const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
        if (activeSection.contentType === "digit" || activeSection.contentType === "digit-with-letter") {
          return getNewSectionValue(queryValue, activeSection);
        }
        if (activeSection.type === "month") {
          const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, "digit", "month", "MM");
          const response = getNewSectionValue(queryValue, {
            type: activeSection.type,
            format: "MM",
            hasLeadingZerosInFormat,
            hasLeadingZerosInInput: true,
            contentType: "digit",
            maxLength: 2
          });
          if (isQueryResponseWithoutValue(response)) {
            return response;
          }
          const formattedValue = changeSectionValueFormat(utils, response.sectionValue, "MM", activeSection.format);
          return _extends({}, response, {
            sectionValue: formattedValue
          });
        }
        if (activeSection.type === "weekDay") {
          const response = getNewSectionValue(queryValue, activeSection);
          if (isQueryResponseWithoutValue(response)) {
            return response;
          }
          const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];
          return _extends({}, response, {
            sectionValue: formattedValue
          });
        }
        return {
          saveQuery: false
        };
      };
      return applyQuery(params, getFirstSectionValueMatchingWithQuery, (queryValue) => isStringNumber(queryValue, localizedDigits));
    };
    const applyCharacterEditing = useEventCallback_default((params) => {
      const activeSection = sections[params.sectionIndex];
      const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);
      const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {
        keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)
      })) : applyLetterEditing(params);
      if (response == null) {
        setTempAndroidValueStr(null);
        return;
      }
      updateSectionValue({
        activeSection,
        newSectionValue: response.sectionValue,
        shouldGoToNextSection: response.shouldGoToNextSection
      });
    });
    return {
      applyCharacterEditing,
      resetCharacterQuery: resetQuery
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldV7TextField.js
  var React172 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/utils/utils.js
  function arrayIncludes(array, itemOrItems) {
    if (Array.isArray(itemOrItems)) {
      return itemOrItems.every((item) => array.indexOf(item) !== -1);
    }
    return array.indexOf(itemOrItems) !== -1;
  }
  var onSpaceOrEnter = (innerFn, externalEvent) => (event) => {
    if (event.key === "Enter" || event.key === " ") {
      innerFn(event);
      event.preventDefault();
      event.stopPropagation();
    }
    if (externalEvent) {
      externalEvent(event);
    }
  };
  var getActiveElement = (root2 = document) => {
    const activeEl = root2.activeElement;
    if (!activeEl) {
      return null;
    }
    if (activeEl.shadowRoot) {
      return getActiveElement(activeEl.shadowRoot);
    }
    return activeEl;
  };
  var DEFAULT_DESKTOP_MODE_MEDIA_QUERY = "@media (pointer: fine)";

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldV7TextField.js
  var useFieldV7TextField = (params) => {
    const {
      internalProps: {
        disabled,
        readOnly = false
      },
      forwardedProps: {
        sectionListRef: inSectionListRef,
        onBlur,
        onClick,
        onFocus,
        onInput,
        onPaste,
        focused: focusedProp,
        autoFocus = false
      },
      fieldValueManager,
      applyCharacterEditing,
      resetCharacterQuery,
      setSelectedSections,
      parsedSelectedSections,
      state,
      clearActiveSection,
      clearValue,
      updateSectionValue,
      updateValueFromValueStr,
      sectionOrder,
      areAllSectionsEmpty,
      sectionsValueBoundaries
    } = params;
    const sectionListRef = React172.useRef(null);
    const handleSectionListRef = useForkRef(inSectionListRef, sectionListRef);
    const translations = usePickersTranslations();
    const utils = useUtils();
    const id = useId();
    const [focused, setFocused] = React172.useState(false);
    const interactions = React172.useMemo(() => ({
      syncSelectionToDOM: () => {
        if (!sectionListRef.current) {
          return;
        }
        const selection = document.getSelection();
        if (!selection) {
          return;
        }
        if (parsedSelectedSections == null) {
          if (selection.rangeCount > 0 && sectionListRef.current.getRoot().contains(selection.getRangeAt(0).startContainer)) {
            selection.removeAllRanges();
          }
          if (focused) {
            sectionListRef.current.getRoot().blur();
          }
          return;
        }
        if (!sectionListRef.current.getRoot().contains(getActiveElement(document))) {
          return;
        }
        const range = new window.Range();
        let target;
        if (parsedSelectedSections === "all") {
          target = sectionListRef.current.getRoot();
        } else {
          const section = state.sections[parsedSelectedSections];
          if (section.type === "empty") {
            target = sectionListRef.current.getSectionContainer(parsedSelectedSections);
          } else {
            target = sectionListRef.current.getSectionContent(parsedSelectedSections);
          }
        }
        range.selectNodeContents(target);
        target.focus();
        selection.removeAllRanges();
        selection.addRange(range);
      },
      getActiveSectionIndexFromDOM: () => {
        const activeElement = getActiveElement(document);
        if (!activeElement || !sectionListRef.current || !sectionListRef.current.getRoot().contains(activeElement)) {
          return null;
        }
        return sectionListRef.current.getSectionIndexFromDOMElement(activeElement);
      },
      focusField: (newSelectedSections = 0) => {
        if (!sectionListRef.current) {
          return;
        }
        const newParsedSelectedSections = parseSelectedSections(newSelectedSections, state.sections);
        setFocused(true);
        sectionListRef.current.getSectionContent(newParsedSelectedSections).focus();
      },
      setSelectedSections: (newSelectedSections) => {
        if (!sectionListRef.current) {
          return;
        }
        const newParsedSelectedSections = parseSelectedSections(newSelectedSections, state.sections);
        const newActiveSectionIndex = newParsedSelectedSections === "all" ? 0 : newParsedSelectedSections;
        setFocused(newActiveSectionIndex !== null);
        setSelectedSections(newSelectedSections);
      },
      isFieldFocused: () => {
        const activeElement = getActiveElement(document);
        return !!sectionListRef.current && sectionListRef.current.getRoot().contains(activeElement);
      }
    }), [parsedSelectedSections, setSelectedSections, state.sections, focused]);
    const revertDOMSectionChange = useEventCallback_default((sectionIndex) => {
      if (!sectionListRef.current) {
        return;
      }
      const section = state.sections[sectionIndex];
      sectionListRef.current.getSectionContent(sectionIndex).innerHTML = section.value || section.placeholder;
      interactions.syncSelectionToDOM();
    });
    const handleContainerClick = useEventCallback_default((event, ...args) => {
      if (event.isDefaultPrevented() || !sectionListRef.current) {
        return;
      }
      setFocused(true);
      onClick?.(event, ...args);
      if (parsedSelectedSections === "all") {
        setTimeout(() => {
          const cursorPosition = document.getSelection().getRangeAt(0).startOffset;
          if (cursorPosition === 0) {
            setSelectedSections(sectionOrder.startIndex);
            return;
          }
          let sectionIndex = 0;
          let cursorOnStartOfSection = 0;
          while (cursorOnStartOfSection < cursorPosition && sectionIndex < state.sections.length) {
            const section = state.sections[sectionIndex];
            sectionIndex += 1;
            cursorOnStartOfSection += `${section.startSeparator}${section.value || section.placeholder}${section.endSeparator}`.length;
          }
          setSelectedSections(sectionIndex - 1);
        });
      } else if (!focused) {
        setFocused(true);
        setSelectedSections(sectionOrder.startIndex);
      } else {
        const hasClickedOnASection = sectionListRef.current.getRoot().contains(event.target);
        if (!hasClickedOnASection) {
          setSelectedSections(sectionOrder.startIndex);
        }
      }
    });
    const handleContainerInput = useEventCallback_default((event) => {
      onInput?.(event);
      if (!sectionListRef.current || parsedSelectedSections !== "all") {
        return;
      }
      const target = event.target;
      const keyPressed = target.textContent ?? "";
      sectionListRef.current.getRoot().innerHTML = state.sections.map((section) => `${section.startSeparator}${section.value || section.placeholder}${section.endSeparator}`).join("");
      interactions.syncSelectionToDOM();
      if (keyPressed.length === 0 || keyPressed.charCodeAt(0) === 10) {
        resetCharacterQuery();
        clearValue();
        setSelectedSections("all");
      } else if (keyPressed.length > 1) {
        updateValueFromValueStr(keyPressed);
      } else {
        applyCharacterEditing({
          keyPressed,
          sectionIndex: 0
        });
      }
    });
    const handleContainerPaste = useEventCallback_default((event) => {
      onPaste?.(event);
      if (readOnly || parsedSelectedSections !== "all") {
        event.preventDefault();
        return;
      }
      const pastedValue = event.clipboardData.getData("text");
      event.preventDefault();
      resetCharacterQuery();
      updateValueFromValueStr(pastedValue);
    });
    const handleContainerFocus = useEventCallback_default((...args) => {
      onFocus?.(...args);
      if (focused || !sectionListRef.current) {
        return;
      }
      setFocused(true);
      const isFocusInsideASection = sectionListRef.current.getSectionIndexFromDOMElement(getActiveElement(document)) != null;
      if (!isFocusInsideASection) {
        setSelectedSections(sectionOrder.startIndex);
      }
    });
    const handleContainerBlur = useEventCallback_default((...args) => {
      onBlur?.(...args);
      setTimeout(() => {
        if (!sectionListRef.current) {
          return;
        }
        const activeElement = getActiveElement(document);
        const shouldBlur = !sectionListRef.current.getRoot().contains(activeElement);
        if (shouldBlur) {
          setFocused(false);
          setSelectedSections(null);
        }
      });
    });
    const getInputContainerClickHandler = useEventCallback_default((sectionIndex) => (event) => {
      if (event.isDefaultPrevented()) {
        return;
      }
      setSelectedSections(sectionIndex);
    });
    const handleInputContentMouseUp = useEventCallback_default((event) => {
      event.preventDefault();
    });
    const getInputContentFocusHandler = useEventCallback_default((sectionIndex) => () => {
      setSelectedSections(sectionIndex);
    });
    const handleInputContentPaste = useEventCallback_default((event) => {
      event.preventDefault();
      if (readOnly || disabled || typeof parsedSelectedSections !== "number") {
        return;
      }
      const activeSection = state.sections[parsedSelectedSections];
      const pastedValue = event.clipboardData.getData("text");
      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
      const digitsOnly = /^[0-9]+$/.test(pastedValue);
      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
      const isValidPastedValue = activeSection.contentType === "letter" && lettersOnly || activeSection.contentType === "digit" && digitsOnly || activeSection.contentType === "digit-with-letter" && digitsAndLetterOnly;
      if (isValidPastedValue) {
        resetCharacterQuery();
        updateSectionValue({
          activeSection,
          newSectionValue: pastedValue,
          shouldGoToNextSection: true
        });
      } else if (!lettersOnly && !digitsOnly) {
        resetCharacterQuery();
        updateValueFromValueStr(pastedValue);
      }
    });
    const handleInputContentDragOver = useEventCallback_default((event) => {
      event.preventDefault();
      event.dataTransfer.dropEffect = "none";
    });
    const handleInputContentInput = useEventCallback_default((event) => {
      if (!sectionListRef.current) {
        return;
      }
      const target = event.target;
      const keyPressed = target.textContent ?? "";
      const sectionIndex = sectionListRef.current.getSectionIndexFromDOMElement(target);
      const section = state.sections[sectionIndex];
      if (readOnly || !sectionListRef.current) {
        revertDOMSectionChange(sectionIndex);
        return;
      }
      if (keyPressed.length === 0) {
        if (section.value === "") {
          revertDOMSectionChange(sectionIndex);
          return;
        }
        const inputType = event.nativeEvent.inputType;
        if (inputType === "insertParagraph" || inputType === "insertLineBreak") {
          revertDOMSectionChange(sectionIndex);
          return;
        }
        resetCharacterQuery();
        clearActiveSection();
        return;
      }
      applyCharacterEditing({
        keyPressed,
        sectionIndex
      });
      revertDOMSectionChange(sectionIndex);
    });
    useEnhancedEffect_default(() => {
      if (!focused || !sectionListRef.current) {
        return;
      }
      if (parsedSelectedSections === "all") {
        sectionListRef.current.getRoot().focus();
      } else if (typeof parsedSelectedSections === "number") {
        const domElement = sectionListRef.current.getSectionContent(parsedSelectedSections);
        if (domElement) {
          domElement.focus();
        }
      }
    }, [parsedSelectedSections, focused]);
    const sectionBoundaries = React172.useMemo(() => {
      return state.sections.reduce((acc, next2) => {
        acc[next2.type] = sectionsValueBoundaries[next2.type]({
          currentDate: null,
          contentType: next2.contentType,
          format: next2.format
        });
        return acc;
      }, {});
    }, [sectionsValueBoundaries, state.sections]);
    const isContainerEditable = parsedSelectedSections === "all";
    const elements = React172.useMemo(() => {
      return state.sections.map((section, index) => {
        const isEditable = !isContainerEditable && !disabled && !readOnly;
        return {
          container: {
            "data-sectionindex": index,
            onClick: getInputContainerClickHandler(index)
          },
          content: {
            tabIndex: isContainerEditable || index > 0 ? -1 : 0,
            contentEditable: !isContainerEditable && !disabled && !readOnly,
            role: "spinbutton",
            id: `${id}-${section.type}`,
            "aria-labelledby": `${id}-${section.type}`,
            "aria-readonly": readOnly,
            "aria-valuenow": getSectionValueNow(section, utils),
            "aria-valuemin": sectionBoundaries[section.type].minimum,
            "aria-valuemax": sectionBoundaries[section.type].maximum,
            "aria-valuetext": section.value ? getSectionValueText(section, utils) : translations.empty,
            "aria-label": translations[section.type],
            "aria-disabled": disabled,
            spellCheck: isEditable ? false : void 0,
            autoCapitalize: isEditable ? "off" : void 0,
            autoCorrect: isEditable ? "off" : void 0,
            [parseInt(React172.version, 10) >= 17 ? "enterKeyHint" : "enterkeyhint"]: isEditable ? "next" : void 0,
            children: section.value || section.placeholder,
            onInput: handleInputContentInput,
            onPaste: handleInputContentPaste,
            onFocus: getInputContentFocusHandler(index),
            onDragOver: handleInputContentDragOver,
            onMouseUp: handleInputContentMouseUp,
            inputMode: section.contentType === "letter" ? "text" : "numeric"
          },
          before: {
            children: section.startSeparator
          },
          after: {
            children: section.endSeparator
          }
        };
      });
    }, [state.sections, getInputContentFocusHandler, handleInputContentPaste, handleInputContentDragOver, handleInputContentInput, getInputContainerClickHandler, handleInputContentMouseUp, disabled, readOnly, isContainerEditable, translations, utils, sectionBoundaries, id]);
    const handleValueStrChange = useEventCallback_default((event) => {
      updateValueFromValueStr(event.target.value);
    });
    const valueStr = React172.useMemo(() => areAllSectionsEmpty ? "" : fieldValueManager.getV7HiddenInputValueFromSections(state.sections), [areAllSectionsEmpty, state.sections, fieldValueManager]);
    React172.useEffect(() => {
      if (sectionListRef.current == null) {
        throw new Error(["MUI X: The `sectionListRef` prop has not been initialized by `PickersSectionList`", "You probably tried to pass a component to the `textField` slot that contains an `<input />` element instead of a `PickersSectionList`.", "", "If you want to keep using an `<input />` HTML element for the editing, please remove the `enableAccessibleFieldDOMStructure` prop from your picker or field component:", "", "<DatePicker slots={{ textField: MyCustomTextField }} />", "", "Learn more about the field accessible DOM structure on the MUI documentation: https://mui.com/x/react-date-pickers/fields/#fields-to-edit-a-single-element"].join("\n"));
      }
      if (autoFocus && sectionListRef.current) {
        sectionListRef.current.getSectionContent(sectionOrder.startIndex).focus();
      }
    }, []);
    return {
      interactions,
      returnedValue: {
        // Forwarded
        autoFocus,
        readOnly,
        focused: focusedProp ?? focused,
        sectionListRef: handleSectionListRef,
        onBlur: handleContainerBlur,
        onClick: handleContainerClick,
        onFocus: handleContainerFocus,
        onInput: handleContainerInput,
        onPaste: handleContainerPaste,
        // Additional
        enableAccessibleFieldDOMStructure: true,
        elements,
        // TODO v7: Try to set to undefined when there is a section selected.
        tabIndex: parsedSelectedSections === 0 ? -1 : 0,
        contentEditable: isContainerEditable,
        value: valueStr,
        onChange: handleValueStrChange,
        areAllSectionsEmpty
      }
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldV6TextField.js
  init_extends();
  var React173 = __toESM(require_react());
  var cleanString = (dirtyString) => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, "");
  var addPositionPropertiesToSections = (sections, localizedDigits, isRtl) => {
    let position2 = 0;
    let positionInInput = isRtl ? 1 : 0;
    const newSections = [];
    for (let i = 0; i < sections.length; i += 1) {
      const section = sections[i];
      const renderedValue = getSectionVisibleValue(section, isRtl ? "input-rtl" : "input-ltr", localizedDigits);
      const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
      const sectionLength = cleanString(sectionStr).length;
      const sectionLengthInInput = sectionStr.length;
      const cleanedValue = cleanString(renderedValue);
      const startInInput = positionInInput + (cleanedValue === "" ? 0 : renderedValue.indexOf(cleanedValue[0])) + section.startSeparator.length;
      const endInInput = startInInput + cleanedValue.length;
      newSections.push(_extends({}, section, {
        start: position2,
        end: position2 + sectionLength,
        startInInput,
        endInInput
      }));
      position2 += sectionLength;
      positionInInput += sectionLengthInInput;
    }
    return newSections;
  };
  var useFieldV6TextField = (params) => {
    const isRtl = useRtl2();
    const focusTimeoutRef = React173.useRef();
    const selectionSyncTimeoutRef = React173.useRef();
    const {
      forwardedProps: {
        onFocus,
        onClick,
        onPaste,
        onBlur,
        inputRef: inputRefProp,
        placeholder: inPlaceholder
      },
      internalProps: {
        readOnly = false,
        disabled = false
      },
      parsedSelectedSections,
      activeSectionIndex,
      state,
      fieldValueManager,
      valueManager,
      applyCharacterEditing,
      resetCharacterQuery,
      updateSectionValue,
      updateValueFromValueStr,
      clearActiveSection,
      clearValue,
      setTempAndroidValueStr,
      setSelectedSections,
      getSectionsFromValue,
      areAllSectionsEmpty,
      localizedDigits
    } = params;
    const inputRef = React173.useRef(null);
    const handleRef = useForkRef(inputRefProp, inputRef);
    const sections = React173.useMemo(() => addPositionPropertiesToSections(state.sections, localizedDigits, isRtl), [state.sections, localizedDigits, isRtl]);
    const interactions = React173.useMemo(() => ({
      syncSelectionToDOM: () => {
        if (!inputRef.current) {
          return;
        }
        if (parsedSelectedSections == null) {
          if (inputRef.current.scrollLeft) {
            inputRef.current.scrollLeft = 0;
          }
          return;
        }
        if (inputRef.current !== getActiveElement(document)) {
          return;
        }
        const currentScrollTop = inputRef.current.scrollTop;
        if (parsedSelectedSections === "all") {
          inputRef.current.select();
        } else {
          const selectedSection = sections[parsedSelectedSections];
          const selectionStart = selectedSection.type === "empty" ? selectedSection.startInInput - selectedSection.startSeparator.length : selectedSection.startInInput;
          const selectionEnd = selectedSection.type === "empty" ? selectedSection.endInInput + selectedSection.endSeparator.length : selectedSection.endInInput;
          if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
            if (inputRef.current === getActiveElement(document)) {
              inputRef.current.setSelectionRange(selectionStart, selectionEnd);
            }
          }
          clearTimeout(selectionSyncTimeoutRef.current);
          selectionSyncTimeoutRef.current = setTimeout(() => {
            if (inputRef.current && inputRef.current === getActiveElement(document) && // The section might loose all selection, where `selectionStart === selectionEnd`
            // https://github.com/mui/mui-x/pull/13652
            inputRef.current.selectionStart === inputRef.current.selectionEnd && (inputRef.current.selectionStart !== selectionStart || inputRef.current.selectionEnd !== selectionEnd)) {
              interactions.syncSelectionToDOM();
            }
          });
        }
        inputRef.current.scrollTop = currentScrollTop;
      },
      getActiveSectionIndexFromDOM: () => {
        const browserStartIndex = inputRef.current.selectionStart ?? 0;
        const browserEndIndex = inputRef.current.selectionEnd ?? 0;
        if (browserStartIndex === 0 && browserEndIndex === 0) {
          return null;
        }
        const nextSectionIndex = browserStartIndex <= sections[0].startInInput ? 1 : sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
        return nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;
      },
      focusField: (newSelectedSection = 0) => {
        inputRef.current?.focus();
        setSelectedSections(newSelectedSection);
      },
      setSelectedSections: (newSelectedSections) => setSelectedSections(newSelectedSections),
      isFieldFocused: () => inputRef.current === getActiveElement(document)
    }), [inputRef, parsedSelectedSections, sections, setSelectedSections]);
    const syncSelectionFromDOM = () => {
      const browserStartIndex = inputRef.current.selectionStart ?? 0;
      let nextSectionIndex;
      if (browserStartIndex <= sections[0].startInInput) {
        nextSectionIndex = 1;
      } else if (browserStartIndex >= sections[sections.length - 1].endInInput) {
        nextSectionIndex = 1;
      } else {
        nextSectionIndex = sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
      }
      const sectionIndex = nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;
      setSelectedSections(sectionIndex);
    };
    const handleInputFocus = useEventCallback_default((...args) => {
      onFocus?.(...args);
      const input = inputRef.current;
      clearTimeout(focusTimeoutRef.current);
      focusTimeoutRef.current = setTimeout(() => {
        if (!input || input !== inputRef.current) {
          return;
        }
        if (activeSectionIndex != null) {
          return;
        }
        if (
          // avoid selecting all sections when focusing empty field without value
          input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length
        ) {
          setSelectedSections("all");
        } else {
          syncSelectionFromDOM();
        }
      });
    });
    const handleInputClick = useEventCallback_default((event, ...args) => {
      if (event.isDefaultPrevented()) {
        return;
      }
      onClick?.(event, ...args);
      syncSelectionFromDOM();
    });
    const handleInputPaste = useEventCallback_default((event) => {
      onPaste?.(event);
      event.preventDefault();
      if (readOnly || disabled) {
        return;
      }
      const pastedValue = event.clipboardData.getData("text");
      if (typeof parsedSelectedSections === "number") {
        const activeSection = state.sections[parsedSelectedSections];
        const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
        const digitsOnly = /^[0-9]+$/.test(pastedValue);
        const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
        const isValidPastedValue = activeSection.contentType === "letter" && lettersOnly || activeSection.contentType === "digit" && digitsOnly || activeSection.contentType === "digit-with-letter" && digitsAndLetterOnly;
        if (isValidPastedValue) {
          resetCharacterQuery();
          updateSectionValue({
            activeSection,
            newSectionValue: pastedValue,
            shouldGoToNextSection: true
          });
          return;
        }
        if (lettersOnly || digitsOnly) {
          return;
        }
      }
      resetCharacterQuery();
      updateValueFromValueStr(pastedValue);
    });
    const handleContainerBlur = useEventCallback_default((...args) => {
      onBlur?.(...args);
      setSelectedSections(null);
    });
    const handleInputChange = useEventCallback_default((event) => {
      if (readOnly) {
        return;
      }
      const targetValue = event.target.value;
      if (targetValue === "") {
        resetCharacterQuery();
        clearValue();
        return;
      }
      const eventData = event.nativeEvent.data;
      const shouldUseEventData = eventData && eventData.length > 1;
      const valueStr2 = shouldUseEventData ? eventData : targetValue;
      const cleanValueStr = cleanString(valueStr2);
      if (activeSectionIndex == null || shouldUseEventData) {
        updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);
        return;
      }
      let keyPressed;
      if (parsedSelectedSections === "all" && cleanValueStr.length === 1) {
        keyPressed = cleanValueStr;
      } else {
        const prevValueStr = cleanString(fieldValueManager.getV6InputValueFromSections(sections, localizedDigits, isRtl));
        let startOfDiffIndex = -1;
        let endOfDiffIndex = -1;
        for (let i = 0; i < prevValueStr.length; i += 1) {
          if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
            startOfDiffIndex = i;
          }
          if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
            endOfDiffIndex = i;
          }
        }
        const activeSection = sections[activeSectionIndex];
        const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
        if (hasDiffOutsideOfActiveSection) {
          return;
        }
        const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || "").length;
        keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || "").length, activeSectionEndRelativeToNewValue);
      }
      if (keyPressed.length === 0) {
        if (isAndroid()) {
          setTempAndroidValueStr(valueStr2);
        }
        resetCharacterQuery();
        clearActiveSection();
        return;
      }
      applyCharacterEditing({
        keyPressed,
        sectionIndex: activeSectionIndex
      });
    });
    const placeholder = React173.useMemo(() => {
      if (inPlaceholder !== void 0) {
        return inPlaceholder;
      }
      return fieldValueManager.getV6InputValueFromSections(getSectionsFromValue(valueManager.emptyValue), localizedDigits, isRtl);
    }, [inPlaceholder, fieldValueManager, getSectionsFromValue, valueManager.emptyValue, localizedDigits, isRtl]);
    const valueStr = React173.useMemo(() => state.tempValueStrAndroid ?? fieldValueManager.getV6InputValueFromSections(state.sections, localizedDigits, isRtl), [state.sections, fieldValueManager, state.tempValueStrAndroid, localizedDigits, isRtl]);
    React173.useEffect(() => {
      if (inputRef.current && inputRef.current === getActiveElement(document)) {
        setSelectedSections("all");
      }
      return () => {
        clearTimeout(focusTimeoutRef.current);
        clearTimeout(selectionSyncTimeoutRef.current);
      };
    }, []);
    const inputMode = React173.useMemo(() => {
      if (activeSectionIndex == null) {
        return "text";
      }
      if (state.sections[activeSectionIndex].contentType === "letter") {
        return "text";
      }
      return "numeric";
    }, [activeSectionIndex, state.sections]);
    const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
    const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
    return {
      interactions,
      returnedValue: {
        // Forwarded
        readOnly,
        onBlur: handleContainerBlur,
        onClick: handleInputClick,
        onFocus: handleInputFocus,
        onPaste: handleInputPaste,
        inputRef: handleRef,
        // Additional
        enableAccessibleFieldDOMStructure: false,
        placeholder,
        inputMode,
        autoComplete: "off",
        value: shouldShowPlaceholder ? "" : valueStr,
        onChange: handleInputChange
      }
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
  var useField = (params) => {
    const utils = useUtils();
    const {
      internalProps,
      internalProps: {
        unstableFieldRef,
        minutesStep,
        enableAccessibleFieldDOMStructure = false,
        disabled = false,
        readOnly = false
      },
      forwardedProps: {
        onKeyDown,
        error,
        clearable,
        onClear
      },
      fieldValueManager,
      valueManager,
      validator: validator2
    } = params;
    const isRtl = useRtl2();
    const stateResponse = useFieldState(params);
    const {
      state,
      activeSectionIndex,
      parsedSelectedSections,
      setSelectedSections,
      clearValue,
      clearActiveSection,
      updateSectionValue,
      setTempAndroidValueStr,
      sectionsValueBoundaries,
      localizedDigits,
      timezone
    } = stateResponse;
    const characterEditingResponse = useFieldCharacterEditing({
      sections: state.sections,
      updateSectionValue,
      sectionsValueBoundaries,
      localizedDigits,
      setTempAndroidValueStr,
      timezone
    });
    const {
      resetCharacterQuery
    } = characterEditingResponse;
    const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
    const useFieldTextField = enableAccessibleFieldDOMStructure ? useFieldV7TextField : useFieldV6TextField;
    const sectionOrder = React174.useMemo(() => getSectionOrder(state.sections, isRtl && !enableAccessibleFieldDOMStructure), [state.sections, isRtl, enableAccessibleFieldDOMStructure]);
    const {
      returnedValue,
      interactions
    } = useFieldTextField(_extends({}, params, stateResponse, characterEditingResponse, {
      areAllSectionsEmpty,
      sectionOrder
    }));
    const handleContainerKeyDown = useEventCallback_default((event) => {
      onKeyDown?.(event);
      if (disabled) {
        return;
      }
      switch (true) {
        case ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "a" && !event.shiftKey && !event.altKey): {
          event.preventDefault();
          setSelectedSections("all");
          break;
        }
        case event.key === "ArrowRight": {
          event.preventDefault();
          if (parsedSelectedSections == null) {
            setSelectedSections(sectionOrder.startIndex);
          } else if (parsedSelectedSections === "all") {
            setSelectedSections(sectionOrder.endIndex);
          } else {
            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].rightIndex;
            if (nextSectionIndex !== null) {
              setSelectedSections(nextSectionIndex);
            }
          }
          break;
        }
        case event.key === "ArrowLeft": {
          event.preventDefault();
          if (parsedSelectedSections == null) {
            setSelectedSections(sectionOrder.endIndex);
          } else if (parsedSelectedSections === "all") {
            setSelectedSections(sectionOrder.startIndex);
          } else {
            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].leftIndex;
            if (nextSectionIndex !== null) {
              setSelectedSections(nextSectionIndex);
            }
          }
          break;
        }
        case event.key === "Delete": {
          event.preventDefault();
          if (readOnly) {
            break;
          }
          if (parsedSelectedSections == null || parsedSelectedSections === "all") {
            clearValue();
          } else {
            clearActiveSection();
          }
          resetCharacterQuery();
          break;
        }
        case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(event.key): {
          event.preventDefault();
          if (readOnly || activeSectionIndex == null) {
            break;
          }
          const activeSection = state.sections[activeSectionIndex];
          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, localizedDigits, activeDateManager.date, {
            minutesStep
          });
          updateSectionValue({
            activeSection,
            newSectionValue,
            shouldGoToNextSection: false
          });
          break;
        }
      }
    });
    useEnhancedEffect_default(() => {
      interactions.syncSelectionToDOM();
    });
    const validationError = useValidation(_extends({}, internalProps, {
      value: state.value,
      timezone
    }), validator2, valueManager.isSameError, valueManager.defaultErrorState);
    const inputError = React174.useMemo(() => {
      if (error !== void 0) {
        return error;
      }
      return valueManager.hasError(validationError);
    }, [valueManager, validationError, error]);
    React174.useEffect(() => {
      if (!inputError && activeSectionIndex == null) {
        resetCharacterQuery();
      }
    }, [state.referenceValue, activeSectionIndex, inputError]);
    React174.useEffect(() => {
      if (state.tempValueStrAndroid != null && activeSectionIndex != null) {
        resetCharacterQuery();
        clearActiveSection();
      }
    }, [state.sections]);
    React174.useImperativeHandle(unstableFieldRef, () => ({
      getSections: () => state.sections,
      getActiveSectionIndex: interactions.getActiveSectionIndexFromDOM,
      setSelectedSections: interactions.setSelectedSections,
      focusField: interactions.focusField,
      isFieldFocused: interactions.isFieldFocused
    }));
    const handleClearValue = useEventCallback_default((event, ...args) => {
      event.preventDefault();
      onClear?.(event, ...args);
      clearValue();
      if (!interactions.isFieldFocused()) {
        interactions.focusField(0);
      } else {
        setSelectedSections(sectionOrder.startIndex);
      }
    });
    const commonForwardedProps = {
      onKeyDown: handleContainerKeyDown,
      onClear: handleClearValue,
      error: inputError,
      clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)
    };
    const commonAdditionalProps = {
      disabled,
      readOnly
    };
    return _extends({}, params.forwardedProps, commonForwardedProps, commonAdditionalProps, returnedValue);
  };

  // node_modules/@mui/x-date-pickers/internals/utils/validation/validateDate.js
  var validateDate = ({
    props,
    value,
    adapter
  }) => {
    if (value === null) {
      return null;
    }
    const {
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      disablePast,
      disableFuture,
      timezone
    } = props;
    const now2 = adapter.utils.date(void 0, timezone);
    const minDate = applyDefaultDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
    const maxDate = applyDefaultDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
    switch (true) {
      case !adapter.utils.isValid(value):
        return "invalidDate";
      case Boolean(shouldDisableDate && shouldDisableDate(value)):
        return "shouldDisableDate";
      case Boolean(shouldDisableMonth && shouldDisableMonth(value)):
        return "shouldDisableMonth";
      case Boolean(shouldDisableYear && shouldDisableYear(value)):
        return "shouldDisableYear";
      case Boolean(disableFuture && adapter.utils.isAfterDay(value, now2)):
        return "disableFuture";
      case Boolean(disablePast && adapter.utils.isBeforeDay(value, now2)):
        return "disablePast";
      case Boolean(minDate && adapter.utils.isBeforeDay(value, minDate)):
        return "minDate";
      case Boolean(maxDate && adapter.utils.isAfterDay(value, maxDate)):
        return "maxDate";
      default:
        return null;
    }
  };

  // node_modules/@mui/x-date-pickers/internals/utils/fields.js
  init_extends();

  // node_modules/@mui/x-date-pickers/internals/utils/validation/extractValidationProps.js
  var DATE_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minDate", "maxDate", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear"];
  var TIME_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minTime", "maxTime", "shouldDisableTime", "minutesStep", "ampm", "disableIgnoringDatePartForTimeValidation"];
  var DATE_TIME_VALIDATION_PROP_NAMES = ["minDateTime", "maxDateTime"];
  var VALIDATION_PROP_NAMES = [...DATE_VALIDATION_PROP_NAMES, ...TIME_VALIDATION_PROP_NAMES, ...DATE_TIME_VALIDATION_PROP_NAMES];
  var extractValidationProps = (props) => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
    if (props.hasOwnProperty(propName)) {
      extractedProps[propName] = props[propName];
    }
    return extractedProps;
  }, {});

  // node_modules/@mui/x-date-pickers/internals/utils/fields.js
  var SHARED_FIELD_INTERNAL_PROP_NAMES = ["value", "defaultValue", "referenceDate", "format", "formatDensity", "onChange", "timezone", "onError", "shouldRespectLeadingZeros", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef", "enableAccessibleFieldDOMStructure", "disabled", "readOnly", "dateSeparator"];
  var splitFieldInternalAndForwardedProps = (props, valueType) => {
    const forwardedProps = _extends({}, props);
    const internalProps = {};
    const extractProp = (propName) => {
      if (forwardedProps.hasOwnProperty(propName)) {
        internalProps[propName] = forwardedProps[propName];
        delete forwardedProps[propName];
      }
    };
    SHARED_FIELD_INTERNAL_PROP_NAMES.forEach(extractProp);
    if (valueType === "date") {
      DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
    } else if (valueType === "time") {
      TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
    } else if (valueType === "date-time") {
      DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
      TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
      DATE_TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
    }
    return {
      forwardedProps,
      internalProps
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/defaultizedFieldProps.js
  init_extends();
  var useDefaultizedDateField = (props) => {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    return _extends({}, props, {
      disablePast: props.disablePast ?? false,
      disableFuture: props.disableFuture ?? false,
      format: props.format ?? utils.formats.keyboardDate,
      minDate: applyDefaultDate(utils, props.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, props.maxDate, defaultDates.maxDate)
    });
  };
  var useDefaultizedDateTimeField = (props) => {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const ampm = props.ampm ?? utils.is12HourCycleInCurrentLocale();
    const defaultFormat = ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
    return _extends({}, props, {
      disablePast: props.disablePast ?? false,
      disableFuture: props.disableFuture ?? false,
      format: props.format ?? defaultFormat,
      disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
      minDate: applyDefaultDate(utils, props.minDateTime ?? props.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, props.maxDateTime ?? props.maxDate, defaultDates.maxDate),
      minTime: props.minDateTime ?? props.minTime,
      maxTime: props.maxDateTime ?? props.maxTime
    });
  };

  // node_modules/@mui/x-date-pickers/DateField/useDateField.js
  var useDateField = (inProps) => {
    const props = useDefaultizedDateField(inProps);
    const {
      forwardedProps,
      internalProps
    } = splitFieldInternalAndForwardedProps(props, "date");
    return useField({
      forwardedProps,
      internalProps,
      valueManager: singleItemValueManager,
      fieldValueManager: singleItemFieldValueManager,
      validator: validateDate,
      valueType: "date"
    });
  };

  // node_modules/@mui/x-date-pickers/hooks/useClearableField.js
  init_extends();
  var React175 = __toESM(require_react());
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var _excluded95 = ["clearable", "onClear", "InputProps", "sx", "slots", "slotProps"];
  var _excluded217 = ["ownerState"];
  var useClearableField = (props) => {
    const translations = usePickersTranslations();
    const {
      clearable,
      onClear,
      InputProps,
      sx,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
    const IconButton3 = slots?.clearButton ?? IconButton_default;
    const _useSlotProps = useSlotProps_default({
      elementType: IconButton3,
      externalSlotProps: slotProps?.clearButton,
      ownerState: {},
      className: "clearButton",
      additionalProps: {
        title: translations.fieldClearLabel
      }
    }), iconButtonProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded217);
    const EndClearIcon = slots?.clearIcon ?? ClearIcon;
    const endClearIconProps = useSlotProps_default({
      elementType: EndClearIcon,
      externalSlotProps: slotProps?.clearIcon,
      ownerState: {}
    });
    return _extends({}, other, {
      InputProps: _extends({}, InputProps, {
        endAdornment: /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)(React175.Fragment, {
          children: [clearable && /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(InputAdornment_default, {
            position: "end",
            sx: {
              marginRight: InputProps?.endAdornment ? -1 : -1.5
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(IconButton3, _extends({}, iconButtonProps, {
              onClick: onClear,
              children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(EndClearIcon, _extends({
                fontSize: "small"
              }, endClearIconProps))
            }))
          }), InputProps?.endAdornment]
        })
      }),
      sx: [{
        "& .clearButton": {
          opacity: 1
        },
        "@media (pointer: fine)": {
          "& .clearButton": {
            opacity: 0
          },
          "&:hover, &:focus-within": {
            ".clearButton": {
              opacity: 1
            }
          }
        }
      }, ...Array.isArray(sx) ? sx : [sx]]
    });
  };

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersTextField.js
  init_extends();
  var React182 = __toESM(require_react());
  var import_prop_types101 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersTextField/pickersTextFieldClasses.js
  function getPickersTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiPickersTextField", slot);
  }
  var pickersTextFieldClasses = generateUtilityClasses("MuiPickersTextField", ["root", "focused", "disabled", "error", "required"]);

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersOutlinedInput/PickersOutlinedInput.js
  init_extends();
  var React179 = __toESM(require_react());
  var import_prop_types97 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersOutlinedInput/pickersOutlinedInputClasses.js
  init_extends();

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInputBase/PickersInputBase.js
  init_extends();
  var React177 = __toESM(require_react());
  var import_prop_types96 = __toESM(require_prop_types());
  var import_capitalize29 = __toESM(require_capitalize2());

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInputBase/pickersInputBaseClasses.js
  function getPickersInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiPickersInputBase", slot);
  }
  var pickersInputBaseClasses = generateUtilityClasses("MuiPickersInputBase", ["root", "focused", "disabled", "error", "notchedOutline", "sectionContent", "sectionBefore", "sectionAfter", "adornedStart", "adornedEnd", "input"]);

  // node_modules/@mui/x-date-pickers/PickersSectionList/PickersSectionList.js
  init_extends();
  var React176 = __toESM(require_react());
  var import_prop_types95 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersSectionList/pickersSectionListClasses.js
  function getPickersSectionListUtilityClass(slot) {
    return generateUtilityClass("MuiPickersSectionList", slot);
  }
  var pickersSectionListClasses = generateUtilityClasses("MuiPickersSectionList", ["root", "section", "sectionContent"]);

  // node_modules/@mui/x-date-pickers/PickersSectionList/PickersSectionList.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var _excluded96 = ["slots", "slotProps", "elements", "sectionListRef"];
  var PickersSectionListRoot = styled_default2("div", {
    name: "MuiPickersSectionList",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    direction: "ltr /*! @noflip */",
    outline: "none"
  });
  var PickersSectionListSection = styled_default2("span", {
    name: "MuiPickersSectionList",
    slot: "Section",
    overridesResolver: (props, styles5) => styles5.section
  })({});
  var PickersSectionListSectionSeparator = styled_default2("span", {
    name: "MuiPickersSectionList",
    slot: "SectionSeparator",
    overridesResolver: (props, styles5) => styles5.sectionSeparator
  })({
    whiteSpace: "pre"
  });
  var PickersSectionListSectionContent = styled_default2("span", {
    name: "MuiPickersSectionList",
    slot: "SectionContent",
    overridesResolver: (props, styles5) => styles5.sectionContent
  })({
    outline: "none"
  });
  var useUtilityClasses64 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      section: ["section"],
      sectionContent: ["sectionContent"]
    };
    return composeClasses(slots, getPickersSectionListUtilityClass, classes);
  };
  function PickersSection(props) {
    const {
      slots,
      slotProps,
      element,
      classes
    } = props;
    const Section = slots?.section ?? PickersSectionListSection;
    const sectionProps = useSlotProps_default({
      elementType: Section,
      externalSlotProps: slotProps?.section,
      externalForwardedProps: element.container,
      className: classes.section,
      ownerState: {}
    });
    const SectionContent = slots?.sectionContent ?? PickersSectionListSectionContent;
    const sectionContentProps = useSlotProps_default({
      elementType: SectionContent,
      externalSlotProps: slotProps?.sectionContent,
      externalForwardedProps: element.content,
      additionalProps: {
        suppressContentEditableWarning: true
      },
      className: classes.sectionContent,
      ownerState: {}
    });
    const SectionSeparator = slots?.sectionSeparator ?? PickersSectionListSectionSeparator;
    const sectionSeparatorBeforeProps = useSlotProps_default({
      elementType: SectionSeparator,
      externalSlotProps: slotProps?.sectionSeparator,
      externalForwardedProps: element.before,
      ownerState: {
        position: "before"
      }
    });
    const sectionSeparatorAfterProps = useSlotProps_default({
      elementType: SectionSeparator,
      externalSlotProps: slotProps?.sectionSeparator,
      externalForwardedProps: element.after,
      ownerState: {
        position: "after"
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)(Section, _extends({}, sectionProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime139.jsx)(SectionSeparator, _extends({}, sectionSeparatorBeforeProps)), /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(SectionContent, _extends({}, sectionContentProps)), /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(SectionSeparator, _extends({}, sectionSeparatorAfterProps))]
    }));
  }
  var PickersSectionList = /* @__PURE__ */ React176.forwardRef(function PickersSectionList2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersSectionList"
    });
    const {
      slots,
      slotProps,
      elements,
      sectionListRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
    const classes = useUtilityClasses64(props);
    const rootRef = React176.useRef(null);
    const handleRootRef = useForkRef(ref, rootRef);
    const getRoot = (methodName) => {
      if (!rootRef.current) {
        throw new Error(`MUI X: Cannot call sectionListRef.${methodName} before the mount of the component.`);
      }
      return rootRef.current;
    };
    React176.useImperativeHandle(sectionListRef, () => ({
      getRoot() {
        return getRoot("getRoot");
      },
      getSectionContainer(index) {
        const root2 = getRoot("getSectionContainer");
        return root2.querySelector(`.${pickersSectionListClasses.section}[data-sectionindex="${index}"]`);
      },
      getSectionContent(index) {
        const root2 = getRoot("getSectionContent");
        return root2.querySelector(`.${pickersSectionListClasses.section}[data-sectionindex="${index}"] .${pickersSectionListClasses.sectionContent}`);
      },
      getSectionIndexFromDOMElement(element) {
        const root2 = getRoot("getSectionIndexFromDOMElement");
        if (element == null || !root2.contains(element)) {
          return null;
        }
        let sectionContainer = null;
        if (element.classList.contains(pickersSectionListClasses.section)) {
          sectionContainer = element;
        } else if (element.classList.contains(pickersSectionListClasses.sectionContent)) {
          sectionContainer = element.parentElement;
        }
        if (sectionContainer == null) {
          return null;
        }
        return Number(sectionContainer.dataset.sectionindex);
      }
    }));
    const Root = slots?.root ?? PickersSectionListRoot;
    const rootProps = useSlotProps_default({
      elementType: Root,
      externalSlotProps: slotProps?.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: handleRootRef,
        suppressContentEditableWarning: true
      },
      className: classes.root,
      ownerState: {}
    });
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(Root, _extends({}, rootProps, {
      children: rootProps.contentEditable ? elements.map(({
        content,
        before,
        after
      }) => `${before.children}${content.children}${after.children}`).join("") : /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(React176.Fragment, {
        children: elements.map((element, elementIndex) => /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(PickersSection, {
          slots,
          slotProps,
          element,
          classes
        }, elementIndex))
      })
    }));
  });
  true ? PickersSectionList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types95.default.object,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types95.default.bool.isRequired,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types95.default.arrayOf(import_prop_types95.default.shape({
      after: import_prop_types95.default.object.isRequired,
      before: import_prop_types95.default.object.isRequired,
      container: import_prop_types95.default.object.isRequired,
      content: import_prop_types95.default.object.isRequired
    })).isRequired,
    sectionListRef: import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.shape({
      current: import_prop_types95.default.shape({
        getRoot: import_prop_types95.default.func.isRequired,
        getSectionContainer: import_prop_types95.default.func.isRequired,
        getSectionContent: import_prop_types95.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types95.default.func.isRequired
      })
    })]),
    /**
     * The props used for each component slot.
     */
    slotProps: import_prop_types95.default.object,
    /**
     * Overridable component slots.
     */
    slots: import_prop_types95.default.object
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInputBase/PickersInputBase.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var _excluded97 = ["elements", "areAllSectionsEmpty", "defaultValue", "label", "value", "onChange", "id", "autoFocus", "endAdornment", "startAdornment", "renderSuffix", "slots", "slotProps", "contentEditable", "tabIndex", "onInput", "onPaste", "onKeyDown", "fullWidth", "name", "readOnly", "inputProps", "inputRef", "sectionListRef"];
  var round3 = (value) => Math.round(value * 1e5) / 1e5;
  var PickersInputBaseRoot = styled_default2("div", {
    name: "MuiPickersInputBase",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => _extends({}, theme2.typography.body1, {
    color: (theme2.vars || theme2).palette.text.primary,
    cursor: "text",
    padding: 0,
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    letterSpacing: `${round3(0.15 / 16)}em`,
    variants: [{
      props: {
        fullWidth: true
      },
      style: {
        width: "100%"
      }
    }]
  }));
  var PickersInputBaseSectionsContainer = styled_default2(PickersSectionListRoot, {
    name: "MuiPickersInputBase",
    slot: "SectionsContainer",
    overridesResolver: (props, styles5) => styles5.sectionsContainer
  })(({
    theme: theme2
  }) => ({
    padding: "4px 0 5px",
    fontFamily: theme2.typography.fontFamily,
    fontSize: "inherit",
    lineHeight: "1.4375em",
    // 23px
    flexGrow: 1,
    outline: "none",
    display: "flex",
    flexWrap: "nowrap",
    overflow: "hidden",
    letterSpacing: "inherit",
    // Baseline behavior
    width: "182px",
    variants: [{
      props: {
        isRtl: true
      },
      style: {
        textAlign: "right /*! @noflip */"
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        paddingTop: 1
      }
    }, {
      props: {
        adornedStart: false,
        focused: false,
        filled: false
      },
      style: {
        color: "currentColor",
        opacity: 0
      }
    }, {
      // Can't use the object notation because label can be null or undefined
      props: ({
        adornedStart,
        focused,
        filled,
        label
      }) => !adornedStart && !focused && !filled && label == null,
      style: theme2.vars ? {
        opacity: theme2.vars.opacity.inputPlaceholder
      } : {
        opacity: theme2.palette.mode === "light" ? 0.42 : 0.5
      }
    }]
  }));
  var PickersInputBaseSection = styled_default2(PickersSectionListSection, {
    name: "MuiPickersInputBase",
    slot: "Section",
    overridesResolver: (props, styles5) => styles5.section
  })(({
    theme: theme2
  }) => ({
    fontFamily: theme2.typography.fontFamily,
    fontSize: "inherit",
    letterSpacing: "inherit",
    lineHeight: "1.4375em",
    // 23px
    display: "flex"
  }));
  var PickersInputBaseSectionContent = styled_default2(PickersSectionListSectionContent, {
    name: "MuiPickersInputBase",
    slot: "SectionContent",
    overridesResolver: (props, styles5) => styles5.content
  })(({
    theme: theme2
  }) => ({
    fontFamily: theme2.typography.fontFamily,
    lineHeight: "1.4375em",
    // 23px
    letterSpacing: "inherit",
    width: "fit-content",
    outline: "none"
  }));
  var PickersInputBaseSectionSeparator = styled_default2(PickersSectionListSectionSeparator, {
    name: "MuiPickersInputBase",
    slot: "Separator",
    overridesResolver: (props, styles5) => styles5.separator
  })(() => ({
    whiteSpace: "pre",
    letterSpacing: "inherit"
  }));
  var PickersInputBaseInput = styled_default2("input", {
    name: "MuiPickersInputBase",
    slot: "Input",
    overridesResolver: (props, styles5) => styles5.hiddenInput
  })(_extends({}, visuallyHidden_default));
  var useUtilityClasses65 = (ownerState) => {
    const {
      focused,
      disabled,
      error,
      classes,
      fullWidth,
      readOnly,
      color: color3,
      size,
      endAdornment,
      startAdornment
    } = ownerState;
    const slots = {
      root: ["root", focused && !disabled && "focused", disabled && "disabled", readOnly && "readOnly", error && "error", fullWidth && "fullWidth", `color${(0, import_capitalize29.default)(color3)}`, size === "small" && "inputSizeSmall", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
      notchedOutline: ["notchedOutline"],
      input: ["input"],
      sectionsContainer: ["sectionsContainer"],
      sectionContent: ["sectionContent"],
      sectionBefore: ["sectionBefore"],
      sectionAfter: ["sectionAfter"]
    };
    return composeClasses(slots, getPickersInputBaseUtilityClass, classes);
  };
  var PickersInputBase = /* @__PURE__ */ React177.forwardRef(function PickersInputBase2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersInputBase"
    });
    const {
      elements,
      areAllSectionsEmpty,
      value,
      onChange,
      id,
      endAdornment,
      startAdornment,
      renderSuffix,
      slots,
      slotProps,
      contentEditable,
      tabIndex,
      onInput,
      onPaste,
      onKeyDown,
      name,
      readOnly,
      inputProps,
      inputRef,
      sectionListRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    const rootRef = React177.useRef(null);
    const handleRootRef = useForkRef(ref, rootRef);
    const handleInputRef = useForkRef(inputProps?.ref, inputRef);
    const isRtl = useRtl2();
    const muiFormControl = useFormControl();
    if (!muiFormControl) {
      throw new Error("MUI X: PickersInputBase should always be used inside a PickersTextField component");
    }
    const handleInputFocus = (event) => {
      if (muiFormControl.disabled) {
        event.stopPropagation();
        return;
      }
      muiFormControl.onFocus?.(event);
    };
    React177.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    React177.useEffect(() => {
      if (!muiFormControl) {
        return;
      }
      if (areAllSectionsEmpty) {
        muiFormControl.onEmpty();
      } else {
        muiFormControl.onFilled();
      }
    }, [muiFormControl, areAllSectionsEmpty]);
    const ownerState = _extends({}, props, muiFormControl, {
      isRtl
    });
    const classes = useUtilityClasses65(ownerState);
    const InputRoot2 = slots?.root || PickersInputBaseRoot;
    const inputRootProps = useSlotProps_default({
      elementType: InputRoot2,
      externalSlotProps: slotProps?.root,
      externalForwardedProps: other,
      additionalProps: {
        "aria-invalid": muiFormControl.error,
        ref: handleRootRef
      },
      className: classes.root,
      ownerState
    });
    const InputSectionsContainer = slots?.input || PickersInputBaseSectionsContainer;
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsxs)(InputRoot2, _extends({}, inputRootProps, {
      children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(PickersSectionList, {
        sectionListRef,
        elements,
        contentEditable,
        tabIndex,
        className: classes.sectionsContainer,
        onFocus: handleInputFocus,
        onBlur: muiFormControl.onBlur,
        onInput,
        onPaste,
        onKeyDown,
        slots: {
          root: InputSectionsContainer,
          section: PickersInputBaseSection,
          sectionContent: PickersInputBaseSectionContent,
          sectionSeparator: PickersInputBaseSectionSeparator
        },
        slotProps: {
          root: {
            ownerState
          },
          sectionContent: {
            className: pickersInputBaseClasses.sectionContent
          },
          sectionSeparator: ({
            position: position2
          }) => ({
            className: position2 === "before" ? pickersInputBaseClasses.sectionBefore : pickersInputBaseClasses.sectionAfter
          })
        }
      }), endAdornment, renderSuffix ? renderSuffix(_extends({}, muiFormControl)) : null, /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(PickersInputBaseInput, _extends({
        name,
        className: classes.input,
        value,
        onChange,
        id,
        "aria-hidden": "true",
        tabIndex: -1,
        readOnly,
        required: muiFormControl.required,
        disabled: muiFormControl.disabled
      }, inputProps, {
        ref: handleInputRef
      }))]
    }));
  });
  true ? PickersInputBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Is `true` if the current values equals the empty value.
     * For a single item value, it means that `value === null`
     * For a range value, it means that `value === [null, null]`
     */
    areAllSectionsEmpty: import_prop_types96.default.bool.isRequired,
    className: import_prop_types96.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types96.default.elementType,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types96.default.bool.isRequired,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types96.default.arrayOf(import_prop_types96.default.shape({
      after: import_prop_types96.default.object.isRequired,
      before: import_prop_types96.default.object.isRequired,
      container: import_prop_types96.default.object.isRequired,
      content: import_prop_types96.default.object.isRequired
    })).isRequired,
    endAdornment: import_prop_types96.default.node,
    fullWidth: import_prop_types96.default.bool,
    id: import_prop_types96.default.string,
    inputProps: import_prop_types96.default.object,
    inputRef: refType_default,
    label: import_prop_types96.default.node,
    margin: import_prop_types96.default.oneOf(["dense", "none", "normal"]),
    name: import_prop_types96.default.string,
    onChange: import_prop_types96.default.func.isRequired,
    onClick: import_prop_types96.default.func.isRequired,
    onInput: import_prop_types96.default.func.isRequired,
    onKeyDown: import_prop_types96.default.func.isRequired,
    onPaste: import_prop_types96.default.func.isRequired,
    ownerState: import_prop_types96.default.any,
    readOnly: import_prop_types96.default.bool,
    renderSuffix: import_prop_types96.default.func,
    sectionListRef: import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.shape({
      current: import_prop_types96.default.shape({
        getRoot: import_prop_types96.default.func.isRequired,
        getSectionContainer: import_prop_types96.default.func.isRequired,
        getSectionContent: import_prop_types96.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types96.default.func.isRequired
      })
    })]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types96.default.object,
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types96.default.object,
    startAdornment: import_prop_types96.default.node,
    style: import_prop_types96.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object]),
    value: import_prop_types96.default.string.isRequired
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersOutlinedInput/pickersOutlinedInputClasses.js
  function getPickersOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiPickersOutlinedInput", slot);
  }
  var pickersOutlinedInputClasses = _extends({}, pickersInputBaseClasses, generateUtilityClasses("MuiPickersOutlinedInput", ["root", "notchedOutline", "input"]));

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersOutlinedInput/Outline.js
  init_extends();
  var React178 = __toESM(require_react());
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  var _excluded98 = ["children", "className", "label", "notched", "shrink"];
  var OutlineRoot = styled_default2("fieldset", {
    name: "MuiPickersOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles5) => styles5.notchedOutline
  })(({
    theme: theme2
  }) => {
    const borderColor3 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      textAlign: "left",
      position: "absolute",
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: "0 8px",
      pointerEvents: "none",
      borderRadius: "inherit",
      borderStyle: "solid",
      borderWidth: 1,
      overflow: "hidden",
      minWidth: "0%",
      borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor3
    };
  });
  var OutlineLabel = styled_default2("span")(({
    theme: theme2
  }) => ({
    fontFamily: theme2.typography.fontFamily,
    fontSize: "inherit"
  }));
  var OutlineLegend = styled_default2("legend")(({
    theme: theme2
  }) => ({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden",
    // Fix Horizontal scroll when label too long
    variants: [{
      props: {
        withLabel: false
      },
      style: {
        padding: 0,
        lineHeight: "11px",
        // sync with `height` in `legend` styles
        transition: theme2.transitions.create("width", {
          duration: 150,
          easing: theme2.transitions.easing.easeOut
        })
      }
    }, {
      props: {
        withLabel: true
      },
      style: {
        display: "block",
        // Fix conflict with normalize.css and sanitize.css
        padding: 0,
        height: 11,
        // sync with `lineHeight` in `legend` styles
        fontSize: "0.75em",
        visibility: "hidden",
        maxWidth: 0.01,
        transition: theme2.transitions.create("max-width", {
          duration: 50,
          easing: theme2.transitions.easing.easeOut
        }),
        whiteSpace: "nowrap",
        "& > span": {
          paddingLeft: 5,
          paddingRight: 5,
          display: "inline-block",
          opacity: 0,
          visibility: "visible"
        }
      }
    }, {
      props: {
        withLabel: true,
        notched: true
      },
      style: {
        maxWidth: "100%",
        transition: theme2.transitions.create("max-width", {
          duration: 100,
          easing: theme2.transitions.easing.easeOut,
          delay: 50
        })
      }
    }]
  }));
  function Outline(props) {
    const {
      className,
      label
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded98);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(OutlineRoot, _extends({
      "aria-hidden": true,
      className
    }, other, {
      ownerState,
      children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(OutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(OutlineLabel, {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(OutlineLabel, {
            className: "notranslate",
            children: "\u200B"
          })
        )
      })
    }));
  }

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersOutlinedInput/PickersOutlinedInput.js
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  var _excluded99 = ["label", "autoFocus", "ownerState", "notched"];
  var PickersOutlinedInputRoot = styled_default2(PickersInputBaseRoot, {
    name: "MuiPickersOutlinedInput",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => {
    const borderColor3 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      padding: "0 14px",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      [`&:hover .${pickersOutlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${pickersOutlinedInputClasses.notchedOutline}`]: {
          borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor3
        }
      },
      [`&.${pickersOutlinedInputClasses.focused} .${pickersOutlinedInputClasses.notchedOutline}`]: {
        borderStyle: "solid",
        borderWidth: 2
      },
      [`&.${pickersOutlinedInputClasses.disabled}`]: {
        [`& .${pickersOutlinedInputClasses.notchedOutline}`]: {
          borderColor: (theme2.vars || theme2).palette.action.disabled
        },
        "*": {
          color: (theme2.vars || theme2).palette.action.disabled
        }
      },
      [`&.${pickersOutlinedInputClasses.error} .${pickersOutlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.error.main
      },
      variants: Object.keys((theme2.vars ?? theme2).palette).filter((key) => (theme2.vars ?? theme2).palette[key]?.main ?? false).map((color3) => ({
        props: {
          color: color3
        },
        style: {
          [`&.${pickersOutlinedInputClasses.focused}:not(.${pickersOutlinedInputClasses.error}) .${pickersOutlinedInputClasses.notchedOutline}`]: {
            // @ts-ignore
            borderColor: (theme2.vars || theme2).palette[color3].main
          }
        }
      }))
    };
  });
  var PickersOutlinedInputSectionsContainer = styled_default2(PickersInputBaseSectionsContainer, {
    name: "MuiPickersOutlinedInput",
    slot: "SectionsContainer",
    overridesResolver: (props, styles5) => styles5.sectionsContainer
  })({
    padding: "16.5px 0",
    variants: [{
      props: {
        size: "small"
      },
      style: {
        padding: "8.5px 0"
      }
    }]
  });
  var useUtilityClasses66 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getPickersOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var PickersOutlinedInput = /* @__PURE__ */ React179.forwardRef(function PickersOutlinedInput2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersOutlinedInput"
    });
    const {
      label,
      ownerState: ownerStateProp,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
    const muiFormControl = useFormControl();
    const ownerState = _extends({}, props, ownerStateProp, muiFormControl, {
      color: muiFormControl?.color || "primary"
    });
    const classes = useUtilityClasses66(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(PickersInputBase, _extends({
      slots: {
        root: PickersOutlinedInputRoot,
        input: PickersOutlinedInputSectionsContainer
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Outline, {
        shrink: Boolean(notched || state.adornedStart || state.focused || state.filled),
        notched: Boolean(notched || state.adornedStart || state.focused || state.filled),
        className: classes.notchedOutline,
        label: label != null && label !== "" && muiFormControl?.required ? /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(React179.Fragment, {
          children: [label, "\u2009", "*"]
        }) : label,
        ownerState
      })
    }, other, {
      label,
      classes,
      ref
    }));
  });
  true ? PickersOutlinedInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Is `true` if the current values equals the empty value.
     * For a single item value, it means that `value === null`
     * For a range value, it means that `value === [null, null]`
     */
    areAllSectionsEmpty: import_prop_types97.default.bool.isRequired,
    className: import_prop_types97.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types97.default.elementType,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types97.default.bool.isRequired,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types97.default.arrayOf(import_prop_types97.default.shape({
      after: import_prop_types97.default.object.isRequired,
      before: import_prop_types97.default.object.isRequired,
      container: import_prop_types97.default.object.isRequired,
      content: import_prop_types97.default.object.isRequired
    })).isRequired,
    endAdornment: import_prop_types97.default.node,
    fullWidth: import_prop_types97.default.bool,
    id: import_prop_types97.default.string,
    inputProps: import_prop_types97.default.object,
    inputRef: refType_default,
    label: import_prop_types97.default.node,
    margin: import_prop_types97.default.oneOf(["dense", "none", "normal"]),
    name: import_prop_types97.default.string,
    notched: import_prop_types97.default.bool,
    onChange: import_prop_types97.default.func.isRequired,
    onClick: import_prop_types97.default.func.isRequired,
    onInput: import_prop_types97.default.func.isRequired,
    onKeyDown: import_prop_types97.default.func.isRequired,
    onPaste: import_prop_types97.default.func.isRequired,
    ownerState: import_prop_types97.default.any,
    readOnly: import_prop_types97.default.bool,
    renderSuffix: import_prop_types97.default.func,
    sectionListRef: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.shape({
      current: import_prop_types97.default.shape({
        getRoot: import_prop_types97.default.func.isRequired,
        getSectionContainer: import_prop_types97.default.func.isRequired,
        getSectionContent: import_prop_types97.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types97.default.func.isRequired
      })
    })]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types97.default.object,
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types97.default.object,
    startAdornment: import_prop_types97.default.node,
    style: import_prop_types97.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object, import_prop_types97.default.bool])), import_prop_types97.default.func, import_prop_types97.default.object]),
    value: import_prop_types97.default.string.isRequired
  } : void 0;
  PickersOutlinedInput.muiName = "Input";

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersFilledInput/PickersFilledInput.js
  init_extends();
  var React180 = __toESM(require_react());
  var import_prop_types99 = __toESM(require_prop_types());

  // node_modules/@mui/system/node_modules/@mui/utils/esm/deepmerge/deepmerge.js
  function isPlainObject4(item) {
    if (typeof item !== "object" || item === null) {
      return false;
    }
    const prototype3 = Object.getPrototypeOf(item);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
  }
  function deepClone(source) {
    if (!isPlainObject4(source)) {
      return source;
    }
    const output = {};
    Object.keys(source).forEach((key) => {
      output[key] = deepClone(source[key]);
    });
    return output;
  }
  function deepmerge11(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? {
      ...target
    } : target;
    if (isPlainObject4(target) && isPlainObject4(source)) {
      Object.keys(source).forEach((key) => {
        if (isPlainObject4(source[key]) && // Avoid prototype pollution
        Object.prototype.hasOwnProperty.call(target, key) && isPlainObject4(target[key])) {
          output[key] = deepmerge11(target[key], source[key], options);
        } else if (options.clone) {
          output[key] = isPlainObject4(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // node_modules/@mui/system/createBreakpoints/createBreakpoints.js
  var sortBreakpointsValues2 = (values4) => {
    const breakpointsAsArray = Object.keys(values4).map((key) => ({
      key,
      val: values4[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return {
        ...acc,
        [obj.key]: obj.val
      };
    }, {});
  };
  function createBreakpoints2(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values4 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5,
      ...other
    } = breakpoints;
    const sortedValues = sortBreakpointsValues2(values4);
    const keys2 = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values4[key] === "number" ? values4[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values4[key] === "number" ? values4[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys2.indexOf(end2);
      return `@media (min-width:${typeof values4[start2] === "number" ? values4[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values4[keys2[endIndex]] === "number" ? values4[keys2[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys2.indexOf(key) + 1 < keys2.length) {
        return between(key, keys2[keys2.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys2.indexOf(key);
      if (keyIndex === 0) {
        return up(keys2[1]);
      }
      if (keyIndex === keys2.length - 1) {
        return down(keys2[keyIndex]);
      }
      return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return {
      keys: keys2,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit,
      ...other
    };
  }

  // node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js
  function sortContainerQueries(theme2, css3) {
    if (!theme2.containerQueries) {
      return css3;
    }
    const sorted = Object.keys(css3).filter((key) => key.startsWith("@container")).sort((a, b) => {
      const regex = /min-width:\s*([0-9.]+)/;
      return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
    });
    if (!sorted.length) {
      return css3;
    }
    return sorted.reduce((acc, key) => {
      const value = css3[key];
      delete acc[key];
      acc[key] = value;
      return acc;
    }, {
      ...css3
    });
  }
  function isCqShorthand(breakpointKeys, value) {
    return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
  }
  function getContainerQuery(theme2, shorthand) {
    const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
    if (!matches) {
      if (true) {
        throw new Error(true ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : formatMuiErrorMessage(18, `(${shorthand})`));
      }
      return null;
    }
    const [, containerQuery, containerName] = matches;
    const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
    return theme2.containerQueries(containerName).up(value);
  }
  function cssContainerQueries(themeInput) {
    const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
    function attachCq(node3, name) {
      node3.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
      node3.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
      node3.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
      node3.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
      node3.not = (...args) => {
        const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
        if (result.includes("not all and")) {
          return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
        }
        return result;
      };
    }
    const node2 = {};
    const containerQueries = (name) => {
      attachCq(node2, name);
      return node2;
    };
    attachCq(containerQueries);
    return {
      ...themeInput,
      containerQueries
    };
  }

  // node_modules/@mui/system/createTheme/shape.js
  var shape2 = {
    borderRadius: 4
  };
  var shape_default2 = shape2;

  // node_modules/@mui/system/responsivePropType/responsivePropType.js
  var import_prop_types98 = __toESM(require_prop_types());
  var responsivePropType2 = true ? import_prop_types98.default.oneOfType([import_prop_types98.default.number, import_prop_types98.default.string, import_prop_types98.default.object, import_prop_types98.default.array]) : {};
  var responsivePropType_default2 = responsivePropType2;

  // node_modules/@mui/system/merge/merge.js
  function merge4(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge11(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default2 = merge4;

  // node_modules/@mui/system/breakpoints/breakpoints.js
  var values3 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints2 = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values3[key]}px)`
  };
  var defaultContainerQueries = {
    containerQueries: (containerName) => ({
      up: (key) => {
        let result = typeof key === "number" ? key : values3[key] || key;
        if (typeof result === "number") {
          result = `${result}px`;
        }
        return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
      }
    })
  };
  function handleBreakpoints2(props, propValue, styleFromPropValue) {
    const theme2 = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints2;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints2;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {
          const containerKey = getContainerQuery(theme2.containerQueries ? theme2 : defaultContainerQueries, breakpoint);
          if (containerKey) {
            acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          }
        } else if (Object.keys(themeBreakpoints.values || values3).includes(breakpoint)) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject2(breakpointsInput = {}) {
    const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints2(breakpointKeys, style6) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style6);
  }

  // node_modules/@mui/system/node_modules/@mui/utils/esm/capitalize/capitalize.js
  function capitalize6(string) {
    if (typeof string !== "string") {
      throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@mui/system/style/style.js
  function getPath2(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue3(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath2(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style4(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn2 = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme2 = props.theme;
      const themeMapping = getPath2(theme2, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue3(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue3(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize6(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints2(props, propValue, styleFromPropValue);
    };
    fn2.propTypes = true ? {
      [prop]: responsivePropType_default2
    } : {};
    fn2.filterProps = [prop];
    return fn2;
  }
  var style_default2 = style4;

  // node_modules/@mui/system/memoize/memoize.js
  function memoize3(fn2) {
    const cache = {};
    return (arg) => {
      if (cache[arg] === void 0) {
        cache[arg] = fn2(arg);
      }
      return cache[arg];
    };
  }

  // node_modules/@mui/system/spacing/spacing.js
  var properties2 = {
    m: "margin",
    p: "padding"
  };
  var directions2 = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases2 = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties2 = memoize3((prop) => {
    if (prop.length > 2) {
      if (aliases2[prop]) {
        prop = aliases2[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property2 = properties2[a];
    const direction = directions2[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
  });
  var marginKeys2 = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys2 = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys2 = [...marginKeys2, ...paddingKeys2];
  function createUnaryUnit2(theme2, themeKey, defaultValue, propName) {
    const themeSpacing = getPath2(theme2, themeKey, true) ?? defaultValue;
    if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
      return (val) => {
        if (typeof val === "string") {
          return val;
        }
        if (true) {
          if (typeof val !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
          }
        }
        if (typeof themeSpacing === "string") {
          return `calc(${val} * ${themeSpacing})`;
        }
        return themeSpacing * val;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (val) => {
        if (typeof val === "string") {
          return val;
        }
        const abs2 = Math.abs(val);
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        const transformed = themeSpacing[abs2];
        if (val >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing2(theme2) {
    return createUnaryUnit2(theme2, "spacing", 8, "spacing");
  }
  function getValue2(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    return transformer(propValue);
  }
  function getStyleFromPropValue2(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue2(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty2(props, keys2, prop, transformer) {
    if (!keys2.includes(prop)) {
      return null;
    }
    const cssProperties = getCssProperties2(prop);
    const styleFromPropValue = getStyleFromPropValue2(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints2(props, propValue, styleFromPropValue);
  }
  function style5(props, keys2) {
    const transformer = createUnarySpacing2(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty2(props, keys2, prop, transformer)).reduce(merge_default2, {});
  }
  function margin2(props) {
    return style5(props, marginKeys2);
  }
  margin2.propTypes = true ? marginKeys2.reduce((obj, key) => {
    obj[key] = responsivePropType_default2;
    return obj;
  }, {}) : {};
  margin2.filterProps = marginKeys2;
  function padding2(props) {
    return style5(props, paddingKeys2);
  }
  padding2.propTypes = true ? paddingKeys2.reduce((obj, key) => {
    obj[key] = responsivePropType_default2;
    return obj;
  }, {}) : {};
  padding2.filterProps = paddingKeys2;
  function spacing2(props) {
    return style5(props, spacingKeys2);
  }
  spacing2.propTypes = true ? spacingKeys2.reduce((obj, key) => {
    obj[key] = responsivePropType_default2;
    return obj;
  }, {}) : {};
  spacing2.filterProps = spacingKeys2;

  // node_modules/@mui/system/createTheme/createSpacing.js
  function createSpacing2(spacingInput = 8, transform = createUnarySpacing2({
    spacing: spacingInput
  })) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const spacing3 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing3.mui = true;
    return spacing3;
  }

  // node_modules/@mui/system/compose/compose.js
  function compose2(...styles5) {
    const handlers = styles5.reduce((acc, style6) => {
      style6.filterProps.forEach((prop) => {
        acc[prop] = style6;
      });
      return acc;
    }, {});
    const fn2 = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default2(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn2.propTypes = true ? styles5.reduce((acc, style6) => Object.assign(acc, style6.propTypes), {}) : {};
    fn2.filterProps = styles5.reduce((acc, style6) => acc.concat(style6.filterProps), []);
    return fn2;
  }
  var compose_default2 = compose2;

  // node_modules/@mui/system/borders/borders.js
  function borderTransform2(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle2(prop, transform) {
    return style_default2({
      prop,
      themeKey: "borders",
      transform
    });
  }
  var border2 = createBorderStyle2("border", borderTransform2);
  var borderTop2 = createBorderStyle2("borderTop", borderTransform2);
  var borderRight2 = createBorderStyle2("borderRight", borderTransform2);
  var borderBottom2 = createBorderStyle2("borderBottom", borderTransform2);
  var borderLeft2 = createBorderStyle2("borderLeft", borderTransform2);
  var borderColor2 = createBorderStyle2("borderColor");
  var borderTopColor2 = createBorderStyle2("borderTopColor");
  var borderRightColor2 = createBorderStyle2("borderRightColor");
  var borderBottomColor2 = createBorderStyle2("borderBottomColor");
  var borderLeftColor2 = createBorderStyle2("borderLeftColor");
  var outline2 = createBorderStyle2("outline", borderTransform2);
  var outlineColor2 = createBorderStyle2("outlineColor");
  var borderRadius2 = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit2(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue2(transformer, propValue)
      });
      return handleBreakpoints2(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius2.propTypes = true ? {
    borderRadius: responsivePropType_default2
  } : {};
  borderRadius2.filterProps = ["borderRadius"];
  var borders2 = compose_default2(border2, borderTop2, borderRight2, borderBottom2, borderLeft2, borderColor2, borderTopColor2, borderRightColor2, borderBottomColor2, borderLeftColor2, borderRadius2, outline2, outlineColor2);

  // node_modules/@mui/system/cssGrid/cssGrid.js
  var gap2 = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit2(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue2(transformer, propValue)
      });
      return handleBreakpoints2(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap2.propTypes = true ? {
    gap: responsivePropType_default2
  } : {};
  gap2.filterProps = ["gap"];
  var columnGap2 = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit2(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints2(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap2.propTypes = true ? {
    columnGap: responsivePropType_default2
  } : {};
  columnGap2.filterProps = ["columnGap"];
  var rowGap2 = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit2(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints2(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap2.propTypes = true ? {
    rowGap: responsivePropType_default2
  } : {};
  rowGap2.filterProps = ["rowGap"];
  var gridColumn2 = style_default2({
    prop: "gridColumn"
  });
  var gridRow2 = style_default2({
    prop: "gridRow"
  });
  var gridAutoFlow2 = style_default2({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns2 = style_default2({
    prop: "gridAutoColumns"
  });
  var gridAutoRows2 = style_default2({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns2 = style_default2({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows2 = style_default2({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas2 = style_default2({
    prop: "gridTemplateAreas"
  });
  var gridArea2 = style_default2({
    prop: "gridArea"
  });
  var grid2 = compose_default2(gap2, columnGap2, rowGap2, gridColumn2, gridRow2, gridAutoFlow2, gridAutoColumns2, gridAutoRows2, gridTemplateColumns2, gridTemplateRows2, gridTemplateAreas2, gridArea2);

  // node_modules/@mui/system/palette/palette.js
  function paletteTransform2(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color2 = style_default2({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform2
  });
  var bgcolor2 = style_default2({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform2
  });
  var backgroundColor2 = style_default2({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform2
  });
  var palette2 = compose_default2(color2, bgcolor2, backgroundColor2);

  // node_modules/@mui/system/sizing/sizing.js
  function sizingTransform2(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width2 = style_default2({
    prop: "width",
    transform: sizingTransform2
  });
  var maxWidth2 = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        const breakpoint = props.theme?.breakpoints?.values?.[propValue] || values3[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform2(propValue)
          };
        }
        if (props.theme?.breakpoints?.unit !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints2(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth2.filterProps = ["maxWidth"];
  var minWidth2 = style_default2({
    prop: "minWidth",
    transform: sizingTransform2
  });
  var height2 = style_default2({
    prop: "height",
    transform: sizingTransform2
  });
  var maxHeight2 = style_default2({
    prop: "maxHeight",
    transform: sizingTransform2
  });
  var minHeight2 = style_default2({
    prop: "minHeight",
    transform: sizingTransform2
  });
  var sizeWidth2 = style_default2({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform2
  });
  var sizeHeight2 = style_default2({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform2
  });
  var boxSizing2 = style_default2({
    prop: "boxSizing"
  });
  var sizing2 = compose_default2(width2, maxWidth2, minWidth2, height2, maxHeight2, minHeight2, boxSizing2);

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig3 = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform2
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform2
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform2
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform2
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform2
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform2
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius2
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform2
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform2
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform2
    },
    // spacing
    p: {
      style: padding2
    },
    pt: {
      style: padding2
    },
    pr: {
      style: padding2
    },
    pb: {
      style: padding2
    },
    pl: {
      style: padding2
    },
    px: {
      style: padding2
    },
    py: {
      style: padding2
    },
    padding: {
      style: padding2
    },
    paddingTop: {
      style: padding2
    },
    paddingRight: {
      style: padding2
    },
    paddingBottom: {
      style: padding2
    },
    paddingLeft: {
      style: padding2
    },
    paddingX: {
      style: padding2
    },
    paddingY: {
      style: padding2
    },
    paddingInline: {
      style: padding2
    },
    paddingInlineStart: {
      style: padding2
    },
    paddingInlineEnd: {
      style: padding2
    },
    paddingBlock: {
      style: padding2
    },
    paddingBlockStart: {
      style: padding2
    },
    paddingBlockEnd: {
      style: padding2
    },
    m: {
      style: margin2
    },
    mt: {
      style: margin2
    },
    mr: {
      style: margin2
    },
    mb: {
      style: margin2
    },
    ml: {
      style: margin2
    },
    mx: {
      style: margin2
    },
    my: {
      style: margin2
    },
    margin: {
      style: margin2
    },
    marginTop: {
      style: margin2
    },
    marginRight: {
      style: margin2
    },
    marginBottom: {
      style: margin2
    },
    marginLeft: {
      style: margin2
    },
    marginX: {
      style: margin2
    },
    marginY: {
      style: margin2
    },
    marginInline: {
      style: margin2
    },
    marginInlineStart: {
      style: margin2
    },
    marginInlineEnd: {
      style: margin2
    },
    marginBlock: {
      style: margin2
    },
    marginBlockStart: {
      style: margin2
    },
    marginBlockEnd: {
      style: margin2
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap2
    },
    rowGap: {
      style: rowGap2
    },
    columnGap: {
      style: columnGap2
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform2
    },
    maxWidth: {
      style: maxWidth2
    },
    minWidth: {
      transform: sizingTransform2
    },
    height: {
      transform: sizingTransform2
    },
    maxHeight: {
      transform: sizingTransform2
    },
    minHeight: {
      transform: sizingTransform2
    },
    boxSizing: {},
    // typography
    font: {
      themeKey: "font"
    },
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default2 = defaultSxConfig3;

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys2(...objects) {
    const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn2(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx2() {
    function getThemeValue(prop, val, theme2, config) {
      const props = {
        [prop]: val,
        theme: theme2
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style6
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath2(theme2, themeKey) || {};
      if (style6) {
        return style6(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue3(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue3(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize6(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints2(props, val, styleFromPropValue);
    }
    function styleFunctionSx4(props) {
      const {
        sx,
        theme: theme2 = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = theme2.unstable_sxConfig ?? defaultSxConfig_default2;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme2);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject2(theme2.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css3 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn2(sxObject[styleKey], theme2);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css3 = merge_default2(css3, getThemeValue(styleKey, value, theme2, config));
              } else {
                const breakpointsValues = handleBreakpoints2({
                  theme: theme2
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys2(breakpointsValues, value)) {
                  css3[styleKey] = styleFunctionSx4({
                    sx: value,
                    theme: theme2
                  });
                } else {
                  css3 = merge_default2(css3, breakpointsValues);
                }
              }
            } else {
              css3 = merge_default2(css3, getThemeValue(styleKey, value, theme2, config));
            }
          }
        });
        return sortContainerQueries(theme2, removeUnusedBreakpoints2(breakpointsKeys, css3));
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx4;
  }
  var styleFunctionSx3 = unstable_createStyleFunctionSx2();
  styleFunctionSx3.filterProps = ["sx"];
  var styleFunctionSx_default2 = styleFunctionSx3;

  // node_modules/@mui/system/createTheme/applyStyles.js
  function applyStyles3(key, styles5) {
    const theme2 = this;
    if (theme2.vars) {
      if (!theme2.colorSchemes?.[key] || typeof theme2.getColorSchemeSelector !== "function") {
        return {};
      }
      let selector = theme2.getColorSchemeSelector(key);
      if (selector.includes("data-") || selector.includes(".")) {
        selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
      }
      return {
        [selector]: styles5
      };
    }
    if (theme2.palette.mode === key) {
      return styles5;
    }
    return {};
  }

  // node_modules/@mui/system/createTheme/createTheme.js
  function createTheme3(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {},
      ...other
    } = options;
    const breakpoints = createBreakpoints2(breakpointsInput);
    const spacing3 = createSpacing2(spacingInput);
    let muiTheme = deepmerge11({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: {
        mode: "light",
        ...paletteInput
      },
      spacing: spacing3,
      shape: {
        ...shape_default2,
        ...shapeInput
      }
    }, other);
    muiTheme = cssContainerQueries(muiTheme);
    muiTheme.applyStyles = applyStyles3;
    muiTheme = args.reduce((acc, argument) => deepmerge11(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = {
      ...defaultSxConfig_default2,
      ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default2({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default3 = createTheme3;

  // node_modules/@mui/system/createStyled/createStyled.js
  var systemDefaultTheme3 = createTheme_default3();
  function shouldForwardProp2(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var PROCESSED_PROPS = Symbol("mui.processed_props");

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersFilledInput/pickersFilledInputClasses.js
  init_extends();
  function getPickersFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiPickersFilledInput", slot);
  }
  var pickersFilledInputClasses = _extends({}, pickersInputBaseClasses, generateUtilityClasses("MuiPickersFilledInput", ["root", "underline", "input"]));

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersFilledInput/PickersFilledInput.js
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var _excluded100 = ["label", "autoFocus", "disableUnderline", "ownerState"];
  var PickersFilledInputRoot = styled_default2(PickersInputBaseRoot, {
    name: "MuiPickersFilledInput",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root,
    shouldForwardProp: (prop) => shouldForwardProp2(prop) && prop !== "disableUnderline"
  })(({
    theme: theme2
  }) => {
    const light2 = theme2.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor3 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return {
      backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3,
      borderTopLeftRadius: (theme2.vars || theme2).shape.borderRadius,
      borderTopRightRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create("background-color", {
        duration: theme2.transitions.duration.shorter,
        easing: theme2.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3
        }
      },
      [`&.${pickersFilledInputClasses.focused}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor3
      },
      [`&.${pickersFilledInputClasses.disabled}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.disabledBg : disabledBackground
      },
      variants: [...Object.keys((theme2.vars ?? theme2).palette).filter((key) => (theme2.vars ?? theme2).palette[key].main).map((color3) => ({
        props: {
          color: color3,
          disableUnderline: false
        },
        style: {
          "&::after": {
            // @ts-ignore
            borderBottom: `2px solid ${(theme2.vars || theme2).palette[color3]?.main}`
          }
        }
      })), {
        props: {
          disableUnderline: false
        },
        style: {
          "&::after": {
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: "absolute",
            right: 0,
            transform: "scaleX(0)",
            transition: theme2.transitions.create("transform", {
              duration: theme2.transitions.duration.shorter,
              easing: theme2.transitions.easing.easeOut
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&.${pickersFilledInputClasses.focused}:after`]: {
            // translateX(0) is a workaround for Safari transform scale bug
            // See https://github.com/mui/material-ui/issues/31766
            transform: "scaleX(1) translateX(0)"
          },
          [`&.${pickersFilledInputClasses.error}`]: {
            "&:before, &:after": {
              borderBottomColor: (theme2.vars || theme2).palette.error.main
            }
          },
          "&::before": {
            borderBottom: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})` : bottomLineColor}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: "absolute",
            right: 0,
            transition: theme2.transitions.create("border-bottom-color", {
              duration: theme2.transitions.duration.shorter
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&:hover:not(.${pickersFilledInputClasses.disabled}, .${pickersFilledInputClasses.error}):before`]: {
            borderBottom: `1px solid ${(theme2.vars || theme2).palette.text.primary}`
          },
          [`&.${pickersFilledInputClasses.disabled}:before`]: {
            borderBottomStyle: "dotted"
          }
        }
      }, {
        props: ({
          startAdornment
        }) => !!startAdornment,
        style: {
          paddingLeft: 12
        }
      }, {
        props: ({
          endAdornment
        }) => !!endAdornment,
        style: {
          paddingRight: 12
        }
      }]
    };
  });
  var PickersFilledSectionsContainer = styled_default2(PickersInputBaseSectionsContainer, {
    name: "MuiPickersFilledInput",
    slot: "sectionsContainer",
    overridesResolver: (props, styles5) => styles5.sectionsContainer
  })({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12,
    variants: [{
      props: {
        size: "small"
      },
      style: {
        paddingTop: 21,
        paddingBottom: 4
      }
    }, {
      props: ({
        startAdornment
      }) => !!startAdornment,
      style: {
        paddingLeft: 0
      }
    }, {
      props: ({
        endAdornment
      }) => !!endAdornment,
      style: {
        paddingRight: 0
      }
    }, {
      props: {
        hiddenLabel: true
      },
      style: {
        paddingTop: 16,
        paddingBottom: 17
      }
    }, {
      props: {
        hiddenLabel: true,
        size: "small"
      },
      style: {
        paddingTop: 8,
        paddingBottom: 9
      }
    }]
  });
  var useUtilityClasses67 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getPickersFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var PickersFilledInput = /* @__PURE__ */ React180.forwardRef(function PickersFilledInput2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersFilledInput"
    });
    const {
      label,
      disableUnderline = false,
      ownerState: ownerStateProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const muiFormControl = useFormControl();
    const ownerState = _extends({}, props, ownerStateProp, muiFormControl, {
      color: muiFormControl?.color || "primary"
    });
    const classes = useUtilityClasses67(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(PickersInputBase, _extends({
      slots: {
        root: PickersFilledInputRoot,
        input: PickersFilledSectionsContainer
      },
      slotProps: {
        root: {
          disableUnderline
        }
      }
    }, other, {
      label,
      classes,
      ref
    }));
  });
  true ? PickersFilledInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Is `true` if the current values equals the empty value.
     * For a single item value, it means that `value === null`
     * For a range value, it means that `value === [null, null]`
     */
    areAllSectionsEmpty: import_prop_types99.default.bool.isRequired,
    className: import_prop_types99.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types99.default.elementType,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types99.default.bool.isRequired,
    disableUnderline: import_prop_types99.default.bool,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types99.default.arrayOf(import_prop_types99.default.shape({
      after: import_prop_types99.default.object.isRequired,
      before: import_prop_types99.default.object.isRequired,
      container: import_prop_types99.default.object.isRequired,
      content: import_prop_types99.default.object.isRequired
    })).isRequired,
    endAdornment: import_prop_types99.default.node,
    fullWidth: import_prop_types99.default.bool,
    hiddenLabel: import_prop_types99.default.bool,
    id: import_prop_types99.default.string,
    inputProps: import_prop_types99.default.object,
    inputRef: refType_default,
    label: import_prop_types99.default.node,
    margin: import_prop_types99.default.oneOf(["dense", "none", "normal"]),
    name: import_prop_types99.default.string,
    onChange: import_prop_types99.default.func.isRequired,
    onClick: import_prop_types99.default.func.isRequired,
    onInput: import_prop_types99.default.func.isRequired,
    onKeyDown: import_prop_types99.default.func.isRequired,
    onPaste: import_prop_types99.default.func.isRequired,
    ownerState: import_prop_types99.default.any,
    readOnly: import_prop_types99.default.bool,
    renderSuffix: import_prop_types99.default.func,
    sectionListRef: import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.shape({
      current: import_prop_types99.default.shape({
        getRoot: import_prop_types99.default.func.isRequired,
        getSectionContainer: import_prop_types99.default.func.isRequired,
        getSectionContent: import_prop_types99.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types99.default.func.isRequired
      })
    })]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types99.default.object,
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types99.default.object,
    startAdornment: import_prop_types99.default.node,
    style: import_prop_types99.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object]),
    value: import_prop_types99.default.string.isRequired
  } : void 0;
  PickersFilledInput.muiName = "Input";

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInput/PickersInput.js
  init_extends();
  var React181 = __toESM(require_react());
  var import_prop_types100 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInput/pickersInputClasses.js
  init_extends();
  function getPickersInputUtilityClass(slot) {
    return generateUtilityClass("MuiPickersFilledInput", slot);
  }
  var pickersInputClasses = _extends({}, pickersInputBaseClasses, generateUtilityClasses("MuiPickersInput", ["root", "input"]));

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersInput/PickersInput.js
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var _excluded101 = ["label", "autoFocus", "disableUnderline", "ownerState"];
  var PickersInputRoot = styled_default2(PickersInputBaseRoot, {
    name: "MuiPickersInput",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => {
    const light2 = theme2.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme2.vars) {
      bottomLineColor = `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})`;
    }
    return {
      "label + &": {
        marginTop: 16
      },
      variants: [...Object.keys((theme2.vars ?? theme2).palette).filter((key) => (theme2.vars ?? theme2).palette[key].main).map((color3) => ({
        props: {
          color: color3
        },
        style: {
          "&::after": {
            // @ts-ignore
            borderBottom: `2px solid ${(theme2.vars || theme2).palette[color3].main}`
          }
        }
      })), {
        props: {
          disableUnderline: false
        },
        style: {
          "&::after": {
            background: "red",
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: "absolute",
            right: 0,
            transform: "scaleX(0)",
            transition: theme2.transitions.create("transform", {
              duration: theme2.transitions.duration.shorter,
              easing: theme2.transitions.easing.easeOut
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&.${pickersInputClasses.focused}:after`]: {
            // translateX(0) is a workaround for Safari transform scale bug
            // See https://github.com/mui/material-ui/issues/31766
            transform: "scaleX(1) translateX(0)"
          },
          [`&.${pickersInputClasses.error}`]: {
            "&:before, &:after": {
              borderBottomColor: (theme2.vars || theme2).palette.error.main
            }
          },
          "&::before": {
            borderBottom: `1px solid ${bottomLineColor}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: "absolute",
            right: 0,
            transition: theme2.transitions.create("border-bottom-color", {
              duration: theme2.transitions.duration.shorter
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&:hover:not(.${pickersInputClasses.disabled}, .${pickersInputClasses.error}):before`]: {
            borderBottom: `2px solid ${(theme2.vars || theme2).palette.text.primary}`,
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              borderBottom: `1px solid ${bottomLineColor}`
            }
          },
          [`&.${pickersInputClasses.disabled}:before`]: {
            borderBottomStyle: "dotted"
          }
        }
      }]
    };
  });
  var useUtilityClasses68 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getPickersInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var PickersInput = /* @__PURE__ */ React181.forwardRef(function PickersInput2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersInput"
    });
    const {
      label,
      disableUnderline = false,
      ownerState: ownerStateProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
    const muiFormControl = useFormControl();
    const ownerState = _extends({}, props, ownerStateProp, muiFormControl, {
      disableUnderline,
      color: muiFormControl?.color || "primary"
    });
    const classes = useUtilityClasses68(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(PickersInputBase, _extends({
      slots: {
        root: PickersInputRoot
      }
    }, other, {
      label,
      classes,
      ref
    }));
  });
  true ? PickersInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Is `true` if the current values equals the empty value.
     * For a single item value, it means that `value === null`
     * For a range value, it means that `value === [null, null]`
     */
    areAllSectionsEmpty: import_prop_types100.default.bool.isRequired,
    className: import_prop_types100.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types100.default.elementType,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types100.default.bool.isRequired,
    disableUnderline: import_prop_types100.default.bool,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types100.default.arrayOf(import_prop_types100.default.shape({
      after: import_prop_types100.default.object.isRequired,
      before: import_prop_types100.default.object.isRequired,
      container: import_prop_types100.default.object.isRequired,
      content: import_prop_types100.default.object.isRequired
    })).isRequired,
    endAdornment: import_prop_types100.default.node,
    fullWidth: import_prop_types100.default.bool,
    id: import_prop_types100.default.string,
    inputProps: import_prop_types100.default.object,
    inputRef: refType_default,
    label: import_prop_types100.default.node,
    margin: import_prop_types100.default.oneOf(["dense", "none", "normal"]),
    name: import_prop_types100.default.string,
    onChange: import_prop_types100.default.func.isRequired,
    onClick: import_prop_types100.default.func.isRequired,
    onInput: import_prop_types100.default.func.isRequired,
    onKeyDown: import_prop_types100.default.func.isRequired,
    onPaste: import_prop_types100.default.func.isRequired,
    ownerState: import_prop_types100.default.any,
    readOnly: import_prop_types100.default.bool,
    renderSuffix: import_prop_types100.default.func,
    sectionListRef: import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.shape({
      current: import_prop_types100.default.shape({
        getRoot: import_prop_types100.default.func.isRequired,
        getSectionContainer: import_prop_types100.default.func.isRequired,
        getSectionContent: import_prop_types100.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types100.default.func.isRequired
      })
    })]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types100.default.object,
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types100.default.object,
    startAdornment: import_prop_types100.default.node,
    style: import_prop_types100.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types100.default.oneOfType([import_prop_types100.default.arrayOf(import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object, import_prop_types100.default.bool])), import_prop_types100.default.func, import_prop_types100.default.object]),
    value: import_prop_types100.default.string.isRequired
  } : void 0;
  PickersInput.muiName = "Input";

  // node_modules/@mui/x-date-pickers/PickersTextField/PickersTextField.js
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var _excluded102 = ["onFocus", "onBlur", "className", "color", "disabled", "error", "variant", "required", "InputProps", "inputProps", "inputRef", "sectionListRef", "elements", "areAllSectionsEmpty", "onClick", "onKeyDown", "onKeyUp", "onPaste", "onInput", "endAdornment", "startAdornment", "tabIndex", "contentEditable", "focused", "value", "onChange", "fullWidth", "id", "name", "helperText", "FormHelperTextProps", "label", "InputLabelProps"];
  var VARIANT_COMPONENT = {
    standard: PickersInput,
    filled: PickersFilledInput,
    outlined: PickersOutlinedInput
  };
  var PickersTextFieldRoot = styled_default2(FormControl_default, {
    name: "MuiPickersTextField",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var useUtilityClasses69 = (ownerState) => {
    const {
      focused,
      disabled,
      classes,
      required
    } = ownerState;
    const slots = {
      root: ["root", focused && !disabled && "focused", disabled && "disabled", required && "required"]
    };
    return composeClasses(slots, getPickersTextFieldUtilityClass, classes);
  };
  var PickersTextField = /* @__PURE__ */ React182.forwardRef(function PickersTextField2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersTextField"
    });
    const {
      // Props used by FormControl
      onFocus,
      onBlur,
      className,
      color: color3 = "primary",
      disabled = false,
      error = false,
      variant = "outlined",
      required = false,
      // Props used by PickersInput
      InputProps,
      inputProps,
      inputRef,
      sectionListRef,
      elements,
      areAllSectionsEmpty,
      onClick,
      onKeyDown,
      onKeyUp,
      onPaste,
      onInput,
      endAdornment,
      startAdornment,
      tabIndex,
      contentEditable,
      focused,
      value,
      onChange,
      fullWidth,
      id: idProp,
      name,
      // Props used by FormHelperText
      helperText,
      FormHelperTextProps,
      // Props used by InputLabel
      label,
      InputLabelProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
    const rootRef = React182.useRef(null);
    const handleRootRef = useForkRef(ref, rootRef);
    const id = useId(idProp);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const ownerState = _extends({}, props, {
      color: color3,
      disabled,
      error,
      focused,
      required,
      variant
    });
    const classes = useUtilityClasses69(ownerState);
    const PickersInputComponent = VARIANT_COMPONENT[variant];
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)(PickersTextFieldRoot, _extends({
      className: clsx_default(classes.root, className),
      ref: handleRootRef,
      focused,
      onFocus,
      onBlur,
      disabled,
      variant,
      error,
      color: color3,
      fullWidth,
      required,
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime145.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(PickersInputComponent, _extends({
        elements,
        areAllSectionsEmpty,
        onClick,
        onKeyDown,
        onKeyUp,
        onInput,
        onPaste,
        endAdornment,
        startAdornment,
        tabIndex,
        contentEditable,
        value,
        onChange,
        id,
        fullWidth,
        inputProps,
        inputRef,
        sectionListRef,
        label,
        name,
        role: "group",
        "aria-labelledby": inputLabelId
      }, InputProps)), helperText && /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? PickersTextField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Is `true` if the current values equals the empty value.
     * For a single item value, it means that `value === null`
     * For a range value, it means that `value === [null, null]`
     */
    areAllSectionsEmpty: import_prop_types101.default.bool.isRequired,
    className: import_prop_types101.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types101.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
    component: import_prop_types101.default.elementType,
    /**
     * If true, the whole element is editable.
     * Useful when all the sections are selected.
     */
    contentEditable: import_prop_types101.default.bool.isRequired,
    disabled: import_prop_types101.default.bool.isRequired,
    /**
     * The elements to render.
     * Each element contains the prop to edit a section of the value.
     */
    elements: import_prop_types101.default.arrayOf(import_prop_types101.default.shape({
      after: import_prop_types101.default.object.isRequired,
      before: import_prop_types101.default.object.isRequired,
      container: import_prop_types101.default.object.isRequired,
      content: import_prop_types101.default.object.isRequired
    })).isRequired,
    endAdornment: import_prop_types101.default.node,
    error: import_prop_types101.default.bool.isRequired,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types101.default.bool,
    FormHelperTextProps: import_prop_types101.default.object,
    fullWidth: import_prop_types101.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types101.default.node,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types101.default.bool,
    id: import_prop_types101.default.string,
    InputLabelProps: import_prop_types101.default.object,
    inputProps: import_prop_types101.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types101.default.object,
    inputRef: refType_default,
    label: import_prop_types101.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types101.default.oneOf(["dense", "none", "normal"]),
    name: import_prop_types101.default.string,
    onBlur: import_prop_types101.default.func.isRequired,
    onChange: import_prop_types101.default.func.isRequired,
    onClick: import_prop_types101.default.func.isRequired,
    onFocus: import_prop_types101.default.func.isRequired,
    onInput: import_prop_types101.default.func.isRequired,
    onKeyDown: import_prop_types101.default.func.isRequired,
    onPaste: import_prop_types101.default.func.isRequired,
    readOnly: import_prop_types101.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types101.default.bool,
    sectionListRef: import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.shape({
      current: import_prop_types101.default.shape({
        getRoot: import_prop_types101.default.func.isRequired,
        getSectionContainer: import_prop_types101.default.func.isRequired,
        getSectionContent: import_prop_types101.default.func.isRequired,
        getSectionIndexFromDOMElement: import_prop_types101.default.func.isRequired
      })
    })]),
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types101.default.oneOf(["medium", "small"]),
    startAdornment: import_prop_types101.default.node,
    style: import_prop_types101.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object]),
    value: import_prop_types101.default.string.isRequired,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types101.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;

  // node_modules/@mui/x-date-pickers/internals/utils/convertFieldResponseIntoMuiTextFieldProps.js
  init_extends();
  var _excluded103 = ["enableAccessibleFieldDOMStructure"];
  var _excluded218 = ["InputProps", "readOnly"];
  var _excluded312 = ["onPaste", "onKeyDown", "inputMode", "readOnly", "InputProps", "inputProps", "inputRef"];
  var convertFieldResponseIntoMuiTextFieldProps = (_ref) => {
    let {
      enableAccessibleFieldDOMStructure
    } = _ref, fieldResponse = _objectWithoutPropertiesLoose(_ref, _excluded103);
    if (enableAccessibleFieldDOMStructure) {
      const {
        InputProps: InputProps2,
        readOnly: readOnly2
      } = fieldResponse, other2 = _objectWithoutPropertiesLoose(fieldResponse, _excluded218);
      return _extends({}, other2, {
        InputProps: _extends({}, InputProps2 ?? {}, {
          readOnly: readOnly2
        })
      });
    }
    const {
      onPaste,
      onKeyDown,
      inputMode,
      readOnly,
      InputProps,
      inputProps,
      inputRef
    } = fieldResponse, other = _objectWithoutPropertiesLoose(fieldResponse, _excluded312);
    return _extends({}, other, {
      InputProps: _extends({}, InputProps ?? {}, {
        readOnly
      }),
      inputProps: _extends({}, inputProps ?? {}, {
        inputMode,
        onPaste,
        onKeyDown,
        ref: inputRef
      })
    });
  };

  // node_modules/@mui/x-date-pickers/DateField/DateField.js
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());
  var _excluded104 = ["slots", "slotProps", "InputProps", "inputProps"];
  var DateField = /* @__PURE__ */ React183.forwardRef(function DateField2(inProps, inRef) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiDateField"
    });
    const {
      slots,
      slotProps,
      InputProps,
      inputProps
    } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded104);
    const ownerState = themeProps;
    const TextField3 = slots?.textField ?? (inProps.enableAccessibleFieldDOMStructure ? PickersTextField : TextField_default);
    const textFieldProps = useSlotProps_default({
      elementType: TextField3,
      externalSlotProps: slotProps?.textField,
      externalForwardedProps: other,
      additionalProps: {
        ref: inRef
      },
      ownerState
    });
    textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
    textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
    const fieldResponse = useDateField(textFieldProps);
    const convertedFieldResponse = convertFieldResponseIntoMuiTextFieldProps(fieldResponse);
    const processedFieldProps = useClearableField(_extends({}, convertedFieldResponse, {
      slots,
      slotProps
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(TextField3, _extends({}, processedFieldProps));
  });
  true ? DateField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types102.default.bool,
    className: import_prop_types102.default.string,
    /**
     * If `true`, a clear button will be shown in the field allowing value clearing.
     * @default false
     */
    clearable: import_prop_types102.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types102.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
    component: import_prop_types102.default.elementType,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types102.default.object,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types102.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types102.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types102.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types102.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types102.default.bool,
    /**
     * Format of the date when rendered in the input(s).
     */
    format: import_prop_types102.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types102.default.oneOf(["dense", "spacious"]),
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types102.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types102.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types102.default.node,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types102.default.bool,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types102.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types102.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types102.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types102.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types102.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types102.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types102.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types102.default.object,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types102.default.string,
    onBlur: import_prop_types102.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types102.default.func,
    /**
     * Callback fired when the clear button is clicked.
     */
    onClear: import_prop_types102.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types102.default.func,
    onFocus: import_prop_types102.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types102.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     * @default false
     */
    readOnly: import_prop_types102.default.bool,
    /**
     * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.
     * For example, on time fields it will be used to determine the date to set.
     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.
     */
    referenceDate: import_prop_types102.default.object,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types102.default.bool,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types102.default.oneOfType([import_prop_types102.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types102.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types102.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types102.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types102.default.func,
    /**
     * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)
     * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)
     *
     * Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: "DD"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.
     *
     * Warning n°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.
     * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\u200e/g, '')`.
     *
     * Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros.
     * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.
     *
     * @default false
     */
    shouldRespectLeadingZeros: import_prop_types102.default.bool,
    /**
     * The size of the component.
     */
    size: import_prop_types102.default.oneOf(["medium", "small"]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types102.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types102.default.object,
    style: import_prop_types102.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types102.default.string,
    /**
     * The ref object used to imperatively interact with the field.
     */
    unstableFieldRef: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object]),
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types102.default.object,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types102.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;

  // node_modules/@mui/x-date-pickers/internals/utils/validation/validateTime.js
  var validateTime = ({
    adapter,
    value,
    props
  }) => {
    if (value === null) {
      return null;
    }
    const {
      minTime,
      maxTime,
      minutesStep,
      shouldDisableTime,
      disableIgnoringDatePartForTimeValidation = false,
      disablePast,
      disableFuture,
      timezone
    } = props;
    const now2 = adapter.utils.date(void 0, timezone);
    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
    switch (true) {
      case !adapter.utils.isValid(value):
        return "invalidDate";
      case Boolean(minTime && isAfter(minTime, value)):
        return "minTime";
      case Boolean(maxTime && isAfter(value, maxTime)):
        return "maxTime";
      case Boolean(disableFuture && adapter.utils.isAfter(value, now2)):
        return "disableFuture";
      case Boolean(disablePast && adapter.utils.isBefore(value, now2)):
        return "disablePast";
      case Boolean(shouldDisableTime && shouldDisableTime(value, "hours")):
        return "shouldDisableTime-hours";
      case Boolean(shouldDisableTime && shouldDisableTime(value, "minutes")):
        return "shouldDisableTime-minutes";
      case Boolean(shouldDisableTime && shouldDisableTime(value, "seconds")):
        return "shouldDisableTime-seconds";
      case Boolean(minutesStep && adapter.utils.getMinutes(value) % minutesStep !== 0):
        return "minutesStep";
      default:
        return null;
    }
  };

  // node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
  init_extends();
  var React184 = __toESM(require_react());
  var import_prop_types103 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/internals/utils/validation/validateDateTime.js
  var validateDateTime = ({
    props,
    value,
    adapter
  }) => {
    const dateValidationResult = validateDate({
      adapter,
      value,
      props
    });
    if (dateValidationResult !== null) {
      return dateValidationResult;
    }
    return validateTime({
      adapter,
      value,
      props
    });
  };

  // node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.js
  var useDateTimeField = (inProps) => {
    const props = useDefaultizedDateTimeField(inProps);
    const {
      forwardedProps,
      internalProps
    } = splitFieldInternalAndForwardedProps(props, "date-time");
    return useField({
      forwardedProps,
      internalProps,
      valueManager: singleItemValueManager,
      fieldValueManager: singleItemFieldValueManager,
      validator: validateDateTime,
      valueType: "date-time"
    });
  };

  // node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  var _excluded105 = ["slots", "slotProps", "InputProps", "inputProps"];
  var DateTimeField = /* @__PURE__ */ React184.forwardRef(function DateTimeField2(inProps, inRef) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiDateTimeField"
    });
    const {
      slots,
      slotProps,
      InputProps,
      inputProps
    } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded105);
    const ownerState = themeProps;
    const TextField3 = slots?.textField ?? (inProps.enableAccessibleFieldDOMStructure ? PickersTextField : TextField_default);
    const textFieldProps = useSlotProps_default({
      elementType: TextField3,
      externalSlotProps: slotProps?.textField,
      externalForwardedProps: other,
      ownerState,
      additionalProps: {
        ref: inRef
      }
    });
    textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
    textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
    const fieldResponse = useDateTimeField(textFieldProps);
    const convertedFieldResponse = convertFieldResponseIntoMuiTextFieldProps(fieldResponse);
    const processedFieldProps = useClearableField(_extends({}, convertedFieldResponse, {
      slots,
      slotProps
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(TextField3, _extends({}, processedFieldProps));
  });
  true ? DateTimeField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types103.default.bool,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types103.default.bool,
    className: import_prop_types103.default.string,
    /**
     * If `true`, a clear button will be shown in the field allowing value clearing.
     * @default false
     */
    clearable: import_prop_types103.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types103.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
    component: import_prop_types103.default.elementType,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types103.default.object,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types103.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types103.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types103.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types103.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types103.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types103.default.bool,
    /**
     * Format of the date when rendered in the input(s).
     */
    format: import_prop_types103.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types103.default.oneOf(["dense", "spacious"]),
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types103.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types103.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types103.default.node,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types103.default.bool,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types103.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types103.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types103.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types103.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types103.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types103.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types103.default.object,
    /**
     * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
     */
    maxDateTime: import_prop_types103.default.object,
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types103.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types103.default.object,
    /**
     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
     */
    minDateTime: import_prop_types103.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types103.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types103.default.number,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types103.default.string,
    onBlur: import_prop_types103.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types103.default.func,
    /**
     * Callback fired when the clear button is clicked.
     */
    onClear: import_prop_types103.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types103.default.func,
    onFocus: import_prop_types103.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types103.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     * @default false
     */
    readOnly: import_prop_types103.default.bool,
    /**
     * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.
     * For example, on time fields it will be used to determine the date to set.
     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.
     */
    referenceDate: import_prop_types103.default.object,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types103.default.bool,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types103.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types103.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types103.default.func,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types103.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types103.default.func,
    /**
     * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)
     * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)
     *
     * Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: "DD"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.
     *
     * Warning n°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.
     * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\u200e/g, '')`.
     *
     * Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros.
     * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.
     *
     * @default false
     */
    shouldRespectLeadingZeros: import_prop_types103.default.bool,
    /**
     * The size of the component.
     */
    size: import_prop_types103.default.oneOf(["medium", "small"]),
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types103.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types103.default.object,
    style: import_prop_types103.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types103.default.string,
    /**
     * The ref object used to imperatively interact with the field.
     */
    unstableFieldRef: import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object]),
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types103.default.object,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types103.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;

  // node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
  init_extends();
  var React195 = __toESM(require_react());
  var import_prop_types107 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js
  init_extends();
  var React186 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DateCalendar/useIsDateDisabled.js
  var React185 = __toESM(require_react());
  var useIsDateDisabled = ({
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    minDate,
    maxDate,
    disableFuture,
    disablePast,
    timezone
  }) => {
    const adapter = useLocalizationContext();
    return React185.useCallback((day) => validateDate({
      adapter,
      value: day,
      props: {
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        minDate,
        maxDate,
        disableFuture,
        disablePast,
        timezone
      }
    }) !== null, [adapter, shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast, timezone]);
  };

  // node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js
  var createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
    switch (action.type) {
      case "changeMonth":
        return _extends({}, state, {
          slideDirection: action.direction,
          currentMonth: action.newMonth,
          isMonthSwitchingAnimating: !reduceAnimations
        });
      case "finishMonthSwitchingAnimation":
        return _extends({}, state, {
          isMonthSwitchingAnimating: false
        });
      case "changeFocusedDay": {
        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
          return state;
        }
        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
        return _extends({}, state, {
          focusedDay: action.focusedDay,
          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
        });
      }
      default:
        throw new Error("missing support");
    }
  };
  var useCalendarState = (params) => {
    const {
      value,
      referenceDate: referenceDateProp,
      disableFuture,
      disablePast,
      disableSwitchToMonthOnDayFocus = false,
      maxDate,
      minDate,
      onMonthChange,
      reduceAnimations,
      shouldDisableDate,
      timezone
    } = params;
    const utils = useUtils();
    const reducerFn = React186.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
    const referenceDate = React186.useMemo(
      () => {
        return singleItemValueManager.getInitialReferenceValue({
          value,
          utils,
          timezone,
          props: params,
          referenceDate: referenceDateProp,
          granularity: SECTION_TYPE_GRANULARITY.day
        });
      },
      []
      // eslint-disable-line react-hooks/exhaustive-deps
    );
    const [calendarState, dispatch] = React186.useReducer(reducerFn, {
      isMonthSwitchingAnimating: false,
      focusedDay: referenceDate,
      currentMonth: utils.startOfMonth(referenceDate),
      slideDirection: "left"
    });
    const handleChangeMonth = React186.useCallback((payload) => {
      dispatch(_extends({
        type: "changeMonth"
      }, payload));
      if (onMonthChange) {
        onMonthChange(payload.newMonth);
      }
    }, [onMonthChange]);
    const changeMonth = React186.useCallback((newDate) => {
      const newDateRequested = newDate;
      if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
        return;
      }
      handleChangeMonth({
        newMonth: utils.startOfMonth(newDateRequested),
        direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
      });
    }, [calendarState.currentMonth, handleChangeMonth, utils]);
    const isDateDisabled = useIsDateDisabled({
      shouldDisableDate,
      minDate,
      maxDate,
      disableFuture,
      disablePast,
      timezone
    });
    const onMonthSwitchingAnimationEnd = React186.useCallback(() => {
      dispatch({
        type: "finishMonthSwitchingAnimation"
      });
    }, []);
    const changeFocusedDay = useEventCallback_default((newFocusedDate, withoutMonthSwitchingAnimation) => {
      if (!isDateDisabled(newFocusedDate)) {
        dispatch({
          type: "changeFocusedDay",
          focusedDay: newFocusedDate,
          withoutMonthSwitchingAnimation
        });
      }
    });
    return {
      referenceDate,
      calendarState,
      changeMonth,
      changeFocusedDay,
      isDateDisabled,
      onMonthSwitchingAnimationEnd,
      handleChangeMonth
    };
  };

  // node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
  var React187 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DateCalendar/pickersFadeTransitionGroupClasses.js
  var getPickersFadeTransitionGroupUtilityClass = (slot) => generateUtilityClass("MuiPickersFadeTransitionGroup", slot);
  var pickersFadeTransitionGroupClasses = generateUtilityClasses("MuiPickersFadeTransitionGroup", ["root"]);

  // node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  var useUtilityClasses70 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes);
  };
  var PickersFadeTransitionGroupRoot = styled_default2(TransitionGroup_default, {
    name: "MuiPickersFadeTransitionGroup",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })({
    display: "block",
    position: "relative"
  });
  function PickersFadeTransitionGroup(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersFadeTransitionGroup"
    });
    const {
      children,
      className,
      reduceAnimations,
      transKey
    } = props;
    const classes = useUtilityClasses70(props);
    const theme2 = useTheme6();
    if (reduceAnimations) {
      return children;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(PickersFadeTransitionGroupRoot, {
      className: clsx_default(classes.root, className),
      children: /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(Fade_default, {
        appear: false,
        mountOnEnter: true,
        unmountOnExit: true,
        timeout: {
          appear: theme2.transitions.duration.enteringScreen,
          enter: theme2.transitions.duration.enteringScreen,
          exit: 0
        },
        children
      }, transKey)
    });
  }

  // node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
  init_extends();
  var React189 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
  init_extends();
  var React188 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DateCalendar/pickersSlideTransitionClasses.js
  var getPickersSlideTransitionUtilityClass = (slot) => generateUtilityClass("MuiPickersSlideTransition", slot);
  var pickersSlideTransitionClasses = generateUtilityClasses("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]);

  // node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var _excluded106 = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"];
  var useUtilityClasses71 = (ownerState) => {
    const {
      classes,
      slideDirection
    } = ownerState;
    const slots = {
      root: ["root"],
      exit: ["slideExit"],
      enterActive: ["slideEnterActive"],
      enter: [`slideEnter-${slideDirection}`],
      exitActive: [`slideExitActiveLeft-${slideDirection}`]
    };
    return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes);
  };
  var PickersSlideTransitionRoot = styled_default2(TransitionGroup_default, {
    name: "MuiPickersSlideTransition",
    slot: "Root",
    overridesResolver: (_2, styles5) => [styles5.root, {
      [`.${pickersSlideTransitionClasses["slideEnter-left"]}`]: styles5["slideEnter-left"]
    }, {
      [`.${pickersSlideTransitionClasses["slideEnter-right"]}`]: styles5["slideEnter-right"]
    }, {
      [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles5.slideEnterActive
    }, {
      [`.${pickersSlideTransitionClasses.slideExit}`]: styles5.slideExit
    }, {
      [`.${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: styles5["slideExitActiveLeft-left"]
    }, {
      [`.${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: styles5["slideExitActiveLeft-right"]
    }]
  })(({
    theme: theme2
  }) => {
    const slideTransition = theme2.transitions.create("transform", {
      duration: theme2.transitions.duration.complex,
      easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
    });
    return {
      display: "block",
      position: "relative",
      overflowX: "hidden",
      "& > *": {
        position: "absolute",
        top: 0,
        right: 0,
        left: 0
      },
      [`& .${pickersSlideTransitionClasses["slideEnter-left"]}`]: {
        willChange: "transform",
        transform: "translate(100%)",
        zIndex: 1
      },
      [`& .${pickersSlideTransitionClasses["slideEnter-right"]}`]: {
        willChange: "transform",
        transform: "translate(-100%)",
        zIndex: 1
      },
      [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
        transform: "translate(0%)",
        transition: slideTransition
      },
      [`& .${pickersSlideTransitionClasses.slideExit}`]: {
        transform: "translate(0%)"
      },
      [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: {
        willChange: "transform",
        transform: "translate(-100%)",
        transition: slideTransition,
        zIndex: 0
      },
      [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: {
        willChange: "transform",
        transform: "translate(100%)",
        transition: slideTransition,
        zIndex: 0
      }
    };
  });
  function PickersSlideTransition(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersSlideTransition"
    });
    const {
      children,
      className,
      reduceAnimations,
      transKey
      // extracting `classes` from `other`
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
    const classes = useUtilityClasses71(props);
    const theme2 = useTheme6();
    if (reduceAnimations) {
      return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", {
        className: clsx_default(classes.root, className),
        children
      });
    }
    const transitionClasses = {
      exit: classes.exit,
      enterActive: classes.enterActive,
      enter: classes.enter,
      exitActive: classes.exitActive
    };
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(PickersSlideTransitionRoot, {
      className: clsx_default(classes.root, className),
      childFactory: (element) => /* @__PURE__ */ React188.cloneElement(element, {
        classNames: transitionClasses
      }),
      role: "presentation",
      children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(CSSTransition_default, _extends({
        mountOnEnter: true,
        unmountOnExit: true,
        timeout: theme2.transitions.duration.complex,
        classNames: transitionClasses
      }, other, {
        children
      }), transKey)
    });
  }

  // node_modules/@mui/x-date-pickers/DateCalendar/dayCalendarClasses.js
  var getDayCalendarUtilityClass = (slot) => generateUtilityClass("MuiDayCalendar", slot);
  var dayCalendarClasses = generateUtilityClasses("MuiDayCalendar", ["root", "header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);

  // node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  var _excluded107 = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"];
  var _excluded219 = ["ownerState"];
  var useUtilityClasses72 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      header: ["header"],
      weekDayLabel: ["weekDayLabel"],
      loadingContainer: ["loadingContainer"],
      slideTransition: ["slideTransition"],
      monthContainer: ["monthContainer"],
      weekContainer: ["weekContainer"],
      weekNumberLabel: ["weekNumberLabel"],
      weekNumber: ["weekNumber"]
    };
    return composeClasses(slots, getDayCalendarUtilityClass, classes);
  };
  var weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
  var PickersCalendarDayRoot = styled_default2("div", {
    name: "MuiDayCalendar",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })({});
  var PickersCalendarDayHeader = styled_default2("div", {
    name: "MuiDayCalendar",
    slot: "Header",
    overridesResolver: (_2, styles5) => styles5.header
  })({
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  });
  var PickersCalendarWeekDayLabel = styled_default2(Typography_default, {
    name: "MuiDayCalendar",
    slot: "WeekDayLabel",
    overridesResolver: (_2, styles5) => styles5.weekDayLabel
  })(({
    theme: theme2
  }) => ({
    width: 36,
    height: 40,
    margin: "0 2px",
    textAlign: "center",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    color: (theme2.vars || theme2).palette.text.secondary
  }));
  var PickersCalendarWeekNumberLabel = styled_default2(Typography_default, {
    name: "MuiDayCalendar",
    slot: "WeekNumberLabel",
    overridesResolver: (_2, styles5) => styles5.weekNumberLabel
  })(({
    theme: theme2
  }) => ({
    width: 36,
    height: 40,
    margin: "0 2px",
    textAlign: "center",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    color: theme2.palette.text.disabled
  }));
  var PickersCalendarWeekNumber = styled_default2(Typography_default, {
    name: "MuiDayCalendar",
    slot: "WeekNumber",
    overridesResolver: (_2, styles5) => styles5.weekNumber
  })(({
    theme: theme2
  }) => _extends({}, theme2.typography.caption, {
    width: DAY_SIZE,
    height: DAY_SIZE,
    padding: 0,
    margin: `0 ${DAY_MARGIN}px`,
    color: theme2.palette.text.disabled,
    fontSize: "0.75rem",
    alignItems: "center",
    justifyContent: "center",
    display: "inline-flex"
  }));
  var PickersCalendarLoadingContainer = styled_default2("div", {
    name: "MuiDayCalendar",
    slot: "LoadingContainer",
    overridesResolver: (_2, styles5) => styles5.loadingContainer
  })({
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    minHeight: weeksContainerHeight
  });
  var PickersCalendarSlideTransition = styled_default2(PickersSlideTransition, {
    name: "MuiDayCalendar",
    slot: "SlideTransition",
    overridesResolver: (_2, styles5) => styles5.slideTransition
  })({
    minHeight: weeksContainerHeight
  });
  var PickersCalendarWeekContainer = styled_default2("div", {
    name: "MuiDayCalendar",
    slot: "MonthContainer",
    overridesResolver: (_2, styles5) => styles5.monthContainer
  })({
    overflow: "hidden"
  });
  var PickersCalendarWeek = styled_default2("div", {
    name: "MuiDayCalendar",
    slot: "WeekContainer",
    overridesResolver: (_2, styles5) => styles5.weekContainer
  })({
    margin: `${DAY_MARGIN}px 0`,
    display: "flex",
    justifyContent: "center"
  });
  function WrappedDay(_ref) {
    let {
      parentProps,
      day,
      focusableDay,
      selectedDays,
      isDateDisabled,
      currentMonthNumber,
      isViewFocused
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded107);
    const {
      disabled,
      disableHighlightToday,
      isMonthSwitchingAnimating,
      showDaysOutsideCurrentMonth,
      slots,
      slotProps,
      timezone
    } = parentProps;
    const utils = useUtils();
    const now2 = useNow(timezone);
    const isFocusableDay = focusableDay !== null && utils.isSameDay(day, focusableDay);
    const isSelected = selectedDays.some((selectedDay) => utils.isSameDay(selectedDay, day));
    const isToday = utils.isSameDay(day, now2);
    const Day = slots?.day ?? PickersDay2;
    const _useSlotProps = useSlotProps_default({
      elementType: Day,
      externalSlotProps: slotProps?.day,
      additionalProps: _extends({
        disableHighlightToday,
        showDaysOutsideCurrentMonth,
        role: "gridcell",
        isAnimating: isMonthSwitchingAnimating,
        // it is used in date range dragging logic by accessing `dataset.timestamp`
        "data-timestamp": utils.toJsDate(day).valueOf()
      }, other),
      ownerState: _extends({}, parentProps, {
        day,
        selected: isSelected
      })
    }), dayProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded219);
    const isDisabled = React189.useMemo(() => disabled || isDateDisabled(day), [disabled, isDateDisabled, day]);
    const outsideCurrentMonth = React189.useMemo(() => utils.getMonth(day) !== currentMonthNumber, [utils, day, currentMonthNumber]);
    const isFirstVisibleCell = React189.useMemo(() => {
      const startOfMonth = utils.startOfMonth(utils.setMonth(day, currentMonthNumber));
      if (!showDaysOutsideCurrentMonth) {
        return utils.isSameDay(day, startOfMonth);
      }
      return utils.isSameDay(day, utils.startOfWeek(startOfMonth));
    }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
    const isLastVisibleCell = React189.useMemo(() => {
      const endOfMonth = utils.endOfMonth(utils.setMonth(day, currentMonthNumber));
      if (!showDaysOutsideCurrentMonth) {
        return utils.isSameDay(day, endOfMonth);
      }
      return utils.isSameDay(day, utils.endOfWeek(endOfMonth));
    }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(Day, _extends({}, dayProps, {
      day,
      disabled: isDisabled,
      autoFocus: isViewFocused && isFocusableDay,
      today: isToday,
      outsideCurrentMonth,
      isFirstVisibleCell,
      isLastVisibleCell,
      selected: isSelected,
      tabIndex: isFocusableDay ? 0 : -1,
      "aria-selected": isSelected,
      "aria-current": isToday ? "date" : void 0
    }));
  }
  function DayCalendar(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDayCalendar"
    });
    const utils = useUtils();
    const {
      onFocusedDayChange,
      className,
      currentMonth,
      selectedDays,
      focusedDay,
      loading,
      onSelectedDaysChange,
      onMonthSwitchingAnimationEnd,
      readOnly,
      reduceAnimations,
      renderLoading = () => /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("span", {
        children: "..."
      }),
      slideDirection,
      TransitionProps,
      disablePast,
      disableFuture,
      minDate,
      maxDate,
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      dayOfWeekFormatter = (date) => utils.format(date, "weekdayShort").charAt(0).toUpperCase(),
      hasFocus,
      onFocusedViewChange,
      gridLabelId,
      displayWeekNumber,
      fixedWeekNumber,
      autoFocus,
      timezone
    } = props;
    const now2 = useNow(timezone);
    const classes = useUtilityClasses72(props);
    const isRtl = useRtl2();
    const isDateDisabled = useIsDateDisabled({
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      minDate,
      maxDate,
      disablePast,
      disableFuture,
      timezone
    });
    const translations = usePickersTranslations();
    const [internalHasFocus, setInternalHasFocus] = useControlled({
      name: "DayCalendar",
      state: "hasFocus",
      controlled: hasFocus,
      default: autoFocus ?? false
    });
    const [internalFocusedDay, setInternalFocusedDay] = React189.useState(() => focusedDay || now2);
    const handleDaySelect = useEventCallback_default((day) => {
      if (readOnly) {
        return;
      }
      onSelectedDaysChange(day);
    });
    const focusDay = (day) => {
      if (!isDateDisabled(day)) {
        onFocusedDayChange(day);
        setInternalFocusedDay(day);
        onFocusedViewChange?.(true);
        setInternalHasFocus(true);
      }
    };
    const handleKeyDown2 = useEventCallback_default((event, day) => {
      switch (event.key) {
        case "ArrowUp":
          focusDay(utils.addDays(day, -7));
          event.preventDefault();
          break;
        case "ArrowDown":
          focusDay(utils.addDays(day, 7));
          event.preventDefault();
          break;
        case "ArrowLeft": {
          const newFocusedDayDefault = utils.addDays(day, isRtl ? 1 : -1);
          const nextAvailableMonth = utils.addMonths(day, isRtl ? 1 : -1);
          const closestDayToFocus = findClosestEnabledDate({
            utils,
            date: newFocusedDayDefault,
            minDate: isRtl ? newFocusedDayDefault : utils.startOfMonth(nextAvailableMonth),
            maxDate: isRtl ? utils.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
            isDateDisabled,
            timezone
          });
          focusDay(closestDayToFocus || newFocusedDayDefault);
          event.preventDefault();
          break;
        }
        case "ArrowRight": {
          const newFocusedDayDefault = utils.addDays(day, isRtl ? -1 : 1);
          const nextAvailableMonth = utils.addMonths(day, isRtl ? -1 : 1);
          const closestDayToFocus = findClosestEnabledDate({
            utils,
            date: newFocusedDayDefault,
            minDate: isRtl ? utils.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
            maxDate: isRtl ? newFocusedDayDefault : utils.endOfMonth(nextAvailableMonth),
            isDateDisabled,
            timezone
          });
          focusDay(closestDayToFocus || newFocusedDayDefault);
          event.preventDefault();
          break;
        }
        case "Home":
          focusDay(utils.startOfWeek(day));
          event.preventDefault();
          break;
        case "End":
          focusDay(utils.endOfWeek(day));
          event.preventDefault();
          break;
        case "PageUp":
          focusDay(utils.addMonths(day, 1));
          event.preventDefault();
          break;
        case "PageDown":
          focusDay(utils.addMonths(day, -1));
          event.preventDefault();
          break;
        default:
          break;
      }
    });
    const handleFocus3 = useEventCallback_default((event, day) => focusDay(day));
    const handleBlur = useEventCallback_default((event, day) => {
      if (internalHasFocus && utils.isSameDay(internalFocusedDay, day)) {
        onFocusedViewChange?.(false);
      }
    });
    const currentMonthNumber = utils.getMonth(currentMonth);
    const currentYearNumber = utils.getYear(currentMonth);
    const validSelectedDays = React189.useMemo(() => selectedDays.filter((day) => !!day).map((day) => utils.startOfDay(day)), [utils, selectedDays]);
    const transitionKey = `${currentYearNumber}-${currentMonthNumber}`;
    const slideNodeRef = React189.useMemo(() => /* @__PURE__ */ React189.createRef(), [transitionKey]);
    const focusableDay = React189.useMemo(() => {
      const startOfMonth = utils.startOfMonth(currentMonth);
      const endOfMonth = utils.endOfMonth(currentMonth);
      if (isDateDisabled(internalFocusedDay) || utils.isAfterDay(internalFocusedDay, endOfMonth) || utils.isBeforeDay(internalFocusedDay, startOfMonth)) {
        return findClosestEnabledDate({
          utils,
          date: internalFocusedDay,
          minDate: startOfMonth,
          maxDate: endOfMonth,
          disablePast,
          disableFuture,
          isDateDisabled,
          timezone
        });
      }
      return internalFocusedDay;
    }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils, timezone]);
    const weeksToDisplay = React189.useMemo(() => {
      const currentMonthWithTimezone = utils.setTimezone(currentMonth, timezone);
      const toDisplay = utils.getWeekArray(currentMonthWithTimezone);
      let nextMonth = utils.addMonths(currentMonthWithTimezone, 1);
      while (fixedWeekNumber && toDisplay.length < fixedWeekNumber) {
        const additionalWeeks = utils.getWeekArray(nextMonth);
        const hasCommonWeek = utils.isSameDay(toDisplay[toDisplay.length - 1][0], additionalWeeks[0][0]);
        additionalWeeks.slice(hasCommonWeek ? 1 : 0).forEach((week) => {
          if (toDisplay.length < fixedWeekNumber) {
            toDisplay.push(week);
          }
        });
        nextMonth = utils.addMonths(nextMonth, 1);
      }
      return toDisplay;
    }, [currentMonth, fixedWeekNumber, utils, timezone]);
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsxs)(PickersCalendarDayRoot, {
      role: "grid",
      "aria-labelledby": gridLabelId,
      className: classes.root,
      children: [/* @__PURE__ */ (0, import_jsx_runtime150.jsxs)(PickersCalendarDayHeader, {
        role: "row",
        className: classes.header,
        children: [displayWeekNumber && /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarWeekNumberLabel, {
          variant: "caption",
          role: "columnheader",
          "aria-label": translations.calendarWeekNumberHeaderLabel,
          className: classes.weekNumberLabel,
          children: translations.calendarWeekNumberHeaderText
        }), getWeekdays(utils, now2).map((weekday, i) => /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarWeekDayLabel, {
          variant: "caption",
          role: "columnheader",
          "aria-label": utils.format(weekday, "weekday"),
          className: classes.weekDayLabel,
          children: dayOfWeekFormatter(weekday)
        }, i.toString()))]
      }), loading ? /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarLoadingContainer, {
        className: classes.loadingContainer,
        children: renderLoading()
      }) : /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarSlideTransition, _extends({
        transKey: transitionKey,
        onExited: onMonthSwitchingAnimationEnd,
        reduceAnimations,
        slideDirection,
        className: clsx_default(className, classes.slideTransition)
      }, TransitionProps, {
        nodeRef: slideNodeRef,
        children: /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarWeekContainer, {
          ref: slideNodeRef,
          role: "rowgroup",
          className: classes.monthContainer,
          children: weeksToDisplay.map((week, index) => /* @__PURE__ */ (0, import_jsx_runtime150.jsxs)(PickersCalendarWeek, {
            role: "row",
            className: classes.weekContainer,
            "aria-rowindex": index + 1,
            children: [displayWeekNumber && /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(PickersCalendarWeekNumber, {
              className: classes.weekNumber,
              role: "rowheader",
              "aria-label": translations.calendarWeekNumberAriaLabelText(utils.getWeekNumber(week[0])),
              children: translations.calendarWeekNumberText(utils.getWeekNumber(week[0]))
            }), week.map((day, dayIndex) => /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(WrappedDay, {
              parentProps: props,
              day,
              selectedDays: validSelectedDays,
              focusableDay,
              onKeyDown: handleKeyDown2,
              onFocus: handleFocus3,
              onBlur: handleBlur,
              onDaySelect: handleDaySelect,
              isDateDisabled,
              currentMonthNumber,
              isViewFocused: internalHasFocus,
              "aria-colindex": dayIndex + 1
            }, day.toString()))]
          }, `week-${week[0]}`))
        })
      }))]
    });
  }

  // node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
  init_extends();
  var React191 = __toESM(require_react());
  var import_prop_types104 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
  init_extends();
  var React190 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/MonthCalendar/pickersMonthClasses.js
  function getPickersMonthUtilityClass(slot) {
    return generateUtilityClass("MuiPickersMonth", slot);
  }
  var pickersMonthClasses = generateUtilityClasses("MuiPickersMonth", ["root", "monthButton", "disabled", "selected"]);

  // node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var _excluded108 = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "aria-label", "monthsPerRow", "slots", "slotProps"];
  var useUtilityClasses73 = (ownerState) => {
    const {
      disabled,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      monthButton: ["monthButton", disabled && "disabled", selected && "selected"]
    };
    return composeClasses(slots, getPickersMonthUtilityClass, classes);
  };
  var PickersMonthRoot = styled_default2("div", {
    name: "MuiPickersMonth",
    slot: "Root",
    overridesResolver: (_2, styles5) => [styles5.root]
  })({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexBasis: "33.3%",
    variants: [{
      props: {
        monthsPerRow: 4
      },
      style: {
        flexBasis: "25%"
      }
    }]
  });
  var MonthCalendarButton = styled_default2("button", {
    name: "MuiPickersMonth",
    slot: "MonthButton",
    overridesResolver: (_2, styles5) => [styles5.monthButton, {
      [`&.${pickersMonthClasses.disabled}`]: styles5.disabled
    }, {
      [`&.${pickersMonthClasses.selected}`]: styles5.selected
    }]
  })(({
    theme: theme2
  }) => _extends({
    color: "unset",
    backgroundColor: "transparent",
    border: 0,
    outline: 0
  }, theme2.typography.subtitle1, {
    margin: "8px 0",
    height: 36,
    width: 72,
    borderRadius: 18,
    cursor: "pointer",
    "&:focus": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
    },
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
    },
    "&:disabled": {
      cursor: "auto",
      pointerEvents: "none"
    },
    [`&.${pickersMonthClasses.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.secondary
    },
    [`&.${pickersMonthClasses.selected}`]: {
      color: (theme2.vars || theme2).palette.primary.contrastText,
      backgroundColor: (theme2.vars || theme2).palette.primary.main,
      "&:focus, &:hover": {
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    }
  }));
  var PickersMonth = /* @__PURE__ */ React190.memo(function PickersMonth2(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersMonth"
    });
    const {
      autoFocus,
      className,
      children,
      disabled,
      selected,
      value,
      tabIndex,
      onClick,
      onKeyDown,
      onFocus,
      onBlur,
      "aria-current": ariaCurrent,
      "aria-label": ariaLabel,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded108);
    const ref = React190.useRef(null);
    const classes = useUtilityClasses73(props);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        ref.current?.focus();
      }
    }, [autoFocus]);
    const MonthButton = slots?.monthButton ?? MonthCalendarButton;
    const monthButtonProps = useSlotProps_default({
      elementType: MonthButton,
      externalSlotProps: slotProps?.monthButton,
      additionalProps: {
        children,
        disabled,
        tabIndex,
        ref,
        type: "button",
        role: "radio",
        "aria-current": ariaCurrent,
        "aria-checked": selected,
        "aria-label": ariaLabel,
        onClick: (event) => onClick(event, value),
        onKeyDown: (event) => onKeyDown(event, value),
        onFocus: (event) => onFocus(event, value),
        onBlur: (event) => onBlur(event, value)
      },
      ownerState: props,
      className: classes.monthButton
    });
    return /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(PickersMonthRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState: props
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(MonthButton, _extends({}, monthButtonProps))
    }));
  });

  // node_modules/@mui/x-date-pickers/MonthCalendar/monthCalendarClasses.js
  function getMonthCalendarUtilityClass(slot) {
    return generateUtilityClass("MuiMonthCalendar", slot);
  }
  var monthCalendarClasses = generateUtilityClasses("MuiMonthCalendar", ["root"]);

  // node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());
  var _excluded109 = ["className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId", "slots", "slotProps"];
  var useUtilityClasses74 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getMonthCalendarUtilityClass, classes);
  };
  function useMonthCalendarDefaultizedProps(props, name) {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const themeProps = useThemeProps2({
      props,
      name
    });
    return _extends({
      disableFuture: false,
      disablePast: false
    }, themeProps, {
      minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
    });
  }
  var MonthCalendarRoot = styled_default2("div", {
    name: "MuiMonthCalendar",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "flex",
    flexWrap: "wrap",
    alignContent: "stretch",
    padding: "0 4px",
    width: DIALOG_WIDTH,
    // avoid padding increasing width over defined
    boxSizing: "border-box"
  });
  var MonthCalendar = /* @__PURE__ */ React191.forwardRef(function MonthCalendar2(inProps, ref) {
    const props = useMonthCalendarDefaultizedProps(inProps, "MuiMonthCalendar");
    const {
      className,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disabled,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      onChange,
      shouldDisableMonth,
      readOnly,
      autoFocus = false,
      onMonthFocus,
      hasFocus,
      onFocusedViewChange,
      monthsPerRow = 3,
      timezone: timezoneProp,
      gridLabelId,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded109);
    const {
      value,
      handleValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "MonthCalendar",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const now2 = useNow(timezone);
    const isRtl = useRtl2();
    const utils = useUtils();
    const referenceDate = React191.useMemo(
      () => singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        props,
        timezone,
        referenceDate: referenceDateProp,
        granularity: SECTION_TYPE_GRANULARITY.month
      }),
      []
      // eslint-disable-line react-hooks/exhaustive-deps
    );
    const ownerState = props;
    const classes = useUtilityClasses74(ownerState);
    const todayMonth = React191.useMemo(() => utils.getMonth(now2), [utils, now2]);
    const selectedMonth = React191.useMemo(() => {
      if (value != null) {
        return utils.getMonth(value);
      }
      return null;
    }, [value, utils]);
    const [focusedMonth, setFocusedMonth] = React191.useState(() => selectedMonth || utils.getMonth(referenceDate));
    const [internalHasFocus, setInternalHasFocus] = useControlled({
      name: "MonthCalendar",
      state: "hasFocus",
      controlled: hasFocus,
      default: autoFocus ?? false
    });
    const changeHasFocus = useEventCallback_default((newHasFocus) => {
      setInternalHasFocus(newHasFocus);
      if (onFocusedViewChange) {
        onFocusedViewChange(newHasFocus);
      }
    });
    const isMonthDisabled = React191.useCallback((dateToValidate) => {
      const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now2, minDate) ? now2 : minDate);
      const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now2, maxDate) ? now2 : maxDate);
      const monthToValidate = utils.startOfMonth(dateToValidate);
      if (utils.isBefore(monthToValidate, firstEnabledMonth)) {
        return true;
      }
      if (utils.isAfter(monthToValidate, lastEnabledMonth)) {
        return true;
      }
      if (!shouldDisableMonth) {
        return false;
      }
      return shouldDisableMonth(monthToValidate);
    }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableMonth, utils]);
    const handleMonthSelection = useEventCallback_default((event, month) => {
      if (readOnly) {
        return;
      }
      const newDate = utils.setMonth(value ?? referenceDate, month);
      handleValueChange(newDate);
    });
    const focusMonth = useEventCallback_default((month) => {
      if (!isMonthDisabled(utils.setMonth(value ?? referenceDate, month))) {
        setFocusedMonth(month);
        changeHasFocus(true);
        if (onMonthFocus) {
          onMonthFocus(month);
        }
      }
    });
    React191.useEffect(() => {
      setFocusedMonth((prevFocusedMonth) => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
    }, [selectedMonth]);
    const handleKeyDown2 = useEventCallback_default((event, month) => {
      const monthsInYear = 12;
      const monthsInRow = 3;
      switch (event.key) {
        case "ArrowUp":
          focusMonth((monthsInYear + month - monthsInRow) % monthsInYear);
          event.preventDefault();
          break;
        case "ArrowDown":
          focusMonth((monthsInYear + month + monthsInRow) % monthsInYear);
          event.preventDefault();
          break;
        case "ArrowLeft":
          focusMonth((monthsInYear + month + (isRtl ? 1 : -1)) % monthsInYear);
          event.preventDefault();
          break;
        case "ArrowRight":
          focusMonth((monthsInYear + month + (isRtl ? -1 : 1)) % monthsInYear);
          event.preventDefault();
          break;
        default:
          break;
      }
    });
    const handleMonthFocus = useEventCallback_default((event, month) => {
      focusMonth(month);
    });
    const handleMonthBlur = useEventCallback_default((event, month) => {
      if (focusedMonth === month) {
        changeHasFocus(false);
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(MonthCalendarRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState,
      role: "radiogroup",
      "aria-labelledby": gridLabelId
    }, other, {
      children: getMonthsInYear(utils, value ?? referenceDate).map((month) => {
        const monthNumber = utils.getMonth(month);
        const monthText = utils.format(month, "monthShort");
        const monthLabel = utils.format(month, "month");
        const isSelected = monthNumber === selectedMonth;
        const isDisabled = disabled || isMonthDisabled(month);
        return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(PickersMonth, {
          selected: isSelected,
          value: monthNumber,
          onClick: handleMonthSelection,
          onKeyDown: handleKeyDown2,
          autoFocus: internalHasFocus && monthNumber === focusedMonth,
          disabled: isDisabled,
          tabIndex: monthNumber === focusedMonth && !isDisabled ? 0 : -1,
          onFocus: handleMonthFocus,
          onBlur: handleMonthBlur,
          "aria-current": todayMonth === monthNumber ? "date" : void 0,
          "aria-label": monthLabel,
          monthsPerRow,
          slots,
          slotProps,
          children: monthText
        }, monthText);
      })
    }));
  });
  true ? MonthCalendar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    autoFocus: import_prop_types104.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types104.default.object,
    className: import_prop_types104.default.string,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types104.default.object,
    /**
     * If `true` picker is disabled
     */
    disabled: import_prop_types104.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types104.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types104.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types104.default.bool,
    gridLabelId: import_prop_types104.default.string,
    hasFocus: import_prop_types104.default.bool,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types104.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types104.default.object,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types104.default.oneOf([3, 4]),
    /**
     * Callback fired when the value changes.
     * @template TDate
     * @param {TDate} value The new value.
     */
    onChange: import_prop_types104.default.func,
    onFocusedViewChange: import_prop_types104.default.func,
    onMonthFocus: import_prop_types104.default.func,
    /**
     * If `true` picker is readonly
     */
    readOnly: import_prop_types104.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid month using the validation props, except callbacks such as `shouldDisableMonth`.
     */
    referenceDate: import_prop_types104.default.object,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types104.default.func,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types104.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types104.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types104.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types104.default.object
  } : void 0;

  // node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
  init_extends();
  var React193 = __toESM(require_react());
  var import_prop_types105 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
  init_extends();
  var React192 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/YearCalendar/pickersYearClasses.js
  function getPickersYearUtilityClass(slot) {
    return generateUtilityClass("MuiPickersYear", slot);
  }
  var pickersYearClasses = generateUtilityClasses("MuiPickersYear", ["root", "yearButton", "selected", "disabled"]);

  // node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());
  var _excluded110 = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow", "slots", "slotProps"];
  var useUtilityClasses75 = (ownerState) => {
    const {
      disabled,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
    };
    return composeClasses(slots, getPickersYearUtilityClass, classes);
  };
  var PickersYearRoot = styled_default2("div", {
    name: "MuiPickersYear",
    slot: "Root",
    overridesResolver: (_2, styles5) => [styles5.root]
  })({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexBasis: "33.3%",
    variants: [{
      props: {
        yearsPerRow: 4
      },
      style: {
        flexBasis: "25%"
      }
    }]
  });
  var YearCalendarButton = styled_default2("button", {
    name: "MuiPickersYear",
    slot: "YearButton",
    overridesResolver: (_2, styles5) => [styles5.yearButton, {
      [`&.${pickersYearClasses.disabled}`]: styles5.disabled
    }, {
      [`&.${pickersYearClasses.selected}`]: styles5.selected
    }]
  })(({
    theme: theme2
  }) => _extends({
    color: "unset",
    backgroundColor: "transparent",
    border: 0,
    outline: 0
  }, theme2.typography.subtitle1, {
    margin: "6px 0",
    height: 36,
    width: 72,
    borderRadius: 18,
    cursor: "pointer",
    "&:focus": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.focusOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.focusOpacity)
    },
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
    },
    "&:disabled": {
      cursor: "auto",
      pointerEvents: "none"
    },
    [`&.${pickersYearClasses.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.secondary
    },
    [`&.${pickersYearClasses.selected}`]: {
      color: (theme2.vars || theme2).palette.primary.contrastText,
      backgroundColor: (theme2.vars || theme2).palette.primary.main,
      "&:focus, &:hover": {
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      }
    }
  }));
  var PickersYear = /* @__PURE__ */ React192.memo(function PickersYear2(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersYear"
    });
    const {
      autoFocus,
      className,
      children,
      disabled,
      selected,
      value,
      tabIndex,
      onClick,
      onKeyDown,
      onFocus,
      onBlur,
      "aria-current": ariaCurrent,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded110);
    const ref = React192.useRef(null);
    const classes = useUtilityClasses75(props);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        ref.current?.focus();
      }
    }, [autoFocus]);
    const YearButton = slots?.yearButton ?? YearCalendarButton;
    const yearButtonProps = useSlotProps_default({
      elementType: YearButton,
      externalSlotProps: slotProps?.yearButton,
      additionalProps: {
        children,
        disabled,
        tabIndex,
        ref,
        type: "button",
        role: "radio",
        "aria-current": ariaCurrent,
        "aria-checked": selected,
        onClick: (event) => onClick(event, value),
        onKeyDown: (event) => onKeyDown(event, value),
        onFocus: (event) => onFocus(event, value),
        onBlur: (event) => onBlur(event, value)
      },
      ownerState: props,
      className: classes.yearButton
    });
    return /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(PickersYearRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState: props
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(YearButton, _extends({}, yearButtonProps))
    }));
  });

  // node_modules/@mui/x-date-pickers/YearCalendar/yearCalendarClasses.js
  function getYearCalendarUtilityClass(slot) {
    return generateUtilityClass("MuiYearCalendar", slot);
  }
  var yearCalendarClasses = generateUtilityClasses("MuiYearCalendar", ["root"]);

  // node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var _excluded111 = ["autoFocus", "className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsPerRow", "timezone", "gridLabelId", "slots", "slotProps"];
  var useUtilityClasses76 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getYearCalendarUtilityClass, classes);
  };
  function useYearCalendarDefaultizedProps(props, name) {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const themeProps = useThemeProps2({
      props,
      name
    });
    return _extends({
      disablePast: false,
      disableFuture: false
    }, themeProps, {
      yearsPerRow: themeProps.yearsPerRow ?? 3,
      minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
    });
  }
  var YearCalendarRoot = styled_default2("div", {
    name: "MuiYearCalendar",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    overflowY: "auto",
    height: "100%",
    padding: "0 4px",
    width: DIALOG_WIDTH,
    maxHeight: MAX_CALENDAR_HEIGHT,
    // avoid padding increasing width over defined
    boxSizing: "border-box",
    position: "relative"
  });
  var YearCalendar = /* @__PURE__ */ React193.forwardRef(function YearCalendar2(inProps, ref) {
    const props = useYearCalendarDefaultizedProps(inProps, "MuiYearCalendar");
    const {
      autoFocus,
      className,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disabled,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      onChange,
      readOnly,
      shouldDisableYear,
      onYearFocus,
      hasFocus,
      onFocusedViewChange,
      yearsPerRow,
      timezone: timezoneProp,
      gridLabelId,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
    const {
      value,
      handleValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "YearCalendar",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const now2 = useNow(timezone);
    const isRtl = useRtl2();
    const utils = useUtils();
    const referenceDate = React193.useMemo(
      () => singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        props,
        timezone,
        referenceDate: referenceDateProp,
        granularity: SECTION_TYPE_GRANULARITY.year
      }),
      []
      // eslint-disable-line react-hooks/exhaustive-deps
    );
    const ownerState = props;
    const classes = useUtilityClasses76(ownerState);
    const todayYear = React193.useMemo(() => utils.getYear(now2), [utils, now2]);
    const selectedYear = React193.useMemo(() => {
      if (value != null) {
        return utils.getYear(value);
      }
      return null;
    }, [value, utils]);
    const [focusedYear, setFocusedYear] = React193.useState(() => selectedYear || utils.getYear(referenceDate));
    const [internalHasFocus, setInternalHasFocus] = useControlled({
      name: "YearCalendar",
      state: "hasFocus",
      controlled: hasFocus,
      default: autoFocus ?? false
    });
    const changeHasFocus = useEventCallback_default((newHasFocus) => {
      setInternalHasFocus(newHasFocus);
      if (onFocusedViewChange) {
        onFocusedViewChange(newHasFocus);
      }
    });
    const isYearDisabled = React193.useCallback((dateToValidate) => {
      if (disablePast && utils.isBeforeYear(dateToValidate, now2)) {
        return true;
      }
      if (disableFuture && utils.isAfterYear(dateToValidate, now2)) {
        return true;
      }
      if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {
        return true;
      }
      if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {
        return true;
      }
      if (!shouldDisableYear) {
        return false;
      }
      const yearToValidate = utils.startOfYear(dateToValidate);
      return shouldDisableYear(yearToValidate);
    }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableYear, utils]);
    const handleYearSelection = useEventCallback_default((event, year) => {
      if (readOnly) {
        return;
      }
      const newDate = utils.setYear(value ?? referenceDate, year);
      handleValueChange(newDate);
    });
    const focusYear = useEventCallback_default((year) => {
      if (!isYearDisabled(utils.setYear(value ?? referenceDate, year))) {
        setFocusedYear(year);
        changeHasFocus(true);
        onYearFocus?.(year);
      }
    });
    React193.useEffect(() => {
      setFocusedYear((prevFocusedYear) => selectedYear !== null && prevFocusedYear !== selectedYear ? selectedYear : prevFocusedYear);
    }, [selectedYear]);
    const handleKeyDown2 = useEventCallback_default((event, year) => {
      switch (event.key) {
        case "ArrowUp":
          focusYear(year - yearsPerRow);
          event.preventDefault();
          break;
        case "ArrowDown":
          focusYear(year + yearsPerRow);
          event.preventDefault();
          break;
        case "ArrowLeft":
          focusYear(year + (isRtl ? 1 : -1));
          event.preventDefault();
          break;
        case "ArrowRight":
          focusYear(year + (isRtl ? -1 : 1));
          event.preventDefault();
          break;
        default:
          break;
      }
    });
    const handleYearFocus = useEventCallback_default((event, year) => {
      focusYear(year);
    });
    const handleYearBlur = useEventCallback_default((event, year) => {
      if (focusedYear === year) {
        changeHasFocus(false);
      }
    });
    const scrollerRef = React193.useRef(null);
    const handleRef = useForkRef(ref, scrollerRef);
    React193.useEffect(() => {
      if (autoFocus || scrollerRef.current === null) {
        return;
      }
      const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
      if (!tabbableButton) {
        return;
      }
      const offsetHeight = tabbableButton.offsetHeight;
      const offsetTop = tabbableButton.offsetTop;
      const clientHeight = scrollerRef.current.clientHeight;
      const scrollTop = scrollerRef.current.scrollTop;
      const elementBottom = offsetTop + offsetHeight;
      if (offsetHeight > clientHeight || offsetTop < scrollTop) {
        return;
      }
      scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
    }, [autoFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(YearCalendarRoot, _extends({
      ref: handleRef,
      className: clsx_default(classes.root, className),
      ownerState,
      role: "radiogroup",
      "aria-labelledby": gridLabelId
    }, other, {
      children: utils.getYearRange([minDate, maxDate]).map((year) => {
        const yearNumber = utils.getYear(year);
        const isSelected = yearNumber === selectedYear;
        const isDisabled = disabled || isYearDisabled(year);
        return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(PickersYear, {
          selected: isSelected,
          value: yearNumber,
          onClick: handleYearSelection,
          onKeyDown: handleKeyDown2,
          autoFocus: internalHasFocus && yearNumber === focusedYear,
          disabled: isDisabled,
          tabIndex: yearNumber === focusedYear && !isDisabled ? 0 : -1,
          onFocus: handleYearFocus,
          onBlur: handleYearBlur,
          "aria-current": todayYear === yearNumber ? "date" : void 0,
          yearsPerRow,
          slots,
          slotProps,
          children: utils.format(year, "year")
        }, utils.format(year, "year"));
      })
    }));
  });
  true ? YearCalendar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    autoFocus: import_prop_types105.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types105.default.object,
    className: import_prop_types105.default.string,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types105.default.object,
    /**
     * If `true` picker is disabled
     */
    disabled: import_prop_types105.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types105.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types105.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types105.default.bool,
    gridLabelId: import_prop_types105.default.string,
    hasFocus: import_prop_types105.default.bool,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types105.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types105.default.object,
    /**
     * Callback fired when the value changes.
     * @template TDate
     * @param {TDate} value The new value.
     */
    onChange: import_prop_types105.default.func,
    onFocusedViewChange: import_prop_types105.default.func,
    onYearFocus: import_prop_types105.default.func,
    /**
     * If `true` picker is readonly
     */
    readOnly: import_prop_types105.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid year using the validation props, except callbacks such as `shouldDisableYear`.
     */
    referenceDate: import_prop_types105.default.object,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types105.default.func,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types105.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types105.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types105.default.oneOfType([import_prop_types105.default.arrayOf(import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object, import_prop_types105.default.bool])), import_prop_types105.default.func, import_prop_types105.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types105.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types105.default.object,
    /**
     * Years rendered per row.
     * @default 3
     */
    yearsPerRow: import_prop_types105.default.oneOf([3, 4])
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersCalendarHeader/pickersCalendarHeaderClasses.js
  var getPickersCalendarHeaderUtilityClass = (slot) => generateUtilityClass("MuiPickersCalendarHeader", slot);
  var pickersCalendarHeaderClasses = generateUtilityClasses("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);

  // node_modules/@mui/x-date-pickers/PickersCalendarHeader/PickersCalendarHeader.js
  init_extends();
  var React194 = __toESM(require_react());
  var import_prop_types106 = __toESM(require_prop_types());
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var _excluded112 = ["slots", "slotProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "timezone", "format"];
  var _excluded220 = ["ownerState"];
  var useUtilityClasses77 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      labelContainer: ["labelContainer"],
      label: ["label"],
      switchViewButton: ["switchViewButton"],
      switchViewIcon: ["switchViewIcon"]
    };
    return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes);
  };
  var PickersCalendarHeaderRoot = styled_default2("div", {
    name: "MuiPickersCalendarHeader",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })({
    display: "flex",
    alignItems: "center",
    marginTop: 12,
    marginBottom: 4,
    paddingLeft: 24,
    paddingRight: 12,
    // prevent jumping in safari
    maxHeight: 40,
    minHeight: 40
  });
  var PickersCalendarHeaderLabelContainer = styled_default2("div", {
    name: "MuiPickersCalendarHeader",
    slot: "LabelContainer",
    overridesResolver: (_2, styles5) => styles5.labelContainer
  })(({
    theme: theme2
  }) => _extends({
    display: "flex",
    overflow: "hidden",
    alignItems: "center",
    cursor: "pointer",
    marginRight: "auto"
  }, theme2.typography.body1, {
    fontWeight: theme2.typography.fontWeightMedium
  }));
  var PickersCalendarHeaderLabel = styled_default2("div", {
    name: "MuiPickersCalendarHeader",
    slot: "Label",
    overridesResolver: (_2, styles5) => styles5.label
  })({
    marginRight: 6
  });
  var PickersCalendarHeaderSwitchViewButton = styled_default2(IconButton_default, {
    name: "MuiPickersCalendarHeader",
    slot: "SwitchViewButton",
    overridesResolver: (_2, styles5) => styles5.switchViewButton
  })({
    marginRight: "auto",
    variants: [{
      props: {
        view: "year"
      },
      style: {
        [`.${pickersCalendarHeaderClasses.switchViewIcon}`]: {
          transform: "rotate(180deg)"
        }
      }
    }]
  });
  var PickersCalendarHeaderSwitchViewIcon = styled_default2(ArrowDropDownIcon, {
    name: "MuiPickersCalendarHeader",
    slot: "SwitchViewIcon",
    overridesResolver: (_2, styles5) => styles5.switchViewIcon
  })(({
    theme: theme2
  }) => ({
    willChange: "transform",
    transition: theme2.transitions.create("transform"),
    transform: "rotate(0deg)"
  }));
  var PickersCalendarHeader = /* @__PURE__ */ React194.forwardRef(function PickersCalendarHeader2(inProps, ref) {
    const translations = usePickersTranslations();
    const utils = useUtils();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersCalendarHeader"
    });
    const {
      slots,
      slotProps,
      currentMonth: month,
      disabled,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      onMonthChange,
      onViewChange,
      view,
      reduceAnimations,
      views,
      labelId,
      className,
      timezone,
      format = `${utils.formats.month} ${utils.formats.year}`
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
    const ownerState = props;
    const classes = useUtilityClasses77(props);
    const SwitchViewButton = slots?.switchViewButton ?? PickersCalendarHeaderSwitchViewButton;
    const switchViewButtonProps = useSlotProps_default({
      elementType: SwitchViewButton,
      externalSlotProps: slotProps?.switchViewButton,
      additionalProps: {
        size: "small",
        "aria-label": translations.calendarViewSwitchingButtonAriaLabel(view)
      },
      ownerState,
      className: classes.switchViewButton
    });
    const SwitchViewIcon = slots?.switchViewIcon ?? PickersCalendarHeaderSwitchViewIcon;
    const _useSlotProps = useSlotProps_default({
      elementType: SwitchViewIcon,
      externalSlotProps: slotProps?.switchViewIcon,
      ownerState,
      className: classes.switchViewIcon
    }), switchViewIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded220);
    const selectNextMonth = () => onMonthChange(utils.addMonths(month, 1), "left");
    const selectPreviousMonth = () => onMonthChange(utils.addMonths(month, -1), "right");
    const isNextMonthDisabled = useNextMonthDisabled(month, {
      disableFuture,
      maxDate,
      timezone
    });
    const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
      disablePast,
      minDate,
      timezone
    });
    const handleToggleView = () => {
      if (views.length === 1 || !onViewChange || disabled) {
        return;
      }
      if (views.length === 2) {
        onViewChange(views.find((el) => el !== view) || views[0]);
      } else {
        const nextIndexToOpen = views.indexOf(view) !== 0 ? 0 : 1;
        onViewChange(views[nextIndexToOpen]);
      }
    };
    if (views.length === 1 && views[0] === "year") {
      return null;
    }
    const label = utils.formatByString(month, format);
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(PickersCalendarHeaderRoot, _extends({}, other, {
      ownerState,
      className: clsx_default(className, classes.root),
      ref,
      children: [/* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(PickersCalendarHeaderLabelContainer, {
        role: "presentation",
        onClick: handleToggleView,
        ownerState,
        "aria-live": "polite",
        className: classes.labelContainer,
        children: [/* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PickersFadeTransitionGroup, {
          reduceAnimations,
          transKey: label,
          children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PickersCalendarHeaderLabel, {
            id: labelId,
            ownerState,
            className: classes.label,
            children: label
          })
        }), views.length > 1 && !disabled && /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(SwitchViewButton, _extends({}, switchViewButtonProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(SwitchViewIcon, _extends({}, switchViewIconProps))
        }))]
      }), /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(Fade_default, {
        in: view === "day",
        children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PickersArrowSwitcher, {
          slots,
          slotProps,
          onGoToPrevious: selectPreviousMonth,
          isPreviousDisabled: isPreviousMonthDisabled,
          previousLabel: translations.previousMonth,
          onGoToNext: selectNextMonth,
          isNextDisabled: isNextMonthDisabled,
          nextLabel: translations.nextMonth
        })
      })]
    }));
  });
  true ? PickersCalendarHeader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types106.default.object,
    className: import_prop_types106.default.string,
    currentMonth: import_prop_types106.default.object.isRequired,
    disabled: import_prop_types106.default.bool,
    disableFuture: import_prop_types106.default.bool,
    disablePast: import_prop_types106.default.bool,
    /**
     * Format used to display the date.
     * @default `${adapter.formats.month} ${adapter.formats.year}`
     */
    format: import_prop_types106.default.string,
    /**
     * Id of the calendar text element.
     * It is used to establish an `aria-labelledby` relationship with the calendar `grid` element.
     */
    labelId: import_prop_types106.default.string,
    maxDate: import_prop_types106.default.object.isRequired,
    minDate: import_prop_types106.default.object.isRequired,
    onMonthChange: import_prop_types106.default.func.isRequired,
    onViewChange: import_prop_types106.default.func,
    reduceAnimations: import_prop_types106.default.bool.isRequired,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types106.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types106.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types106.default.oneOfType([import_prop_types106.default.arrayOf(import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object, import_prop_types106.default.bool])), import_prop_types106.default.func, import_prop_types106.default.object]),
    timezone: import_prop_types106.default.string.isRequired,
    view: import_prop_types106.default.oneOf(["day", "month", "year"]).isRequired,
    views: import_prop_types106.default.arrayOf(import_prop_types106.default.oneOf(["day", "month", "year"]).isRequired).isRequired
  } : void 0;

  // node_modules/@mui/x-date-pickers/internals/hooks/useDefaultReduceAnimations.js
  var PREFERS_REDUCED_MOTION = "@media (prefers-reduced-motion: reduce)";
  var mobileVersionMatches = typeof navigator !== "undefined" && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i);
  var androidVersion = mobileVersionMatches && mobileVersionMatches[1] ? parseInt(mobileVersionMatches[1], 10) : null;
  var iOSVersion = mobileVersionMatches && mobileVersionMatches[2] ? parseInt(mobileVersionMatches[2], 10) : null;
  var slowAnimationDevices = androidVersion && androidVersion < 10 || iOSVersion && iOSVersion < 13 || false;
  var useDefaultReduceAnimations = () => {
    const prefersReduced = useMediaQuery(PREFERS_REDUCED_MOTION, {
      defaultMatches: false
    });
    return prefersReduced || slowAnimationDevices;
  };

  // node_modules/@mui/x-date-pickers/DateCalendar/dateCalendarClasses.js
  var getDateCalendarUtilityClass = (slot) => generateUtilityClass("MuiDateCalendar", slot);
  var dateCalendarClasses = generateUtilityClasses("MuiDateCalendar", ["root", "viewTransitionContainer"]);

  // node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var _excluded113 = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsPerRow", "monthsPerRow", "timezone"];
  var useUtilityClasses78 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      viewTransitionContainer: ["viewTransitionContainer"]
    };
    return composeClasses(slots, getDateCalendarUtilityClass, classes);
  };
  function useDateCalendarDefaultizedProps(props, name) {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const defaultReduceAnimations = useDefaultReduceAnimations();
    const themeProps = useThemeProps2({
      props,
      name
    });
    return _extends({}, themeProps, {
      loading: themeProps.loading ?? false,
      disablePast: themeProps.disablePast ?? false,
      disableFuture: themeProps.disableFuture ?? false,
      openTo: themeProps.openTo ?? "day",
      views: themeProps.views ?? ["year", "day"],
      reduceAnimations: themeProps.reduceAnimations ?? defaultReduceAnimations,
      renderLoading: themeProps.renderLoading ?? (() => /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("span", {
        children: "..."
      })),
      minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
    });
  }
  var DateCalendarRoot = styled_default2(PickerViewRoot, {
    name: "MuiDateCalendar",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "flex",
    flexDirection: "column",
    height: VIEW_HEIGHT
  });
  var DateCalendarViewTransitionContainer = styled_default2(PickersFadeTransitionGroup, {
    name: "MuiDateCalendar",
    slot: "ViewTransitionContainer",
    overridesResolver: (props, styles5) => styles5.viewTransitionContainer
  })({});
  var DateCalendar = /* @__PURE__ */ React195.forwardRef(function DateCalendar2(inProps, ref) {
    const utils = useUtils();
    const id = useId();
    const props = useDateCalendarDefaultizedProps(inProps, "MuiDateCalendar");
    const {
      autoFocus,
      onViewChange,
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      disableFuture,
      disablePast,
      onChange,
      onYearChange,
      onMonthChange,
      reduceAnimations,
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      view: inView,
      views,
      openTo,
      className,
      disabled,
      readOnly,
      minDate,
      maxDate,
      disableHighlightToday,
      focusedView: inFocusedView,
      onFocusedViewChange,
      showDaysOutsideCurrentMonth,
      fixedWeekNumber,
      dayOfWeekFormatter,
      slots,
      slotProps,
      loading,
      renderLoading,
      displayWeekNumber,
      yearsPerRow,
      monthsPerRow,
      timezone: timezoneProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
    const {
      value,
      handleValueChange,
      timezone
    } = useControlledValueWithTimezone({
      name: "DateCalendar",
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager: singleItemValueManager
    });
    const {
      view,
      setView,
      focusedView,
      setFocusedView,
      goToNextView,
      setValueAndGoToNextView
    } = useViews({
      view: inView,
      views,
      openTo,
      onChange: handleValueChange,
      onViewChange,
      autoFocus,
      focusedView: inFocusedView,
      onFocusedViewChange
    });
    const {
      referenceDate,
      calendarState,
      changeFocusedDay,
      changeMonth,
      handleChangeMonth,
      isDateDisabled,
      onMonthSwitchingAnimationEnd
    } = useCalendarState({
      value,
      referenceDate: referenceDateProp,
      reduceAnimations,
      onMonthChange,
      minDate,
      maxDate,
      shouldDisableDate,
      disablePast,
      disableFuture,
      timezone
    });
    const minDateWithDisabled = disabled && value || minDate;
    const maxDateWithDisabled = disabled && value || maxDate;
    const gridLabelId = `${id}-grid-label`;
    const hasFocus = focusedView !== null;
    const CalendarHeader = slots?.calendarHeader ?? PickersCalendarHeader;
    const calendarHeaderProps = useSlotProps_default({
      elementType: CalendarHeader,
      externalSlotProps: slotProps?.calendarHeader,
      additionalProps: {
        views,
        view,
        currentMonth: calendarState.currentMonth,
        onViewChange: setView,
        onMonthChange: (newMonth, direction) => handleChangeMonth({
          newMonth,
          direction
        }),
        minDate: minDateWithDisabled,
        maxDate: maxDateWithDisabled,
        disabled,
        disablePast,
        disableFuture,
        reduceAnimations,
        timezone,
        labelId: gridLabelId
      },
      ownerState: props
    });
    const handleDateMonthChange = useEventCallback_default((newDate) => {
      const startOfMonth = utils.startOfMonth(newDate);
      const endOfMonth = utils.endOfMonth(newDate);
      const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
        utils,
        date: newDate,
        minDate: utils.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
        maxDate: utils.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
        disablePast,
        disableFuture,
        isDateDisabled,
        timezone
      }) : newDate;
      if (closestEnabledDate) {
        setValueAndGoToNextView(closestEnabledDate, "finish");
        onMonthChange?.(startOfMonth);
      } else {
        goToNextView();
        changeMonth(startOfMonth);
      }
      changeFocusedDay(closestEnabledDate, true);
    });
    const handleDateYearChange = useEventCallback_default((newDate) => {
      const startOfYear = utils.startOfYear(newDate);
      const endOfYear = utils.endOfYear(newDate);
      const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
        utils,
        date: newDate,
        minDate: utils.isBefore(minDate, startOfYear) ? startOfYear : minDate,
        maxDate: utils.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
        disablePast,
        disableFuture,
        isDateDisabled,
        timezone
      }) : newDate;
      if (closestEnabledDate) {
        setValueAndGoToNextView(closestEnabledDate, "finish");
        onYearChange?.(closestEnabledDate);
      } else {
        goToNextView();
        changeMonth(startOfYear);
      }
      changeFocusedDay(closestEnabledDate, true);
    });
    const handleSelectedDayChange = useEventCallback_default((day) => {
      if (day) {
        return handleValueChange(mergeDateAndTime(utils, day, value ?? referenceDate), "finish", view);
      }
      return handleValueChange(day, "finish", view);
    });
    React195.useEffect(() => {
      if (value != null && utils.isValid(value)) {
        changeMonth(value);
      }
    }, [value]);
    const ownerState = props;
    const classes = useUtilityClasses78(ownerState);
    const baseDateValidationProps = {
      disablePast,
      disableFuture,
      maxDate,
      minDate
    };
    const commonViewProps = {
      disableHighlightToday,
      readOnly,
      disabled,
      timezone,
      gridLabelId,
      slots,
      slotProps
    };
    const prevOpenViewRef = React195.useRef(view);
    React195.useEffect(() => {
      if (prevOpenViewRef.current === view) {
        return;
      }
      if (focusedView === prevOpenViewRef.current) {
        setFocusedView(view, true);
      }
      prevOpenViewRef.current = view;
    }, [focusedView, setFocusedView, view]);
    const selectedDays = React195.useMemo(() => [value], [value]);
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(DateCalendarRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime156.jsx)(CalendarHeader, _extends({}, calendarHeaderProps, {
        slots,
        slotProps
      })), /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(DateCalendarViewTransitionContainer, {
        reduceAnimations,
        className: classes.viewTransitionContainer,
        transKey: view,
        ownerState,
        children: /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", {
          children: [view === "year" && /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(YearCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
            value,
            onChange: handleDateYearChange,
            shouldDisableYear,
            hasFocus,
            onFocusedViewChange: (isViewFocused) => setFocusedView("year", isViewFocused),
            yearsPerRow,
            referenceDate
          })), view === "month" && /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(MonthCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
            hasFocus,
            className,
            value,
            onChange: handleDateMonthChange,
            shouldDisableMonth,
            onFocusedViewChange: (isViewFocused) => setFocusedView("month", isViewFocused),
            monthsPerRow,
            referenceDate
          })), view === "day" && /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(DayCalendar, _extends({}, calendarState, baseDateValidationProps, commonViewProps, {
            onMonthSwitchingAnimationEnd,
            onFocusedDayChange: changeFocusedDay,
            reduceAnimations,
            selectedDays,
            onSelectedDaysChange: handleSelectedDayChange,
            shouldDisableDate,
            shouldDisableMonth,
            shouldDisableYear,
            hasFocus,
            onFocusedViewChange: (isViewFocused) => setFocusedView("day", isViewFocused),
            showDaysOutsideCurrentMonth,
            fixedWeekNumber,
            dayOfWeekFormatter,
            displayWeekNumber,
            loading,
            renderLoading
          }))]
        })
      })]
    }));
  });
  true ? DateCalendar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types107.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types107.default.object,
    className: import_prop_types107.default.string,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types107.default.func,
    /**
     * The default selected value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types107.default.object,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types107.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types107.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types107.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types107.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types107.default.bool,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types107.default.number,
    /**
     * Controlled focused view.
     */
    focusedView: import_prop_types107.default.oneOf(["day", "month", "year"]),
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types107.default.bool,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types107.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types107.default.object,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types107.default.oneOf([3, 4]),
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TView The view type. Will be one of date or time views.
     * @param {TValue} value The new value.
     * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
     * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
     */
    onChange: import_prop_types107.default.func,
    /**
     * Callback fired on focused view change.
     * @template TView
     * @param {TView} view The new view to focus or not.
     * @param {boolean} hasFocus `true` if the view should be focused.
     */
    onFocusedViewChange: import_prop_types107.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types107.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types107.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types107.default.func,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types107.default.oneOf(["day", "month", "year"]),
    /**
     * Make picker read only.
     * @default false
     */
    readOnly: import_prop_types107.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types107.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.
     */
    referenceDate: import_prop_types107.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types107.default.func,
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types107.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types107.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types107.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types107.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types107.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types107.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types107.default.oneOfType([import_prop_types107.default.arrayOf(import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object, import_prop_types107.default.bool])), import_prop_types107.default.func, import_prop_types107.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types107.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types107.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types107.default.oneOf(["day", "month", "year"]),
    /**
     * Available views.
     */
    views: import_prop_types107.default.arrayOf(import_prop_types107.default.oneOf(["day", "month", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 3
     */
    yearsPerRow: import_prop_types107.default.oneOf([3, 4])
  } : void 0;

  // node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js
  init_extends();
  var React214 = __toESM(require_react());
  var import_prop_types114 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
  init_extends();
  var React210 = __toESM(require_react());
  var import_prop_types112 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DatePicker/shared.js
  init_extends();
  var React198 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DatePicker/DatePickerToolbar.js
  init_extends();
  var React197 = __toESM(require_react());
  var import_prop_types108 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
  init_extends();
  var React196 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/components/pickersToolbarClasses.js
  function getPickersToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiPickersToolbar", slot);
  }
  var pickersToolbarClasses = generateUtilityClasses("MuiPickersToolbar", ["root", "content"]);

  // node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());
  var _excluded114 = ["children", "className", "toolbarTitle", "hidden", "titleId", "isLandscape", "classes", "landscapeDirection"];
  var useUtilityClasses79 = (ownerState) => {
    const {
      classes,
      isLandscape
    } = ownerState;
    const slots = {
      root: ["root"],
      content: ["content"],
      penIconButton: ["penIconButton", isLandscape && "penIconButtonLandscape"]
    };
    return composeClasses(slots, getPickersToolbarUtilityClass, classes);
  };
  var PickersToolbarRoot = styled_default2("div", {
    name: "MuiPickersToolbar",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-start",
    justifyContent: "space-between",
    padding: theme2.spacing(2, 3),
    variants: [{
      props: {
        isLandscape: true
      },
      style: {
        height: "auto",
        maxWidth: 160,
        padding: 16,
        justifyContent: "flex-start",
        flexWrap: "wrap"
      }
    }]
  }));
  var PickersToolbarContent = styled_default2("div", {
    name: "MuiPickersToolbar",
    slot: "Content",
    overridesResolver: (props, styles5) => styles5.content
  })({
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    flex: 1,
    justifyContent: "space-between",
    alignItems: "center",
    flexDirection: "row",
    variants: [{
      props: {
        isLandscape: true
      },
      style: {
        justifyContent: "flex-start",
        alignItems: "flex-start",
        flexDirection: "column"
      }
    }, {
      props: {
        isLandscape: true,
        landscapeDirection: "row"
      },
      style: {
        flexDirection: "row"
      }
    }]
  });
  var PickersToolbar = /* @__PURE__ */ React196.forwardRef(function PickersToolbar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersToolbar"
    });
    const {
      children,
      className,
      toolbarTitle,
      hidden,
      titleId
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded114);
    const ownerState = props;
    const classes = useUtilityClasses79(ownerState);
    if (hidden) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(PickersToolbarRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime157.jsx)(Typography_default, {
        color: "text.secondary",
        variant: "overline",
        id: titleId,
        children: toolbarTitle
      }), /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(PickersToolbarContent, {
        className: classes.content,
        ownerState,
        children
      })]
    }));
  });

  // node_modules/@mui/x-date-pickers/DatePicker/datePickerToolbarClasses.js
  function getDatePickerToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiDatePickerToolbar", slot);
  }
  var datePickerToolbarClasses = generateUtilityClasses("MuiDatePickerToolbar", ["root", "title"]);

  // node_modules/@mui/x-date-pickers/DatePicker/DatePickerToolbar.js
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  var _excluded115 = ["value", "isLandscape", "onChange", "toolbarFormat", "toolbarPlaceholder", "views", "className", "onViewChange", "view"];
  var useUtilityClasses80 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      title: ["title"]
    };
    return composeClasses(slots, getDatePickerToolbarUtilityClass, classes);
  };
  var DatePickerToolbarRoot = styled_default2(PickersToolbar, {
    name: "MuiDatePickerToolbar",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })({});
  var DatePickerToolbarTitle = styled_default2(Typography_default, {
    name: "MuiDatePickerToolbar",
    slot: "Title",
    overridesResolver: (_2, styles5) => styles5.title
  })({
    variants: [{
      props: {
        isLandscape: true
      },
      style: {
        margin: "auto 16px auto auto"
      }
    }]
  });
  var DatePickerToolbar = /* @__PURE__ */ React197.forwardRef(function DatePickerToolbar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDatePickerToolbar"
    });
    const {
      value,
      isLandscape,
      toolbarFormat,
      toolbarPlaceholder = "\u2013\u2013",
      views,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded115);
    const utils = useUtils();
    const translations = usePickersTranslations();
    const classes = useUtilityClasses80(props);
    const dateText = React197.useMemo(() => {
      if (!value) {
        return toolbarPlaceholder;
      }
      const formatFromViews = resolveDateFormat(utils, {
        format: toolbarFormat,
        views
      }, true);
      return utils.formatByString(value, formatFromViews);
    }, [value, toolbarFormat, toolbarPlaceholder, utils, views]);
    const ownerState = props;
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(DatePickerToolbarRoot, _extends({
      ref,
      toolbarTitle: translations.datePickerToolbarTitle,
      isLandscape,
      className: clsx_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(DatePickerToolbarTitle, {
        variant: "h4",
        align: isLandscape ? "left" : "center",
        ownerState,
        className: classes.title,
        children: dateText
      })
    }));
  });
  true ? DatePickerToolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types108.default.object,
    className: import_prop_types108.default.string,
    disabled: import_prop_types108.default.bool,
    /**
     * If `true`, show the toolbar even in desktop mode.
     * @default `true` for Desktop, `false` for Mobile.
     */
    hidden: import_prop_types108.default.bool,
    isLandscape: import_prop_types108.default.bool.isRequired,
    onChange: import_prop_types108.default.func.isRequired,
    /**
     * Callback called when a toolbar is clicked
     * @template TView
     * @param {TView} view The view to open
     */
    onViewChange: import_prop_types108.default.func.isRequired,
    readOnly: import_prop_types108.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types108.default.oneOfType([import_prop_types108.default.arrayOf(import_prop_types108.default.oneOfType([import_prop_types108.default.func, import_prop_types108.default.object, import_prop_types108.default.bool])), import_prop_types108.default.func, import_prop_types108.default.object]),
    titleId: import_prop_types108.default.string,
    /**
     * Toolbar date format.
     */
    toolbarFormat: import_prop_types108.default.string,
    /**
     * Toolbar value placeholder—it is displayed when the value is empty.
     * @default "––"
     */
    toolbarPlaceholder: import_prop_types108.default.node,
    value: import_prop_types108.default.object,
    /**
     * Currently visible picker view.
     */
    view: import_prop_types108.default.oneOf(["day", "month", "year"]).isRequired,
    /**
     * Available views.
     */
    views: import_prop_types108.default.arrayOf(import_prop_types108.default.oneOf(["day", "month", "year"]).isRequired).isRequired
  } : void 0;

  // node_modules/@mui/x-date-pickers/DatePicker/shared.js
  function useDatePickerDefaultizedProps(props, name) {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const themeProps = useThemeProps2({
      props,
      name
    });
    const localeText = React198.useMemo(() => {
      if (themeProps.localeText?.toolbarTitle == null) {
        return themeProps.localeText;
      }
      return _extends({}, themeProps.localeText, {
        datePickerToolbarTitle: themeProps.localeText.toolbarTitle
      });
    }, [themeProps.localeText]);
    return _extends({}, themeProps, {
      localeText
    }, applyDefaultViewProps({
      views: themeProps.views,
      openTo: themeProps.openTo,
      defaultViews: ["year", "day"],
      defaultOpenTo: "day"
    }), {
      disableFuture: themeProps.disableFuture ?? false,
      disablePast: themeProps.disablePast ?? false,
      minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate),
      slots: _extends({
        toolbar: DatePickerToolbar
      }, themeProps.slots)
    });
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.js
  init_extends();
  var React208 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
  init_extends();
  var React199 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/components/pickersPopperClasses.js
  function getPickersPopperUtilityClass(slot) {
    return generateUtilityClass("MuiPickersPopper", slot);
  }
  var pickersPopperClasses = generateUtilityClasses("MuiPickersPopper", ["root", "paper"]);

  // node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  var _excluded116 = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"];
  var useUtilityClasses81 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPickersPopperUtilityClass, classes);
  };
  var PickersPopperRoot = styled_default2(Popper_default, {
    name: "MuiPickersPopper",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    zIndex: theme2.zIndex.modal
  }));
  var PickersPopperPaper = styled_default2(Paper_default, {
    name: "MuiPickersPopper",
    slot: "Paper",
    overridesResolver: (_2, styles5) => styles5.paper
  })({
    outline: 0,
    transformOrigin: "top center",
    variants: [{
      props: ({
        placement
      }) => ["top", "top-start", "top-end"].includes(placement),
      style: {
        transformOrigin: "bottom center"
      }
    }]
  });
  function clickedRootScrollbar2(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function useClickAwayListener(active, onClickAway) {
    const movedRef = React199.useRef(false);
    const syntheticEventRef = React199.useRef(false);
    const nodeRef = React199.useRef(null);
    const activatedRef = React199.useRef(false);
    React199.useEffect(() => {
      if (!active) {
        return void 0;
      }
      function armClickAwayListener() {
        activatedRef.current = true;
      }
      document.addEventListener("mousedown", armClickAwayListener, true);
      document.addEventListener("touchstart", armClickAwayListener, true);
      return () => {
        document.removeEventListener("mousedown", armClickAwayListener, true);
        document.removeEventListener("touchstart", armClickAwayListener, true);
        activatedRef.current = false;
      };
    }, [active]);
    const handleClickAway = useEventCallback_default((event) => {
      if (!activatedRef.current) {
        return;
      }
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!nodeRef.current || // is a TouchEvent?
      "clientX" in event && clickedRootScrollbar2(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
      }
      if (!insideDOM && !insideReactTree) {
        onClickAway(event);
      }
    });
    const handleSynthetic = () => {
      syntheticEventRef.current = true;
    };
    React199.useEffect(() => {
      if (active) {
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener("touchstart", handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener("touchstart", handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [active, handleClickAway]);
    React199.useEffect(() => {
      if (active) {
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener("click", handleClickAway);
        return () => {
          doc.removeEventListener("click", handleClickAway);
          syntheticEventRef.current = false;
        };
      }
      return void 0;
    }, [active, handleClickAway]);
    return [nodeRef, handleSynthetic, handleSynthetic];
  }
  var PickersPopperPaperWrapper = /* @__PURE__ */ React199.forwardRef((props, ref) => {
    const {
      PaperComponent,
      popperPlacement,
      ownerState: inOwnerState,
      children,
      paperSlotProps,
      paperClasses: paperClasses2,
      onPaperClick,
      onPaperTouchStart
      // picks up the style props provided by `Transition`
      // https://mui.com/material-ui/transitions/#child-requirement
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded116);
    const ownerState = _extends({}, inOwnerState, {
      placement: popperPlacement
    });
    const paperProps = useSlotProps_default({
      elementType: PaperComponent,
      externalSlotProps: paperSlotProps,
      additionalProps: {
        tabIndex: -1,
        elevation: 8,
        ref
      },
      className: paperClasses2,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(PaperComponent, _extends({}, other, paperProps, {
      onClick: (event) => {
        onPaperClick(event);
        paperProps.onClick?.(event);
      },
      onTouchStart: (event) => {
        onPaperTouchStart(event);
        paperProps.onTouchStart?.(event);
      },
      ownerState,
      children
    }));
  });
  function PickersPopper(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersPopper"
    });
    const {
      anchorEl,
      children,
      containerRef = null,
      shouldRestoreFocus,
      onBlur,
      onDismiss,
      open,
      role,
      placement,
      slots,
      slotProps,
      reduceAnimations: inReduceAnimations
    } = props;
    React199.useEffect(() => {
      function handleKeyDown3(nativeEvent) {
        if (open && nativeEvent.key === "Escape") {
          onDismiss();
        }
      }
      document.addEventListener("keydown", handleKeyDown3);
      return () => {
        document.removeEventListener("keydown", handleKeyDown3);
      };
    }, [onDismiss, open]);
    const lastFocusedElementRef = React199.useRef(null);
    React199.useEffect(() => {
      if (role === "tooltip" || shouldRestoreFocus && !shouldRestoreFocus()) {
        return;
      }
      if (open) {
        lastFocusedElementRef.current = getActiveElement(document);
      } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
        setTimeout(() => {
          if (lastFocusedElementRef.current instanceof HTMLElement) {
            lastFocusedElementRef.current.focus();
          }
        });
      }
    }, [open, role, shouldRestoreFocus]);
    const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur ?? onDismiss);
    const paperRef = React199.useRef(null);
    const handleRef = useForkRef(paperRef, containerRef);
    const handlePaperRef = useForkRef(handleRef, clickAwayRef);
    const ownerState = props;
    const classes = useUtilityClasses81(ownerState);
    const defaultReduceAnimations = useDefaultReduceAnimations();
    const reduceAnimations = inReduceAnimations ?? defaultReduceAnimations;
    const handleKeyDown2 = (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        onDismiss();
      }
    };
    const Transition2 = slots?.desktopTransition ?? reduceAnimations ? Fade_default : Grow_default;
    const FocusTrap2 = slots?.desktopTrapFocus ?? FocusTrap_default;
    const Paper3 = slots?.desktopPaper ?? PickersPopperPaper;
    const Popper5 = slots?.popper ?? PickersPopperRoot;
    const popperProps = useSlotProps_default({
      elementType: Popper5,
      externalSlotProps: slotProps?.popper,
      additionalProps: {
        transition: true,
        role,
        open,
        anchorEl,
        placement,
        onKeyDown: handleKeyDown2
      },
      className: classes.root,
      ownerState: props
    });
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(Popper5, _extends({}, popperProps, {
      children: ({
        TransitionProps,
        placement: popperPlacement
      }) => /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(FocusTrap2, _extends({
        open,
        disableAutoFocus: true,
        disableRestoreFocus: true,
        disableEnforceFocus: role === "tooltip",
        isEnabled: () => true
      }, slotProps?.desktopTrapFocus, {
        children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(Transition2, _extends({}, TransitionProps, slotProps?.desktopTransition, {
          children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(PickersPopperPaperWrapper, {
            PaperComponent: Paper3,
            ownerState,
            popperPlacement,
            ref: handlePaperRef,
            onPaperClick,
            onPaperTouchStart,
            paperClasses: classes.paper,
            paperSlotProps: slotProps?.desktopPaper,
            children
          })
        }))
      }))
    }));
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
  init_extends();
  var React201 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js
  var React200 = __toESM(require_react());
  var useOpenState = ({
    open,
    onOpen,
    onClose
  }) => {
    const isControllingOpenProp = React200.useRef(typeof open === "boolean").current;
    const [openState, setIsOpenState] = React200.useState(false);
    React200.useEffect(() => {
      if (isControllingOpenProp) {
        if (typeof open !== "boolean") {
          throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
        }
        setIsOpenState(open);
      }
    }, [isControllingOpenProp, open]);
    const setIsOpen = React200.useCallback((newIsOpen) => {
      if (!isControllingOpenProp) {
        setIsOpenState(newIsOpen);
      }
      if (newIsOpen && onOpen) {
        onOpen();
      }
      if (!newIsOpen && onClose) {
        onClose();
      }
    }, [isControllingOpenProp, onOpen, onClose]);
    return {
      isOpen: openState,
      setIsOpen
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
  var shouldPublishValue = (params) => {
    const {
      action,
      hasChanged,
      dateState,
      isControlled
    } = params;
    const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
    if (action.name === "setValueFromField") {
      return true;
    }
    if (action.name === "setValueFromAction") {
      if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
        return true;
      }
      return hasChanged(dateState.lastPublishedValue);
    }
    if (action.name === "setValueFromView" && action.selectionState !== "shallow") {
      if (isCurrentValueTheDefaultValue) {
        return true;
      }
      return hasChanged(dateState.lastPublishedValue);
    }
    if (action.name === "setValueFromShortcut") {
      if (isCurrentValueTheDefaultValue) {
        return true;
      }
      return hasChanged(dateState.lastPublishedValue);
    }
    return false;
  };
  var shouldCommitValue = (params) => {
    const {
      action,
      hasChanged,
      dateState,
      isControlled,
      closeOnSelect
    } = params;
    const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
    if (action.name === "setValueFromAction") {
      if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
        return true;
      }
      return hasChanged(dateState.lastCommittedValue);
    }
    if (action.name === "setValueFromView" && action.selectionState === "finish" && closeOnSelect) {
      if (isCurrentValueTheDefaultValue) {
        return true;
      }
      return hasChanged(dateState.lastCommittedValue);
    }
    if (action.name === "setValueFromShortcut") {
      return action.changeImportance === "accept" && hasChanged(dateState.lastCommittedValue);
    }
    return false;
  };
  var shouldClosePicker = (params) => {
    const {
      action,
      closeOnSelect
    } = params;
    if (action.name === "setValueFromAction") {
      return true;
    }
    if (action.name === "setValueFromView") {
      return action.selectionState === "finish" && closeOnSelect;
    }
    if (action.name === "setValueFromShortcut") {
      return action.changeImportance === "accept";
    }
    return false;
  };
  var usePickerValue = ({
    props,
    valueManager,
    valueType,
    wrapperVariant,
    validator: validator2
  }) => {
    const {
      onAccept,
      onChange,
      value: inValueWithoutRenderTimezone,
      defaultValue: inDefaultValue,
      closeOnSelect = wrapperVariant === "desktop",
      timezone: timezoneProp
    } = props;
    const {
      current: defaultValue
    } = React201.useRef(inDefaultValue);
    const {
      current: isControlled
    } = React201.useRef(inValueWithoutRenderTimezone !== void 0);
    if (true) {
      React201.useEffect(() => {
        if (isControlled !== (inValueWithoutRenderTimezone !== void 0)) {
          console.error([`MUI X: A component is changing the ${isControlled ? "" : "un"}controlled value of a picker to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled valuefor the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [inValueWithoutRenderTimezone]);
      React201.useEffect(() => {
        if (!isControlled && defaultValue !== inDefaultValue) {
          console.error([`MUI X: A component is changing the defaultValue of an uncontrolled picker after being initialized. To suppress this warning opt to use a controlled value.`].join("\n"));
        }
      }, [JSON.stringify(defaultValue)]);
    }
    const utils = useUtils();
    const adapter = useLocalizationContext();
    const {
      isOpen,
      setIsOpen
    } = useOpenState(props);
    const {
      timezone,
      value: inValueWithTimezoneToRender,
      handleValueChange
    } = useValueWithTimezone({
      timezone: timezoneProp,
      value: inValueWithoutRenderTimezone,
      defaultValue,
      onChange,
      valueManager
    });
    const [dateState, setDateState] = React201.useState(() => {
      let initialValue;
      if (inValueWithTimezoneToRender !== void 0) {
        initialValue = inValueWithTimezoneToRender;
      } else if (defaultValue !== void 0) {
        initialValue = defaultValue;
      } else {
        initialValue = valueManager.emptyValue;
      }
      return {
        draft: initialValue,
        lastPublishedValue: initialValue,
        lastCommittedValue: initialValue,
        lastControlledValue: inValueWithTimezoneToRender,
        hasBeenModifiedSinceMount: false
      };
    });
    useValidation(_extends({}, props, {
      value: dateState.draft,
      timezone
    }), validator2, valueManager.isSameError, valueManager.defaultErrorState);
    const updateDate = useEventCallback_default((action) => {
      const updaterParams = {
        action,
        dateState,
        hasChanged: (comparison) => !valueManager.areValuesEqual(utils, action.value, comparison),
        isControlled,
        closeOnSelect
      };
      const shouldPublish = shouldPublishValue(updaterParams);
      const shouldCommit = shouldCommitValue(updaterParams);
      const shouldClose = shouldClosePicker(updaterParams);
      setDateState((prev2) => _extends({}, prev2, {
        draft: action.value,
        lastPublishedValue: shouldPublish ? action.value : prev2.lastPublishedValue,
        lastCommittedValue: shouldCommit ? action.value : prev2.lastCommittedValue,
        hasBeenModifiedSinceMount: true
      }));
      let cachedContext = null;
      const getContext = () => {
        if (!cachedContext) {
          const validationError = action.name === "setValueFromField" ? action.context.validationError : validator2({
            adapter,
            value: action.value,
            props: _extends({}, props, {
              value: action.value,
              timezone
            })
          });
          cachedContext = {
            validationError
          };
          if (action.name === "setValueFromShortcut") {
            cachedContext.shortcut = action.shortcut;
          }
        }
        return cachedContext;
      };
      if (shouldPublish) {
        handleValueChange(action.value, getContext());
      }
      if (shouldCommit && onAccept) {
        onAccept(action.value, getContext());
      }
      if (shouldClose) {
        setIsOpen(false);
      }
    });
    if (inValueWithTimezoneToRender !== void 0 && (dateState.lastControlledValue === void 0 || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValueWithTimezoneToRender))) {
      const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValueWithTimezoneToRender);
      setDateState((prev2) => _extends({}, prev2, {
        lastControlledValue: inValueWithTimezoneToRender
      }, isUpdateComingFromPicker ? {} : {
        lastCommittedValue: inValueWithTimezoneToRender,
        lastPublishedValue: inValueWithTimezoneToRender,
        draft: inValueWithTimezoneToRender,
        hasBeenModifiedSinceMount: true
      }));
    }
    const handleClear = useEventCallback_default(() => {
      updateDate({
        value: valueManager.emptyValue,
        name: "setValueFromAction",
        pickerAction: "clear"
      });
    });
    const handleAccept = useEventCallback_default(() => {
      updateDate({
        value: dateState.lastPublishedValue,
        name: "setValueFromAction",
        pickerAction: "accept"
      });
    });
    const handleDismiss = useEventCallback_default(() => {
      updateDate({
        value: dateState.lastPublishedValue,
        name: "setValueFromAction",
        pickerAction: "dismiss"
      });
    });
    const handleCancel = useEventCallback_default(() => {
      updateDate({
        value: dateState.lastCommittedValue,
        name: "setValueFromAction",
        pickerAction: "cancel"
      });
    });
    const handleSetToday = useEventCallback_default(() => {
      updateDate({
        value: valueManager.getTodayValue(utils, timezone, valueType),
        name: "setValueFromAction",
        pickerAction: "today"
      });
    });
    const handleOpen = useEventCallback_default((event) => {
      event.preventDefault();
      setIsOpen(true);
    });
    const handleClose = useEventCallback_default((event) => {
      event?.preventDefault();
      setIsOpen(false);
    });
    const handleChange = useEventCallback_default((newValue, selectionState = "partial") => updateDate({
      name: "setValueFromView",
      value: newValue,
      selectionState
    }));
    const handleSelectShortcut = useEventCallback_default((newValue, changeImportance, shortcut) => updateDate({
      name: "setValueFromShortcut",
      value: newValue,
      changeImportance,
      shortcut
    }));
    const handleChangeFromField = useEventCallback_default((newValue, context) => updateDate({
      name: "setValueFromField",
      value: newValue,
      context
    }));
    const actions = {
      onClear: handleClear,
      onAccept: handleAccept,
      onDismiss: handleDismiss,
      onCancel: handleCancel,
      onSetToday: handleSetToday,
      onOpen: handleOpen,
      onClose: handleClose
    };
    const fieldResponse = {
      value: dateState.draft,
      onChange: handleChangeFromField
    };
    const viewValue = React201.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);
    const viewResponse = {
      value: viewValue,
      onChange: handleChange,
      onClose: handleClose,
      open: isOpen
    };
    const isValid2 = (testedValue) => {
      const error = validator2({
        adapter,
        value: testedValue,
        props: _extends({}, props, {
          value: testedValue,
          timezone
        })
      });
      return !valueManager.hasError(error);
    };
    const layoutResponse = _extends({}, actions, {
      value: viewValue,
      onChange: handleChange,
      onSelectShortcut: handleSelectShortcut,
      isValid: isValid2
    });
    return {
      open: isOpen,
      fieldProps: fieldResponse,
      viewProps: viewResponse,
      layoutProps: layoutResponse,
      actions
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js
  init_extends();
  var React202 = __toESM(require_react());
  var _excluded117 = ["className", "sx"];
  var usePickerViews = ({
    props,
    propsFromPickerValue,
    additionalViewProps,
    autoFocusView,
    rendererInterceptor: rendererInterceptor3,
    fieldRef
  }) => {
    const {
      onChange,
      open,
      onClose
    } = propsFromPickerValue;
    const {
      view: inView,
      views,
      openTo,
      onViewChange,
      viewRenderers,
      timezone
    } = props;
    const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded117);
    const {
      view,
      setView,
      defaultView,
      focusedView,
      setFocusedView,
      setValueAndGoToNextView
    } = useViews({
      view: inView,
      views,
      openTo,
      onChange,
      onViewChange,
      autoFocus: autoFocusView
    });
    const {
      hasUIView,
      viewModeLookup
    } = React202.useMemo(() => views.reduce((acc, viewForReduce) => {
      let viewMode;
      if (viewRenderers[viewForReduce] != null) {
        viewMode = "UI";
      } else {
        viewMode = "field";
      }
      acc.viewModeLookup[viewForReduce] = viewMode;
      if (viewMode === "UI") {
        acc.hasUIView = true;
      }
      return acc;
    }, {
      hasUIView: false,
      viewModeLookup: {}
    }), [viewRenderers, views]);
    const timeViewsCount = React202.useMemo(() => views.reduce((acc, viewForReduce) => {
      if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
        return acc + 1;
      }
      return acc;
    }, 0), [viewRenderers, views]);
    const currentViewMode = viewModeLookup[view];
    const shouldRestoreFocus = useEventCallback_default(() => currentViewMode === "UI");
    const [popperView, setPopperView] = React202.useState(currentViewMode === "UI" ? view : null);
    if (popperView !== view && viewModeLookup[view] === "UI") {
      setPopperView(view);
    }
    useEnhancedEffect_default(() => {
      if (currentViewMode === "field" && open) {
        onClose();
        setTimeout(() => {
          fieldRef?.current?.setSelectedSections(view);
          fieldRef?.current?.focusField(view);
        });
      }
    }, [view]);
    useEnhancedEffect_default(() => {
      if (!open) {
        return;
      }
      let newView = view;
      if (currentViewMode === "field" && popperView != null) {
        newView = popperView;
      }
      if (newView !== defaultView && viewModeLookup[newView] === "UI" && viewModeLookup[defaultView] === "UI") {
        newView = defaultView;
      }
      if (newView !== view) {
        setView(newView);
      }
      setFocusedView(newView, true);
    }, [open]);
    const layoutProps = {
      views,
      view: popperView,
      onViewChange: setView
    };
    return {
      hasUIView,
      shouldRestoreFocus,
      layoutProps,
      renderCurrentView: () => {
        if (popperView == null) {
          return null;
        }
        const renderer = viewRenderers[popperView];
        if (renderer == null) {
          return null;
        }
        const rendererProps = _extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
          views,
          timezone,
          onChange: setValueAndGoToNextView,
          view: popperView,
          onViewChange: setView,
          focusedView,
          onFocusedViewChange: setFocusedView,
          showViewSwitcher: timeViewsCount > 1,
          timeViewsCount
        });
        if (rendererInterceptor3) {
          return rendererInterceptor3(viewRenderers, popperView, rendererProps);
        }
        return renderer(rendererProps);
      }
    };
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
  init_extends();

  // node_modules/@mui/x-date-pickers/internals/hooks/useIsLandscape.js
  var React203 = __toESM(require_react());
  function getOrientation() {
    if (typeof window === "undefined") {
      return "portrait";
    }
    if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
      return Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait";
    }
    if (window.orientation) {
      return Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
    }
    return "portrait";
  }
  var useIsLandscape = (views, customOrientation) => {
    const [orientation, setOrientation] = React203.useState(getOrientation);
    useEnhancedEffect_default(() => {
      const eventHandler = () => {
        setOrientation(getOrientation());
      };
      window.addEventListener("orientationchange", eventHandler);
      return () => {
        window.removeEventListener("orientationchange", eventHandler);
      };
    }, []);
    if (arrayIncludes(views, ["hours", "minutes", "seconds"])) {
      return false;
    }
    const orientationToUse = customOrientation || orientation;
    return orientationToUse === "landscape";
  };

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
  var usePickerLayoutProps = ({
    props,
    propsFromPickerValue,
    propsFromPickerViews,
    wrapperVariant
  }) => {
    const {
      orientation
    } = props;
    const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
    const isRtl = useRtl2();
    const layoutProps = _extends({}, propsFromPickerViews, propsFromPickerValue, {
      isLandscape,
      isRtl,
      wrapperVariant,
      disabled: props.disabled,
      readOnly: props.readOnly
    });
    return {
      layoutProps
    };
  };

  // node_modules/@mui/x-date-pickers/internals/utils/warning.js
  var warnedOnceCache = /* @__PURE__ */ new Set();
  function warnOnce(message, gravity = "warning") {
    if (false) {
      return;
    }
    const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
    if (!warnedOnceCache.has(cleanMessage)) {
      warnedOnceCache.add(cleanMessage);
      if (gravity === "error") {
        console.error(cleanMessage);
      } else {
        console.warn(cleanMessage);
      }
    }
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePicker.js
  var usePicker = ({
    props,
    valueManager,
    valueType,
    wrapperVariant,
    additionalViewProps,
    validator: validator2,
    autoFocusView,
    rendererInterceptor: rendererInterceptor3,
    fieldRef
  }) => {
    if (true) {
      if (props.renderInput != null) {
        warnOnce(["MUI X: The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]);
      }
    }
    const pickerValueResponse = usePickerValue({
      props,
      valueManager,
      valueType,
      wrapperVariant,
      validator: validator2
    });
    const pickerViewsResponse = usePickerViews({
      props,
      additionalViewProps,
      autoFocusView,
      fieldRef,
      propsFromPickerValue: pickerValueResponse.viewProps,
      rendererInterceptor: rendererInterceptor3
    });
    const pickerLayoutResponse = usePickerLayoutProps({
      props,
      wrapperVariant,
      propsFromPickerValue: pickerValueResponse.layoutProps,
      propsFromPickerViews: pickerViewsResponse.layoutProps
    });
    return {
      // Picker value
      open: pickerValueResponse.open,
      actions: pickerValueResponse.actions,
      fieldProps: pickerValueResponse.fieldProps,
      // Picker views
      renderCurrentView: pickerViewsResponse.renderCurrentView,
      hasUIView: pickerViewsResponse.hasUIView,
      shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
      // Picker layout
      layoutProps: pickerLayoutResponse.layoutProps
    };
  };

  // node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
  var React207 = __toESM(require_react());
  var import_prop_types111 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/PickersLayout/pickersLayoutClasses.js
  function getPickersLayoutUtilityClass(slot) {
    return generateUtilityClass("MuiPickersLayout", slot);
  }
  var pickersLayoutClasses = generateUtilityClasses("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "tabs", "shortcuts"]);

  // node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
  init_extends();
  var React206 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/PickersActionBar/PickersActionBar.js
  init_extends();
  var React204 = __toESM(require_react());
  var import_prop_types109 = __toESM(require_prop_types());
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  var _excluded118 = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
  function PickersActionBar(props) {
    const {
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      actions
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded118);
    const translations = usePickersTranslations();
    if (actions == null || actions.length === 0) {
      return null;
    }
    const buttons = actions?.map((actionType) => {
      switch (actionType) {
        case "clear":
          return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Button_default, {
            onClick: onClear,
            children: translations.clearButtonLabel
          }, actionType);
        case "cancel":
          return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Button_default, {
            onClick: onCancel,
            children: translations.cancelButtonLabel
          }, actionType);
        case "accept":
          return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Button_default, {
            onClick: onAccept,
            children: translations.okButtonLabel
          }, actionType);
        case "today":
          return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(Button_default, {
            onClick: onSetToday,
            children: translations.todayButtonLabel
          }, actionType);
        default:
          return null;
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(DialogActions_default, _extends({}, other, {
      children: buttons
    }));
  }
  true ? PickersActionBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Ordered array of actions to display.
     * If empty, does not display that action bar.
     * @default `['cancel', 'accept']` for mobile and `[]` for desktop
     */
    actions: import_prop_types109.default.arrayOf(import_prop_types109.default.oneOf(["accept", "cancel", "clear", "today"]).isRequired),
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types109.default.bool,
    onAccept: import_prop_types109.default.func.isRequired,
    onCancel: import_prop_types109.default.func.isRequired,
    onClear: import_prop_types109.default.func.isRequired,
    onSetToday: import_prop_types109.default.func.isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types109.default.oneOfType([import_prop_types109.default.arrayOf(import_prop_types109.default.oneOfType([import_prop_types109.default.func, import_prop_types109.default.object, import_prop_types109.default.bool])), import_prop_types109.default.func, import_prop_types109.default.object])
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersShortcuts/PickersShortcuts.js
  init_extends();
  var React205 = __toESM(require_react());
  var import_prop_types110 = __toESM(require_prop_types());
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  var _excluded119 = ["items", "changeImportance", "isLandscape", "onChange", "isValid"];
  var _excluded221 = ["getValue"];
  function PickersShortcuts(props) {
    const {
      items,
      changeImportance = "accept",
      onChange,
      isValid: isValid2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded119);
    if (items == null || items.length === 0) {
      return null;
    }
    const resolvedItems = items.map((_ref) => {
      let {
        getValue: getValue4
      } = _ref, item = _objectWithoutPropertiesLoose(_ref, _excluded221);
      const newValue = getValue4({
        isValid: isValid2
      });
      return _extends({}, item, {
        label: item.label,
        onClick: () => {
          onChange(newValue, changeImportance, item);
        },
        disabled: !isValid2(newValue)
      });
    });
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(List_default, _extends({
      dense: true,
      sx: [{
        maxHeight: VIEW_HEIGHT,
        maxWidth: 200,
        overflow: "auto"
      }, ...Array.isArray(other.sx) ? other.sx : [other.sx]]
    }, other, {
      children: resolvedItems.map((item) => {
        return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ListItem_default, {
          children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(Chip_default, _extends({}, item))
        }, item.id ?? item.label);
      })
    }));
  }
  true ? PickersShortcuts.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Importance of the change when picking a shortcut:
     * - "accept": fires `onChange`, fires `onAccept` and closes the picker.
     * - "set": fires `onChange` but do not fire `onAccept` and does not close the picker.
     * @default "accept"
     */
    changeImportance: import_prop_types110.default.oneOf(["accept", "set"]),
    className: import_prop_types110.default.string,
    component: import_prop_types110.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types110.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types110.default.bool,
    isLandscape: import_prop_types110.default.bool.isRequired,
    isValid: import_prop_types110.default.func.isRequired,
    /**
     * Ordered array of shortcuts to display.
     * If empty, does not display the shortcuts.
     * @default []
     */
    items: import_prop_types110.default.arrayOf(import_prop_types110.default.shape({
      getValue: import_prop_types110.default.func.isRequired,
      id: import_prop_types110.default.string,
      label: import_prop_types110.default.string.isRequired
    })),
    onChange: import_prop_types110.default.func.isRequired,
    style: import_prop_types110.default.object,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types110.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types110.default.oneOfType([import_prop_types110.default.arrayOf(import_prop_types110.default.oneOfType([import_prop_types110.default.func, import_prop_types110.default.object, import_prop_types110.default.bool])), import_prop_types110.default.func, import_prop_types110.default.object])
  } : void 0;

  // node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  function toolbarHasView(toolbarProps) {
    return toolbarProps.view !== null;
  }
  var useUtilityClasses82 = (ownerState) => {
    const {
      classes,
      isLandscape
    } = ownerState;
    const slots = {
      root: ["root", isLandscape && "landscape"],
      contentWrapper: ["contentWrapper"],
      toolbar: ["toolbar"],
      actionBar: ["actionBar"],
      tabs: ["tabs"],
      landscape: ["landscape"],
      shortcuts: ["shortcuts"]
    };
    return composeClasses(slots, getPickersLayoutUtilityClass, classes);
  };
  var usePickerLayout = (props) => {
    const {
      wrapperVariant,
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      view,
      views,
      onViewChange,
      value,
      onChange,
      onSelectShortcut,
      isValid: isValid2,
      isLandscape,
      disabled,
      readOnly,
      children,
      slots,
      slotProps
      // TODO: Remove this "as" hack. It get introduced to mark `value` prop in PickersLayoutProps as not required.
      // The true type should be
      // - For pickers value: TDate | null
      // - For range pickers value: [TDate | null, TDate | null]
    } = props;
    const classes = useUtilityClasses82(props);
    const ActionBar = slots?.actionBar ?? PickersActionBar;
    const actionBarProps = useSlotProps_default({
      elementType: ActionBar,
      externalSlotProps: slotProps?.actionBar,
      additionalProps: {
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        actions: wrapperVariant === "desktop" ? [] : ["cancel", "accept"]
      },
      className: classes.actionBar,
      ownerState: _extends({}, props, {
        wrapperVariant
      })
    });
    const actionBar = /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(ActionBar, _extends({}, actionBarProps));
    const Toolbar = slots?.toolbar;
    const toolbarProps = useSlotProps_default({
      elementType: Toolbar,
      externalSlotProps: slotProps?.toolbar,
      additionalProps: {
        isLandscape,
        onChange,
        value,
        view,
        onViewChange,
        views,
        disabled,
        readOnly
      },
      className: classes.toolbar,
      ownerState: _extends({}, props, {
        wrapperVariant
      })
    });
    const toolbar = toolbarHasView(toolbarProps) && !!Toolbar ? /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Toolbar, _extends({}, toolbarProps)) : null;
    const content = children;
    const Tabs3 = slots?.tabs;
    const tabs = view && Tabs3 ? /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Tabs3, _extends({
      view,
      onViewChange,
      className: classes.tabs
    }, slotProps?.tabs)) : null;
    const Shortcuts = slots?.shortcuts ?? PickersShortcuts;
    const shortcutsProps = useSlotProps_default({
      elementType: Shortcuts,
      externalSlotProps: slotProps?.shortcuts,
      additionalProps: {
        isValid: isValid2,
        isLandscape,
        onChange: onSelectShortcut
      },
      className: classes.shortcuts,
      ownerState: {
        isValid: isValid2,
        isLandscape,
        onChange: onSelectShortcut,
        wrapperVariant
      }
    });
    const shortcuts = view && !!Shortcuts ? /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(Shortcuts, _extends({}, shortcutsProps)) : null;
    return {
      toolbar,
      content,
      tabs,
      actionBar,
      shortcuts
    };
  };
  var usePickerLayout_default = usePickerLayout;

  // node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  var useUtilityClasses83 = (ownerState) => {
    const {
      isLandscape,
      classes
    } = ownerState;
    const slots = {
      root: ["root", isLandscape && "landscape"],
      contentWrapper: ["contentWrapper"]
    };
    return composeClasses(slots, getPickersLayoutUtilityClass, classes);
  };
  var PickersLayoutRoot = styled_default2("div", {
    name: "MuiPickersLayout",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "grid",
    gridAutoColumns: "max-content auto max-content",
    gridAutoRows: "max-content auto max-content",
    [`& .${pickersLayoutClasses.actionBar}`]: {
      gridColumn: "1 / 4",
      gridRow: 3
    },
    variants: [{
      props: {
        isLandscape: true
      },
      style: {
        [`& .${pickersLayoutClasses.toolbar}`]: {
          gridColumn: 1,
          gridRow: "2 / 3"
        },
        [`.${pickersLayoutClasses.shortcuts}`]: {
          gridColumn: "2 / 4",
          gridRow: 1
        }
      }
    }, {
      props: {
        isLandscape: true,
        isRtl: true
      },
      style: {
        [`& .${pickersLayoutClasses.toolbar}`]: {
          gridColumn: 3
        }
      }
    }, {
      props: {
        isLandscape: false
      },
      style: {
        [`& .${pickersLayoutClasses.toolbar}`]: {
          gridColumn: "2 / 4",
          gridRow: 1
        },
        [`& .${pickersLayoutClasses.shortcuts}`]: {
          gridColumn: 1,
          gridRow: "2 / 3"
        }
      }
    }, {
      props: {
        isLandscape: false,
        isRtl: true
      },
      style: {
        [`& .${pickersLayoutClasses.shortcuts}`]: {
          gridColumn: 3
        }
      }
    }]
  });
  var PickersLayoutContentWrapper = styled_default2("div", {
    name: "MuiPickersLayout",
    slot: "ContentWrapper",
    overridesResolver: (props, styles5) => styles5.contentWrapper
  })({
    gridColumn: 2,
    gridRow: 2,
    display: "flex",
    flexDirection: "column"
  });
  var PickersLayout = /* @__PURE__ */ React207.forwardRef(function PickersLayout2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersLayout"
    });
    const {
      toolbar,
      content,
      tabs,
      actionBar,
      shortcuts
    } = usePickerLayout_default(props);
    const {
      sx,
      className,
      isLandscape,
      wrapperVariant
    } = props;
    const classes = useUtilityClasses83(props);
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(PickersLayoutRoot, {
      ref,
      sx,
      className: clsx_default(className, classes.root),
      ownerState: props,
      children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(PickersLayoutContentWrapper, {
        className: classes.contentWrapper,
        children: wrapperVariant === "desktop" ? /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(React207.Fragment, {
          children: [content, tabs]
        }) : /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(React207.Fragment, {
          children: [tabs, content]
        })
      }), actionBar]
    });
  });
  true ? PickersLayout.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    children: import_prop_types111.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types111.default.object,
    className: import_prop_types111.default.string,
    disabled: import_prop_types111.default.bool,
    isLandscape: import_prop_types111.default.bool.isRequired,
    /**
     * `true` if the application is in right-to-left direction.
     */
    isRtl: import_prop_types111.default.bool.isRequired,
    isValid: import_prop_types111.default.func.isRequired,
    onAccept: import_prop_types111.default.func.isRequired,
    onCancel: import_prop_types111.default.func.isRequired,
    onChange: import_prop_types111.default.func.isRequired,
    onClear: import_prop_types111.default.func.isRequired,
    onClose: import_prop_types111.default.func.isRequired,
    onDismiss: import_prop_types111.default.func.isRequired,
    onOpen: import_prop_types111.default.func.isRequired,
    onSelectShortcut: import_prop_types111.default.func.isRequired,
    onSetToday: import_prop_types111.default.func.isRequired,
    onViewChange: import_prop_types111.default.func.isRequired,
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types111.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types111.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types111.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types111.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object, import_prop_types111.default.bool])), import_prop_types111.default.func, import_prop_types111.default.object]),
    value: import_prop_types111.default.any,
    view: import_prop_types111.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    views: import_prop_types111.default.arrayOf(import_prop_types111.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired,
    wrapperVariant: import_prop_types111.default.oneOf(["desktop", "mobile"])
  } : void 0;

  // node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  var _excluded120 = ["props", "getOpenDialogAriaText"];
  var _excluded222 = ["ownerState"];
  var _excluded313 = ["ownerState"];
  var useDesktopPicker = (_ref) => {
    let {
      props,
      getOpenDialogAriaText
    } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded120);
    const {
      slots,
      slotProps: innerSlotProps,
      className,
      sx,
      format,
      formatDensity,
      enableAccessibleFieldDOMStructure,
      selectedSections,
      onSelectedSectionsChange,
      timezone,
      name,
      label,
      inputRef,
      readOnly,
      disabled,
      autoFocus,
      localeText,
      reduceAnimations
    } = props;
    const utils = useUtils();
    const containerRef = React208.useRef(null);
    const fieldRef = React208.useRef(null);
    const labelId = useId();
    const isToolbarHidden = innerSlotProps?.toolbar?.hidden ?? false;
    const {
      open,
      actions,
      hasUIView,
      layoutProps,
      renderCurrentView,
      shouldRestoreFocus,
      fieldProps: pickerFieldProps
    } = usePicker(_extends({}, pickerParams, {
      props,
      fieldRef,
      autoFocusView: true,
      additionalViewProps: {},
      wrapperVariant: "desktop"
    }));
    const ownerStateV8 = {
      open
    };
    const InputAdornment3 = slots.inputAdornment ?? InputAdornment_default;
    const _useSlotProps = useSlotProps_default({
      elementType: InputAdornment3,
      externalSlotProps: innerSlotProps?.inputAdornment,
      additionalProps: {
        position: "end"
      },
      ownerState: props
    }), inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded222);
    const OpenPickerButton = slots.openPickerButton ?? IconButton_default;
    const _useSlotProps2 = useSlotProps_default({
      elementType: OpenPickerButton,
      externalSlotProps: innerSlotProps?.openPickerButton,
      additionalProps: {
        disabled: disabled || readOnly,
        onClick: open ? actions.onClose : actions.onOpen,
        "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils),
        edge: inputAdornmentProps.position
      },
      ownerState: props
    }), openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded313);
    const OpenPickerIcon = slots.openPickerIcon;
    const openPickerIconProps = useSlotProps_default({
      elementType: OpenPickerIcon,
      externalSlotProps: innerSlotProps?.openPickerIcon,
      ownerState: ownerStateV8
    });
    const Field = slots.field;
    const fieldProps = useSlotProps_default({
      elementType: Field,
      externalSlotProps: innerSlotProps?.field,
      additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
        id: labelId
      }, {
        readOnly,
        disabled,
        className,
        sx,
        format,
        formatDensity,
        enableAccessibleFieldDOMStructure,
        selectedSections,
        onSelectedSectionsChange,
        timezone,
        label,
        name,
        autoFocus: autoFocus && !props.open,
        focused: open ? true : void 0
      }, inputRef ? {
        inputRef
      } : {}),
      ownerState: props
    });
    if (hasUIView) {
      fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
        ref: containerRef
      }, !props.disableOpenPicker && {
        [`${inputAdornmentProps.position}Adornment`]: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(InputAdornment3, _extends({}, inputAdornmentProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(OpenPickerButton, _extends({}, openPickerButtonProps, {
            children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(OpenPickerIcon, _extends({}, openPickerIconProps))
          }))
        }))
      });
    }
    const slotsForField = _extends({
      textField: slots.textField,
      clearIcon: slots.clearIcon,
      clearButton: slots.clearButton
    }, fieldProps.slots);
    const Layout = slots.layout ?? PickersLayout;
    let labelledById = labelId;
    if (isToolbarHidden) {
      if (label) {
        labelledById = `${labelId}-label`;
      } else {
        labelledById = void 0;
      }
    }
    const slotProps = _extends({}, innerSlotProps, {
      toolbar: _extends({}, innerSlotProps?.toolbar, {
        titleId: labelId
      }),
      popper: _extends({
        "aria-labelledby": labelledById
      }, innerSlotProps?.popper)
    });
    const handleFieldRef = useForkRef(fieldRef, fieldProps.unstableFieldRef);
    const renderPicker = () => /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)(LocalizationProvider, {
      localeText,
      children: [/* @__PURE__ */ (0, import_jsx_runtime164.jsx)(Field, _extends({}, fieldProps, {
        slots: slotsForField,
        slotProps,
        unstableFieldRef: handleFieldRef
      })), /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(PickersPopper, _extends({
        role: "dialog",
        placement: "bottom-start",
        anchorEl: containerRef.current
      }, actions, {
        open,
        slots,
        slotProps,
        shouldRestoreFocus,
        reduceAnimations,
        children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(Layout, _extends({}, layoutProps, slotProps?.layout, {
          slots,
          slotProps,
          children: renderCurrentView()
        }))
      }))]
    });
    return {
      renderPicker
    };
  };

  // node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.js
  var React209 = __toESM(require_react());
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  var renderDateViewCalendar = ({
    view,
    onViewChange,
    views,
    focusedView,
    onFocusedViewChange,
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minDate,
    maxDate,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    reduceAnimations,
    onMonthChange,
    monthsPerRow,
    onYearChange,
    yearsPerRow,
    slots,
    slotProps,
    loading,
    renderLoading,
    disableHighlightToday,
    readOnly,
    disabled,
    showDaysOutsideCurrentMonth,
    dayOfWeekFormatter,
    sx,
    autoFocus,
    fixedWeekNumber,
    displayWeekNumber,
    timezone
  }) => /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(DateCalendar, {
    view,
    onViewChange,
    views: views.filter(isDatePickerView),
    focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
    onFocusedViewChange,
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minDate,
    maxDate,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    reduceAnimations,
    onMonthChange,
    monthsPerRow,
    onYearChange,
    yearsPerRow,
    slots,
    slotProps,
    loading,
    renderLoading,
    disableHighlightToday,
    readOnly,
    disabled,
    showDaysOutsideCurrentMonth,
    dayOfWeekFormatter,
    sx,
    autoFocus,
    fixedWeekNumber,
    displayWeekNumber,
    timezone
  });

  // node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
  var DesktopDatePicker = /* @__PURE__ */ React210.forwardRef(function DesktopDatePicker2(inProps, ref) {
    const translations = usePickersTranslations();
    const utils = useUtils();
    const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
    const viewRenderers = _extends({
      day: renderDateViewCalendar,
      month: renderDateViewCalendar,
      year: renderDateViewCalendar
    }, defaultizedProps.viewRenderers);
    const props = _extends({}, defaultizedProps, {
      viewRenderers,
      format: resolveDateFormat(utils, defaultizedProps, false),
      yearsPerRow: defaultizedProps.yearsPerRow ?? 4,
      slots: _extends({
        openPickerIcon: CalendarIcon,
        field: DateField
      }, defaultizedProps.slots),
      slotProps: _extends({}, defaultizedProps.slotProps, {
        field: (ownerState) => _extends({}, resolveComponentProps_default(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        }),
        toolbar: _extends({
          hidden: true
        }, defaultizedProps.slotProps?.toolbar)
      })
    });
    const {
      renderPicker
    } = useDesktopPicker({
      props,
      valueManager: singleItemValueManager,
      valueType: "date",
      getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,
      validator: validateDate
    });
    return renderPicker();
  });
  DesktopDatePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types112.default.bool,
    className: import_prop_types112.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types112.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types112.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types112.default.object,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types112.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types112.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types112.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types112.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types112.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types112.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types112.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types112.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types112.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types112.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types112.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types112.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types112.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types112.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types112.default.object,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types112.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types112.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types112.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types112.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types112.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types112.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types112.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types112.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types112.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types112.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types112.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types112.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types112.default.oneOf(["day", "month", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types112.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types112.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types112.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types112.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types112.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types112.default.oneOfType([import_prop_types112.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types112.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types112.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types112.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types112.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types112.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types112.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types112.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types112.default.oneOfType([import_prop_types112.default.arrayOf(import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object, import_prop_types112.default.bool])), import_prop_types112.default.func, import_prop_types112.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types112.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types112.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types112.default.oneOf(["day", "month", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types112.default.shape({
      day: import_prop_types112.default.func,
      month: import_prop_types112.default.func,
      year: import_prop_types112.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types112.default.arrayOf(import_prop_types112.default.oneOf(["day", "month", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 4
     */
    yearsPerRow: import_prop_types112.default.oneOf([3, 4])
  };

  // node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.js
  init_extends();
  var React213 = __toESM(require_react());
  var import_prop_types113 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.js
  init_extends();
  var React212 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
  init_extends();
  var React211 = __toESM(require_react());
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());
  var PickersModalDialogRoot = styled_default2(Dialog_default)({
    [`& .${dialogClasses_default.container}`]: {
      outline: 0
    },
    [`& .${dialogClasses_default.paper}`]: {
      outline: 0,
      minWidth: DIALOG_WIDTH
    }
  });
  var PickersModalDialogContent = styled_default2(DialogContent_default)({
    "&:first-of-type": {
      padding: 0
    }
  });
  function PickersModalDialog(props) {
    const {
      children,
      onDismiss,
      open,
      slots,
      slotProps
    } = props;
    const Dialog3 = slots?.dialog ?? PickersModalDialogRoot;
    const Transition2 = slots?.mobileTransition ?? Fade_default;
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(Dialog3, _extends({
      open,
      onClose: onDismiss
    }, slotProps?.dialog, {
      TransitionComponent: Transition2,
      TransitionProps: slotProps?.mobileTransition,
      PaperComponent: slots?.mobilePaper,
      PaperProps: slotProps?.mobilePaper,
      children: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(PickersModalDialogContent, {
        children
      })
    }));
  }

  // node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.js
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  var _excluded121 = ["props", "getOpenDialogAriaText"];
  var useMobilePicker = (_ref) => {
    let {
      props,
      getOpenDialogAriaText
    } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded121);
    const {
      slots,
      slotProps: innerSlotProps,
      className,
      sx,
      format,
      formatDensity,
      enableAccessibleFieldDOMStructure,
      selectedSections,
      onSelectedSectionsChange,
      timezone,
      name,
      label,
      inputRef,
      readOnly,
      disabled,
      localeText
    } = props;
    const utils = useUtils();
    const fieldRef = React212.useRef(null);
    const labelId = useId();
    const isToolbarHidden = innerSlotProps?.toolbar?.hidden ?? false;
    const {
      open,
      actions,
      layoutProps,
      renderCurrentView,
      fieldProps: pickerFieldProps
    } = usePicker(_extends({}, pickerParams, {
      props,
      fieldRef,
      autoFocusView: true,
      additionalViewProps: {},
      wrapperVariant: "mobile"
    }));
    const Field = slots.field;
    const fieldProps = useSlotProps_default({
      elementType: Field,
      externalSlotProps: innerSlotProps?.field,
      additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
        id: labelId
      }, !(disabled || readOnly) && {
        onClick: actions.onOpen,
        onKeyDown: onSpaceOrEnter(actions.onOpen)
      }, {
        readOnly: readOnly ?? true,
        disabled,
        className,
        sx,
        format,
        formatDensity,
        enableAccessibleFieldDOMStructure,
        selectedSections,
        onSelectedSectionsChange,
        timezone,
        label,
        name
      }, inputRef ? {
        inputRef
      } : {}),
      ownerState: props
    });
    fieldProps.inputProps = _extends({}, fieldProps.inputProps, {
      "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils)
    });
    const slotsForField = _extends({
      textField: slots.textField
    }, fieldProps.slots);
    const Layout = slots.layout ?? PickersLayout;
    let labelledById = labelId;
    if (isToolbarHidden) {
      if (label) {
        labelledById = `${labelId}-label`;
      } else {
        labelledById = void 0;
      }
    }
    const slotProps = _extends({}, innerSlotProps, {
      toolbar: _extends({}, innerSlotProps?.toolbar, {
        titleId: labelId
      }),
      mobilePaper: _extends({
        "aria-labelledby": labelledById
      }, innerSlotProps?.mobilePaper)
    });
    const handleFieldRef = useForkRef(fieldRef, fieldProps.unstableFieldRef);
    const renderPicker = () => /* @__PURE__ */ (0, import_jsx_runtime167.jsxs)(LocalizationProvider, {
      localeText,
      children: [/* @__PURE__ */ (0, import_jsx_runtime167.jsx)(Field, _extends({}, fieldProps, {
        slots: slotsForField,
        slotProps,
        unstableFieldRef: handleFieldRef
      })), /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(PickersModalDialog, _extends({}, actions, {
        open,
        slots,
        slotProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(Layout, _extends({}, layoutProps, slotProps?.layout, {
          slots,
          slotProps,
          children: renderCurrentView()
        }))
      }))]
    });
    return {
      renderPicker
    };
  };

  // node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.js
  var MobileDatePicker = /* @__PURE__ */ React213.forwardRef(function MobileDatePicker2(inProps, ref) {
    const translations = usePickersTranslations();
    const utils = useUtils();
    const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiMobileDatePicker");
    const viewRenderers = _extends({
      day: renderDateViewCalendar,
      month: renderDateViewCalendar,
      year: renderDateViewCalendar
    }, defaultizedProps.viewRenderers);
    const props = _extends({}, defaultizedProps, {
      viewRenderers,
      format: resolveDateFormat(utils, defaultizedProps, false),
      slots: _extends({
        field: DateField
      }, defaultizedProps.slots),
      slotProps: _extends({}, defaultizedProps.slotProps, {
        field: (ownerState) => _extends({}, resolveComponentProps_default(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        }),
        toolbar: _extends({
          hidden: false
        }, defaultizedProps.slotProps?.toolbar)
      })
    });
    const {
      renderPicker
    } = useMobilePicker({
      props,
      valueManager: singleItemValueManager,
      valueType: "date",
      getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,
      validator: validateDate
    });
    return renderPicker();
  });
  MobileDatePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types113.default.bool,
    className: import_prop_types113.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types113.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types113.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types113.default.object,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types113.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types113.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types113.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types113.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types113.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types113.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types113.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types113.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types113.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types113.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types113.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types113.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types113.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types113.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types113.default.object,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types113.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types113.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types113.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types113.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types113.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types113.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types113.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types113.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types113.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types113.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types113.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types113.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types113.default.oneOf(["day", "month", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types113.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types113.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types113.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types113.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types113.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types113.default.oneOfType([import_prop_types113.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types113.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types113.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types113.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types113.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types113.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types113.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types113.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types113.default.oneOfType([import_prop_types113.default.arrayOf(import_prop_types113.default.oneOfType([import_prop_types113.default.func, import_prop_types113.default.object, import_prop_types113.default.bool])), import_prop_types113.default.func, import_prop_types113.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types113.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types113.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types113.default.oneOf(["day", "month", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types113.default.shape({
      day: import_prop_types113.default.func,
      month: import_prop_types113.default.func,
      year: import_prop_types113.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types113.default.arrayOf(import_prop_types113.default.oneOf(["day", "month", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 3
     */
    yearsPerRow: import_prop_types113.default.oneOf([3, 4])
  };

  // node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  var _excluded122 = ["desktopModeMediaQuery"];
  var DatePicker = /* @__PURE__ */ React214.forwardRef(function DatePicker2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDatePicker"
    });
    const {
      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded122);
    const isDesktop = useMediaQuery(desktopModeMediaQuery, {
      defaultMatches: true
    });
    if (isDesktop) {
      return /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(DesktopDatePicker, _extends({
        ref
      }, other));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(MobileDatePicker, _extends({
      ref
    }, other));
  });
  true ? DatePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types114.default.bool,
    className: import_prop_types114.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types114.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types114.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types114.default.object,
    /**
     * CSS media query when `Mobile` mode will be changed to `Desktop`.
     * @default '@media (pointer: fine)'
     * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
     */
    desktopModeMediaQuery: import_prop_types114.default.string,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types114.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types114.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types114.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types114.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types114.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types114.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types114.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types114.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types114.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types114.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types114.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types114.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types114.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types114.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types114.default.object,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types114.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types114.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types114.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types114.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types114.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types114.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types114.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types114.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types114.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types114.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types114.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types114.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types114.default.oneOf(["day", "month", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types114.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types114.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types114.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types114.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types114.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types114.default.oneOfType([import_prop_types114.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types114.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types114.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types114.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types114.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types114.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types114.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types114.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types114.default.oneOfType([import_prop_types114.default.arrayOf(import_prop_types114.default.oneOfType([import_prop_types114.default.func, import_prop_types114.default.object, import_prop_types114.default.bool])), import_prop_types114.default.func, import_prop_types114.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types114.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types114.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types114.default.oneOf(["day", "month", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types114.default.shape({
      day: import_prop_types114.default.func,
      month: import_prop_types114.default.func,
      year: import_prop_types114.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types114.default.arrayOf(import_prop_types114.default.oneOf(["day", "month", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 4 on desktop, 3 on mobile
     */
    yearsPerRow: import_prop_types114.default.oneOf([3, 4])
  } : void 0;

  // node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js
  init_extends();
  var React215 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/internals/components/pickersToolbarTextClasses.js
  function getPickersToolbarTextUtilityClass(slot) {
    return generateUtilityClass("MuiPickersToolbarText", slot);
  }
  var pickersToolbarTextClasses = generateUtilityClasses("MuiPickersToolbarText", ["root", "selected"]);

  // node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  var _excluded123 = ["className", "selected", "value"];
  var useUtilityClasses84 = (ownerState) => {
    const {
      classes,
      selected
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected"]
    };
    return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
  };
  var PickersToolbarTextRoot = styled_default2(Typography_default, {
    name: "MuiPickersToolbarText",
    slot: "Root",
    overridesResolver: (_2, styles5) => [styles5.root, {
      [`&.${pickersToolbarTextClasses.selected}`]: styles5.selected
    }]
  })(({
    theme: theme2
  }) => ({
    transition: theme2.transitions.create("color"),
    color: (theme2.vars || theme2).palette.text.secondary,
    [`&.${pickersToolbarTextClasses.selected}`]: {
      color: (theme2.vars || theme2).palette.text.primary
    }
  }));
  var PickersToolbarText = /* @__PURE__ */ React215.forwardRef(function PickersToolbarText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersToolbarText"
    });
    const {
      className,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded123);
    const classes = useUtilityClasses84(props);
    return /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(PickersToolbarTextRoot, _extends({
      ref,
      className: clsx_default(className, classes.root),
      component: "span"
    }, other, {
      children: value
    }));
  });

  // node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
  init_extends();
  var React216 = __toESM(require_react());
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  var _excluded124 = ["align", "className", "selected", "typographyClassName", "value", "variant", "width"];
  var useUtilityClasses85 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getPickersToolbarUtilityClass, classes);
  };
  var PickersToolbarButtonRoot = styled_default2(Button_default, {
    name: "MuiPickersToolbarButton",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })({
    padding: 0,
    minWidth: 16,
    textTransform: "none"
  });
  var PickersToolbarButton = /* @__PURE__ */ React216.forwardRef(function PickersToolbarButton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPickersToolbarButton"
    });
    const {
      align,
      className,
      selected,
      typographyClassName,
      value,
      variant,
      width: width3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded124);
    const classes = useUtilityClasses85(props);
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(PickersToolbarButtonRoot, _extends({
      variant: "text",
      ref,
      className: clsx_default(className, classes.root)
    }, width3 ? {
      sx: {
        width: width3
      }
    } : {}, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(PickersToolbarText, {
        align,
        className: typographyClassName,
        variant,
        value,
        selected
      })
    }));
  });

  // node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.js
  var React217 = __toESM(require_react());
  var import_jsx_runtime171 = __toESM(require_jsx_runtime());
  var renderTimeViewClock = ({
    view,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    views,
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    ampmInClock,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    showViewSwitcher,
    disableIgnoringDatePartForTimeValidation,
    timezone
  }) => /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(TimeClock, {
    view,
    onViewChange,
    focusedView: focusedView && isTimeView(focusedView) ? focusedView : null,
    onFocusedViewChange,
    views: views.filter(isTimeView),
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    ampmInClock,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    showViewSwitcher,
    disableIgnoringDatePartForTimeValidation,
    timezone
  });
  var renderDigitalClockTimeView = ({
    view,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    views,
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeSteps,
    skipDisabled,
    timezone
  }) => /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(DigitalClock, {
    view,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    views: views.filter(isTimeView),
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeStep: timeSteps?.minutes,
    skipDisabled,
    timezone
  });
  var renderMultiSectionDigitalClockTimeView = ({
    view,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    views,
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeSteps,
    skipDisabled,
    timezone
  }) => /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(MultiSectionDigitalClock, {
    view,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    views: views.filter(isTimeView),
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    minutesStep,
    ampm,
    slots,
    slotProps,
    readOnly,
    disabled,
    sx,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeSteps,
    skipDisabled,
    timezone
  });

  // node_modules/@mui/x-date-pickers/internals/utils/date-time-utils.js
  init_extends();
  var _excluded125 = ["views", "format"];
  var resolveDateTimeFormat = (utils, _ref, ignoreDateResolving) => {
    let {
      views,
      format
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded125);
    if (format) {
      return format;
    }
    const dateViews2 = [];
    const timeViews2 = [];
    views.forEach((view) => {
      if (isTimeView(view)) {
        timeViews2.push(view);
      } else if (isDatePickerView(view)) {
        dateViews2.push(view);
      }
    });
    if (timeViews2.length === 0) {
      return resolveDateFormat(utils, _extends({
        views: dateViews2
      }, other), false);
    }
    if (dateViews2.length === 0) {
      return resolveTimeFormat(utils, _extends({
        views: timeViews2
      }, other));
    }
    const timeFormat = resolveTimeFormat(utils, _extends({
      views: timeViews2
    }, other));
    const dateFormat = ignoreDateResolving ? utils.formats.keyboardDate : resolveDateFormat(utils, _extends({
      views: dateViews2
    }, other), false);
    return `${dateFormat} ${timeFormat}`;
  };
  var resolveViews = (ampm, views, shouldUseSingleColumn) => {
    if (shouldUseSingleColumn) {
      return views.filter((view) => !isInternalTimeView(view) || view === "hours");
    }
    return ampm ? [...views, "meridiem"] : views;
  };
  var resolveShouldRenderTimeInASingleColumn = (timeSteps, threshold) => 24 * 60 / ((timeSteps.hours ?? 1) * (timeSteps.minutes ?? 5)) <= threshold;
  function resolveTimeViewsResponse({
    thresholdToRenderTimeInASingleColumn: inThreshold,
    ampm,
    timeSteps: inTimeSteps,
    views
  }) {
    const thresholdToRenderTimeInASingleColumn = inThreshold ?? 24;
    const timeSteps = _extends({
      hours: 1,
      minutes: 5,
      seconds: 5
    }, inTimeSteps);
    const shouldRenderTimeInASingleColumn = resolveShouldRenderTimeInASingleColumn(timeSteps, thresholdToRenderTimeInASingleColumn);
    return {
      thresholdToRenderTimeInASingleColumn,
      timeSteps,
      shouldRenderTimeInASingleColumn,
      views: resolveViews(ampm, views, shouldRenderTimeInASingleColumn)
    };
  }

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
  init_extends();
  var React224 = __toESM(require_react());
  var import_prop_types120 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
  init_extends();
  var React222 = __toESM(require_react());
  var import_prop_types118 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
  init_extends();
  var React220 = __toESM(require_react());

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
  var React218 = __toESM(require_react());
  var import_prop_types115 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerTabsClasses.js
  function getDateTimePickerTabsUtilityClass(slot) {
    return generateUtilityClass("MuiDateTimePickerTabs", slot);
  }
  var dateTimePickerTabsClasses = generateUtilityClasses("MuiDateTimePickerTabs", ["root"]);

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
  var import_jsx_runtime172 = __toESM(require_jsx_runtime());
  var viewToTab = (view) => {
    if (isDatePickerView(view)) {
      return "date";
    }
    return "time";
  };
  var tabToView = (tab) => {
    if (tab === "date") {
      return "day";
    }
    return "hours";
  };
  var useUtilityClasses86 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes);
  };
  var DateTimePickerTabsRoot = styled_default2(Tabs_default, {
    name: "MuiDateTimePickerTabs",
    slot: "Root",
    overridesResolver: (_2, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    boxShadow: `0 -1px 0 0 inset ${(theme2.vars || theme2).palette.divider}`,
    "&:last-child": {
      boxShadow: `0 1px 0 0 inset ${(theme2.vars || theme2).palette.divider}`,
      [`& .${tabsClasses_default.indicator}`]: {
        bottom: "auto",
        top: 0
      }
    }
  }));
  var DateTimePickerTabs = function DateTimePickerTabs2(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDateTimePickerTabs"
    });
    const {
      dateIcon = /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(DateRangeIcon, {}),
      onViewChange,
      timeIcon = /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TimeIcon, {}),
      view,
      hidden = typeof window === "undefined" || window.innerHeight < 667,
      className,
      sx
    } = props;
    const translations = usePickersTranslations();
    const classes = useUtilityClasses86(props);
    const handleChange = (event, value) => {
      onViewChange(tabToView(value));
    };
    if (hidden) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(DateTimePickerTabsRoot, {
      ownerState: props,
      variant: "fullWidth",
      value: viewToTab(view),
      onChange: handleChange,
      className: clsx_default(className, classes.root),
      sx,
      children: [/* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Tab_default, {
        value: "date",
        "aria-label": translations.dateTableLabel,
        icon: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(React218.Fragment, {
          children: dateIcon
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Tab_default, {
        value: "time",
        "aria-label": translations.timeTableLabel,
        icon: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(React218.Fragment, {
          children: timeIcon
        })
      })]
    });
  };
  true ? DateTimePickerTabs.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types115.default.object,
    className: import_prop_types115.default.string,
    /**
     * Date tab icon.
     * @default DateRange
     */
    dateIcon: import_prop_types115.default.node,
    /**
     * Toggles visibility of the tabs allowing view switching.
     * @default `window.innerHeight < 667` for `DesktopDateTimePicker` and `MobileDateTimePicker`, `displayStaticWrapperAs === 'desktop'` for `StaticDateTimePicker`
     */
    hidden: import_prop_types115.default.bool,
    /**
     * Callback called when a tab is clicked.
     * @template TView
     * @param {TView} view The view to open
     */
    onViewChange: import_prop_types115.default.func.isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types115.default.oneOfType([import_prop_types115.default.arrayOf(import_prop_types115.default.oneOfType([import_prop_types115.default.func, import_prop_types115.default.object, import_prop_types115.default.bool])), import_prop_types115.default.func, import_prop_types115.default.object]),
    /**
     * Time tab icon.
     * @default Time
     */
    timeIcon: import_prop_types115.default.node,
    /**
     * Currently visible picker view.
     */
    view: import_prop_types115.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired
  } : void 0;

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
  init_extends();
  var React219 = __toESM(require_react());
  var import_prop_types116 = __toESM(require_prop_types());

  // node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerToolbarClasses.js
  function getDateTimePickerToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiDateTimePickerToolbar", slot);
  }
  var dateTimePickerToolbarClasses = generateUtilityClasses("MuiDateTimePickerToolbar", ["root", "dateContainer", "timeContainer", "timeDigitsContainer", "separator", "timeLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var _excluded126 = ["ampm", "ampmInClock", "value", "onChange", "view", "isLandscape", "onViewChange", "toolbarFormat", "toolbarPlaceholder", "views", "disabled", "readOnly", "toolbarVariant", "toolbarTitle", "className"];
  var useUtilityClasses87 = (ownerState) => {
    const {
      classes,
      isLandscape,
      isRtl
    } = ownerState;
    const slots = {
      root: ["root"],
      dateContainer: ["dateContainer"],
      timeContainer: ["timeContainer", isRtl && "timeLabelReverse"],
      timeDigitsContainer: ["timeDigitsContainer", isRtl && "timeLabelReverse"],
      separator: ["separator"],
      ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
      ampmLabel: ["ampmLabel"]
    };
    return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes);
  };
  var DateTimePickerToolbarRoot = styled_default2(PickersToolbar, {
    name: "MuiDateTimePickerToolbar",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })(({
    theme: theme2
  }) => ({
    paddingLeft: 16,
    paddingRight: 16,
    justifyContent: "space-around",
    position: "relative",
    variants: [{
      props: {
        toolbarVariant: "desktop"
      },
      style: {
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
        [`& .${pickersToolbarClasses.content} .${pickersToolbarTextClasses.selected}`]: {
          color: (theme2.vars || theme2).palette.primary.main,
          fontWeight: theme2.typography.fontWeightBold
        }
      }
    }, {
      props: {
        toolbarVariant: "desktop",
        isLandscape: true
      },
      style: {
        borderRight: `1px solid ${(theme2.vars || theme2).palette.divider}`
      }
    }, {
      props: {
        toolbarVariant: "desktop",
        isLandscape: false
      },
      style: {
        paddingLeft: 24,
        paddingRight: 0
      }
    }]
  }));
  var DateTimePickerToolbarDateContainer = styled_default2("div", {
    name: "MuiDateTimePickerToolbar",
    slot: "DateContainer",
    overridesResolver: (props, styles5) => styles5.dateContainer
  })({
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-start"
  });
  var DateTimePickerToolbarTimeContainer = styled_default2("div", {
    name: "MuiDateTimePickerToolbar",
    slot: "TimeContainer",
    overridesResolver: (props, styles5) => styles5.timeContainer
  })({
    display: "flex",
    flexDirection: "row",
    variants: [{
      props: {
        isRtl: true
      },
      style: {
        flexDirection: "row-reverse"
      }
    }, {
      props: {
        toolbarVariant: "desktop",
        isLandscape: false
      },
      style: {
        gap: 9,
        marginRight: 4,
        alignSelf: "flex-end"
      }
    }, {
      props: ({
        isLandscape,
        toolbarVariant
      }) => isLandscape && toolbarVariant !== "desktop",
      style: {
        flexDirection: "column"
      }
    }, {
      props: ({
        isLandscape,
        toolbarVariant,
        isRtl
      }) => isLandscape && toolbarVariant !== "desktop" && isRtl,
      style: {
        flexDirection: "column-reverse"
      }
    }]
  });
  var DateTimePickerToolbarTimeDigitsContainer = styled_default2("div", {
    name: "MuiDateTimePickerToolbar",
    slot: "TimeDigitsContainer",
    overridesResolver: (props, styles5) => styles5.timeDigitsContainer
  })({
    display: "flex",
    variants: [{
      props: {
        isRtl: true
      },
      style: {
        flexDirection: "row-reverse"
      }
    }, {
      props: {
        toolbarVariant: "desktop"
      },
      style: {
        gap: 1.5
      }
    }]
  });
  var DateTimePickerToolbarSeparator = styled_default2(PickersToolbarText, {
    name: "MuiDateTimePickerToolbar",
    slot: "Separator",
    overridesResolver: (props, styles5) => styles5.separator
  })({
    margin: "0 4px 0 2px",
    cursor: "default",
    variants: [{
      props: {
        toolbarVariant: "desktop"
      },
      style: {
        margin: 0
      }
    }]
  });
  var DateTimePickerToolbarAmPmSelection = styled_default2("div", {
    name: "MuiDateTimePickerToolbar",
    slot: "AmPmSelection",
    overridesResolver: (props, styles5) => [{
      [`.${dateTimePickerToolbarClasses.ampmLabel}`]: styles5.ampmLabel
    }, {
      [`&.${dateTimePickerToolbarClasses.ampmLandscape}`]: styles5.ampmLandscape
    }, styles5.ampmSelection]
  })({
    display: "flex",
    flexDirection: "column",
    marginRight: "auto",
    marginLeft: 12,
    [`& .${dateTimePickerToolbarClasses.ampmLabel}`]: {
      fontSize: 17
    },
    variants: [{
      props: {
        isLandscape: true
      },
      style: {
        margin: "4px 0 auto",
        flexDirection: "row",
        justifyContent: "space-around",
        width: "100%"
      }
    }]
  });
  function DateTimePickerToolbar(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDateTimePickerToolbar"
    });
    const {
      ampm,
      ampmInClock,
      value,
      onChange,
      view,
      isLandscape,
      onViewChange,
      toolbarFormat,
      toolbarPlaceholder = "\u2013\u2013",
      views,
      disabled,
      readOnly,
      toolbarVariant = "mobile",
      toolbarTitle: inToolbarTitle,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded126);
    const isRtl = useRtl2();
    const ownerState = _extends({}, props, {
      isRtl
    });
    const utils = useUtils();
    const {
      meridiemMode,
      handleMeridiemChange
    } = useMeridiemMode(value, ampm, onChange);
    const showAmPmControl = Boolean(ampm && !ampmInClock);
    const isDesktop = toolbarVariant === "desktop";
    const translations = usePickersTranslations();
    const classes = useUtilityClasses87(ownerState);
    const toolbarTitle = inToolbarTitle ?? translations.dateTimePickerToolbarTitle;
    const formatHours = (time) => ampm ? utils.format(time, "hours12h") : utils.format(time, "hours24h");
    const dateText = React219.useMemo(() => {
      if (!value) {
        return toolbarPlaceholder;
      }
      if (toolbarFormat) {
        return utils.formatByString(value, toolbarFormat);
      }
      return utils.format(value, "shortDate");
    }, [value, toolbarFormat, toolbarPlaceholder, utils]);
    return /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(DateTimePickerToolbarRoot, _extends({
      isLandscape,
      className: clsx_default(classes.root, className),
      toolbarTitle
    }, other, {
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(DateTimePickerToolbarDateContainer, {
        className: classes.dateContainer,
        ownerState,
        children: [views.includes("year") && /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
          tabIndex: -1,
          variant: "subtitle1",
          onClick: () => onViewChange("year"),
          selected: view === "year",
          value: value ? utils.format(value, "year") : "\u2013"
        }), views.includes("day") && /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
          tabIndex: -1,
          variant: isDesktop ? "h5" : "h4",
          onClick: () => onViewChange("day"),
          selected: view === "day",
          value: dateText
        })]
      }), /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(DateTimePickerToolbarTimeContainer, {
        className: classes.timeContainer,
        ownerState,
        children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(DateTimePickerToolbarTimeDigitsContainer, {
          className: classes.timeDigitsContainer,
          ownerState,
          children: [views.includes("hours") && /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(React219.Fragment, {
            children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
              variant: isDesktop ? "h5" : "h3",
              width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
              onClick: () => onViewChange("hours"),
              selected: view === "hours",
              value: value ? formatHours(value) : "--"
            }), /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(DateTimePickerToolbarSeparator, {
              variant: isDesktop ? "h5" : "h3",
              value: ":",
              className: classes.separator,
              ownerState
            }), /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
              variant: isDesktop ? "h5" : "h3",
              width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
              onClick: () => onViewChange("minutes"),
              selected: view === "minutes" || !views.includes("minutes") && view === "hours",
              value: value ? utils.format(value, "minutes") : "--",
              disabled: !views.includes("minutes")
            })]
          }), views.includes("seconds") && /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(React219.Fragment, {
            children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsx)(DateTimePickerToolbarSeparator, {
              variant: isDesktop ? "h5" : "h3",
              value: ":",
              className: classes.separator,
              ownerState
            }), /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
              variant: isDesktop ? "h5" : "h3",
              width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
              onClick: () => onViewChange("seconds"),
              selected: view === "seconds",
              value: value ? utils.format(value, "seconds") : "--"
            })]
          })]
        }), showAmPmControl && !isDesktop && /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(DateTimePickerToolbarAmPmSelection, {
          className: classes.ampmSelection,
          ownerState,
          children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
            variant: "subtitle2",
            selected: meridiemMode === "am",
            typographyClassName: classes.ampmLabel,
            value: formatMeridiem(utils, "am"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
            disabled
          }), /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
            variant: "subtitle2",
            selected: meridiemMode === "pm",
            typographyClassName: classes.ampmLabel,
            value: formatMeridiem(utils, "pm"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
            disabled
          })]
        }), ampm && isDesktop && /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(PickersToolbarButton, {
          variant: "h5",
          onClick: () => onViewChange("meridiem"),
          selected: view === "meridiem",
          value: value && meridiemMode ? formatMeridiem(utils, meridiemMode) : "--",
          width: MULTI_SECTION_CLOCK_SECTION_WIDTH
        })]
      })]
    }));
  }
  true ? DateTimePickerToolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    ampm: import_prop_types116.default.bool,
    ampmInClock: import_prop_types116.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types116.default.object,
    className: import_prop_types116.default.string,
    disabled: import_prop_types116.default.bool,
    /**
     * If `true`, show the toolbar even in desktop mode.
     * @default `true` for Desktop, `false` for Mobile.
     */
    hidden: import_prop_types116.default.bool,
    isLandscape: import_prop_types116.default.bool.isRequired,
    onChange: import_prop_types116.default.func.isRequired,
    /**
     * Callback called when a toolbar is clicked
     * @template TView
     * @param {TView} view The view to open
     */
    onViewChange: import_prop_types116.default.func.isRequired,
    readOnly: import_prop_types116.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types116.default.oneOfType([import_prop_types116.default.arrayOf(import_prop_types116.default.oneOfType([import_prop_types116.default.func, import_prop_types116.default.object, import_prop_types116.default.bool])), import_prop_types116.default.func, import_prop_types116.default.object]),
    titleId: import_prop_types116.default.string,
    /**
     * Toolbar date format.
     */
    toolbarFormat: import_prop_types116.default.string,
    /**
     * Toolbar value placeholder—it is displayed when the value is empty.
     * @default "––"
     */
    toolbarPlaceholder: import_prop_types116.default.node,
    /**
     * If provided, it will be used instead of `dateTimePickerToolbarTitle` from localization.
     */
    toolbarTitle: import_prop_types116.default.node,
    toolbarVariant: import_prop_types116.default.oneOf(["desktop", "mobile"]),
    value: import_prop_types116.default.object,
    /**
     * Currently visible picker view.
     */
    view: import_prop_types116.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    /**
     * Available views.
     */
    views: import_prop_types116.default.arrayOf(import_prop_types116.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired
  } : void 0;

  // node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
  function useDateTimePickerDefaultizedProps(props, name) {
    const utils = useUtils();
    const defaultDates = useDefaultDates();
    const themeProps = useThemeProps2({
      props,
      name
    });
    const ampm = themeProps.ampm ?? utils.is12HourCycleInCurrentLocale();
    const localeText = React220.useMemo(() => {
      if (themeProps.localeText?.toolbarTitle == null) {
        return themeProps.localeText;
      }
      return _extends({}, themeProps.localeText, {
        dateTimePickerToolbarTitle: themeProps.localeText.toolbarTitle
      });
    }, [themeProps.localeText]);
    return _extends({}, themeProps, applyDefaultViewProps({
      views: themeProps.views,
      openTo: themeProps.openTo,
      defaultViews: ["year", "day", "hours", "minutes"],
      defaultOpenTo: "day"
    }), {
      ampm,
      localeText,
      orientation: themeProps.orientation ?? "portrait",
      // TODO: Remove from public API
      disableIgnoringDatePartForTimeValidation: themeProps.disableIgnoringDatePartForTimeValidation ?? Boolean(themeProps.minDateTime || themeProps.maxDateTime || // allow time clock to correctly check time validity: https://github.com/mui/mui-x/issues/8520
      themeProps.disablePast || themeProps.disableFuture),
      disableFuture: themeProps.disableFuture ?? false,
      disablePast: themeProps.disablePast ?? false,
      minDate: applyDefaultDate(utils, themeProps.minDateTime ?? themeProps.minDate, defaultDates.minDate),
      maxDate: applyDefaultDate(utils, themeProps.maxDateTime ?? themeProps.maxDate, defaultDates.maxDate),
      minTime: themeProps.minDateTime ?? themeProps.minTime,
      maxTime: themeProps.maxDateTime ?? themeProps.maxTime,
      slots: _extends({
        toolbar: DateTimePickerToolbar,
        tabs: DateTimePickerTabs
      }, themeProps.slots),
      slotProps: _extends({}, themeProps.slotProps, {
        toolbar: _extends({
          ampm
        }, themeProps.slotProps?.toolbar)
      })
    });
  }

  // node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePickerLayout.js
  init_extends();
  var React221 = __toESM(require_react());
  var import_prop_types117 = __toESM(require_prop_types());
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var DesktopDateTimePickerLayout = /* @__PURE__ */ React221.forwardRef(function DesktopDateTimePickerLayout2(props, ref) {
    const isRtl = useRtl2();
    const {
      toolbar,
      tabs,
      content,
      actionBar,
      shortcuts
    } = usePickerLayout_default(props);
    const {
      sx,
      className,
      isLandscape,
      classes
    } = props;
    const isActionBarVisible = actionBar && (actionBar.props.actions?.length ?? 0) > 0;
    const ownerState = _extends({}, props, {
      isRtl
    });
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(PickersLayoutRoot, {
      ref,
      className: clsx_default(className, pickersLayoutClasses.root, classes?.root),
      sx: [{
        [`& .${pickersLayoutClasses.tabs}`]: {
          gridRow: 4,
          gridColumn: "1 / 4"
        },
        [`& .${pickersLayoutClasses.actionBar}`]: {
          gridRow: 5
        }
      }, ...Array.isArray(sx) ? sx : [sx]],
      ownerState,
      children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(PickersLayoutContentWrapper, {
        className: clsx_default(pickersLayoutClasses.contentWrapper, classes?.contentWrapper),
        sx: {
          display: "grid"
        },
        children: [content, tabs, isActionBarVisible && /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(Divider_default, {
          sx: {
            gridRow: 3,
            gridColumn: "1 / 4"
          }
        })]
      }), actionBar]
    });
  });
  true ? DesktopDateTimePickerLayout.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    children: import_prop_types117.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types117.default.object,
    className: import_prop_types117.default.string,
    disabled: import_prop_types117.default.bool,
    isLandscape: import_prop_types117.default.bool.isRequired,
    /**
     * `true` if the application is in right-to-left direction.
     */
    isRtl: import_prop_types117.default.bool.isRequired,
    isValid: import_prop_types117.default.func.isRequired,
    onAccept: import_prop_types117.default.func.isRequired,
    onCancel: import_prop_types117.default.func.isRequired,
    onChange: import_prop_types117.default.func.isRequired,
    onClear: import_prop_types117.default.func.isRequired,
    onClose: import_prop_types117.default.func.isRequired,
    onDismiss: import_prop_types117.default.func.isRequired,
    onOpen: import_prop_types117.default.func.isRequired,
    onSelectShortcut: import_prop_types117.default.func.isRequired,
    onSetToday: import_prop_types117.default.func.isRequired,
    onViewChange: import_prop_types117.default.func.isRequired,
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types117.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types117.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types117.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types117.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types117.default.oneOfType([import_prop_types117.default.arrayOf(import_prop_types117.default.oneOfType([import_prop_types117.default.func, import_prop_types117.default.object, import_prop_types117.default.bool])), import_prop_types117.default.func, import_prop_types117.default.object]),
    value: import_prop_types117.default.any,
    view: import_prop_types117.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    views: import_prop_types117.default.arrayOf(import_prop_types117.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired,
    wrapperVariant: import_prop_types117.default.oneOf(["desktop", "mobile"])
  } : void 0;

  // node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
  var import_jsx_runtime175 = __toESM(require_jsx_runtime());
  var _excluded127 = ["openTo", "focusedView", "timeViewsCount"];
  var rendererInterceptor = function rendererInterceptor2(inViewRenderers, popperView, rendererProps) {
    const {
      openTo,
      focusedView,
      timeViewsCount
    } = rendererProps, otherProps = _objectWithoutPropertiesLoose(rendererProps, _excluded127);
    const finalProps = _extends({}, otherProps, {
      focusedView: null,
      sx: [{
        [`&.${multiSectionDigitalClockClasses.root}`]: {
          borderBottom: 0
        },
        [`&.${multiSectionDigitalClockClasses.root}, .${multiSectionDigitalClockSectionClasses.root}, &.${digitalClockClasses.root}`]: {
          maxHeight: VIEW_HEIGHT
        }
      }]
    });
    const isTimeViewActive = isInternalTimeView(popperView);
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(React222.Fragment, {
      children: [inViewRenderers[!isTimeViewActive ? popperView : "day"]?.(_extends({}, rendererProps, {
        view: !isTimeViewActive ? popperView : "day",
        focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
        views: rendererProps.views.filter(isDatePickerView),
        sx: [{
          gridColumn: 1
        }, ...finalProps.sx]
      })), timeViewsCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(React222.Fragment, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Divider_default, {
          orientation: "vertical",
          sx: {
            gridColumn: 2
          }
        }), inViewRenderers[isTimeViewActive ? popperView : "hours"]?.(_extends({}, finalProps, {
          view: isTimeViewActive ? popperView : "hours",
          focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
          openTo: isInternalTimeView(openTo) ? openTo : "hours",
          views: rendererProps.views.filter(isInternalTimeView),
          sx: [{
            gridColumn: 3
          }, ...finalProps.sx]
        }))]
      })]
    });
  };
  var DesktopDateTimePicker = /* @__PURE__ */ React222.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
    const translations = usePickersTranslations();
    const utils = useUtils();
    const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
    const {
      shouldRenderTimeInASingleColumn,
      thresholdToRenderTimeInASingleColumn,
      views: resolvedViews,
      timeSteps
    } = resolveTimeViewsResponse(defaultizedProps);
    const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;
    const viewRenderers = _extends({
      day: renderDateViewCalendar,
      month: renderDateViewCalendar,
      year: renderDateViewCalendar,
      hours: renderTimeView,
      minutes: renderTimeView,
      seconds: renderTimeView,
      meridiem: renderTimeView
    }, defaultizedProps.viewRenderers);
    const ampmInClock = defaultizedProps.ampmInClock ?? true;
    const shouldHoursRendererContainMeridiemView = viewRenderers.hours?.name === renderMultiSectionDigitalClockTimeView.name;
    const views = !shouldHoursRendererContainMeridiemView ? resolvedViews.filter((view) => view !== "meridiem") : resolvedViews;
    const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ["accept"];
    const props = _extends({}, defaultizedProps, {
      viewRenderers,
      format: resolveDateTimeFormat(utils, defaultizedProps),
      views,
      yearsPerRow: defaultizedProps.yearsPerRow ?? 4,
      ampmInClock,
      timeSteps,
      thresholdToRenderTimeInASingleColumn,
      shouldRenderTimeInASingleColumn,
      slots: _extends({
        field: DateTimeField,
        layout: DesktopDateTimePickerLayout,
        openPickerIcon: CalendarIcon
      }, defaultizedProps.slots),
      slotProps: _extends({}, defaultizedProps.slotProps, {
        field: (ownerState) => _extends({}, resolveComponentProps_default(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        }),
        toolbar: _extends({
          hidden: true,
          ampmInClock,
          toolbarVariant: "desktop"
        }, defaultizedProps.slotProps?.toolbar),
        tabs: _extends({
          hidden: true
        }, defaultizedProps.slotProps?.tabs),
        actionBar: (ownerState) => _extends({
          actions: actionBarActions
        }, resolveComponentProps_default(defaultizedProps.slotProps?.actionBar, ownerState))
      })
    });
    const {
      renderPicker
    } = useDesktopPicker({
      props,
      valueManager: singleItemValueManager,
      valueType: "date-time",
      getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,
      validator: validateDateTime,
      rendererInterceptor
    });
    return renderPicker();
  });
  DesktopDateTimePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types118.default.bool,
    /**
     * Display ampm controls under the clock (instead of in the toolbar).
     * @default true on desktop, false on mobile
     */
    ampmInClock: import_prop_types118.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types118.default.bool,
    className: import_prop_types118.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types118.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types118.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types118.default.object,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types118.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types118.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types118.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types118.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types118.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types118.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types118.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types118.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types118.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types118.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types118.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types118.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types118.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types118.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types118.default.object,
    /**
     * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
     */
    maxDateTime: import_prop_types118.default.object,
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types118.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types118.default.object,
    /**
     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
     */
    minDateTime: import_prop_types118.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types118.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types118.default.number,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types118.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types118.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types118.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types118.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types118.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types118.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types118.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types118.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types118.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types118.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types118.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types118.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types118.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types118.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types118.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types118.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types118.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types118.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types118.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types118.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types118.default.func,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types118.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types118.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types118.default.bool,
    /**
     * If `true`, disabled digital clock items will not be rendered.
     * @default false
     */
    skipDisabled: import_prop_types118.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types118.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types118.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types118.default.oneOfType([import_prop_types118.default.arrayOf(import_prop_types118.default.oneOfType([import_prop_types118.default.func, import_prop_types118.default.object, import_prop_types118.default.bool])), import_prop_types118.default.func, import_prop_types118.default.object]),
    /**
     * Amount of time options below or at which the single column time renderer is used.
     * @default 24
     */
    thresholdToRenderTimeInASingleColumn: import_prop_types118.default.number,
    /**
     * The time steps between two time unit options.
     * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
     * When single column time renderer is used, only `timeStep.minutes` will be used.
     * @default{ hours: 1, minutes: 5, seconds: 5 }
     */
    timeSteps: import_prop_types118.default.shape({
      hours: import_prop_types118.default.number,
      minutes: import_prop_types118.default.number,
      seconds: import_prop_types118.default.number
    }),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types118.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types118.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types118.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types118.default.shape({
      day: import_prop_types118.default.func,
      hours: import_prop_types118.default.func,
      meridiem: import_prop_types118.default.func,
      minutes: import_prop_types118.default.func,
      month: import_prop_types118.default.func,
      seconds: import_prop_types118.default.func,
      year: import_prop_types118.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types118.default.arrayOf(import_prop_types118.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 4
     */
    yearsPerRow: import_prop_types118.default.oneOf([3, 4])
  };

  // node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
  init_extends();
  var React223 = __toESM(require_react());
  var import_prop_types119 = __toESM(require_prop_types());
  var MobileDateTimePicker = /* @__PURE__ */ React223.forwardRef(function MobileDateTimePicker2(inProps, ref) {
    const translations = usePickersTranslations();
    const utils = useUtils();
    const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
    const viewRenderers = _extends({
      day: renderDateViewCalendar,
      month: renderDateViewCalendar,
      year: renderDateViewCalendar,
      hours: renderTimeViewClock,
      minutes: renderTimeViewClock,
      seconds: renderTimeViewClock
    }, defaultizedProps.viewRenderers);
    const ampmInClock = defaultizedProps.ampmInClock ?? false;
    const props = _extends({}, defaultizedProps, {
      viewRenderers,
      format: resolveDateTimeFormat(utils, defaultizedProps),
      ampmInClock,
      slots: _extends({
        field: DateTimeField
      }, defaultizedProps.slots),
      slotProps: _extends({}, defaultizedProps.slotProps, {
        field: (ownerState) => _extends({}, resolveComponentProps_default(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        }),
        toolbar: _extends({
          hidden: false,
          ampmInClock
        }, defaultizedProps.slotProps?.toolbar),
        tabs: _extends({
          hidden: false
        }, defaultizedProps.slotProps?.tabs)
      })
    });
    const {
      renderPicker
    } = useMobilePicker({
      props,
      valueManager: singleItemValueManager,
      valueType: "date-time",
      getOpenDialogAriaText: props.localeText?.openDatePickerDialogue ?? translations.openDatePickerDialogue,
      validator: validateDateTime
    });
    return renderPicker();
  });
  MobileDateTimePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types119.default.bool,
    /**
     * Display ampm controls under the clock (instead of in the toolbar).
     * @default true on desktop, false on mobile
     */
    ampmInClock: import_prop_types119.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types119.default.bool,
    className: import_prop_types119.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types119.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types119.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types119.default.object,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types119.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types119.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types119.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types119.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types119.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types119.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types119.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types119.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types119.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types119.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types119.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types119.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types119.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types119.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types119.default.object,
    /**
     * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
     */
    maxDateTime: import_prop_types119.default.object,
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types119.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types119.default.object,
    /**
     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
     */
    minDateTime: import_prop_types119.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types119.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types119.default.number,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types119.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types119.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types119.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types119.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types119.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types119.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types119.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types119.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types119.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types119.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types119.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types119.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types119.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types119.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types119.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types119.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types119.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types119.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types119.default.oneOfType([import_prop_types119.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types119.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types119.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types119.default.func,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types119.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types119.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types119.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types119.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types119.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types119.default.oneOfType([import_prop_types119.default.arrayOf(import_prop_types119.default.oneOfType([import_prop_types119.default.func, import_prop_types119.default.object, import_prop_types119.default.bool])), import_prop_types119.default.func, import_prop_types119.default.object]),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types119.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types119.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types119.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types119.default.shape({
      day: import_prop_types119.default.func,
      hours: import_prop_types119.default.func,
      minutes: import_prop_types119.default.func,
      month: import_prop_types119.default.func,
      seconds: import_prop_types119.default.func,
      year: import_prop_types119.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types119.default.arrayOf(import_prop_types119.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 3
     */
    yearsPerRow: import_prop_types119.default.oneOf([3, 4])
  };

  // node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
  var import_jsx_runtime176 = __toESM(require_jsx_runtime());
  var _excluded128 = ["desktopModeMediaQuery"];
  var DateTimePicker = /* @__PURE__ */ React224.forwardRef(function DateTimePicker2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDateTimePicker"
    });
    const {
      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded128);
    const isDesktop = useMediaQuery(desktopModeMediaQuery, {
      defaultMatches: true
    });
    if (isDesktop) {
      return /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(DesktopDateTimePicker, _extends({
        ref
      }, other));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(MobileDateTimePicker, _extends({
      ref
    }, other));
  });
  true ? DateTimePicker.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "pnpm proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * 12h/24h view for hour selection clock.
     * @default utils.is12HourCycleInCurrentLocale()
     */
    ampm: import_prop_types120.default.bool,
    /**
     * Display ampm controls under the clock (instead of in the toolbar).
     * @default true on desktop, false on mobile
     */
    ampmInClock: import_prop_types120.default.bool,
    /**
     * If `true`, the main element is focused during the first mount.
     * This main element is:
     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
     * - the `input` element if there is a field rendered.
     */
    autoFocus: import_prop_types120.default.bool,
    className: import_prop_types120.default.string,
    /**
     * If `true`, the popover or modal will close after submitting the full date.
     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
     */
    closeOnSelect: import_prop_types120.default.bool,
    /**
     * Formats the day of week displayed in the calendar header.
     * @param {TDate} date The date of the day of week provided by the adapter.
     * @returns {string} The name to display.
     * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
     */
    dayOfWeekFormatter: import_prop_types120.default.func,
    /**
     * The default value.
     * Used when the component is not controlled.
     */
    defaultValue: import_prop_types120.default.object,
    /**
     * CSS media query when `Mobile` mode will be changed to `Desktop`.
     * @default '@media (pointer: fine)'
     * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
     */
    desktopModeMediaQuery: import_prop_types120.default.string,
    /**
     * If `true`, the picker and text field are disabled.
     * @default false
     */
    disabled: import_prop_types120.default.bool,
    /**
     * If `true`, disable values after the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disableFuture: import_prop_types120.default.bool,
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday: import_prop_types120.default.bool,
    /**
     * Do not ignore date part when validating min/max time.
     * @default false
     */
    disableIgnoringDatePartForTimeValidation: import_prop_types120.default.bool,
    /**
     * If `true`, the open picker button will not be rendered (renders only the field).
     * @default false
     */
    disableOpenPicker: import_prop_types120.default.bool,
    /**
     * If `true`, disable values before the current date for date components, time for time components and both for date time components.
     * @default false
     */
    disablePast: import_prop_types120.default.bool,
    /**
     * If `true`, the week number will be display in the calendar.
     */
    displayWeekNumber: import_prop_types120.default.bool,
    /**
     * @default false
     */
    enableAccessibleFieldDOMStructure: import_prop_types120.default.any,
    /**
     * The day view will show as many weeks as needed after the end of the current month to match this value.
     * Put it to 6 to have a fixed number of weeks in Gregorian calendars
     */
    fixedWeekNumber: import_prop_types120.default.number,
    /**
     * Format of the date when rendered in the input(s).
     * Defaults to localized format based on the used `views`.
     */
    format: import_prop_types120.default.string,
    /**
     * Density of the format when rendered in the input.
     * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
     * @default "dense"
     */
    formatDensity: import_prop_types120.default.oneOf(["dense", "spacious"]),
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types120.default.node,
    /**
     * If `true`, calls `renderLoading` instead of rendering the day calendar.
     * Can be used to preload information and show it in calendar.
     * @default false
     */
    loading: import_prop_types120.default.bool,
    /**
     * Locale for components texts.
     * Allows overriding texts coming from `LocalizationProvider` and `theme`.
     */
    localeText: import_prop_types120.default.object,
    /**
     * Maximal selectable date.
     * @default 2099-12-31
     */
    maxDate: import_prop_types120.default.object,
    /**
     * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
     */
    maxDateTime: import_prop_types120.default.object,
    /**
     * Maximal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    maxTime: import_prop_types120.default.object,
    /**
     * Minimal selectable date.
     * @default 1900-01-01
     */
    minDate: import_prop_types120.default.object,
    /**
     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
     */
    minDateTime: import_prop_types120.default.object,
    /**
     * Minimal selectable time.
     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
     */
    minTime: import_prop_types120.default.object,
    /**
     * Step over minutes.
     * @default 1
     */
    minutesStep: import_prop_types120.default.number,
    /**
     * Months rendered per row.
     * @default 3
     */
    monthsPerRow: import_prop_types120.default.oneOf([3, 4]),
    /**
     * Name attribute used by the `input` element in the Field.
     */
    name: import_prop_types120.default.string,
    /**
     * Callback fired when the value is accepted.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The value that was just accepted.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onAccept: import_prop_types120.default.func,
    /**
     * Callback fired when the value changes.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @param {TValue} value The new value.
     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
     */
    onChange: import_prop_types120.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see `open`).
     */
    onClose: import_prop_types120.default.func,
    /**
     * Callback fired when the error associated with the current value changes.
     * When a validation error is detected, the `error` parameter contains a non-null value.
     * This can be used to render an appropriate form error.
     * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
     * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
     * @param {TError} error The reason why the current value is not valid.
     * @param {TValue} value The value associated with the error.
     */
    onError: import_prop_types120.default.func,
    /**
     * Callback fired on month change.
     * @template TDate
     * @param {TDate} month The new month.
     */
    onMonthChange: import_prop_types120.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see `open`).
     */
    onOpen: import_prop_types120.default.func,
    /**
     * Callback fired when the selected sections change.
     * @param {FieldSelectedSections} newValue The new selected sections.
     */
    onSelectedSectionsChange: import_prop_types120.default.func,
    /**
     * Callback fired on view change.
     * @template TView
     * @param {TView} view The new view.
     */
    onViewChange: import_prop_types120.default.func,
    /**
     * Callback fired on year change.
     * @template TDate
     * @param {TDate} year The new year.
     */
    onYearChange: import_prop_types120.default.func,
    /**
     * Control the popup or dialog open state.
     * @default false
     */
    open: import_prop_types120.default.bool,
    /**
     * The default visible view.
     * Used when the component view is not controlled.
     * Must be a valid option from `views` list.
     */
    openTo: import_prop_types120.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    /**
     * Force rendering in particular orientation.
     */
    orientation: import_prop_types120.default.oneOf(["landscape", "portrait"]),
    readOnly: import_prop_types120.default.bool,
    /**
     * If `true`, disable heavy animations.
     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
     */
    reduceAnimations: import_prop_types120.default.bool,
    /**
     * The date used to generate the new value when both `value` and `defaultValue` are empty.
     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
     */
    referenceDate: import_prop_types120.default.object,
    /**
     * Component displaying when passed `loading` true.
     * @returns {React.ReactNode} The node to render when loading.
     * @default () => <span data-mui-test="loading-progress">...</span>
     */
    renderLoading: import_prop_types120.default.func,
    /**
     * The currently selected sections.
     * This prop accepts four formats:
     * 1. If a number is provided, the section at this index will be selected.
     * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
     * 3. If `"all"` is provided, all the sections will be selected.
     * 4. If `null` is provided, no section will be selected.
     * If not provided, the selected sections will be handled internally.
     */
    selectedSections: import_prop_types120.default.oneOfType([import_prop_types120.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types120.default.number]),
    /**
     * Disable specific date.
     *
     * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
     *
     * @template TDate
     * @param {TDate} day The date to test.
     * @returns {boolean} If `true` the date will be disabled.
     */
    shouldDisableDate: import_prop_types120.default.func,
    /**
     * Disable specific month.
     * @template TDate
     * @param {TDate} month The month to test.
     * @returns {boolean} If `true`, the month will be disabled.
     */
    shouldDisableMonth: import_prop_types120.default.func,
    /**
     * Disable specific time.
     * @template TDate
     * @param {TDate} value The value to check.
     * @param {TimeView} view The clock type of the timeValue.
     * @returns {boolean} If `true` the time will be disabled.
     */
    shouldDisableTime: import_prop_types120.default.func,
    /**
     * Disable specific year.
     * @template TDate
     * @param {TDate} year The year to test.
     * @returns {boolean} If `true`, the year will be disabled.
     */
    shouldDisableYear: import_prop_types120.default.func,
    /**
     * If `true`, days outside the current month are rendered:
     *
     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
     *
     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
     *
     * - ignored if `calendars` equals more than `1` on range pickers.
     * @default false
     */
    showDaysOutsideCurrentMonth: import_prop_types120.default.bool,
    /**
     * If `true`, disabled digital clock items will not be rendered.
     * @default false
     */
    skipDisabled: import_prop_types120.default.bool,
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps: import_prop_types120.default.object,
    /**
     * Overridable component slots.
     * @default {}
     */
    slots: import_prop_types120.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types120.default.oneOfType([import_prop_types120.default.arrayOf(import_prop_types120.default.oneOfType([import_prop_types120.default.func, import_prop_types120.default.object, import_prop_types120.default.bool])), import_prop_types120.default.func, import_prop_types120.default.object]),
    /**
     * Amount of time options below or at which the single column time renderer is used.
     * @default 24
     */
    thresholdToRenderTimeInASingleColumn: import_prop_types120.default.number,
    /**
     * The time steps between two time unit options.
     * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
     * When single column time renderer is used, only `timeStep.minutes` will be used.
     * @default{ hours: 1, minutes: 5, seconds: 5 }
     */
    timeSteps: import_prop_types120.default.shape({
      hours: import_prop_types120.default.number,
      minutes: import_prop_types120.default.number,
      seconds: import_prop_types120.default.number
    }),
    /**
     * Choose which timezone to use for the value.
     * Example: "default", "system", "UTC", "America/New_York".
     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
     */
    timezone: import_prop_types120.default.string,
    /**
     * The selected value.
     * Used when the component is controlled.
     */
    value: import_prop_types120.default.object,
    /**
     * The visible view.
     * Used when the component view is controlled.
     * Must be a valid option from `views` list.
     */
    view: import_prop_types120.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
    /**
     * Define custom view renderers for each section.
     * If `null`, the section will only have field editing.
     * If `undefined`, internally defined view will be used.
     */
    viewRenderers: import_prop_types120.default.shape({
      day: import_prop_types120.default.func,
      hours: import_prop_types120.default.func,
      meridiem: import_prop_types120.default.func,
      minutes: import_prop_types120.default.func,
      month: import_prop_types120.default.func,
      seconds: import_prop_types120.default.func,
      year: import_prop_types120.default.func
    }),
    /**
     * Available views.
     */
    views: import_prop_types120.default.arrayOf(import_prop_types120.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
    /**
     * Years rendered per row.
     * @default 4 on desktop, 3 on mobile
     */
    yearsPerRow: import_prop_types120.default.oneOf([3, 4])
  } : void 0;

  // node_modules/@mui/x-date-pickers/AdapterDayjs/AdapterDayjs.js
  init_extends();
  var import_dayjs = __toESM(require_dayjs_min());
  var import_weekOfYear = __toESM(require_weekOfYear());
  var import_customParseFormat = __toESM(require_customParseFormat());
  var import_localizedFormat = __toESM(require_localizedFormat());
  var import_isBetween = __toESM(require_isBetween());
  var import_advancedFormat = __toESM(require_advancedFormat());
  import_dayjs.default.extend(import_localizedFormat.default);
  import_dayjs.default.extend(import_weekOfYear.default);
  import_dayjs.default.extend(import_isBetween.default);
  import_dayjs.default.extend(import_advancedFormat.default);
  var formatTokenMap = {
    // Year
    YY: "year",
    YYYY: {
      sectionType: "year",
      contentType: "digit",
      maxLength: 4
    },
    // Month
    M: {
      sectionType: "month",
      contentType: "digit",
      maxLength: 2
    },
    MM: "month",
    MMM: {
      sectionType: "month",
      contentType: "letter"
    },
    MMMM: {
      sectionType: "month",
      contentType: "letter"
    },
    // Day of the month
    D: {
      sectionType: "day",
      contentType: "digit",
      maxLength: 2
    },
    DD: "day",
    Do: {
      sectionType: "day",
      contentType: "digit-with-letter"
    },
    // Day of the week
    d: {
      sectionType: "weekDay",
      contentType: "digit",
      maxLength: 2
    },
    dd: {
      sectionType: "weekDay",
      contentType: "letter"
    },
    ddd: {
      sectionType: "weekDay",
      contentType: "letter"
    },
    dddd: {
      sectionType: "weekDay",
      contentType: "letter"
    },
    // Meridiem
    A: "meridiem",
    a: "meridiem",
    // Hours
    H: {
      sectionType: "hours",
      contentType: "digit",
      maxLength: 2
    },
    HH: "hours",
    h: {
      sectionType: "hours",
      contentType: "digit",
      maxLength: 2
    },
    hh: "hours",
    // Minutes
    m: {
      sectionType: "minutes",
      contentType: "digit",
      maxLength: 2
    },
    mm: "minutes",
    // Seconds
    s: {
      sectionType: "seconds",
      contentType: "digit",
      maxLength: 2
    },
    ss: "seconds"
  };
  var defaultFormats = {
    year: "YYYY",
    month: "MMMM",
    monthShort: "MMM",
    dayOfMonth: "D",
    dayOfMonthFull: "Do",
    weekday: "dddd",
    weekdayShort: "dd",
    hours24h: "HH",
    hours12h: "hh",
    meridiem: "A",
    minutes: "mm",
    seconds: "ss",
    fullDate: "ll",
    keyboardDate: "L",
    shortDate: "MMM D",
    normalDate: "D MMMM",
    normalDateWithWeekday: "ddd, MMM D",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    keyboardDateTime: "L LT",
    keyboardDateTime12h: "L hh:mm A",
    keyboardDateTime24h: "L HH:mm"
  };
  var MISSING_UTC_PLUGIN = ["Missing UTC plugin", "To be able to use UTC or timezones, you have to enable the `utc` plugin", "Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc"].join("\n");
  var MISSING_TIMEZONE_PLUGIN = ["Missing timezone plugin", "To be able to use timezones, you have to enable both the `utc` and the `timezone` plugin", "Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone"].join("\n");
  var withLocale = (dayjs2, locale) => !locale ? dayjs2 : (...args) => dayjs2(...args).locale(locale);
  var AdapterDayjs = class {
    constructor({
      locale: _locale,
      formats
    } = {}) {
      this.isMUIAdapter = true;
      this.isTimezoneCompatible = true;
      this.lib = "dayjs";
      this.dayjs = void 0;
      this.locale = void 0;
      this.formats = void 0;
      this.escapedCharacters = {
        start: "[",
        end: "]"
      };
      this.formatTokenMap = formatTokenMap;
      this.setLocaleToValue = (value) => {
        const expectedLocale = this.getCurrentLocaleCode();
        if (expectedLocale === value.locale()) {
          return value;
        }
        return value.locale(expectedLocale);
      };
      this.hasUTCPlugin = () => typeof import_dayjs.default.utc !== "undefined";
      this.hasTimezonePlugin = () => typeof import_dayjs.default.tz !== "undefined";
      this.isSame = (value, comparing, comparisonTemplate) => {
        const comparingInValueTimezone = this.setTimezone(comparing, this.getTimezone(value));
        return value.format(comparisonTemplate) === comparingInValueTimezone.format(comparisonTemplate);
      };
      this.cleanTimezone = (timezone) => {
        switch (timezone) {
          case "default": {
            return void 0;
          }
          case "system": {
            return import_dayjs.default.tz.guess();
          }
          default: {
            return timezone;
          }
        }
      };
      this.createSystemDate = (value) => {
        if (this.hasUTCPlugin() && this.hasTimezonePlugin()) {
          const timezone = import_dayjs.default.tz.guess();
          if (timezone !== "UTC") {
            return import_dayjs.default.tz(value, timezone);
          }
          return (0, import_dayjs.default)(value);
        }
        return (0, import_dayjs.default)(value);
      };
      this.createUTCDate = (value) => {
        if (!this.hasUTCPlugin()) {
          throw new Error(MISSING_UTC_PLUGIN);
        }
        return import_dayjs.default.utc(value);
      };
      this.createTZDate = (value, timezone) => {
        if (!this.hasUTCPlugin()) {
          throw new Error(MISSING_UTC_PLUGIN);
        }
        if (!this.hasTimezonePlugin()) {
          throw new Error(MISSING_TIMEZONE_PLUGIN);
        }
        const keepLocalTime = value !== void 0 && !value.endsWith("Z");
        return (0, import_dayjs.default)(value).tz(this.cleanTimezone(timezone), keepLocalTime);
      };
      this.getLocaleFormats = () => {
        const locales = import_dayjs.default.Ls;
        const locale = this.locale || "en";
        let localeObject = locales[locale];
        if (localeObject === void 0) {
          if (true) {
            warnOnce(["MUI X: Your locale has not been found.", "Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale.", "Or you forget to import the locale from 'dayjs/locale/{localeUsed}'", "fallback on English locale."]);
          }
          localeObject = locales.en;
        }
        return localeObject.formats;
      };
      this.adjustOffset = (value) => {
        if (!this.hasTimezonePlugin()) {
          return value;
        }
        const timezone = this.getTimezone(value);
        if (timezone !== "UTC") {
          const fixedValue = value.tz(this.cleanTimezone(timezone), true);
          if (fixedValue.$offset === (value.$offset ?? 0)) {
            return value;
          }
          value.$offset = fixedValue.$offset;
        }
        return value;
      };
      this.date = (value, timezone = "default") => {
        if (value === null) {
          return null;
        }
        let parsedValue;
        if (timezone === "UTC") {
          parsedValue = this.createUTCDate(value);
        } else if (timezone === "system" || timezone === "default" && !this.hasTimezonePlugin()) {
          parsedValue = this.createSystemDate(value);
        } else {
          parsedValue = this.createTZDate(value, timezone);
        }
        if (this.locale === void 0) {
          return parsedValue;
        }
        return parsedValue.locale(this.locale);
      };
      this.getInvalidDate = () => (0, import_dayjs.default)(/* @__PURE__ */ new Date("Invalid date"));
      this.getTimezone = (value) => {
        if (this.hasTimezonePlugin()) {
          const zone = value.$x?.$timezone;
          if (zone) {
            return zone;
          }
        }
        if (this.hasUTCPlugin() && value.isUTC()) {
          return "UTC";
        }
        return "system";
      };
      this.setTimezone = (value, timezone) => {
        if (this.getTimezone(value) === timezone) {
          return value;
        }
        if (timezone === "UTC") {
          if (!this.hasUTCPlugin()) {
            throw new Error(MISSING_UTC_PLUGIN);
          }
          return value.utc();
        }
        if (timezone === "system") {
          return value.local();
        }
        if (!this.hasTimezonePlugin()) {
          if (timezone === "default") {
            return value;
          }
          throw new Error(MISSING_TIMEZONE_PLUGIN);
        }
        return import_dayjs.default.tz(value, this.cleanTimezone(timezone));
      };
      this.toJsDate = (value) => {
        return value.toDate();
      };
      this.parse = (value, format) => {
        if (value === "") {
          return null;
        }
        return this.dayjs(value, format, this.locale, true);
      };
      this.getCurrentLocaleCode = () => {
        return this.locale || "en";
      };
      this.is12HourCycleInCurrentLocale = () => {
        return /A|a/.test(this.getLocaleFormats().LT || "");
      };
      this.expandFormat = (format) => {
        const localeFormats = this.getLocaleFormats();
        const t = (formatBis) => formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_2, a, b) => a || b.slice(1));
        return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_2, a, b) => {
          const B = b && b.toUpperCase();
          return a || localeFormats[b] || t(localeFormats[B]);
        });
      };
      this.isValid = (value) => {
        if (value == null) {
          return false;
        }
        return value.isValid();
      };
      this.format = (value, formatKey) => {
        return this.formatByString(value, this.formats[formatKey]);
      };
      this.formatByString = (value, formatString) => {
        return this.dayjs(value).format(formatString);
      };
      this.formatNumber = (numberToFormat) => {
        return numberToFormat;
      };
      this.isEqual = (value, comparing) => {
        if (value === null && comparing === null) {
          return true;
        }
        if (value === null || comparing === null) {
          return false;
        }
        return value.toDate().getTime() === comparing.toDate().getTime();
      };
      this.isSameYear = (value, comparing) => {
        return this.isSame(value, comparing, "YYYY");
      };
      this.isSameMonth = (value, comparing) => {
        return this.isSame(value, comparing, "YYYY-MM");
      };
      this.isSameDay = (value, comparing) => {
        return this.isSame(value, comparing, "YYYY-MM-DD");
      };
      this.isSameHour = (value, comparing) => {
        return value.isSame(comparing, "hour");
      };
      this.isAfter = (value, comparing) => {
        return value > comparing;
      };
      this.isAfterYear = (value, comparing) => {
        if (!this.hasUTCPlugin()) {
          return value.isAfter(comparing, "year");
        }
        return !this.isSameYear(value, comparing) && value.utc() > comparing.utc();
      };
      this.isAfterDay = (value, comparing) => {
        if (!this.hasUTCPlugin()) {
          return value.isAfter(comparing, "day");
        }
        return !this.isSameDay(value, comparing) && value.utc() > comparing.utc();
      };
      this.isBefore = (value, comparing) => {
        return value < comparing;
      };
      this.isBeforeYear = (value, comparing) => {
        if (!this.hasUTCPlugin()) {
          return value.isBefore(comparing, "year");
        }
        return !this.isSameYear(value, comparing) && value.utc() < comparing.utc();
      };
      this.isBeforeDay = (value, comparing) => {
        if (!this.hasUTCPlugin()) {
          return value.isBefore(comparing, "day");
        }
        return !this.isSameDay(value, comparing) && value.utc() < comparing.utc();
      };
      this.isWithinRange = (value, [start2, end2]) => {
        return value >= start2 && value <= end2;
      };
      this.startOfYear = (value) => {
        return this.adjustOffset(value.startOf("year"));
      };
      this.startOfMonth = (value) => {
        return this.adjustOffset(value.startOf("month"));
      };
      this.startOfWeek = (value) => {
        return this.adjustOffset(this.setLocaleToValue(value).startOf("week"));
      };
      this.startOfDay = (value) => {
        return this.adjustOffset(value.startOf("day"));
      };
      this.endOfYear = (value) => {
        return this.adjustOffset(value.endOf("year"));
      };
      this.endOfMonth = (value) => {
        return this.adjustOffset(value.endOf("month"));
      };
      this.endOfWeek = (value) => {
        return this.adjustOffset(this.setLocaleToValue(value).endOf("week"));
      };
      this.endOfDay = (value) => {
        return this.adjustOffset(value.endOf("day"));
      };
      this.addYears = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "year") : value.add(amount, "year"));
      };
      this.addMonths = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "month") : value.add(amount, "month"));
      };
      this.addWeeks = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "week") : value.add(amount, "week"));
      };
      this.addDays = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "day") : value.add(amount, "day"));
      };
      this.addHours = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "hour") : value.add(amount, "hour"));
      };
      this.addMinutes = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "minute") : value.add(amount, "minute"));
      };
      this.addSeconds = (value, amount) => {
        return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), "second") : value.add(amount, "second"));
      };
      this.getYear = (value) => {
        return value.year();
      };
      this.getMonth = (value) => {
        return value.month();
      };
      this.getDate = (value) => {
        return value.date();
      };
      this.getHours = (value) => {
        return value.hour();
      };
      this.getMinutes = (value) => {
        return value.minute();
      };
      this.getSeconds = (value) => {
        return value.second();
      };
      this.getMilliseconds = (value) => {
        return value.millisecond();
      };
      this.setYear = (value, year) => {
        return this.adjustOffset(value.set("year", year));
      };
      this.setMonth = (value, month) => {
        return this.adjustOffset(value.set("month", month));
      };
      this.setDate = (value, date) => {
        return this.adjustOffset(value.set("date", date));
      };
      this.setHours = (value, hours) => {
        return this.adjustOffset(value.set("hour", hours));
      };
      this.setMinutes = (value, minutes) => {
        return this.adjustOffset(value.set("minute", minutes));
      };
      this.setSeconds = (value, seconds) => {
        return this.adjustOffset(value.set("second", seconds));
      };
      this.setMilliseconds = (value, milliseconds) => {
        return this.adjustOffset(value.set("millisecond", milliseconds));
      };
      this.getDaysInMonth = (value) => {
        return value.daysInMonth();
      };
      this.getWeekArray = (value) => {
        const start2 = this.startOfWeek(this.startOfMonth(value));
        const end2 = this.endOfWeek(this.endOfMonth(value));
        let count = 0;
        let current = start2;
        const nestedWeeks = [];
        while (current < end2) {
          const weekNumber = Math.floor(count / 7);
          nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
          nestedWeeks[weekNumber].push(current);
          current = this.addDays(current, 1);
          count += 1;
        }
        return nestedWeeks;
      };
      this.getWeekNumber = (value) => {
        return value.week();
      };
      this.getYearRange = ([start2, end2]) => {
        const startDate = this.startOfYear(start2);
        const endDate = this.endOfYear(end2);
        const years = [];
        let current = startDate;
        while (this.isBefore(current, endDate)) {
          years.push(current);
          current = this.addYears(current, 1);
        }
        return years;
      };
      this.dayjs = withLocale(import_dayjs.default, _locale);
      this.locale = _locale;
      this.formats = _extends({}, defaultFormats, formats);
      import_dayjs.default.extend(import_customParseFormat.default);
    }
    getDayOfWeek(value) {
      return value.day() + 1;
    }
  };

  // build/api/postCalendarEventEndpoint.js
  var postCalendarEventEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.POST, "/calendar/event", false);
      this.datamap = {
        calendarId: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.BODY, required: true },
        start_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true },
        end_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true },
        summary: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.BODY, required: true },
        allday: { type: Endpoint.PropertyType.BOOLEAN, source: Endpoint.Source.BODY, required: true },
        colorId: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true },
        time_zone: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.BODY, required: true }
      };
    }
    reset() {
      this.request = {
        calendarId: Endpoint.InitValue,
        start_date: Endpoint.InitValue,
        end_date: Endpoint.InitValue,
        summary: Endpoint.InitValue,
        allday: Endpoint.InitValue,
        colorId: Endpoint.InitValue,
        time_zone: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(postCalendarEventEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = postCalendarEventEndpoint2.Error || (postCalendarEventEndpoint2.Error = {}));
  })(postCalendarEventEndpoint || (postCalendarEventEndpoint = {}));

  // build/api/putCalendarEventEndpoint.js
  var putCalendarEventEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.PUT, "/calendar/event/:calendarId/:id", false);
      this.datamap = {
        calendarId: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.PARAM, required: true },
        id: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.PARAM, required: true },
        start_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true },
        end_date: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true },
        summary: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.BODY, required: true },
        allday: { type: Endpoint.PropertyType.BOOLEAN, source: Endpoint.Source.BODY, required: true },
        colorId: { type: Endpoint.PropertyType.NUMBER, source: Endpoint.Source.BODY, required: true }
      };
    }
    reset() {
      this.request = {
        calendarId: Endpoint.InitValue,
        id: Endpoint.InitValue,
        start_date: Endpoint.InitValue,
        end_date: Endpoint.InitValue,
        summary: Endpoint.InitValue,
        allday: Endpoint.InitValue,
        colorId: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(putCalendarEventEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = putCalendarEventEndpoint2.Error || (putCalendarEventEndpoint2.Error = {}));
  })(putCalendarEventEndpoint || (putCalendarEventEndpoint = {}));

  // build/client/modules/calendar/icons/CircleIcon.js
  var import_react21 = __toESM(require_react(), 1);
  var Icon13 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react21.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react21.default.createElement("circle", { cx: "8", cy: "8", r: "8", fill: color3 })
  );

  // build/client/modules/calendar/EditEvent.js
  var __awaiter6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function EditEvent(props) {
    const [appdata2, setAppData] = React226.useState(AppData_default.instance());
    const [summary, setSummary] = React226.useState(props.event ? props.event.summary : "");
    const [start_date, setStartDate] = React226.useState(null);
    const [end_date, setEndDate] = React226.useState(null);
    const [all_day, setAllday] = React226.useState(props.event ? props.event.allday : true);
    const [color3, setColor] = React226.useState(props.event ? props.event.color : AppData_default.event_colors[0]);
    const [color_name, setColorName] = React226.useState(props.event ? props.event.color : AppData_default.event_colors[0]);
    const [date_error, setDateError] = React226.useState("Error");
    const [anchorEl, setAnchorEl] = React226.useState(null);
    React226.useEffect(() => pageLoaded(), []);
    React226.useEffect(() => () => pageUnloaded(), []);
    React226.useEffect(dateChanged, [start_date, end_date]);
    if (props.event == null)
      React226.useEffect(allDayChanged, [all_day]);
    React226.useEffect(eventChanged, [props.event]);
    React226.useEffect(colorChanged, [color3]);
    function pageLoaded() {
      setStartDate((0, import_dayjs2.default)(props.date));
      setEndDate((0, import_dayjs2.default)(props.date));
    }
    function pageUnloaded() {
    }
    function timeToString(date, amt) {
      let hours = Math.floor(amt / 60);
      let minutes = amt - hours * 60;
      const str = StringUtils_default.format("{0}/{1}/{2} {3}:{4}", date.substring(0, 4), date.substring(4, 6), date.substring(6, 8), StringUtils_default.leadingZero(hours, 2), StringUtils_default.leadingZero(minutes, 2));
      const dt = new Date(str);
      return dt;
    }
    function eventChanged() {
      if (ObjectUtils.notNull(props.event)) {
        if (props.event.allday) {
          setStartDate((0, import_dayjs2.default)(props.event.start_date, "YYYYMMDD"));
          setEndDate((0, import_dayjs2.default)(props.event.end_date, "YYYYMMDD"));
        } else {
          setStartDate((0, import_dayjs2.default)(timeToString(props.event.start_date, props.event.start_time)));
          setEndDate((0, import_dayjs2.default)(timeToString(props.event.end_date, props.event.end_time)));
        }
      }
    }
    function dateChanged() {
      if (start_date && end_date) {
        if (start_date.valueOf() > end_date.valueOf()) {
          setDateError("End needs to be after Start date and time");
        } else {
          setDateError("");
        }
      }
    }
    function allDayChanged() {
      if (!all_day) {
        const now2 = /* @__PURE__ */ new Date();
        let start2 = new Date(start_date.valueOf());
        start2.setHours(now2.getHours(), 0, 0, 0);
        let end2 = new Date(start2);
        end2.setMinutes(appdata2.settings.events.default_duration, 0, 0);
        setStartDate((0, import_dayjs2.default)(start2));
        setEndDate((0, import_dayjs2.default)(end2));
      }
    }
    function onAllDay(event, checked) {
      setAllday(checked);
    }
    function onClose() {
      props.onClose();
    }
    function onSave() {
      doSave();
    }
    function doSave() {
      return __awaiter6(this, void 0, void 0, function* () {
        if (ObjectUtils.notNull(props.event))
          yield doUpdateSave();
        else
          yield doNewSave();
        props.onSave();
      });
    }
    function getColorIndex() {
      let i;
      for (i = 0; i < AppData_default.event_colors.length; i++) {
        if (AppData_default.event_colors[i] == color3)
          return i;
      }
      return 0;
    }
    function doUpdateSave() {
      return __awaiter6(this, void 0, void 0, function* () {
        const endpt = new putCalendarEventEndpoint();
        endpt.request.calendarId = "primary";
        endpt.request.id = props.event.id;
        endpt.request.start_date = start_date.valueOf();
        endpt.request.end_date = all_day ? end_date.valueOf() + Constants.DAYS_TO_MS : end_date.valueOf();
        endpt.request.summary = summary;
        endpt.request.allday = all_day;
        endpt.request.colorId = getColorIndex() + 1;
        const reply = yield appdata2.webserver.fetch(endpt);
        if (reply.ok) {
          const data = reply.data;
        } else {
          switch (reply.error.code) {
            case putCalendarEventEndpoint.Error.NOT_AUTHORIZED:
              break;
          }
        }
      });
    }
    function doNewSave() {
      return __awaiter6(this, void 0, void 0, function* () {
        const endpt = new postCalendarEventEndpoint();
        endpt.request.calendarId = "primary";
        endpt.request.start_date = start_date.valueOf();
        endpt.request.end_date = all_day ? end_date.valueOf() + Constants.DAYS_TO_MS : end_date.valueOf();
        endpt.request.summary = summary;
        endpt.request.allday = all_day;
        endpt.request.colorId = getColorIndex() + 1;
        endpt.request.time_zone = appdata2.settings.location.timezone;
        const reply = yield appdata2.webserver.fetch(endpt);
        if (reply.ok) {
          const data = reply.data;
        } else {
          switch (reply.error.code) {
            case postCalendarEventEndpoint.Error.NOT_AUTHORIZED:
              break;
          }
        }
      });
    }
    function showColorPicker(event) {
      setAnchorEl(event.currentTarget);
    }
    function onCloseMenu() {
      setAnchorEl(null);
    }
    function onPickColor(index) {
      setColor(AppData_default.event_colors[index]);
      onCloseMenu();
    }
    function colorChanged() {
      if (appdata2.settings.persons.length > 0)
        setColorName(appdata2.settings.persons[getColorIndex()].name);
    }
    function colorMenu() {
      let color_names = [];
      AppData_default.event_colors.forEach((color4) => {
        color_names.push({ color: color4, name: "" });
      });
      let i;
      for (i = 0; i < appdata2.settings.persons.length; i++) {
        if (appdata2.settings.persons[i].name != "")
          color_names[i].name = appdata2.settings.persons[i].name;
      }
      let menu = React226.createElement(Menu_default, { id: "color-menu", anchorEl, open: anchorEl != null, onClose: onCloseMenu, MenuListProps: { "aria-labelledby": "basic-button" } }, color_names.map((cn, index) => {
        return React226.createElement(
          MenuItem_default,
          { key: "cn_" + index.toString(), onClick: () => onPickColor(index) },
          React226.createElement(
            ListItemIcon_default,
            null,
            React226.createElement(Icon13, { color: cn.color })
          ),
          React226.createElement(Typography_default, { variant: "inherit" }, cn.name)
        );
      }));
      return menu;
    }
    return React226.createElement(
      Dialog_default,
      { onClose, open: true },
      React226.createElement(DialogTitle_default, null, "Edit Event"),
      React226.createElement(
        DialogContent_default,
        { dividers: true },
        React226.createElement(
          Stack_default,
          { direction: "column", spacing: 0, gap: 2, width: "100%" },
          React226.createElement(TextField_default, { label: "Summary", variant: "outlined", error: summary == "", helperText: summary == "" ? "" : "Summary description missing", value: summary, onChange: (event) => setSummary(event.target.value) }),
          React226.createElement(LocalizationProvider, { dateAdapter: AdapterDayjs }, all_day ? React226.createElement(
            Stack_default,
            { direction: "row", spacing: 0, gap: 1, width: "100%" },
            React226.createElement(DatePicker, { label: "Start", value: start_date, onChange: setStartDate }),
            React226.createElement(Typography_default, { sx: { paddingTop: 2 } }, "to"),
            React226.createElement(DatePicker, { label: "End", value: end_date, onChange: setEndDate })
          ) : React226.createElement(
            Stack_default,
            { direction: "row", spacing: 0, gap: 1, width: "100%" },
            React226.createElement(DateTimePicker, { label: "Start", value: start_date, onChange: setStartDate }),
            React226.createElement(Typography_default, { sx: { paddingTop: 2 } }, "to"),
            React226.createElement(DateTimePicker, { label: "End", value: end_date, onChange: setEndDate })
          )),
          date_error ? React226.createElement(Typography_default, { color: "error" }, date_error) : null,
          React226.createElement(
            Stack_default,
            { direction: "row", spacing: 0, gap: 1, width: "100%" },
            React226.createElement(FormControlLabel_default, { required: false, control: React226.createElement(Checkbox_default, { checked: all_day, onChange: onAllDay }), label: "All Day" }),
            React226.createElement(Button_default, { variant: "outlined", startIcon: React226.createElement(Icon13, { color: color3 }), onClick: showColorPicker }, color_name),
            colorMenu()
          )
        )
      ),
      React226.createElement(
        DialogActions_default,
        null,
        React226.createElement(Button_default, { variant: "outlined", onClick: onClose }, "Cancel"),
        React226.createElement(Button_default, { variant: "contained", onClick: onSave, disabled: date_error != "" || summary == "" }, "Save")
      )
    );
  }

  // build/client/modules/calendar/ListEvents.js
  var React227 = __toESM(require_react(), 1);

  // build/api/deleteCalendarEventEndpoint.js
  var deleteCalendarEventEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.DELETE, "/calendar/event/:calendarId/:id", false);
      this.datamap = {
        calendarId: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.PARAM, required: true },
        id: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.PARAM, required: true }
      };
    }
    reset() {
      this.request = {
        calendarId: Endpoint.InitValue,
        id: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(deleteCalendarEventEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = deleteCalendarEventEndpoint2.Error || (deleteCalendarEventEndpoint2.Error = {}));
  })(deleteCalendarEventEndpoint || (deleteCalendarEventEndpoint = {}));

  // build/client/modules/calendar/ListEvents.js
  var __awaiter7 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function ListEvents(props) {
    const [appdata2, setAppData] = React227.useState(AppData_default.instance());
    const [delete_event, setDeleteEvent] = React227.useState(null);
    React227.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
    }
    function onClose() {
      props.onClose();
    }
    function onAdd() {
      props.onAdd();
    }
    function onSave() {
      doSave();
    }
    function doSave() {
      return __awaiter7(this, void 0, void 0, function* () {
        props.onSave();
      });
    }
    function doUpdateSave() {
      return __awaiter7(this, void 0, void 0, function* () {
      });
    }
    function doNewSave() {
      return __awaiter7(this, void 0, void 0, function* () {
      });
    }
    function toDateString(dt) {
      return StringUtils_default.format("{0}/{1}", dt.substring(4, 6), dt.substring(6, 8));
    }
    function eventDate(event) {
      let str = toDateString(event.start_date);
      if (event.end_date != event.start_date) {
        str += " - ";
        str += toDateString(event.end_date);
      }
      return str;
    }
    function onDelete(event) {
      setDeleteEvent(event);
    }
    function onEventClick(id) {
      props.onEdit(id);
    }
    function onDeleteEvent(action) {
      if (action == AlertAction2.YES) {
        doDelete();
      }
      setDeleteEvent(null);
    }
    function doDelete() {
      return __awaiter7(this, void 0, void 0, function* () {
        const endpt = new deleteCalendarEventEndpoint();
        endpt.request.calendarId = "primary";
        endpt.request.id = delete_event.id;
        const reply = yield appdata2.webserver.fetch(endpt);
        if (reply.ok) {
          props.onDeleted();
        } else {
          switch (reply.error.code) {
            case deleteCalendarEventEndpoint.Error.NOT_AUTHORIZED:
              break;
          }
        }
      });
    }
    return React227.createElement(
      "div",
      null,
      React227.createElement(
        Dialog_default,
        { onClose, open: true, sx: { width: 575, left: (window.outerWidth - 575) / 2 }, fullWidth: true },
        React227.createElement(DialogTitle_default, null, "Events: " + props.date.toLocaleDateString()),
        React227.createElement(
          DialogContent_default,
          { dividers: true },
          React227.createElement(List_default, { sx: { width: "100%", maxWidth: 550, bgcolor: "background.paper" } }, props.events.map((event, index) => {
            return React227.createElement(
              ListItem_default,
              { key: event.id, secondaryAction: React227.createElement(
                IconButton_default,
                { edge: "end", "aria-label": "delete", onClick: (evt) => onDelete(event) },
                React227.createElement(Delete_default, null)
              ) },
              React227.createElement(
                IconButton_default,
                { sx: { marginRight: 2 }, onClick: (evt) => onEventClick(event.id) },
                React227.createElement(Edit_default, null)
              ),
              React227.createElement(ListItemText_default, { primary: event.summary, secondary: eventDate(event) })
            );
          }))
        ),
        React227.createElement(
          DialogActions_default,
          null,
          React227.createElement(Button_default, { variant: "outlined", onClick: onAdd }, "Add"),
          React227.createElement(Button_default, { variant: "contained", onClick: onClose }, "Close")
        )
      ),
      delete_event != null ? React227.createElement(AlertPrompt, { open: true, title: "Delete Event", message: "Are you certain you want to delete '" + delete_event.summary + "'", canelText: "Cancel", yesText: "Delete", onAction: onDeleteEvent }) : null
    );
  }

  // build/client/modules/calendar/MonthlyView.js
  var __awaiter8 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function MonthlyView(props) {
    const [appdata2, setAppData] = React228.useState(AppData_default.instance());
    const view = React228.useRef(null);
    const dow = React228.useRef(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    const month = React228.useRef(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
    const cells = React228.useRef([]);
    const max_events_per_day = React228.useRef(4);
    const [start_date, setStartDate] = React228.useState(null);
    const [edit_date, setEditdate] = React228.useState(null);
    const [events, setEvents] = React228.useState([]);
    const [show_editor, showEditor] = React228.useState(false);
    const [show_list, showList] = React228.useState(false);
    const [edit_events, setEditEvents] = React228.useState([]);
    const [edit_event, setEditEvent] = React228.useState(null);
    const [request_login, requestLogin] = React228.useState(false);
    React228.useEffect(() => pageLoaded(), []);
    React228.useEffect(onStartChange, [start_date]);
    React228.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      onToday();
    }
    function pageUnloaded() {
    }
    function refresh() {
    }
    function createDate(value) {
      let dtstr = value.indexOf("T") > 0 ? value : StringUtils_default.replaceAll(value, "-", "/");
      return new Date(dtstr);
    }
    function clearCellRows() {
      let j;
      for (j = 0; j < cells.current.length; j++) {
        cells.current[j].events = [];
      }
    }
    function addCellRow() {
      let j;
      for (j = 0; j < cells.current.length; j++) {
        cells.current[j].events.push(null);
      }
    }
    function minutesSinceMidnight(date) {
      let day = new Date(date.getTime());
      day.setHours(0, 0, 0, 0);
      return (date.getTime() - day.getTime()) / Constants.MINUTES_TO_MS;
    }
    function orderEvent(a, b) {
      if (a.start < b.start)
        return -1;
      else if (a.start > b.start)
        return 1;
      else
        return 0;
    }
    function renderEvents(past_date, celldate_id, row, col) {
      if (events.length == 0)
        return null;
      const max_nbr_events = 3;
      let event_elements = [];
      const idx = row * 7 + col;
      const cell_width = Math.ceil(view.current.offsetWidth / 7) + 1;
      let line2;
      let evt;
      let width3 = cell_width + "px";
      let days;
      const bar_edge_width = 7;
      let color3;
      let nbr_events = 0;
      const opacity = past_date && appdata2.settings.events.dim_past ? 0.33 : 1;
      for (line2 = 0; line2 < events[idx].events.length; line2++) {
        if (events[idx].events[line2] == null) {
          width3 = cell_width + "px";
          event_elements.push(React228.createElement(
            Box_default,
            { key: [row, col, line2].join("-"), component: "section", width: width3, height: "20px" },
            React228.createElement(Typography_default, { sx: { fontSize: 12, lineHeight: 1, padding: 0.5 }, component: "div", color: "text.primary" })
          ));
        } else {
          evt = events[idx].events[line2];
          days = evt.days;
          color3 = evt.color ? evt.color : "#616161";
          if (events[idx].events[line2].start_date == celldate_id || col == 0) {
            if (nbr_events < max_nbr_events) {
              event_elements.push(React228.createElement(
                Stack_default,
                { key: evt.id + "_stk", direction: "row", spacing: 0, gap: 0, width: cell_width + "px" },
                React228.createElement(Box_default, { key: evt.id + "_indicator", component: "section", width: bar_edge_width + "px", height: "20px", sx: { borderRadius: 0, bgcolor: "#424242", opacity, borderRight: 1, borderRightColor: "#bdbdbd" } }),
                React228.createElement(
                  Box_default,
                  { key: evt.id, component: "section", width: cell_width - bar_edge_width + "px", height: "20px", sx: { borderRadius: 0, bgcolor: color3, opacity } },
                  React228.createElement(Typography_default, { noWrap: true, sx: { fontSize: 12, lineHeight: 1, padding: 0.5 }, component: "div", color: "text.primary" }, evt.summary)
                )
              ));
            }
            nbr_events++;
          } else {
            event_elements.push(React228.createElement(Box_default, { key: evt.id, component: "section", width: cell_width + "px", height: "20px", sx: { borderRadius: 0, bgcolor: color3, opacity } }));
          }
        }
      }
      if (nbr_events > max_nbr_events) {
        event_elements.push(React228.createElement(
          Box_default,
          { key: [row, col, line2].join("-"), component: "section", width: width3, height: "20px" },
          React228.createElement(Typography_default, { sx: { fontSize: 12, lineHeight: 1, padding: 0.5 }, component: "div", color: "text.primary" }, nbr_events - max_nbr_events + " more...")
        ));
      }
      return event_elements;
    }
    function renderCellInside(today, cell_date, row, col) {
      let label = "";
      let date_color = "text.primary";
      if (cell_date.getDate() == 1 || row == 0 && col == 0) {
        label = StringUtils_default.format("{0} ", month.current[cell_date.getMonth()]);
        date_color = "primary";
      }
      label += cell_date.getDate();
      let banner = { display: "flex", justifyContent: "center", paddingTop: 0.5, paddingRight: 0.5, paddingBottom: 0.5 };
      if (today.getTime() == cell_date.getTime())
        date_color = "error";
      const past_date = cell_date.getTime() < today.getTime();
      return React228.createElement(
        Stack_default,
        { direction: "column", spacing: 0, gap: 0.3, width: "100%" },
        React228.createElement(
          Box_default,
          { key: "in_" + cell_date.getTime() / 1e3, sx: banner },
          React228.createElement(Typography_default, { sx: { fontSize: 40, lineHeight: 1, padding: 0 }, component: "div", color: date_color }, label)
        ),
        renderEvents(past_date, dateId(cell_date), row, col)
      );
    }
    function renderCell(today, row, col, maxRow) {
      const cell_date = new Date(start_date.getTime() + (row * 7 + col) * Constants.DAYS_TO_MS);
      let sx = { p: 0, borderTop: "1px solid grey" };
      if (row == maxRow - 1)
        sx["borderBottom"] = "1px solid grey";
      return React228.createElement(Box_default, { key: cell_date.getTime(), onClick: (evt) => onDateClick(cell_date, row, col), component: "section", width: "100%", height: "140px", sx }, renderCellInside(today, cell_date, row, col));
    }
    function renderRow(today, row, maxRow) {
      let rowel = React228.createElement(Stack_default, { key: row, direction: "row", spacing: 0, gap: 0, width: "100%" }, dow.current.map((dow2, col) => {
        return renderCell(today, row, col, maxRow);
      }));
      return rowel;
    }
    function renderDow(dow2) {
      return React228.createElement(
        Box_default,
        { key: dow2, component: "section", width: "100%", sx: { display: "flex", justifyContent: "center" } },
        React228.createElement(Typography_default, { sx: { fontSize: 42, lineHeight: 1, padding: 1 }, component: "div", color: "text.primary" }, dow2.charAt(0))
      );
    }
    function renderHeader() {
      let dows = [];
      let i;
      for (i = appdata2.settings.calendar.start_dow; i < dow.current.length; i++) {
        dows.push(dow.current[i]);
      }
      if (appdata2.settings.calendar.start_dow > 0) {
        for (i = 0; i < appdata2.settings.calendar.start_dow; i++) {
          dows.push(dow.current[i]);
        }
      }
      return React228.createElement(Stack_default, { key: "header", direction: "row", spacing: 0, gap: 0, width: "100%" }, dows.map((dow2) => {
        return renderDow(dow2);
      }));
    }
    function dateId(date) {
      return StringUtils_default.format("{0}{1}{2}", date.getFullYear(), StringUtils_default.leadingZero(date.getMonth() + 1, 2), StringUtils_default.leadingZero(date.getDate(), 2));
    }
    function renderWeeks() {
      if (start_date == null)
        return null;
      const nbr_weeks = Math.ceil(props.days / 7);
      let weeks = [];
      let w;
      const nbr_cells = nbr_weeks * 7;
      let i;
      let date = new Date(start_date);
      cells.current = [];
      for (i = 0; i < nbr_cells; i++) {
        cells.current.push({ date: dateId(date), events: [] });
        date.setTime(date.getTime() + Constants.DAYS_TO_MS);
      }
      let today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      weeks.push(renderHeader());
      for (w = 0; w < nbr_weeks; w++) {
        weeks.push(renderRow(today, w, nbr_weeks));
      }
      return weeks;
    }
    function onStartChange() {
      getEvents();
    }
    function onToday() {
      let today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      let start2 = new Date(today.getTime() - 7 * Constants.DAYS_TO_MS);
      cells.current = [];
      setStartDate(adjustDate(start2));
      setEvents([]);
    }
    function onPrevious() {
      let month2 = start_date.getMonth() - 1;
      let year = start_date.getFullYear();
      if (month2 < 0) {
        month2 = 11;
        year--;
      }
      let prev2 = /* @__PURE__ */ new Date();
      prev2.setFullYear(year);
      prev2.setMonth(month2);
      setStartDate(adjustDate(prev2));
    }
    function onNext() {
      let month2 = start_date.getMonth() + 1;
      let year = start_date.getFullYear();
      if (month2 > 11) {
        month2 = 0;
        year++;
      }
      let next2 = /* @__PURE__ */ new Date();
      next2.setFullYear(year);
      next2.setMonth(month2);
      setStartDate(adjustDate(next2));
    }
    function adjustDate(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      if (date.getDay() != appdata2.settings.calendar.start_dow) {
        date.setTime(date.getTime() - (date.getDay() - appdata2.settings.calendar.start_dow) * Constants.DAYS_TO_MS);
      }
      if (ObjectUtils.notNull(start_date) && date.getMonth() == start_date.getMonth()) {
        let m = date.getMonth() + 1;
        if (m > 11) {
          m = 0;
          date.setFullYear(date.getFullYear() + 1);
        }
        date.setMonth(m);
      }
      return date;
    }
    function getEvents() {
      return __awaiter8(this, void 0, void 0, function* () {
        if (start_date == null)
          return;
        let start2 = new Date(start_date.getTime());
        const nbr_weeks = Math.ceil(props.days / 7);
        let end2 = new Date(start2.getTime() + (nbr_weeks * 7 - 1) * Constants.DAYS_TO_MS);
        end2.setHours(23, 59, 59, 0);
        const endpt = new getCalendarEndpoint();
        endpt.request.start_date = start2.getTime() / 1e3;
        endpt.request.end_date = end2.getTime() / 1e3;
        let ids = [];
        if (appdata2.settings.calendar.ids.length == 0)
          ids.push("primary");
        else
          appdata2.settings.calendar.ids.forEach((id) => {
            ids.push(encodeURIComponent(id));
          });
        endpt.request.ids = ids.join(",");
        const reply = yield appdata2.webserver.fetch(endpt);
        if (reply.ok) {
          const data = reply.data;
          updateEvents(data.events);
        } else {
          console.log("status", reply.error.status);
          switch (reply.error.code) {
            case getCalendarEndpoint.Error.NOT_AUTHORIZED:
              requestLogin(true);
              break;
          }
        }
      });
    }
    function updateEvents(updated_events) {
      let ordered_events = [];
      let i;
      let start2;
      let end2;
      for (i = 0; i < updated_events.length; i++) {
        start2 = createDate(updated_events[i].start.dt);
        end2 = createDate(updated_events[i].end.dt);
        if (updated_events[i].start.allday) {
          end2.setTime(end2.getTime() - Constants.DAYS_TO_MS);
        }
        ordered_events.push({
          id: updated_events[i].id,
          calendar: updated_events[i].calendarId,
          summary: updated_events[i].summary,
          color: updated_events[i].color,
          start: start2.getTime() / Constants.MINUTES_TO_MS,
          start_date: dateId(start2),
          start_time: updated_events[i].start.allday ? 0 : minutesSinceMidnight(start2),
          end_date: dateId(end2),
          end_time: updated_events[i].start.allday ? Constants.MINUTES_TO_DAY : minutesSinceMidnight(end2),
          allday: updated_events[i].start.allday,
          days: Math.floor((end2.getTime() - start2.getTime()) / Constants.DAYS_TO_MS) + 1
        });
      }
      ordered_events.sort(orderEvent);
      clearCellRows();
      let j;
      let k;
      let row;
      let row_found;
      for (i = 0; i < ordered_events.length; i++) {
        for (j = 0; j < cells.current.length; j++) {
          if (cells.current[j].date == ordered_events[i].start_date) {
            row_found = -1;
            for (row = 0; row < cells.current[j].events.length; row++) {
              if (cells.current[j].events[row] == null) {
                row_found = row;
                break;
              }
            }
            if (row_found < 0) {
              addCellRow();
              row_found = cells.current[j].events.length - 1;
            }
            cells.current[j].events[row_found] = ordered_events[i];
            if (ordered_events[i].days > 1) {
              for (k = 1; k < ordered_events[i].days; k++) {
                if (j + k < cells.current.length)
                  cells.current[j + k].events[row_found] = ordered_events[i];
              }
            }
            break;
          }
        }
      }
      setEvents(cells.current);
    }
    function onDateClick(cell_date, row, col) {
      const idx = row * 7 + col;
      let line2;
      let e_events = [];
      for (line2 = 0; line2 < events[idx].events.length; line2++) {
        if (events[idx].events[line2] != null && events[idx].events[line2].calendar === "primary") {
          e_events.push(events[idx].events[line2]);
        }
      }
      setEditEvents(e_events);
      setEditdate(cell_date);
      if (e_events.length > 0)
        showList(true);
      else {
        setEditEvent(null);
        showEditor(true);
      }
    }
    function onEditClose() {
      showEditor(false);
    }
    function onListClose() {
      showList(false);
    }
    function onAddEvent() {
      showList(false);
      setEditEvent(null);
      showEditor(true);
    }
    function onEdit(id) {
      let i;
      let j;
      for (i = 0; i < events.length; i++) {
        for (j = 0; j < events[i].events.length; j++) {
          if (ObjectUtils.notNull(events[i].events[j]) && events[i].events[j].id == id) {
            setEditEvent(events[i].events[j]);
            break;
          }
        }
      }
      showList(false);
      showEditor(true);
    }
    function onEditSave() {
      showEditor(false);
      getEvents();
    }
    function onDeleted() {
      showList(false);
      getEvents();
    }
    function onLoginRequest(action) {
      requestLogin(false);
    }
    return React228.createElement(
      "div",
      null,
      React228.createElement(
        Stack_default,
        { ref: view, direction: "column", spacing: 0, gap: 0, width: "100%" },
        React228.createElement(Stack_default, { direction: "row", spacing: 0, gap: 0, justifyContent: "center", alignItems: "center" }, props.warm ? React228.createElement(
          "div",
          null,
          React228.createElement(
            IconButton_default,
            { size: "large", onClick: onPrevious },
            React228.createElement(ArrowCircleLeftOutlined_default, null)
          ),
          React228.createElement(Button_default, { variant: "outlined", color: "primary", size: "large", onClick: onToday, sx: { width: "100px" } }, "Today"),
          React228.createElement(
            IconButton_default,
            { size: "large", onClick: onNext },
            React228.createElement(ArrowCircleRightOutlined_default, null)
          )
        ) : null),
        renderWeeks()
      ),
      show_editor ? React228.createElement(EditEvent, { event: edit_event, date: edit_date, onClose: onEditClose, onSave: onEditSave }) : null,
      show_list ? React228.createElement(ListEvents, { date: edit_date, events: edit_events, onClose: onListClose, onSave: onEditSave, onEdit, onDeleted, onAdd: onAddEvent }) : null,
      request_login ? React228.createElement(AlertPrompt, { open: true, title: "Login Required", message: "Google access expired. Please go to Settings and refresh Google access.", yesText: "OK", onAction: onLoginRequest }) : null
    );
  }

  // build/client/modules/calendar/Calendar.js
  var CalendarView;
  (function(CalendarView2) {
    CalendarView2["MONTHLY"] = "monthly";
    CalendarView2["WEEKLY"] = "weekly";
  })(CalendarView || (CalendarView = {}));
  function Calendar(props) {
    const [appdata2, setAppData] = React229.useState(AppData_default.instance());
    const [view, setView] = React229.useState(CalendarView.MONTHLY);
    React229.useEffect(() => pageLoaded(), []);
    React229.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
    }
    function pageUnloaded() {
    }
    return React229.createElement(Stack_default, { direction: "column", spacing: 0, gap: 0 }, view == CalendarView.MONTHLY ? React229.createElement(MonthlyView, { warm: props.warm, days: props.config.days }) : null);
  }

  // build/client/modules/exchange/Exchange.js
  var React240 = __toESM(require_react(), 1);

  // build/client/assets/flags/icons/1x1/ca.js
  var import_react22 = __toESM(require_react(), 1);
  var Icon14 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react22.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-ca", viewBox: "0 0 512 512" },
    import_react22.default.createElement("path", { fill: "#fff", d: "M81.1 0h362.3v512H81.1z" }),
    import_react22.default.createElement("path", { fill: "#d52b1e", d: "M-100 0H81.1v512H-100zm543.4 0h181.1v512H443.4zM135.3 247.4l-14 4.8 65.4 57.5c5 14.8-1.7 19.1-6 26.9l71-9-1.8 71.5 14.8-.5-3.3-70.9 71.2 8.4c-4.4-9.3-8.3-14.2-4.3-29l65.4-54.5-11.4-4.1c-9.4-7.3 4-34.8 6-52.2 0 0-38.1 13.1-40.6 6.2l-9.9-18.5-34.6 38c-3.8 1-5.4-.6-6.3-3.8l16-79.7-25.4 14.3c-2.1.9-4.2 0-5.6-2.4l-24.5-49-25.2 50.9c-1.9 1.8-3.8 2-5.4.8l-24.2-13.6 14.5 79.2c-1.1 3-3.9 4-7.1 2.3l-33.3-37.8c-4.3 7-7.3 18.4-13 21-5.7 2.3-25-4.9-37.9-7.7 4.4 15.9 18.2 42.3 9.5 51z" })
  );

  // build/client/assets/flags/icons/1x1/eu.js
  var import_react23 = __toESM(require_react(), 1);
  var Icon15 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react23.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", id: "flag-icons-eu", viewBox: "0 0 512 512" },
    import_react23.default.createElement(
      "defs",
      null,
      import_react23.default.createElement(
        "g",
        { id: "eu-d" },
        import_react23.default.createElement(
          "g",
          { id: "eu-b" },
          import_react23.default.createElement("path", { id: "eu-a", d: "m0-1-.3 1 .5.1z" }),
          import_react23.default.createElement("use", { xlinkHref: "#eu-a", transform: "scale(-1 1)" })
        ),
        import_react23.default.createElement(
          "g",
          { id: "eu-c" },
          import_react23.default.createElement("use", { xlinkHref: "#eu-b", transform: "rotate(72)" }),
          import_react23.default.createElement("use", { xlinkHref: "#eu-b", transform: "rotate(144)" })
        ),
        import_react23.default.createElement("use", { xlinkHref: "#eu-c", transform: "scale(-1 1)" })
      )
    ),
    import_react23.default.createElement("path", { fill: "#039", d: "M0 0h512v512H0z" }),
    import_react23.default.createElement(
      "g",
      { fill: "#fc0", transform: "translate(256 258.4)scale(25.28395)" },
      import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", y: "-6" }),
      import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", y: "6" }),
      import_react23.default.createElement(
        "g",
        { id: "eu-e" },
        import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", x: "-6" }),
        import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", transform: "rotate(-144 -2.3 -2.1)" }),
        import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", transform: "rotate(144 -2.1 -2.3)" }),
        import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", transform: "rotate(72 -4.7 -2)" }),
        import_react23.default.createElement("use", { xlinkHref: "#eu-d", width: "100%", height: "100%", transform: "rotate(72 -5 .5)" })
      ),
      import_react23.default.createElement("use", { xlinkHref: "#eu-e", width: "100%", height: "100%", transform: "scale(-1 1)" })
    )
  );

  // build/client/assets/flags/icons/1x1/gb.js
  var import_react24 = __toESM(require_react(), 1);
  var Icon16 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react24.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-gb", viewBox: "0 0 512 512" },
    import_react24.default.createElement("path", { fill: "#012169", d: "M0 0h512v512H0z" }),
    import_react24.default.createElement("path", { fill: "#FFF", d: "M512 0v64L322 256l190 187v69h-67L254 324 68 512H0v-68l186-187L0 74V0h62l192 188L440 0z" }),
    import_react24.default.createElement("path", { fill: "#C8102E", d: "m184 324 11 34L42 512H0v-3zm124-12 54 8 150 147v45zM512 0 320 196l-4-44L466 0zM0 1l193 189-59-8L0 49z" }),
    import_react24.default.createElement("path", { fill: "#FFF", d: "M176 0v512h160V0zM0 176v160h512V176z" }),
    import_react24.default.createElement("path", { fill: "#C8102E", d: "M0 208v96h512v-96zM208 0v512h96V0z" })
  );

  // build/client/assets/flags/icons/1x1/au.js
  var import_react25 = __toESM(require_react(), 1);
  var Icon17 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react25.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-au", viewBox: "0 0 512 512" },
    import_react25.default.createElement("path", { fill: "#00008B", d: "M0 0h512v512H0z" }),
    import_react25.default.createElement("path", { fill: "#fff", d: "M256 0v32l-95 96 95 93.5V256h-33.5L127 162l-93 94H0v-34l93-93.5L0 37V0h31l96 94 93-94z" }),
    import_react25.default.createElement("path", { fill: "red", d: "m92 162 5.5 17L21 256H0v-1.5zm62-6 27 4 75 73.5V256zM256 0l-96 98-2-22 75-76zM0 .5 96.5 95 67 91 0 24.5z" }),
    import_react25.default.createElement("path", { fill: "#fff", d: "M88 0v256h80V0zM0 88v80h256V88z" }),
    import_react25.default.createElement("path", { fill: "red", d: "M0 104v48h256v-48zM104 0v256h48V0z" }),
    import_react25.default.createElement("path", { fill: "#fff", d: "m202 402.8-45.8 5.4 4.6 45.9-32.8-32.4-33 32.2 4.9-45.9-45.8-5.8L93 377.4 69 338l43.6 15 15.8-43.4 15.5 43.5 43.7-14.7-24.3 39.2 38.8 25.1Zm222.7 8-20.5 2.6 2.2 20.5-14.8-14.4-14.7 14.5 2-20.5-20.5-2.4 17.3-11.2-10.9-17.5 19.6 6.5 6.9-19.5 7.1 19.4 19.5-6.7-10.7 17.6zM415 293.6l2.7-13-9.8-9 13.2-1.5 5.5-12.1 5.5 12.1 13.2 1.5-9.8 9 2.7 13-11.6-6.6zm-84.1-60-20.3 2.2 1.8 20.3-14.4-14.5-14.8 14.1 2.4-20.3-20.2-2.7 17.3-10.8-10.5-17.5 19.3 6.8 7.2-19.1 6.7 19.3 19.4-6.3-10.9 17.3zm175.8-32.8-20.9 2.7 2.3 20.9-15.1-14.7-15 14.8 2.1-21-20.9-2.4 17.7-11.5-11.1-17.9 20 6.7 7-19.8 7.2 19.8 19.9-6.9-11 18zm-82.1-83.5-20.7 2.3 1.9 20.8-14.7-14.8L376 140l2.4-20.7-20.7-2.8 17.7-11-10.7-17.9 19.7 6.9 7.3-19.5 6.8 19.7 19.8-6.5-11.1 17.6z" })
  );

  // build/client/assets/flags/icons/1x1/ch.js
  var import_react26 = __toESM(require_react(), 1);
  var Icon18 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react26.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-ch", viewBox: "0 0 512 512" },
    import_react26.default.createElement(
      "g",
      { fillRule: "evenodd", strokeWidth: "1pt" },
      import_react26.default.createElement("path", { fill: "red", d: "M0 0h512v512H0z" }),
      import_react26.default.createElement(
        "g",
        { fill: "#fff" },
        import_react26.default.createElement("path", { d: "M96 208h320v96H96z" }),
        import_react26.default.createElement("path", { d: "M208 96h96v320h-96z" })
      )
    )
  );

  // build/client/assets/flags/icons/1x1/hk.js
  var import_react27 = __toESM(require_react(), 1);
  var Icon19 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react27.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", id: "flag-icons-hk", viewBox: "0 0 512 512" },
    import_react27.default.createElement("path", { fill: "#EC1B2E", d: "M0 0h512v512H0" }),
    import_react27.default.createElement("path", { id: "hk-a", fill: "#fff", d: "M282.3 119.2C203 114 166.6 218 241.6 256.4 215.6 234 221 201 231.5 184l1.9 1c-13.8 23.6-11.2 52.8 11 71-12.6-12.2-9.4-39 12.2-48.8s23.6-39.3 16.4-49.1q-14.7-25.6 9.3-39zM243.9 180l-4.7 7.4-1.8-8.6-8.6-2.3 7.8-4.3-.6-9 6.5 6.2 8.3-3.3-3.7 8 5.6 6.9z" }),
    import_react27.default.createElement("use", { xlinkHref: "#hk-a", transform: "rotate(72 248.5 259.5)" }),
    import_react27.default.createElement("use", { xlinkHref: "#hk-a", transform: "rotate(144 248.5 259.5)" }),
    import_react27.default.createElement("use", { xlinkHref: "#hk-a", transform: "rotate(216 248.5 259.5)" }),
    import_react27.default.createElement("use", { xlinkHref: "#hk-a", transform: "rotate(288 248.5 259.5)" })
  );

  // build/client/assets/flags/icons/1x1/jp.js
  var import_react28 = __toESM(require_react(), 1);
  var Icon20 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react28.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-jp", viewBox: "0 0 512 512" },
    import_react28.default.createElement(
      "defs",
      null,
      import_react28.default.createElement(
        "clipPath",
        { id: "jp-a" },
        import_react28.default.createElement("path", { fillOpacity: ".7", d: "M177.2 0h708.6v708.7H177.2z" })
      )
    ),
    import_react28.default.createElement(
      "g",
      { fillRule: "evenodd", strokeWidth: "1pt", clipPath: "url(#jp-a)", transform: "translate(-128)scale(.72249)" },
      import_react28.default.createElement("path", { fill: "#fff", d: "M0 0h1063v708.7H0z" }),
      import_react28.default.createElement("circle", { cx: "523.1", cy: "344.1", r: "194.9", fill: "#bc002d", transform: "translate(-59.7 -34.5)scale(1.1302)" })
    )
  );

  // build/client/assets/flags/icons/1x1/mx.js
  var import_react29 = __toESM(require_react(), 1);
  var Icon21 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react29.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", id: "flag-icons-mx", viewBox: "0 0 512 512" },
    import_react29.default.createElement(
      "defs",
      null,
      import_react29.default.createElement("radialGradient", { xlinkHref: "#mx-a", id: "mx-b", cx: "842.3", cy: "103.7", r: "25.9", gradientTransform: "matrix(.11321 .02876 -.02762 .11359 180.2 193.2)", gradientUnits: "userSpaceOnUse" }),
      import_react29.default.createElement("radialGradient", { xlinkHref: "#mx-a", id: "mx-c", cx: "651.5", cy: "550.5", r: "25.9", gradientTransform: "matrix(-.10753 -.04307 .03971 -.09991 375.3 9.8)", gradientUnits: "userSpaceOnUse" }),
      import_react29.default.createElement("radialGradient", { xlinkHref: "#mx-a", id: "mx-d", cx: "380.8", cy: "740.4", r: "25.9", gradientTransform: "matrix(.06029 .00225 -.00274 .11843 377.4 -120)", gradientUnits: "userSpaceOnUse" }),
      import_react29.default.createElement(
        "linearGradient",
        { id: "mx-a" },
        import_react29.default.createElement("stop", { offset: "0", stopColor: "#fff" }),
        import_react29.default.createElement("stop", { offset: "1", stopColor: "#f15770" })
      )
    ),
    import_react29.default.createElement("path", { fill: "#ce1126", d: "M341.3 0H512v512H341.3z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M170.7 0h170.6v512H170.7z" }),
    import_react29.default.createElement("path", { fill: "#006847", d: "M0 0h170.7v512H0z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m284.6 295.6.2 3.5 1.4-.9-1-3z" }),
    import_react29.default.createElement("circle", { cx: "284.5", cy: "294.6", r: "1.1", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m289 301.1-2.7-2.5-1.2 1 3.6 2z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M288.7 302.6c-.4-.6-.3-1.3.3-1.7.5-.4 1.2-.3 1.6.2.3.5.2 1.2-.3 1.6-.5.4-1.2.3-1.6-.2zm20.3-38.9 2.7 2.6.4-1.3-2.5-1.7z" }),
    import_react29.default.createElement("circle", { cx: "308.7", cy: "263", r: "1.1", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m316.1 265.3-4 1.1.3-1.3 3.5-.4z" }),
    import_react29.default.createElement("circle", { cx: "316.8", cy: "264.7", r: "1.1", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m302.3 285.5-2.5-4 .4-.1 2.9 3.3z" }),
    import_react29.default.createElement("circle", { cx: "299.6", cy: "280.7", r: "1.2", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m302.5 285.6 3.2.6.1-.5-2.7-1z" }),
    import_react29.default.createElement("circle", { cx: "306.6", cy: "286.2", r: "1.1", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M227.7 294.4c0 .6-.4 1-.8 1s-.8-.5-.8-1 .4-1 .8-1 .8.5.8 1zm0 1.8.7 4-1-.3-.3-3.5z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M228.6 294.9c.4.6-.3 1.5-1.2 1.7-.8.3-1.9-.1-1.9-.9 0-.9 1.3-.4 1.6-.5.5-.2 1-1 1.5-.3z" }),
    import_react29.default.createElement("ellipse", { cx: "221.6", cy: "301", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", rx: "1.3", ry: ".9" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m223.7 300.8 3.9-.2-.7-.8-3.2.4z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M224 300.4c.4 1 .4 2.3-.7 2.1-1.1-.1-.9-1.1-1-1.5-.1-.7-.8-1.3-.1-2 .6-.6 1.5.4 1.8 1.4z" }),
    import_react29.default.createElement("ellipse", { cx: "211.5", cy: "279.4", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", rx: ".8", ry: "1.1" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m211.5 281.9.1 3.7-1-.9.1-3z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M213 280.8c.2.8-1.1 1.3-2 1.1-.8-.1-1.5-.6-1.3-1.4 0-.7 1.2-.6 1.5-.4.4.3 1.5-.6 1.8.7z" }),
    import_react29.default.createElement("ellipse", { cx: "204.9", cy: "285.2", fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", rx: "1.3", ry: ".6" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m207.3 285.2 2.9-.2 1.2 1-4.2-.2z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M206.2 283.6c.8 0 1.3.9 1.2 1.8 0 1-.8 1.7-1.5 1.6-.8-.1-.7-.8-.7-1l.5-.8c0-.3-.2-1-.1-1.2 0-.3.2-.4.6-.4zm-2.4-22.7c-.3.6-1 1-1.2.7-.3-.2-.2-.9.1-1.4.3-.5.8-.8 1.2-.6.3.2.3.8 0 1.3zm-3.2 5.9 1.6-3.9-.2-.2-1.9 2.7z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M202 263c-.9-.6-1-1.3-.8-1.9.3-.5.9-.2.9-.2l.7.7c.2.1.7-.1 1 .4.4.5.2 1 0 1a2 2 0 0 1-1.9 0zm-6.9-.6c.6.4 1 1 .7 1.3-.2.4-.8.4-1.4 0s-.9-.8-.7-1.2c.2-.4.9-.4 1.4 0zm1.7 1.7 3 1.8v1.5l-3.3-2.8z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M196.8 264.5c-.7.7-1.3.8-1.8.5-.6-.3-.1-.9-.1-.9l.6-.6c.2-.3 0-.8.6-1 .5-.4 1-.1 1 .2.1.3.3 1.2-.3 1.8z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "m285.3 295.8-.4.4-.2.7v-1.1l.4-.3z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M285.4 295s-.2.5-.9.5c-.6 0-1-.3-1-.7l.1-.9-.3.4v.7l.5.6h.4l.4.1.5-.2.3-.2v-.2zm3.4 6h-.6a13.3 13.3 0 0 1-2.7-1.4l3 2zm1.9.8s0 .6-.6.8c-.6.3-1 .2-1.2 0a1.1 1.1 0 0 1-.3-1l-.1.5.3.6.6.3h.5l.3-.2.4-.4.2-.4zm19.4-38v.8l-.7-.7.3-.4zm-.3-1c0 .5-.8 1.3-1.3 1-.6-.2-1-.8-.7-1.4l-.2.3.1.8.6.5h.6l.6-.2.3-.6zm8 1.4s-.1-.3 0 0c0 .5-.5 1.4-1.1 1.3-.7 0-1-.6-.9-1.1v.8l.3.3.5.3h.5l.6-.4.2-.5v-.3z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M315 264.9s0 .2-.3.4a42.8 42.8 0 0 0-1 .6l2.2-.6-.2-.6zm-13.6 17.9-.2.4v.6l-1.2-2 .4-.2zm-.7-2c-.3.6-1.2 1-1.6.7-.5-.3-.8-1.2-.3-1.6l-.3.2-.1.6.2.5.4.5.4.2.7-.2.5-.3s.3-1 0-.5zm4.4 4.7s0 .2-.4.2h-1.2l2 .4.2-.4z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M307.7 286c.2.7-.4 1.4-1.2 1.1s-1-1-.8-1.5l-.2.6.2.6.5.4.5.2.5-.2.5-.5.1-.6v-.1zm-79.2 8.9c.2.2-.1 1.2-1 1.5-1 .4-1.4 0-1.6-.3l-.2-.6-.2.2.2.4.4.4.8.2.6-.1.6-.3.3-.3.3-.4v-.5l-.1-.2z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "m227.7 296.9-.3.3-.2.6v-1l.4-.3zm-3 3.2s-.1.2.1.4l.8.2h-1.4l-.2-.5zm-.5 1a1.1 1.1 0 0 1-.1.5c-.2.4-.3.8-.8.7a1 1 0 0 1-.8-.9 1 1 0 0 0-.2-.5v.5l.3.8.6.3h.4l.4-.2.2-.5v-.8zm-3.8-.2s.2.7 1 .7c.7 0 1-.2 1-.2v.3l-.3.1-.6.1-.6-.1-.3-.2-.2-.4zm-7.5-20.3v.3c-.1.3-.6.9-1.5.9-.8 0-1.2-.3-1.4-.6-.3-.3-.3-.7-.3-.7v.5l.3.5.9.4h.8l.8-.2.4-.4zm-1.4 1.8-.5.2a3 3 0 0 0-.3.3v-1h.8v.6zm-3.8 2.8.4.3c.4.2 2.5.4 2.5.4l-3.3-.1.2-.6zm-.3 0-.2.5c-.2.3-.6 1.2-1.3 1.1-.7-.1-.6-.6-.6-.7v-.2l-.1.5.2.3.2.2h.6l.4-.1.4-.4.2-.4.2-.5zm-1.8.1s0 .2-.6.2l-1.3-.2.3.3.4.1h1zm-1.7-23s.1.3-.2.5c-.3.2-1 .4-1.4.1-.4-.2-1.2-1-1.2-1l.4.6.5.5.8.2h.8l.3-.4.1-.2z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M201.6 263.3v.4l-.1 1 .6-1.6-.2-.2zm-4.3 1.2.1.3c.2.5 2 2.1 2 2.1l-2.8-2.2.3-.5zm-.9.2-.7.3c-.2 0-.8 0-.8-.4v-.5l-.2.5.1.3.4.2h.6l.5-.2.1-.1zm-1-1.1h-.6c-.5 0-1-.6-1-.6l.3.6.9.4z" }),
    import_react29.default.createElement("path", { fill: "#9ca168", d: "M319.9 256.1c-.3 3-3.3 4.7-4.9 5.8a8.6 8.6 0 0 0-2.3 2.6l-.6 1.8-.2 1.1v.4l.2 1.7-.1 3.4 2.1-1.5 1.6-.6h.4s-1.7 1.6-2.3 3.4c-.7 1.9-2 5.8-4.3 7-2.3 1.3-3.8.8-4.6 1.5l-.8.9-1 1.3-.8 1-.7.6-.5.3c0 .4 0 1-.2 1.4l-.5 1.9 1-.4h1.1l-.6 1c-.1.5.1 3.7-2.9 5.6-3 1.9-10.7 1.6-10.7 1.6l-1.4.6-1.4 1-1.2 1.4-.1.3s-1 1.2-1.7 1.6l-2.2 1.5 1.8.1 2.8 1.2s-1.8 0-3 .4c-1.1.5-6.5 3.5-9 3.4-2.7 0-6.4-3.8-6.4-3.8l-1.6-1.2-2.8-.6-3.5-.2v-.4l.1-.6 3 .1c1.7.2 2.2.8 3.6 1a5.8 5.8 0 0 0 2.8-.3l4.7-3.8 4.7-1.6 1.8.2.8.2.7.2-.8 1-1.2.7.6.5 3-.5 1 .3.2.1.4-1c.4-.5 2-1.8 2.8-2.3.7-.5.9-.5 1-.8.3-.2 1.3-2.7 1.3-2.7l.1-1.3 3.3-3.1 2.2-2.4 1-2.7-.1-.5s.7.8.6 2.5c-.1 1.7-.5 2.2-.5 2.2s2.2-1.5 3.4-2c1-.5 1.7-.4 2-.4a5.4 5.4 0 0 0 1.6-1.5c.7-1 .8-1.2.8-1.6l.1-2.2-.2-5.7 2-4.2 2.8-2.5.5-.3-.3 1v1s1.4-1.8 2.1-2.2l.5-.2.6-1.6c.2-1 .2-2.5.2-2.5v-2.3l-.4-1.8-1.3-3.5v-4.6l-1-1.3s.9-.1 2 1.5a10.8 10.8 0 0 1 1.5 4l2.7-8.1s.7 1 1.2 2.5l.7 2.7 1-2.2.1.8c.2.7 1.8 1.7 1.6 4.7m-53.8 52s-.6-1.2-3.1-2.5a19 19 0 0 0-4.5-1.5v1l4 1.7 2 1.6z" }),
    import_react29.default.createElement("path", { fill: "#717732", d: "M284.3 300.5a19.1 19.1 0 0 1 3.5-2.8 7.8 7.8 0 0 1 2.6-.7c1.5-.3 1.7 0 5.2-2s4.3-4.1 5-4.7c.7-.5 1.9-.7 1.9-.7l-2.7 3.2c-1.3 1.4-2.7 2.3-4.7 3.6-2 1.3-6 1.4-6 1.4a6.1 6.1 0 0 0-3.3 1.7c-1 .8-1.6 1.7-1.6 1.7s-.2-.4 0-.7zm9.7-10.2c-3.3 3-4.3 5.8-4.3 5.8l4.3-4c1.5-1.4 3.6-2 4.5-3 1-.8 1-1.5 1.6-2l1-.9s-1.4-1-7.1 4.1m-6.9 6.9s1.4-.6 2-1.9c.3-.9.1-1.1.7-2.2 0 0 3.4-3.2 4.6-4.6 2.1-2.5 1.2-4.6 1.2-4.6s.2 1-.7 2.2c-.9 1-5.2 4-5.8 5.8-.5 1.7-.2 1.7-.4 2.7-.6 2-1.6 2.6-1.6 2.6m-2.2 8.4s-1.7-1.1-3.6-1c-3.9.3-7.2 2.6-9.7 2.7-2.6 0-3.6-1.2-5.6-2.6-2.1-1.4-7.3-1.2-7.3-1.2v.1l-.1.2s3.6 0 5.1.4c3 .9 4.5 4 7.9 3.7 4.3-.2 7.8-2.9 9.6-2.9 3 0 3.7.6 3.7.6m-19.3-2s3 .6 5.4-1.1c2.3-1.7 5.1-4 6.6-4.1 1.6-.1 3.2.3 3.2.3s-2-1-3.5-.9a9 9 0 0 0-4.6 1.1c-1.5.9-2.2 2.5-3.8 3.5-1.5 1-3.3 1.3-3.3 1.3zm-.5 4.1c-.4 0-.9.3-1 .2-.2 0-1-1-2.4-1.6-1.3-.7-3.2-1.1-3.2-1.1s-.2 0 .2.2l3 1.1a7 7 0 0 1 2.2 1.8c0 .1.4.6 1.2.6.7 0 1-.5 1-.7-.1-.3-.6-.5-1-.5m2.1-3s1.2.8 3.2.7c4.2 0 6.8-3 9.6-4s4.2-.2 4.2-.2v-.2a5.6 5.6 0 0 0-3.1-1c-4.6.1-9 3-10.9 3.8-1.8.8-3 1-3 1zM312 273c-1.5 1.5-3.6 6.2-4.5 7.4-1 1.3-2.1 1.7-2.6 2.2l-2.5 3.3c-.4.6-.5.4-.8.6-.3.3-.4.3 0 .2.5-.1.6-.4 1.3-1.2.7-.8.7-1.2 1.8-2.2 1.1-1 3.1-2.1 4.1-3.3 1-1.3 3-6 4.2-7.2 1.1-1.2 3.1-2 3.1-2s-1.6-.4-4.1 2.2m-7.2 8.9s0-.9 1-2.1c1-1.2 1.4-1 2.2-2.9.8-1.8 1.2-3.6 1.9-5.5.6-2 1.8-3.8 1.8-3.8s-1.1 0-2.2 1.6a27.6 27.6 0 0 0-3.8 7c-1 2.6-1 5.7-1 5.7zm-1.4 1.8s.4-.3.5-2.6c0-2.3-.1-5.6.5-7.3.7-1.6 4.3-5.5 4.3-5.5s-1.5.3-3.6 2c-2 1.7-3 3.7-2.8 5.3 0 1.6 1 3.4 1 5l.1 3zm8.5-16.2 1.2-4c.4-.7.4-1.2 2.2-3.2 1-1.1 2-1.9 2.5-3.5.4-1.6.4-6.1.4-6.1s-.5.4-.8 1.2c-.4.8-.1 3.7-.8 5-.7 1.4-2.2 4.6-3 5.3 0 0-.1-2.3.1-4.6.3-2.3 1-3 1.4-4.5.4-1.5.2-5.4.2-5.4s-1.3 1.2-1.9 2.7c-.6 1.5-1 4-1 6s.5 3.6.6 4.7c0 1.1.1 1.7-.3 2.9-.5 1.2-.2.4-.5 1.6a27.9 27.9 0 0 1-.6 2zm-2.8-17.2s1 1.3.9 2.9c-.2 1.5-.8 3.6-.2 5.2.6 1.6 1.5 1.7 1.8 2.7.2.9.2 2.7.2 2.7s.5-3.4.2-4.4c-.4-1-.5-.5-1-1.5s0-3.7-.4-5.3a3.8 3.8 0 0 0-1.5-2.3" }),
    import_react29.default.createElement("path", { fill: "#9ca168", d: "M245.4 307.9s.3-1 2.5-2 5.4-2.5 5.7-2.3c.4.2-.1 1.3-.1 1.3l-2.1.7-1.7 1-2 1.3z" }),
    import_react29.default.createElement("path", { fill: "#9ca168", d: "M251 302.1c-2.9.1-4.4.8-5 1-.1 0-.5.2-.9 0-.6-.2-1.2-1.1-1.2-1.1l-.6-.5-.1 2-4-3.6-.5 2.4-.5 1-4-3.8.1 3h-1l-3-2-.8.4 1 1.7-3.7.3-.8.6-.7.9v.3h1.4c.3-.2.5-.7.6-.5.1.2.2 1 .7 1 .5-.2 2.2-1.4 3.4-.9 1.3.7-1.8 1.6-1.4 2.5.3 1 2.5.6 3 .3.6-.3 2.3-2.4 3-1.6 1 1-2 2-1.5 3 .6 1.1 2.2.9 3 .4.8-.5 2.7-3.3 3.1-2.7.7 1-1.6 2.1-1 3 .6.8 1.9 0 2.7-.7.9-.6 1.2-2 2.4-2.7 1.1-.6 1-.3 1.4-.4.3 0 1.2-.9 1.2-.9l2.7-1.1h1.4l.7.4 1.4.2.1-1.2s-1.6-.7-2.7-.7zm-22 0 .5-1-.3-.5s-1-.5-1.9-1.4a5.4 5.4 0 0 0-1.6-1.3 35.6 35.6 0 0 1-1.7-1.1l-.6-2.3-.4-.6-1 .4-1.4-4.9-.3-.9h-.6l-1.1 3-1.3-1.9-.3-4-.8.9-1 1-1.8-3.7s-.2 0-.3.3c0 .3-.2 1.4 0 2.1a19 19 0 0 1-2.5-1.8c-1.8-1.6-2.3-2.4-2.3-2.4l-.8-2 .8-1.7.4-2-1.8.7-.3-4.6-.3-1.4-2.1 3-.8-1.2v-3l-.6-.1-.9 1.6s-.8-1.7-1.2-2c.1-.7.2-2.3-.2-3.6-.5-1.6-1-2.5-.9-3.8.2-1.4.8-1.5.7-2 0-.7-1 .3-.6-.5.3-.7 3-2.5 2.5-3.4-.6-1-3.3 1.4-2.7-.2.7-1.6 3.2-1.6 3.4-3.9 0-1.3-2.5 1-2.7.2-.2-.7 1.6-2.1 1.6-3 0-1 .3-1-.2-1.5s-2 1.9-2 1.9l-1.7-.6-.6 2.4-.5 2-2.1-1.2.5 2.5.5 2.4-2.1-.6 1.1 2.1 1.5 1.5 1 1.3.6.3 1 1 .2 1.2.5 1.5.1 1.5v2.3l-.1.8c-.4 0-1-.6-1.3-.2-.3.5 1.2 1.6 1 2-.3.2-2.6-.5-2.7.2-.1.7.2 1.7 1.5 2 1.3.3 4.2 1 3.7 1.6-.5.6-3.7-1.8-3.5 0a3 3 0 0 0 2 2.7c.9.3 4.1 0 4 .7-.3.7-2.7-.3-3 .8-.2 1.1 1.8 1.3 2.2 1.3.4 0 1.7 0 2.3.4l3.4 3.2c1 .9 3.1 2.3 3.7 2.7-.6 0-1.9-.2-2.1.3-.3.6 4.9 2.4 3.4 3-1.5.6-3-1.6-3.5-.3-.4 1.3 1 2.4 1.8 3 .8.4 5.3 0 4.5 1-1 1-4.2-.7-4.3.6 0 1.2 2.2 3.1 3.4 3 1.1 0 2.4-1.8 2.9-.8s-.9 1.4.2 1.6 1.9-1 3.2-.8c1.2.2 3.2 1 4.4 2a63.2 63.2 0 0 1 2.2 2.3z" }),
    import_react29.default.createElement("path", { fill: "#717732", d: "M246.7 307.3c.8 0 .9.4 1 .4 0 0 1.4-1.1 2.7-1.8 1.2-.7 3-1 3-1h.2s-2.3.7-3.3 1.4l-2.5 1.7c0 .2-.6.5-1.4.5-.7 0-1-.4-1-.6 0-.3.5-.6 1.3-.6m6.8-3.4s-.7 0-1-.3a3.5 3.5 0 0 0-2.1-.6 5 5 0 0 0-3.2 1.4s-.2.5-1.1 1c.3.1.9-.3 1.5-.8a5.9 5.9 0 0 1 3-1.1c.8-.1 1.3.3 1.7.6.4.3 1.2.2 1.2.2zm-40.4-16.5v-.6s-.6-.2-1.7-1c-1.3-.7-4.1-2.9-4.1-2.9l2.3 2.1a28 28 0 0 0 3.2 2.3zm28.5 20.2 1.2-1.8c.8-1.2 1.4-1.6 1.5-1.7.1-.1-.3-.7-.5-1.2-.2-.4-.2-.9-.2-1 0 0 .3.8.8 1.2l1 .7s1-.1 1-.3c0-.2 0-.4-.2-.5-.2 0-.4.2-.9 0-1-.5-1.4-2-2-2-.6-.1-.2 1.6-.5 1.6-1 0-1.6-3.5-4-3.6-1.5-.1-1.8.2-1.9.6 0 .3 2 2.4 1.3 2.7-.7.3-2.8-3.3-4.4-3.3-1.6 0-1.7.5-1.6.9.1.3 1.8.6 1.4 1.7-.4 1.1-2-1.7-3.4-1.5-1.4.1-1.6.3-1.7.7 0 .4.5 1 .3 1.1-.2.2-1 .1-1.8.6-.7.5-1.7 1.9-1.7 1.9s.9-1.4 2.2-1.5h4.4l-.9-.7c-.5-.4-.9-1.3-.9-1.3l1.4 1.3 1.5 1s1.4 0 1.5.2c0 .2 0 .5-.6 1.1a23 23 0 0 1-1.4 1.3l1.6-1.2 1.2-1s1 .2 1.1.1c.1 0 0-.3-.6-1.3a46.5 46.5 0 0 1-1.3-2s.8.7 1.6 1.8c.9 1 .7 1.6 1 1.6l1.2.2c.3 0 .3.4-.3 1.3s-1 2-1 2l1.3-1.6c.6-.6 1-1.4 1.2-1.4h1.2l-.7-1.3c-.4-1-.5-2.2-.5-2.2s.4 1.2 1 2l1.1 1.6h1.3c0 .4 0 .6-.5 1.4zm-17.2-10 1.3.3s-1.3-.8-1.7-2c-.3-1 0-3.4-.6-3.4-.5 0-.9 1.8-1.4 1.4-.6-.3.2-3.5-.5-4.8-.6-1.4-2-2.3-2.4-1.8-.3.5-.2 3.4-1.1 2.8-1-.7 0-3.2-.2-4.3-.3-1.1-1-2-1.5-1.7-.5.3.2 2.4-.6 2.5-.9 0-.7-1.5-1-1.7-.4-.1-.6.3-.7 0-.2-.3-.1-1.3-.6-1.2-.4 0-.3 1-.2 1.4l.6 1.4c.1.3.8.7.7 1 0 .2-.4.4-.8.4h-1.4l1.4.3c.4 0 1.2-.1 1.4.2l1.1 1.7s.3-.7.4-1.9v-2.1s.3 1.3.3 2.1l-.3 2.4s.9.7.6 1h-2.3c-1 0-2.6-.3-2.6-.3s1.4.6 2.4.8c1 .2 3 .2 3 .2l1.4 1.6s.7-1.1.8-2.3V289l.4 2.2a9.8 9.8 0 0 1-.5 3 4 4 0 0 1-1.5.8c-1 .3-2.9.5-2.9.5s1.8.3 3 0c1.3-.3 1.4-.7 1.8-.5l.7.6 1 .8-.8.5-1.2.6 1.8-.6.9-.3.4.2-.1-1-.3-1.4s.5.6.6 1.3l.1 1.2s.1.2 1 .6zM199.5 269s.3-1.4.3-3c0-1.5-1-3.9-1.3-4.1a3.8 3.8 0 0 1-.2-.5l.7-1-1 .7-1-.4c-.4-.3-.6-.7-.6-.7l1 .5c.4.2.5.1.5.1l-.3-1.5-1.6-.8c-1-.6-2-1.5-2-1.5l2.2 1.2 1.3.3s.9-.2 1.3-.5l1.3-.9s-.8.5-1.4.6l-1.2.2-.3-1.9-.9-.9c-.7-1-1.2-2.2-1.2-2.2s.7.9 1.3 1.3c.6.5 1.1 1.2 1.1 1.2l1.3-.8 2.3-1.6-2.2 1-1.3.6v-1.2c.2-.4.6-1 .6-1.3-.1-.4-.4-.2-.5-.5l.4-2.1v1c.1.3 0 .7.4.7s2.6-2.1 2.8-2.5c.3-.4.7-1.5-.4-1-1.1.4-.9 1.3-1.8 1.3-.3 0-.6-1.2-1-1-.3.3-1 1-1.2 2-.2.8.2 2-.3 2.4-.5.4-1-1.4-1.8-1.2-1 .3-1.2 1.6-1 2 .1.6 2.1 3 1.5 3.2-.6.3-2.2-2-3-.4-1 1.5 2.6 3.1 3 3.5.5.4 0 .5.7 1.3.6.8 1.5 1 1.9 1.5.4.5 1.7 3 1.7 4.6v2.3zm9.4 13.6s-.9-1-.6-2.6c.3-1.7 1.5-4.6 1-5-.3-.4-1.6 1.8-1.9 1.3-.3-.5.7-3.4.2-4.6-.5-1.2-.6-2-1.6-1.9-1 .1-1.5 3.5-2 3-.5-.7.3-2.2 0-3-.4-.8-.5-1.1-1-1-.6.1-.8 1.7-1.2 1.7-.3 0-1-2-1.7-1.6-.7.2 1.8 3.5 1.8 3.5s.5-.4.7-1l.5-1.1s.2 1 0 1.5c-.2.4-.3 1.4-.3 1.4s-.7.2-1.7 0c-1-.1-1.9-.5-1.9-.5s.7.4 1.8.7l2.2.6.7 1 .9 1.1.6-1.6 1-2.8s-.2 2-.5 3l-.5 2.5s-1 0-2.1-.3l-3-.6 3 1 2.3.6 1 1.4.8-1.1c.5-.7.8-1.5.8-1.5s-.2 1.1-.5 1.8l-.6 1.1-1.4.2h-2a16 16 0 0 0 3.6.7s0 .4.5 1.1a3.7 3.7 0 0 0 1 1z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M251.6 312.7s-.5-.6-1.2-1c-.7-.3-1-.2-1-.2h-.3l.7-1.6 4.4-4.3.7-4.3h2.7v5.9l.8.3 5 3v1.3l-.8.3-.6.3-1.8.2-3.3-2.4-1.4-1.4-2.4 3.1-1.6.8z" }),
    import_react29.default.createElement("path", { fill: "#016848", d: "M255 301.3v1c0 .6 0 4-.2 4.5-.1.5-2.5 1.4-4 2.6-1.3 1.2-1.3 2.1-1.3 2.1l-1.3.4c-.9.3-1.3.8-1.3.8s.5-2.2 2.8-4.1c2.2-2 3.3-2.2 3.5-2.5.2-.3 0-4.1 0-4.4.1-.3.4-.3.6-.3h1.3zm5.7 12.6.6-.9.7-.6-1-.6c-1.3-.5-2-.4-2.8-1a8.1 8.1 0 0 1-1.7-1.7l-1.2 1 1.4 1.7c.6.6 2.1.8 2.8 1.2l1.2 1z" }),
    import_react29.default.createElement("path", { fill: "#cd202a", d: "m257.2 301.3 1.5.1.2.5c0 .1 0 3.2-.2 4.2a6.4 6.4 0 0 1-1 2.5c-.4.3-2.4 2-3.3 3-1 .9-1.9 2.2-1.9 2.2l-.6-.8c-.3-.4-.6-.5-.6-.7a8.1 8.1 0 0 1 2.7-2.8c1.5-1 2.9-2.2 3.1-3.9.3-1.7.1-4.3.1-4.3" }),
    import_react29.default.createElement("path", { fill: "#cd202a", d: "M266 312s-.3-.3-1.4-.4c-1.2 0-1.2.2-1.2.2s-.7-.8-1.6-1.4c-1-.7-1.8-.6-2.8-1.3-1-.7-1.6-1.7-1.6-1.7l.8-1.6s.9 1.3 1.8 2c1 .7 3 1.3 3.7 2 .7.5 2.3 2.2 2.3 2.2" }),
    import_react29.default.createElement("path", { fill: "#30c2dc", stroke: "#0872a7", strokeWidth: ".4", d: "M276 293s-3-1-2.7-2c.2-1 6.6-2.7 6.6-2.7l.1-1.7s-1 0-2.5.5a22.8 22.8 0 0 1-7 1.2c-1.6 0-2.5-.2-3-.3a1475 1475 0 0 0-23.2-1.4 14.2 14.2 0 0 1-1.2 0c-3-.3-4.9-4.8-4.9-4.8l-1.4.2s.4 2.3-.3 2.5c-1.5.4-11.1-4.8-11.1-4.8l-.6 2.1s6 3.2 5.8 4.3c-.2 1.2-2 1.1-2 1.1l.8 1.4c.3 0 9.7.5 9.9 3.3 0 1.2-2.3 1.9-2.3 1.9l.8 1v.4s5.2 0 6.7.9c1.4.8 2.2 2 4 3a55 55 0 0 0 15.7.2c2.1-.6 3.4-3 6.9-4 3.5-1.1 4.6-1.2 4.6-1.2z" }),
    import_react29.default.createElement("circle", { cx: "227.6", cy: "288.6", r: "1.7", fill: "#fff", stroke: "#0872a7", strokeWidth: ".8" }),
    import_react29.default.createElement("circle", { cx: "237.2", cy: "280.8", r: "1.7", fill: "#fff", stroke: "#0872a7", strokeWidth: ".8" }),
    import_react29.default.createElement("circle", { cx: "277.2", cy: "293.2", r: "1.7", fill: "#fff", stroke: "#0872a7", strokeWidth: ".8" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", d: "M220.1 278.3c-.5 1.2 1.6 3.6 3.1 3.9 1.5.2 2.4-.1 2.6-.9.3-.7 0-1.5-.3-2-1-1.3-4.8-2.3-5.4-1" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M224.8 280.2c0-.8-1.3-1.5-2-1.5s-1.7 0-1.5.4c.1.4 2.2 1 2.2 1.2 0 .2-.6.5-.3.8.4.3.8.1 1.1-.1.4-.3.6-.4.5-.8" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", d: "M238.2 294.6c.3 1.1-.6 1.7-1.7 2.2-1.1.5-3.4.2-4-.7-.4-1 1-2.4 2.3-2.7 1.4-.3 3 .2 3.4 1.2" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M235.8 295.3c.5-.1.5.6.9.6s.7-.7.6-1.1c-.1-.5-.8-1-1.5-1-.6 0-2.4 1.6-2.2 2 .2.5.6.4 1 .2.3-.1.8-.7 1.2-.7" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", d: "M279.4 288.8c1 1.4 2.8.1 3.3-.4s2-1.4 1.4-2.2c-.6-1-1.7-.9-2.4-.8-.7 0-2 1-2.3 1.5-.3.5-.5 1.3 0 2z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M279.7 288s.1-1.5 1.5-1.6c.7 0 .8.2 1.4.6.5.3.8-.5.8-.5s0 1-1 1.1c-.9 0-.5-.4-1.5-.6-.8 0-1.2 1-1.2 1" }),
    import_react29.default.createElement("path", { fill: "#f9aa51", stroke: "#953220", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".4", d: "m257.5 285.1-.7-.4h-5l2.7 8 3.3 4.6 1.2.4 2.5-.1.5-1.3-1-7.6z" }),
    import_react29.default.createElement("path", { fill: "#f9aa51", stroke: "#953220", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".4", d: "m248.5 285.6.1-.9 1.5-.1a4 4 0 0 1 1.7.1c.1 0 2 2.3 2.5 3.8.6 1.4 1.4 3.8 2.2 5.3a59 59 0 0 0 2.5 4h-3.2l-1.5-.5-4.6-7.2z" }),
    import_react29.default.createElement("path", { fill: "#f9aa51", stroke: "#953220", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".4", d: "m246.6 284.6 2 .1c.2.1 2.3 2 3.1 4.2.9 2.3.4 2.6 1.5 5 1 2.3 2.6 4 2.6 4s-3.2 0-5-.2c-1.7-.3-2.3-.3-2.7-.8a7.3 7.3 0 0 0-1.4-1h-1.8l.5-2.5-.5-5.5V285zm18.7 1.5-3-1.2-5.5-.3.4 2.8c.2 1.4 1.2 4.6 2 6.2 1 1.6 1.9 3.5 2.4 4 .4.4 3.6-.9 3.6-.9l2.1-.3-.3-2.3-.3-.7.5-6.4-.4-1z" }),
    import_react29.default.createElement("path", { fill: "#f9aa51", stroke: "#953220", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".4", d: "M245.7 286.1c0 .7.7.8 1 .7.1 0 .8-.3.8-1.2s-.6-1.7-1.8-1.8c-1.1 0-2 1.4-2 2.4s1 1.5 1 1.9c0 0-1 .9-1 2.5s1.4 2.8 1.4 2.8-1.4 1.1-1.4 2.2 1 1.9 2 1.9 2.3-.7 2.3-1.5c0-.9-.8-1.4-1.4-1.4-.6 0-.9.4-.9.7m20.5-8.7c0 .7-.4.7-.8.7s-.9-.2-.9-1.1c0-.9 1.1-1.3 1.9-1.3.7 0 2 1 2 2.2s-1 2-1 2 .6.3.6 1.8-1 2.6-1 2.6 1.3.5 1.3 2.1-1 2.1-1.8 2.1-2.1-.5-2.1-1.5.7-1.5 1.2-1.5 1 .6 1 1.2" }),
    import_react29.default.createElement("path", { fill: "#953220", d: "m247.6 295 .3.4c.2.3.3.8.6 1 .7.7 5.8.9 7.4.9 1.6 0 6.2.2 7.1-.3 1-.6 1-1.4 1.5-1.8l.7-.4-.6.6v1l.3.7s0 .3-.6.6c-.6.4-1 .5-1.8.6-.8 0-10.6 0-12.2-.2-1.6-.3-1.5-.3-2-.6a3.5 3.5 0 0 1-.7-.7l.3-.7zm16-9.5.8.4s-.7.2-1.3 1.8c-.6 1.5 0 2-.5 2.2H258l-.7-1.8z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M277.1 284.9s-.7-.3-1-1c-.4-.5-.7-1.3-.4-1.4.3-.2.8.3.8.8s.6 1.6.6 1.6m8.4-2.3.7 1 1 .5s-1.2 0-1.6-.3a6.7 6.7 0 0 1-.8-1.2z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M288 283.3s-.7.4-1.3.2c-.6-.2-1-.6-.9-.8.3-.3.4-.2.7.2.4.3 1.5.4 1.5.4m4.2-3.6s-.6.6-1 .6-1.2-.2-1.2-.4 1-.3 1.2-.3zm-6.3-8.3s-1 .2-1.3.7c-.3.5-.2 1 .2 1s.5-.6.5-.7c0-.2.6-1 .6-1m-4.2 2.3s-.7.4-.9.8c-.2.4-.3 1.2 0 1.3.5 0 .6-.7.7-1z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", stroke: "#04534e", strokeWidth: ".4", d: "m274.2 278.7-2.3 2.4s5.3 3 9.4 2.8c4 0 8.6-3.3 9-4 .2-.6 0-3.4-.5-4.3-.6-.9-3.4-3-4.4-3-1 .1-3 1.6-4.7 3.2-1.7 1.7-1.6 3.2-4 3z" }),
    import_react29.default.createElement("path", { fill: "#0c8489", d: "M273.6 279.7s5.7.8 7.3-.6c1.6-1.5 3.4-4.3 4.5-5 1.2-.6 1.7-.6 1.7-.6l1.2 1 1.5 1.1.4 2.7v1.5l-1.7 1.4-3.3 1.5-3 1-2.7-.1-5.3-1.6-1.4-.9-.3-.3z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M282.2 276.4c0-.5.4-.4.8-.4s.9 0 .9.5-.5 1.2-1 1.2c-.3 0-.7-.8-.7-1.3m2.3 1.4c0-.4.3-.6.8-.6.6 0 1 .6 1 1s-.4.8-.9.8-.9-.7-.9-1.2m-.8 3.4c0-.5.4-.6.9-.6s.8.2.8.7-.4 1-1 1c-.4 0-.7-.5-.7-1zm-3-1c0-.6.6-.8 1-.8.5 0 .9.5.9 1 0 .6-.4 1.1-.8 1.1-.5 0-1-.7-1-1.3zm-4.7.6a1.1 1.1 0 1 1 2.3 0 1.1 1.1 0 0 1-2.3 0" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M284.5 277.8c0-.4.5-.6.8-.6.4 0 .6.3.6.7 0 .4-.2.7-.5.7-.4 0-.9-.4-.9-.8m-.8 3.3c0-.5.5-.7 1-.7.4 0 .8.2.8.7s-.4.8-.9.8-.9-.4-.9-.8m-3-1c0-.5.9-.7 1.2-.7.3 0 .3.3.3.8s-.3.9-.6.9c-.4 0-.8-.5-.8-1zm1.5-3.7c0-.5.3-.5.6-.5s.5.1.5.6c0 .4-.2.8-.5.8s-.6-.5-.6-1zm-6.2 4c0-.5.5-1 1.1-1 .7 0 1.4.2 1.4.7 0 .6-.8 1.5-1.5 1.5s-1-.7-1-1.2" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M278.2 279.5s-.8.1-1.2.5c-.4.4-.5.9-.2 1 .2.1.5-.3.5-.5zm3.7-.8s-.7.5-.8 1c0 .6 0 .8.2.8s.3-.6.3-1c-.1-.2.3-.8.3-.8" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M282.5 279.5s-.4 0-.8.3c-.3.3-.6.7-.4.7.2 0 .6-.1.6-.3 0-.2.6-.7.6-.7m.8-4.4-.5.5c-.2.2-.5.7-.2.9.2 0 .4-.1.6-.5.2-.4.2-.9.2-.9zm2.9 1.8s-.7.1-1 .5c-.2.3-.4.6 0 .6s.3-.1.5-.4c0-.3.5-.7.5-.7m-.5 3.4s-.1.5-.6.7c-.4.3-.5.5-.7.2-.2-.4 0-.5.3-.6a52.3 52.3 0 0 1 1-.3" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M290.3 278s.3 1.6-1 2.3c-1.4.8-5.2 3.5-8.8 3.2-3.6-.4-7.7-2.4-7.7-2.4l-.5.3.9.4 2.8 1.1 3.1 1h2l1.7-.1 3.2-1.1 2.7-1.4 1.4-1 .3-.5v-1.6z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M219.9 257.8s.8.7.8 1.3c-.1.6-.3.8-.6.7-.2 0-.2-.7-.2-1zm6.2 5.7s-.3 1-.7 1.1c-.4.1-.7-.3-.7-.5.1-.2.5 0 .7-.2zm-13.4.8s.3.6.8.7c.6.1.8-.3.7-.5h-.6zm2.4 4.7s.5.6 1.1.6a1 1 0 0 0 1.1-.6c0-.1-.8-.1-1 .1-.3.2-1.2-.1-1.2-.1m4.2 3.6s1-.2 1.3-.5c.2-.3.4-.8.2-1-.2-.4-.4.3-.5.6z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", stroke: "#04534e", strokeWidth: ".4", d: "M226.1 269.7s.7-4.9-3.2-8.3c-4-3.4-6.5-2.6-7.9-1.3-1.3 1.2-2.5 5.4 1.7 9 4.2 3.6 9.3 2.5 9.3 2.5z" }),
    import_react29.default.createElement("path", { fill: "#0c8489", d: "M214 264.6s0-2.7 1.3-3.5a5.5 5.5 0 0 1 7.5 2.4c2 4 2 6 1.5 8h-2.2l-3.4-1.4-2.8-2.1z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M225.6 270.4s-.7.8-2.1.7c-1.5 0-8-1.8-9.7-7.7v1.3l.1.4.5 1.2 1.4 2 1.7 1.5 2.2 1.2 1.6.4 2 .4h1.2l1-1.4z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M222.1 268.7c0-.5.3-.5.7-.5.4 0 .8-.2.8.3s-.3 1.3-.7 1.3c-.5 0-.8-.6-.8-1zm.3-3.1c0-.4.3-.7.8-.7s.7.3.7.7c0 .3-.3.6-.7.6s-.8-.3-.8-.6m-3 3.4c0-.3.4-.5.9-.5.4 0 .8.2.8.5s-.8.7-1.3.7-.4-.4-.4-.7m-.3-3.7c0-.4.3-.3.7-.3.4 0 .9.1.9.6s-.5 1.1-1 1.1c-.3 0-.6-.9-.6-1.4m-2.7.7c0-.4.2-1 .7-1s1 .6 1 1c0 .3-.4.7-.9.7s-.9-.4-.9-.7zm.5-3.3c0-.4.2-.4.7-.4s1 .2 1 .6c0 .4-.6 1-1.1 1-.6 0-.6-.8-.6-1.2m3-.3c0-.4.3-.3.8-.3s.8.3.8.7c0 .4-.6.8-1 .8-.5 0-.6-.8-.6-1.2" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M216.9 262.6c0-.3.2-.5.6-.5s.7 0 .7.5c0 .4-.3.7-.7.7-.3 0-.7-.3-.6-.7m-.6 3.2c0-.4.2-.8.6-.8.4 0 .7 0 .7.5s-.3.8-.7.8c-.4 0-.6 0-.6-.5m3.5-3.4c0-.3.3-.3.7-.3.4 0 .7 0 .7.4 0 .3-.4.5-.7.5-.4 0-.6-.3-.6-.6zm-.6 3.1c0 .4.3.8.7.8.4 0 .8-.4.8-.8s-.5-.8-.8-.8c-.5 0-.7.4-.7.8m3.3-.5c0 .4.4.8.8.8s.8-.4.8-.8c0-.3-.4-.7-.8-.7s-.8.4-.8.7m-3.2 4c0-.3.3-.7.7-.7.4 0 .7.2.7.6 0 .3-.6.8-1 .8-.3 0-.4-.4-.4-.7m2.9-.5c0-.4.3-.5.7-.5s.7 0 .7.5-.4.8-.8.8c-.5 0-.7-.4-.7-.8z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M223 263.6s.4.5.5 1l-.1.9c-.2 0-.4-.3-.5-.7v-1.3zm-2.6-2.7s.3.4.3.8 0 .8-.3.8c-.2 0-.2-.4-.2-.7zm-3 .4s.3.4.3.8 0 .8-.2.8-.2-.4-.2-.7z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "m216.4 261.8.7.4c.4.3.5.6.4.7-.2.2-.5 0-.5-.2zm2.3 3.1s.5 0 .9.3c.3.3.5.6.3.8-.1.2-.6-.2-.8-.4a6.7 6.7 0 0 1-.4-.7m-2.8 0 .8.2c.3.2.3.6.2.7-.1 0-.3 0-.5-.3zm6.7 2 .1 1c0 .5.1 1-.1 1s-.3-.6-.3-1z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "m221.8 268 .7.3c.2.2.2.5 0 .5l-.3-.4zm-3 .1.8.2c.2.2.2.8.2 1 0 0-.4 0-.5-.4a6.2 6.2 0 0 0-.4-.8z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M217.7 259s-2.6.6-3 2.3c-.6 1.7-.6 3.6-.6 3.6l-.4-2.2.6-1.3.7-1.3 1.2-.7 1-.4zm8.2 10s.2-.6-.5-2.6c-.8-2.1-2.4-4.8-2.4-4.8l1.2 1.4 1 1.6.5 1.4.4 1.3v1.3z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M228.5 265.7s1 .6 1 1v.5c-.3 0-.7-.3-.8-.5zm-3.8 10.3s.4-.8 1-1c.6-.4 1-.3 1.1-.2.2.2-.3.7-.7.8zm6.4 2.5s.7-.3 1-.8c.5-.4.5-.7.4-.9-.2-.1-.7.1-1 .5zm-.7-.6s.2-.8.5-1.1c.2-.3.5-.4.7-.3.3.2.1.5 0 .7z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", stroke: "#04534e", strokeWidth: ".4", d: "M241.2 273s-4-5.8-10.3-6.1c-5-.3-6.5 4.2-6.3 5.5.1 1.4 2 4.3 8.7 4.7 6.6.5 7.7-3 8-3.3.2-.1-.1-.8-.1-.8z" }),
    import_react29.default.createElement("path", { fill: "#0c8489", d: "M236.5 269s1.6 1.3 2.3 2.3.9 1.7.5 1.8c-.4.2-4-3.2-7-3.9-3-.7-5.5 0-6.1 1.4-.6 1.4-.4 3.5 1 4.4 1.3.9 7.7 2 7.7 2l3-.5 1.8-1 .4-1 .4-1.4.2-.5-1.5-1.7z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M231.4 269.8c0 .4-.4.6-.8.6s-.7-.2-.7-.6c0-.4.3-.7.7-.7.4 0 .8.3.8.7m-3.7 1.3c0-.3.4-.3.9-.3s.7.3.7.6c0 .4-.7 1-1 .8-.5-.3-.6-.7-.6-1zm4 2.2c0-.5.3-.9.8-.9s1 .4 1 .9-.7 1-1.2 1-.7-.5-.7-1z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M228.7 274.2c0-.4.4-.5.8-.5.3 0 .8.4.8.8s-.5.7-.8.7c-.4 0-.8-.6-.8-1" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M234 275.6c0-.3.2-.6.5-.6.4 0 .8.2.8.5s-.3.7-.7.7a.6.6 0 0 1-.6-.6m2.4-1.8c0-.4.2-.4.6-.4.5 0 .9.3.9.7 0 .4-.5.6-1 .6-.4 0-.5-.5-.5-1z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M231.1 269.5c0 .3-.1.5-.4.5-.4 0-.8-.2-.8-.5 0-.4.2-.5.5-.5s.7.1.7.5m-1.9 1.5c0 .4-.5.6-.9.6s-.5-.2-.5-.6c0-.3.2-.4.6-.4.3 0 .8 0 .8.4m.9 3.1c0 .3-.1.6-.5.6s-.9-.3-.9-.6.2-.5.5-.5c.4 0 .9.2.9.5m3.1-1c0 .3-.6.7-1 .7s-.5-.6-.5-1c0-.3.3-.6.7-.6.3 0 .8.5.8.9m4.7 1c0 .3-.6.3-1 .3-.2 0-.5-.4-.5-.8 0-.3 0-.6.9-.5.3 0 .6.6.6 1m-2.8 1.3c0 .4-.2.7-.6.7a.6.6 0 0 1-.6-.6c0-.4.3-.5.6-.5.4 0 .6.1.6.5z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M235.6 273.5s.6-.2 1-.1c.6 0 .6.2.6.3l-.6.2zm-2.7 2.3.9-.4c.4 0 .7 0 .6.3 0 .3-.1.3-.5.3zm-1.8-4s1.1.5 1.4 1c.2.4.3.5 0 .6-.2.2-.4-.1-.6-.3a43.8 43.8 0 0 1-.8-1.3" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "m230.8 273.3 1.3-.3c.4 0 .5 0 .5.2s0 .3-.4.3l-1.4-.3zm-2.7 0s1 .1 1.2.4c.2.2.2.4.1.6-.1.1-.5 0-.7-.1s-.6-.9-.6-.9" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M228 274.6s.3-.5.7-.6c.3-.1.7 0 .8 0 0 .3-.3.5-.6.6zm-.7-4 .9.2c.3.3.4.5.3.6h-.7c-.4-.3-.6-.8-.6-.8zm2-2.4s1 .3 1.2.7c.3.4.3.7.2.8l-.8-.4z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M240 275s-1.9 1.6-6.2 1.5c-4.3-.2-8.3-2-9.2-4l.4 1 1 1.2 3 1.6 3.4.7 2.7.2 2.5-.4 2-1 .3-.5.2-.3zm.6-2-1.7-2a62.5 62.5 0 0 0-5-3.4l3.2 1.4 2.1 1.8 1.5 1.6z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M240.8 269s1.1.5 1.3.8l.4.5s-.3.7-.5.4l-.6-.7a7.7 7.7 0 0 1-.6-1m3.3-1.7s1 .5 1.3 1c.4.5.3.9.2 1-.2 0-.9-.6-1-.8 0-.3-.5-1.2-.5-1.2" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M245 267.1s1 .7 1.2 1c.2.4.5.8.2 1-.3 0-.8-.5-1-.8zm5.6 1.3s.7.3.8 1v1l-.6-.6v-.5zm1.4.5s.6.6.7 1c0 .4.1.7-.2.7-.3.1-.5-.3-.5-.6v-1zm-9.8 12s.5.2.9 0c.5-.1.8-.5.7-.8 0-.2-.3-.5-.6-.1-.3.3-.2.5-.4.6zm5.4 1.5s.7-.1 1.2-.7c.5-.5.7-.9.4-1-.3-.1-.8 0-.9.4a4.5 4.5 0 0 1-.7 1.3m4.4.1 1-.7c.4-.4.7-.6.4-1-.3-.2-.5 0-.7.1l-.1.6a7.1 7.1 0 0 1-.6 1" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M253.4 282.5s.6-.7.7-1.1c.1-.4.2-.9 0-.8-.3 0-.6.4-.7.6a68.3 68.3 0 0 0 0 1.3" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", stroke: "#04534e", strokeWidth: ".4", d: "M239.9 275.3c0-2 2.8-6.5 6-6.4 1.3 0 4 .7 6 1.7 1.8.8 2.4 1.6 3.5 2 1.2.2 3 0 3 0l4-.5-3.2 4.6-1 1s-1 2-4 3c-2.7 1.1-7.5.3-9.7-.2-2.1-.5-4.7-2.6-4.6-5.2z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M239.9 275.3h.2c0-.4.2-1 .5-1.7a9.8 9.8 0 0 1 2.1-3c1-.9 2-1.5 3.1-1.5a24.3 24.3 0 0 1 6 1.6 7 7 0 0 1 2 1.2 4.6 4.6 0 0 0 3.2 1l1.4-.1 3.5-.4-2.8 4.2-1.2 1a7.2 7.2 0 0 1-3.7 3c-1 .3-2.2.5-3.5.5-2.3 0-4.8-.5-6.1-.8a6.7 6.7 0 0 1-3-1.7 4.5 4.5 0 0 1-1.5-3.2v-.1h-.4a5 5 0 0 0 1.6 3.6 7.2 7.2 0 0 0 3.2 1.8c1.4.3 3.8.8 6.2.8a11 11 0 0 0 3.7-.6c2.9-1.1 3.9-3 3.9-3.1l-.2-.1.1.2 1.2-1 3.4-5-4.5.5H257a6.7 6.7 0 0 1-1.5-.1c-.6-.1-1-.4-1.5-.7-.5-.4-1-.8-2-1.2a23.2 23.2 0 0 0-3.3-1.2c-1.1-.3-2.1-.5-2.8-.5-1 0-1.7.3-2.5.8a9 9 0 0 0-2.6 2.8 6.7 6.7 0 0 0-1.1 3z" }),
    import_react29.default.createElement("path", { fill: "#0c8489", d: "M259.2 275.9c-.4.3-.7.3-1.1.3-.5 0-9.3-5.4-12-5.2-2.8.2-5.4 1.4-5.5 4.2 0 2.9.6 2.9 1.2 3.7s6 2 6 2h3.2l2.7-.4 2.3-1.3 1.3-1 .9-1z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M245.2 274.5c0 .5-.2 1-.8 1-.5 0-.9-.3-.9-.9 0-.5.3-.7.8-.7s.9 0 .9.6m1-2.5c0-.4.4-.6.9-.6s.9.1.9.6-.4.8-1 .8-.9-.3-.9-.8zm5.2 1.5c0-.4.4-.8.8-.8s.8.4.8.8-.4.7-.8.7a.7.7 0 0 1-.8-.7m1 3.2c0-.5.4-1 1-1 .4 0 .8.3.8.8s-.2 1-.6 1c-.5 0-1.1-.3-1.1-.8zm-2.5 2c0-.4.4-.7.9-.7s.8.3.8.8c0 .4-.3.7-.8.7-.4 0-.9-.3-.9-.7zm-4.9-.8c0-.4.4-.7.8-.7a.8.8 0 1 1 0 1.5.8.8 0 0 1-.8-.8" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M245.2 274.4c0 .4-.4.8-.9.8a.8.8 0 0 1-.8-.8c0-.5.4-.6.8-.6.5 0 .9.1.9.5zm2.5-2.5c0 .4-.1.7-.5.7-.5 0-1-.3-1-.8 0-.4.3-.7.7-.7.5 0 .8.3.8.8m5.2 1.3c0 .4-.4.7-.8.7s-.7-.3-.7-.7c0-.3.3-.6.7-.6s.8.3.8.6" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M250.1 275.4c0 .6-.2 1-.7 1s-1-.3-1-.9c0-.5.3-.7.9-.7s.8 0 .8.6" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M246.4 277.8c0 .4-.3.7-.8.7a.8.8 0 0 1-.8-.7c0-.5.5-.7 1-.7.4 0 .6.2.6.6zm3.6-2.5a.8.8 0 0 1-.8.8.8.8 0 0 1-.8-.8.8.8 0 0 1 .8-.8.8.8 0 0 1 .8.8m4.2 1c0 .6-.3 1-.8 1a.9.9 0 0 1-1-1c0-.4.2-.6.7-.6s1 .2 1 .7zm-2.7 2.3c0 .4-.3.7-.8.7s-.9-.3-.9-.7c0-.5.4-.7.9-.7.4 0 .8.3.8.7" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M251.8 276s1.3-.2 1.6 0c.2.3.2.6 0 .8l-.7-.1zm-1.3-4.3s1 .3 1.4.7c.4.4.4.8.3.9 0 0-.5.2-.7-.2zm-3 2s1.2.7 1.4 1c.3.4.4.7.2.9 0 .1-.7 0-.8-.3a78 78 0 0 0-.8-1.6" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M247 274.6s1.3.2 1.6.5c.4.2.6.2.6.4s-.2.4-.4.4l-1-.4c0-.2-.8-.8-.8-.8zm-1.6-3.8s1.4.2 1.7.4c.3.2.3.8 0 1-.3.2-.6-.2-.8-.4 0-.3-.9-1-.9-1m-2.9 2s1.3.6 1.7 1.2c.2.3.4.5 0 .6-.4.2-.8-.5-.8-.6a7 7 0 0 0-.9-1.2" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "m242.3 274.4 1.1-.1c.4 0 1-.2 1 .1 0 .3-.5.4-.8.3zm6.8 4.5s1-.6 1.3-.5c.5.1.6 0 .6.3s-.5.2-.6.2a48.8 48.8 0 0 1-1.2 0zm-4.8-.7s.4-.5.7-.6l.6.1c0 .2-.3.5-.5.5z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M258 277.3s-1.2 1.6-3 2.4c-2 .8-3.3 1-5.9.9a12 12 0 0 1-5.6-1.5 9 9 0 0 1-3.3-2.7c-.3-.6.3 1 .3 1l1.5 2 2 .8 2.7.7 2.6.3h2l2.4-.4 1.6-.5 1-.7.8-.6zm-2.4-4.7s-.7.2-2.3-.7c-1.6-1-3.5-2.3-7-2.3-3.6 0-4.8 2.4-5 2.6l1.6-2.1 1.6-1 1.3-.1h1.2l1.6.5 1.4.4 1.7.6 1.5.8 1.7.9zm4.8 1h-2.7c-.6.1-.6.2-.7.4a3.1 3.1 0 0 1-.2.4l-.7-1.4 2.9-.4 1.6.6-.2.5z" }),
    import_react29.default.createElement("path", { fill: "#0c8489", stroke: "#04534e", strokeWidth: ".4", d: "M256.6 288.3c.1.4.4.8.8.8h1.4l2.8-.2 1-1.1.6-2.6.8-1 2.6-1.5 2.3-.6 1.5-.2 2-.7 1.5-.7.6-1 .7-1.5-.7-2-1.6-2-2.6-1.1H268l-2.5.9-4.3 1s-2.5 1-3.5 3c-1 1.8-1 2.3-1.1 4.8-.2 2.5 0 5.7 0 5.7z" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "M257.7 287.4c.9 0 .2-1.4 1.2-3 1-1.7 2-3.7 2.4-3.7.3 0 .3.3.7.2.3-.1 1-.7 1-.8 0-.2 0-1 .7-1.7.7-.6 1.8-1.4 2.2-1.5.5-.1.7-.2.8 0 .1.2-.2.5.1.7.3 0 1 0 1.3-.5.2-.5.1-.7.1-.7s.5-.5 1.5-.3 1 .2 1.1.5c.1.4-.4.4-.3.7.1.3 0 .2 0 .4.1.2.3.8 1 .8.6 0 .8-.4.8-.4l.2-.3s.2-.4 0-.6c-.3-.2-.2-.4 0-.2.3 0 1.2 1.4 1.6.9.3-.6.3-1.4.2-1.6l-1.6-2.2-2.4-.9-3.2.3-3.2 1.8-2.9 1.5s-.1 2.4-.6 2c-.6-.5-1.3-1.6-1.5-1.3l-1 3c-.3.9-1.2 3.5-1 4.5 0 1 .5 2.4.8 2.4" }),
    import_react29.default.createElement("path", { fill: "#8cbebf", d: "m260.6 283.6-.6.3a.8.8 0 0 0-.2.8c.1.3.6.6.6.6h.4l.7-.2s.3-.3.3-.7c0-.4-.2-.5-.3-.5zm5-4.1c-.5-.2-.7.1-.7.2v.5s0 .6.3.7c.2.1.8.3 1 .1.2-.2.4-.3.4-.7 0-.4-.6-.6-.6-.6zm4 1c0-.2-.4-.3-.7-.3-.3 0-.6.4-.5.9.1.5.6.5 1 .4.4 0 .3-.6.3-.7l-.1-.4zm-11.6.7c0 .3.5.7 1 .7a1 1 0 0 0 1-.8c0-.3-.3.3-.7.4-.4 0-.7.2-.9 0l-.3-.3z" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M261.8 284.4s0 .5-.3.8l-.8.2c-.2 0-.5 0-.6-.2l-.3-.6s.4.7 1 .5c.7-.1 1-.7 1-.7m10.7-6.6s0 .5-.4.7c-.4.2-.6.3-.8.2-.2 0-.5 0-.6-.3-.5-.7-.2-1.2-.2-1.2s.3 1.3 1 1.2c.7-.1 1-.6 1-.6M263 280s-.4 1-1 1c-.7 0-.6-.1-.6-.3 0 0 .3.2.6 0 .3 0 1-.6 1-.6zm1.8-.1s0 .7.2 1c.2.2.5.3.8.3s.5 0 .7-.3c.2-.3 0-.6 0-.6l-.1.3a.7.7 0 0 1-.6.3c-.2 0-.6 0-.7-.3zm3.4-3.5s.2.5-.2 1c-.4.4-1.2.2-1.2.2s.6.1 1-.2c.3-.4.4-1 .4-1" }),
    import_react29.default.createElement("path", { fill: "#04534e", d: "M257.4 288.9s4.2 0 4.5-.7c.4-.5-.3-2.8 2.2-4.6 2.5-1.8 4.5-1.8 5.9-1.9 1.3 0 4.2-1 4.8-3.6.3-1.6-1.9-1.7-2.7-3.2-.8-1.5-2.9-.9-3-.9 0 0-2.4 0-3.5 1-.6.7-.5 1.5-.9 1.8-.2.4-3 0-3.3.5-.3.4 0 1.4-.2 1.6-.2.2-.8-.6-.8-.6l.2-2.3 3.5-2 4-2.3h2.8l2.8 1.5 1.4 1.6s.3.6.4 1.8a4.3 4.3 0 0 1-.1 1.6 6 6 0 0 1-5.4 4c-2.4.1-4.6 1.2-5.6 2-1.1.8-1.7 4.3-1.7 4.7 0 .5-5.2.2-5.2.2z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M259.1 280.7c-.2.2-.5.1-.6-.1-.2-.7.3-1.7.3-1.7v1.2c.1.2.3.2.4.3zm2.7-.6c-.2 0-.2-.7 0-1l1.3-1.1-.5 1.2c-.1.3-.5 1-.8 1zm-1 4.3c-.2 0-.3-.3-.3-.8s.8-1.3.8-1.3l-.2 1v.7c0 .3-.2.4-.3.4" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "m262.7 283.2-.8.7c-.4.2-.9.6-1.1.5-.3 0 .1-.6.3-.7zm3.6-5.1-.7 1c-.2.5-.3 1 0 1 .2.2.5-.6.5-.8z" }),
    import_react29.default.createElement("path", { fill: "#231f20", d: "M267.6 279.9s-.3-.3-.9-.5c-.6-.1-.9 0-1 .2 0 .2-.4.4-.2.6l.7-.3c.1 0 .4-.2.7-.1h.8zm-.7-3.5c.2.1.5-.2.8-.5l.5-1-.8.5c-.3.2-.6.8-.5 1m5.5-.2-1 .7c-.2.3-.5.6-.3.8.3.2.5-.2.7-.4l.6-1zm-1.6 3.7s-.2.5-.7.8c-.4.3-1 .4-1 .3-.2-.2 0-.5.2-.6l.7-.2c.4 0 .8-.3.8-.3" }),
    import_react29.default.createElement("ellipse", { cx: "272.7", cy: "229.2", fill: "url(#mx-b)", rx: "2.3", ry: "3.4", transform: "rotate(8.7)" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "m236.3 261.5-1.4 3.5 1.1-.2.7-3z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M237 260c-.6 0-1 .4-1 1-.1.4.2.9.7 1 .5 0 1-.3 1-.9 0-.5-.3-1-.8-1zm58.8 8.6-3.4 3.2 1.4.3 2.3-3z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M297.3 267.3c-.6-.3-1.3 0-1.7.5a1 1 0 0 0 .4 1.5c.5.3 1.3 0 1.6-.5a1 1 0 0 0-.4-1.5zm-87.1-16.9 1.8 3.9.8-1-2-3z" }),
    import_react29.default.createElement("path", { fill: "#fcca3e", stroke: "#aa8c30", strokeWidth: ".2", d: "M209.5 248.7a1.1 1.1 0 0 0-.1 1.5c.4.5 1 .6 1.5.2a1.1 1.1 0 0 0 .1-1.5 1 1 0 0 0-1.5-.2z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M237.3 260.2s.2.2 0 0c-.4 0-1.2.3-1.2.9 0 .5.4.8.8.8h-.6l-.2-.4-.2-.4.1-.5.3-.4.4-.1h.3z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M236.5 262.5s-.2 0-.4.3l-.6.8.7-1.9.5.2zm61 5.1s.3.3 0 0-1.4-.2-1.7.4c-.2.6 0 1.1.5 1.3.5.2-.2 0-.2 0l-.5-.4-.1-.4v-.6l.4-.4.6-.3h.5l.3.2.3.2z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M295.5 269.8h-.6l-1.2.7 1.9-1.7.4.5zm-85.6-21.3s.3-.1 0 0c-.3.3-.6 1.2-.2 1.6a1 1 0 0 0 1.3 0c.4-.3 0 .2 0 .2l-.6.3h-.4l-.5-.2-.3-.5v-.6l.1-.5.3-.2z" }),
    import_react29.default.createElement("path", { fill: "#aa8c30", d: "M211.2 251s-.2.2-.1.6l.2 1.2-1-2.2.5-.2z" }),
    import_react29.default.createElement("ellipse", { cx: "327.1", cy: "-73.3", fill: "url(#mx-c)", rx: "3.7", ry: "2.5", transform: "rotate(62.9)" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "M210 257s.8.2 1.2 0c.5-.3.5-.6.6-.7l.2-.7a3 3 0 0 0-.8-1.2h-.8c-.1-.2 0-.4-.2-.5-.2 0-1.3 1.3-1.1 1.5.2.2.3-.1.4 0v1z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "M211.2 254.5c0 .2.5.8.7.8h.9c.1 0 .7-.5.7-.8l-.1-.6c-.1-.2 0-.8-.3-.9-.2 0-.2 0-.3-.2-.2 0 0-.3-.2-.5-.1-.3-2 .8-1.8 1 .1.2.3 0 .4.2z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "m215.4 254-.1-1.4c-.2-.1-.5-.1-.6-.3 0-.1.3-.2.3-.4s-2 .1-2 .3c.2.3.5.1.5.3l-.4.5.2.9c.1.1 0 .3.2.4l.5.1h1.1c.1-.1.2 0 .3-.4m17.5 10.3s.3.6.7.7h.7c.1 0 .5-.1.6-.3l.3-1.1-.5-.6c0-.2.3-.2.2-.4s-1.6 0-1.6.2.2.1.2.3l-.6.5z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "M235 263.6v1l.5.5h.9a1 1 0 0 0 .3-.5c.1-.2.5-.5.4-.6l-.1-.4c0-.1.3-.2.3-.4s-1.7-.8-1.7-.6c-.1.3.2.2.1.4 0 0-.6.4-.6.6z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "M237.8 266c.2-.1.8-.7.8-1l-.1-.4.4-.1c0-.1-1.3-1.3-1.3-1-.1.2.2.3 0 .4h-.4l-.5.7c0 .1-.2.1-.1.3l.1.4.7.7zm52.9 4.4s0 .6.3 1l.6.3h.6c.2 0 .7-.7.7-.9v-.7c0-.1.2 0 .2-.2s-1.3-.9-1.4-.6v.3l-.7.2z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "m292.7 270.8-.5.6v.7l.9.4a1 1 0 0 0 .4-.2c.2 0 .7-.1.7-.3v-.3c.1-.1.3 0 .5-.2.1-.1-1-1.3-1.1-1.2-.2.2 0 .3 0 .3z" }),
    import_react29.default.createElement("path", { fill: "#e92736", d: "M293.2 273.8h1l.3-.4.3.1c.2 0 0-1.5-.1-1.4-.2 0-.1.3-.2.3-.2 0-.3-.2-.4-.3l-.7.1c-.2.1-.3 0-.4.2l-.1.3v.9z" }),
    import_react29.default.createElement("path", { fill: "#f7e204", d: "M211.3 255.3c.2.2 0 .8-.2 1-.1.2-1 0-1-.2v-.7c.1-.1.4-.5.7-.5.2 0 .5.3.5.4m.3-1.2c-.1.3 0 .5.2.6 0 .2.7.3 1 .2 0 0 .4-1.1.2-1.3 0-.1-.4-.2-.6-.1a3 3 0 0 0-.8.6m2.2-1v.6s.5.4.8.4c.2 0 .3-.8.3-1s0-.1-.2-.2zm20.9 11c0 .3-.6.5-.8.5-.2 0-.5-.7-.4-.8 0-.1.2-.3.4-.3h.7zm.8-.5c-.2 0-.2.3-.2.5 0 .1.2.6.4.7.2 0 1-.4 1-.6l-.3-.4zm2 .8c-.2 0-.4.3-.4.4 0 0 0 .5.2.7.2.1.7-.2.8-.3v-.3zm54.8 6.6c-.2.1-.7 0-.8 0-.2 0-.2-.9 0-.9 0 0 .3-.2.4-.1.2 0 .5.2.5.4zm.8 0-.5.2v.8c.1.1 1 .2 1 0 .2 0 .1-.4.1-.4zm.9 1.6h-.5l-.3.6c0 .2.5.3.6.3.1 0 .2 0 .3-.2z" }),
    import_react29.default.createElement("ellipse", { cx: "398.3", cy: "-31.4", fill: "url(#mx-d)", rx: "1.8", ry: "3.6", transform: "rotate(47.9)" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "M228.6 223.4s-3 .3-5.2 0c-2-.4-1.6-5.9-1.7-6 0-.2-1.3-1.5-1-2.7.2-1.2 4-4.4 4.6-4.6.4-.1 1.2.2 1.2.2s1-1 1.3-1c.3 0 .7.6.6.8-.2.3-1.5 1-1.6 1.7-.1.6 0 1.2-.4 1.8-.4.6-1.1 1.4-1.2 1.9-.1.5-.3 1 0 1.1.4.2 1.7 0 2.8-.5 1.1-.5 1.6-1.1 1.7-1 .2 0-.6 1.3-1.8 1.8-1.3.5-2 1.1-2.7 1 0 0-.6 1.6 1.4 1.7 2.1.1 3.3-.4 3.3-.4zm-12 12.8s1.7.6 1.7 2.4c0 1.8-1.8 3.3-1.7 6.5 0 3.2.5 3.2 4.7 6.6.1 0 1 1 1.2 2 .3 1 1 7 5 7s4.6-2.5 4.6-2.5l-1.7-2.5s-1.4.4-2.2.2a2.8 2.8 0 0 1-1.8-1.7c-.5-1-.6-3.3-1.3-4.3-1.7-2.5-4.7-3-4.7-5.6 0-2.7 1.9-3 1.3-6.1s-4.3-4.7-4.3-4.7l-1.5-.6-.5 3.1z" }),
    import_react29.default.createElement("path", { fill: "#f1a720", d: "M227.8 214.1c1.3-.3.5-3.8.5-3.8l-.9.7s.6.8.6 1.6-.2 1.5-.2 1.5" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "m230.2 249.2-.7-.6c-.4-.3-2.6-2-2.2-7 .4-5.8 8.7-8.8 9.2-11.1.7-2.6 2.6-3.7-4.1-8.9l-1.6 1.9 2.8 2s.6-.3.6.5c0 .7-.7 1.4-1 2 0 .5-4.2 3.4-4.5 3.7l-2.4 2s-1.1 1-2.1 3.2-.5 5-.5 5 0 6.2 6.5 7.3" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "m226.2 252.4.4 2.2-1.3.5h-.6l-.4.1-1 1h-.3l-.2-.7a16.7 16.7 0 0 0-.1-1.1l1.2.5h.5l.3-.1.5-1.2zm-4 .4-.5-.8-.8-.7 1-.5h1l-.2 1.2zm2.3-3.5s.6.3.8.8l.5 1-1.6-.1-1.1-.4.7-1zm-.6 9.6s-.3-.2-.5-.7l-.3-1.3 1-.2 1.2.5h.3l-.3.6-1.1 1zm4-3.3s-.8-.3-1-.7c-.1-.5-.2-.4-.2-.4l-.3 1.2-.4 1.2.1.2 1-.3.6-.7zm-3.7 3.8 1 .6c.7.4 1 .4 1 .4l.6-.5.4-1 .1-.1-2.5.2zm3.5-1 2.1-1.2.1-1.1-.4-.3h-1.2l-.3 1.4-.3 1.3zm-1.5 2s1.5.7 4-.2c1.2-.5 1.4-1 1.4-1l-1-.4-1 .8zm-2-16.2-.3-1-.1-1 .7.4 1.1.8-.7.6zm1.8 3-.7-.8a9.7 9.7 0 0 1-.5-1l.8.2.9.5-.4 1.1z" }),
    import_react29.default.createElement("path", { fill: "#c6c7a6", d: "M221.3 213.7c-.2.5-.4 1.4.3 1.6.4 0 2 0 3.7-2 .8-1 .8-2 .8-2l.4-1s-.7-.5-1.8.2a33 33 0 0 0-3.4 3.2" }),
    import_react29.default.createElement("circle", { cx: "226", cy: "210.9", r: ".3", fill: "#1c242f" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "M223.8 211.2c-.8.6-1.4 1.3-1.4 1.3s1.1-.3 2-1.1a2.8 2.8 0 0 1 2.2-.6c.2 0 .1-.3 0-.4-.3-.2-1.1-.3-1.3-.2 0 0-.8.4-1.5 1" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "M227.3 243.6v-1.8l-.7.6-.7 1 1 .3zm-3.6-2v-1.9c0-.9.4-2.5.4-2.5l.4 1.1 1.3 2 .4.3-1 .7-1.2.4zm3.6-.6.2-.8.4-1-1.1 1-.5.4.6.5zm-3-4.7s.2-.6.7-1.3l1.1-1.5.5 2 .3 1.6v.3l-.5.2c-.1 0-1.3 0-1.5-.3zm3.8 2.2.7-.7.8-.8-2.6.5.4.8zm-1.5-5.3.9-.8c.7-.7 1-.6 1-.6l.3 2.8-1.3-.4zm3.2 3.8 1.6-1.6-2.6-.8.5 1.8zm1.1-4.2.2-2.7-1.2.8-1 .8.3.4 1 .6zm2.3-2.6v-2l-.9.9a4.5 4.5 0 0 0-.6.6l.7.4zm1 2.8 1.2-1a5.2 5.2 0 0 0 1.2-1.3l-3.3-.3.1 1.4zm-7.8-11v1.5h2.7l-.7-1-.8-.5-.8-.8zm5.4 13 1.2-1 1-.8-2.7-.3.1 1.8zm5-4.8s.3-1 .3-2a5.2 5.2 0 0 0-.2-1.5l-2 1.3.3 1 .8.9z" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "M233.4 227.8s.6-.7.7-1.1v-.3h1.6l.9.1.1.1-.7.8-1 .6-1.2.1zm3.2-1.5-1-1.7-.6-.8-.8 2.2v.3z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "m217.3 241.8-.3.6s1-.6 1.9-.5c.8 0 1.7 1 1.7 1l.2-.7s-1.1-1-1.8-1.1c-.7 0-1.7.7-1.7.7m.5-4.7.3.3c0 .1 0-.7 1.1-1.2 1-.4 1.7 0 1.7 0s-.2-.7-.7-.8c-.5-.1-1 0-1.5.4-.6.4-.9 1.3-.9 1.3m3.6 3.5s-.5-1-1.4-1.3c-.8-.2-1.9.5-1.9.5l-.2.5s1.2-.6 2-.3c.9.4 1.3 1.4 1.3 1.4zm-4-4 .3.3s-.2-1 .4-1.7l.9-.8-.5-.2s-.7.5-1 1c-.2.5-.2 1.1-.1 1.3zm-.5-2c.3-.5 1-.7 1-.7l-.3-.2h-.3s-.4.2-.7.8c-.3.7-.3 1.6-.3 1.6l.5.2s-.1-1 .1-1.6zm6.3-15.2c.7-.4 1.2-.3 1.2-.3s-1 1-.5 2.3c-.6 1-.8 1.9-.8 1.9h.6l.3-1.5a5 5 0 0 0 1.5 1.7h.8s0-1 .5-2a4 4 0 0 0 1.6 1.2v-.3s-.9-.5-1.4-1.2v-.1c.6-1 1.4-1.3 1.4-1.3l.6.4.1-.1-.4-.6h-.5l-1.4 1.4a7.3 7.3 0 0 1-.6-1.3h-.4s-.8 0-1.6 1.3c-.1-1 1-2 1-2l-.1-.3-2 .4c-.7.3-1.2 1-1.2 1v.6s.7-.8 1.3-1.2m1.2 1.7c.5-.7 1.5-1.2 1.5-1.2s0 .6.7 1.3c-.4.8-.6 1.9-.6 1.9s-.9-.6-1.6-1.6a1.3 1.3 0 0 1-.1-.3 2 2 0 0 1 0-.1zm-6 16.9v.6s.6-.7 1.5-.7c1 0 1.8.7 1.8.7v-.9c-.2 0-1-.5-1.7-.5-.8 0-1.7.8-1.7.8zm17-9a8.1 8.1 0 0 1-.3-.8l.4-.2a10 10 0 0 0 1.4-1.3l-.3-.4h-1.3l-1.1-.1.4-1.4.4-1.1-.4-.4s.1.4-.7.5a7 7 0 0 1-2.2-.7v.4l2 .5 1-.2a6.9 6.9 0 0 0-.5 1l-.2.8.2.1-.1.7 1.1.1 1.4.1s-.7.8-1.4 1.1a1.8 1.8 0 0 1-.3.1l-.8-1.2v.4l.5 1-1.2-.2-.3.3v2l-1.4-.4-.3.2-.3.2s-.3 1.2-.3 2.6c-1.2-.3-1.9-1-1.9-1l-.3.2s-.2 1.2.1 2.6a4.7 4.7 0 0 1-2-1.2l-.4.4.4 3.5.1.3a4 4 0 0 1-.6 0c-1 0-1.8-1.1-1.8-1.1l-.3.8s.4 2.2 1.6 3.2l.3.2c-1 .8-2.3 1-2.3 1l.1.6a35.8 35.8 0 0 0 1.7 1.3c-.6.5-1.3.7-1.3.7l.2.4 1.4-1a7 7 0 0 0 1.5.4v-.4l-1.2-.2v-.1c.5-.4 1.2-1.5 1.2-1.5v-.8s-.4 0-.9-.4c1.5-1 1.5-1.5 1.5-1.5l.3-.5s-.5-.2-.9-1a9 9 0 0 0 2.4-.5l.2-.2s-.6-.9-.9-2l2.4.5.4-.4s-.3-.9-.4-2l2.5.3.3-.3s-.8-1.5-.8-2.3v-.1h3.2l.2-.4s-1-.7-1.4-1.2m-8.4 12.4s-.3.8-1 1.6l-.3.2a3.7 3.7 0 0 1-.4-.2c-.8-.5-1-1-1-1l2-1.3zm.7-2.5-1.5 1.5a3.3 3.3 0 0 1-.3-.4c-.7-.9-1.6-1.6-1.5-3 0 0 .5 1 1.7.9l.8-.2c.3.8.8 1.2.8 1.2m1.6-2-2 .5a4.2 4.2 0 0 1-.2-.3c-.4-1.3-.4-3.2-.4-3.2s.9.6 2 .9zm-.3-2.4c-.2-1.1 0-2.3 0-2.3s.7.6 1.9.8c0 1.1.2 1.7.2 1.7zm4.6-1.8s-.7.3-2.2.1a18.4 18.4 0 0 1 0-2.8c.2 0 1 .4 1.8.5v.1a8 8 0 0 0 .4 2.1m0-2.5h-.2v-2.1s.8.2 1.4.1c.1.4 0 .5.4 1 .3.6.9 1 .9 1s-1.9.2-2.6 0zm-6 15-.2-.5s-.7.5-1 1.1a1.3 1.3 0 0 1-.2 0l-1.6-.7.2.3 1.5.6-.3 1.2.2.3s0-.8.4-1.4h1l-.2.7a51.4 51.4 0 0 0-.3 1.2l.3.2h1.7l-.3-.3h-.6a3.2 3.2 0 0 0-.9 0l.3-1 .2-.6-.2-.6-.9.1.8-.7zm-9.1-1.1a3.4 3.4 0 0 1 1.8.7v-.5s-.8-1-1.7-1c-1 0-2 .9-2 .9v1s.9-1.1 1.9-1.1m10.6 15.5c-1 .5-2.2.5-2.2.5l.7-1.3c2-.5 2.4-1.9 2.4-1.9l-.1-.5s-.5 1.3-2.2 2l.6-2.6-.5-.2s-.8 1-1.6 1.3a6 6 0 0 0 .6-2.2l-.2-.4s-.6.5-1.4.6h-.5c.5-.6 1.4-2.5 1.4-2.5l-.1-.4s-.7 1.7-1.4 2.5l-.3.3a9.7 9.7 0 0 1-1.7-.8v.3s.7.5 1.5.8l-1 1v.8l2.4.3a5.8 5.8 0 0 1-1.6 1.7l.3.5s1.1 0 3-.5c-.5 1-1 1.5-1 1.5s1.8.1 3-.5 1.6-1.2 1.6-1.2l-.4-.4s-.2.9-1.3 1.3m-5.5-3.3 1-1.1c1.2.3 1.6-.1 1.6-.1s.2.7-.5 1.8a6.6 6.6 0 0 1-2-.6zm1.1 2.5 1-1.3a3.2 3.2 0 0 0 .3-.3c1.2 0 1.9-1 1.9-1s.1 1-.4 2.2c-1.6.6-2.8.4-2.8.4m-1.5-7.9c1.2.1 2.6.6 2.6.6l-.1-.6-2.3-.4c.4-.9 1.2-1.3 1.2-1.3l-.4-.2s-.4 0-1 1.2l-.2.2a3.4 3.4 0 0 0-.3 0c-1 0-1.9.6-1.9.6l.2.3s.9-.4 1.8-.4l-.6 2 .2.5zm-2.4-4.9-.2-.6s-1.3-.4-2.2 0c-1 .5-1.6 1.5-1.6 1.5l.4.8s.6-1.2 1.5-1.5c.8-.3 2.1-.2 2.1-.2m2.4 1.9-.8-.4s-1.3.3-1.8.8-.9 1.7-.7 2c.1.4.5.6.5.6s.2-1.3.9-1.9c.6-.6 1.9-1.1 1.9-1.1m-3-.4c.4-.5 1.4-.7 1.4-.7l-.5-.5s-1.2.2-1.8.7l-1.4 1.7.7.7 1.5-1.9zm4-35.8c.7-.8 1.3-.8 1.5-.8h.6a7.4 7.4 0 0 0-.7 2c-.2.8-.5 1-.8 1.5-.3.5-.9 1.5-1 2.3 0 .8.2 1.2.5 1.3.2 0 .5-.4.5-.5 0-.3-.2 0-.4 0s0-.3-.2-.8c0-.5.6-1.8.8-2.2.3-.4.8-1 .9-1.6 0-.7.5-2 .5-2 0-.1-.3-.2-1-.2a2 2 0 0 0-1.5.9c-.4.5-1.4.9-1.4.9s1.1 0 1.7-.8" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "M228.2 219.6h-2l.5 1.5zm-2.4 0-.4-.4a1.2 1.2 0 0 0-.3-.3l-.7.5-.4 1.5.2.2 1.6-1.6zm-.3 4-1.4-2.2-.8 1.7.4.2 1 .1.8.1zm6 35.7h-.1a7.2 7.2 0 0 1-3.8 1.2c-.8 0-1.8-.2-2.7-.7a3.1 3.1 0 0 1-1.2-1.5c-.5-.9-.6-2-.8-3.1a8.8 8.8 0 0 0-1-3c-.6-1-1.8-1.7-3-2.6a5.9 5.9 0 0 1-2.2-4.2 6.5 6.5 0 0 1 0-.6 9 9 0 0 1 .9-3.6c.4-1 .9-2 .9-2.8v-.4c-.2-.6-.8-1.1-1.2-1.5l-1-.6-.8-.3v.3l.7.2v-.1.1a6.8 6.8 0 0 1 1 .7c.5.4.9.8 1 1.3v.3c0 .7-.4 1.6-.9 2.7a9.4 9.4 0 0 0-.9 3.7 6.1 6.1 0 0 0 2.4 5c1.2 1 2.4 1.6 3 2.6.6 1 .7 2.5 1 4 .2.7.3 1.4.6 2 .3.7.7 1.2 1.4 1.6a5.6 5.6 0 0 0 2.8.8c2.3 0 4-1.3 4-1.3z" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "m229.7 255.4-1 .2a2 2 0 0 1-1.4-.6c-.6-.6-.8-1.1-.9-1.8-.1-.7-.3-1.6-.7-2.7-.5-1.1-1.7-2-2.9-2.9-1-.9-2.1-1.8-2.3-2.7a2.6 2.6 0 0 1 0-.5c0-.8.3-1.6.6-2.6.4-.9.8-2 .8-3.2v-.6c-.2-1.6-1.5-2.8-2.6-3.6a11.3 11.3 0 0 0-2.3-1.1v.2h.1c.4.2 1.5.7 2.5 1.5 1 .7 1.8 1.7 2 3v.6c0 1.2-.3 2.2-.7 3.1-.3 1-.7 1.8-.7 2.7a3 3 0 0 0 0 .5c.3 1.1 1.4 2 2.5 2.9 1.1.9 2.3 1.8 2.7 2.8.5 1.1.6 2 .7 2.6a3.5 3.5 0 0 0 1 2c.6.5 1.1.7 1.6.7a2.2 2.2 0 0 0 1.2-.3z" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "M237 249.3s1.5.3 1.4 1.4c0 1.2-.6 2.7-.6 2.7l-2-1.7 1.1-1 .4-.5-.2-1z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M213.1 235.6s-1.4.5-1.7-.1c-.2-.6-.1-1-.1-1.2 0-.1-.9-.2-.8-1 0-.8 1-.7 1.3-.7.2 0 .3-1.2 1-1.2s1 .9 1 .9z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M214.6 236s-1.1.6-1.5 0c-.4-.5 0-1.3-.1-1.4-.2-.1-.9-.4-.7-1 0-.8.8-.5 1-.7.3-.1.5-1.1 1.3-1 .7.2.8.8.8.8z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M216.6 236.3s-.3.7-1.2.5c-.8-.1-.5-1.3-.7-1.5-.1-.2-.7-.4-.6-1.2.1-.7.9-.6 1.2-.7.2-.1.5-1.3 1-1.1.6.1 1.2.8 1 1.1 0 0-1.1.4-1.3 1.2-.1.8.6 1.7.6 1.7z" }),
    import_react29.default.createElement("path", { fill: "#af7029", d: "m235 249-1.8-2.1-1.8-2.2-1.8-.9-1.2-1.9v-2.2l.4-1.3.7-1s-3.7 1.4-1.8 8.5c.8 3 2.8 3.4 2.8 3.4l3.4-.2 1-.1z" }),
    import_react29.default.createElement("path", { fill: "#816c2a", d: "M233.3 225.4c.3 0 .5 0 .6.2l.1.6a1.6 1.6 0 0 1 0 .2l.1.1c-1.3 2.7-3.9 4-6.2 5.6a11 11 0 0 0-3 3.1 9.6 9.6 0 0 0-1.4 5.5c.1 4 1.6 6.3 3.3 7.4a7.7 7.7 0 0 0 4.2 1.3h.3l1.2-.1a28.5 28.5 0 0 1 2.4-.2 9 9 0 0 1 1.4.1c.4 0 .6.2.7.3a.6.6 0 0 1 .2.4c0 .3-.2.7-.5 1l-.7.5v.3l.9-.6c.3-.4.5-.7.5-1.2a.9.9 0 0 0-.2-.5c-.2-.2-.5-.3-.9-.4a9.4 9.4 0 0 0-1.4-.1l-3.6.2v.2-.2a4.6 4.6 0 0 1-.2 0c-.7 0-2.5 0-4.1-1.2-1.6-1-3.1-3.2-3.2-7.2v-.3c0-2.2.5-3.8 1.2-5 1.2-2 3-3 4.8-4.3 1.8-1.2 3.5-2.4 4.4-4.5s0-.2 0-.4l-.1-.7c-.1-.2-.4-.4-.8-.4z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M238.3 250.1s-1 1.6-1.2 1.7c-.2 0 .8.2 1 .6l-.2.4s-1-.7-1.5-.7l-.1-.6s.5-.2.9-.6c.3-.3.7-1.1.7-1.3z" }),
    import_react29.default.createElement("path", { fill: "#fcca3d", d: "m241.7 251.2-2.2.6-1.1-.7s0-.9-.4-1.3c-.5-.4-.8-.5-1.3-.7-.4-.2-2-.2-2-.2l-4-4.3 1.5.2 2.4-.3 2.1-.2 1.2.2 1.2.3.6.6.7.6.7 1 .4 1.3.2 1.3z" }),
    import_react29.default.createElement("path", { fill: "#af7029", d: "M241.8 251s-.8.3-1.8.3-1.6-.2-1.6-.2l-.2.7-.4 1v2.6l2.1.4 1.1-.4.6-2.8.1-1.5z" }),
    import_react29.default.createElement("path", { fill: "#fcca3d", d: "M241.2 250v1h.5v-.8zm-2-24-.2-1.7-.7-1.2-.9-1.2-.9-1-.5-.5-.2-.3-2.3.1-1.2 1.4s3 2.2 4.3 4.6c1 .3 1.8 1 2.2 1.4l.1-.2z" }),
    import_react29.default.createElement("path", { fill: "#af7029", d: "M237 228c0 1.7-.3 2.6-.6 3l1.4-1.6 1-1.8a5.7 5.7 0 0 0-2.2-1.4c.2.6.4 1.2.4 1.8" }),
    import_react29.default.createElement("path", { fill: "#816c2a", d: "m240.2 254.3-1.1-1.3-1-.7-.2.2h.1l1 .7a13.1 13.1 0 0 1 1 1.3z" }),
    import_react29.default.createElement("path", { fill: "#6f5b24", d: "M241.6 252.4s-.2.8-1 1.5-1.8 1.1-1.8 1.1l2.2.9 1.5-1.4-1-2.1z" }),
    import_react29.default.createElement("path", { fill: "#404118", d: "m241.9 254.3-.2.2-.4.4-.3.4.6-2.4.4.7v.4z" }),
    import_react29.default.createElement("path", { fill: "none", stroke: "#78732e", strokeWidth: ".2", d: "M228.6 223.4s-3 .3-5.2 0c-2-.4-1.6-5.9-1.7-6 0-.2-1.3-1.5-1-2.7.2-1.2 4-4.4 4.6-4.6.4-.1 1.2.2 1.2.2s1-1 1.3-1c.3 0 .7.6.6.8-.2.3-1.5 1-1.6 1.7-.1.6 0 1.2-.4 1.8-.4.6-1.1 1.4-1.2 1.9-.1.5-.3 1 0 1.1.4.2 1.7 0 2.8-.5 1.1-.5 1.6-1.1 1.7-1 .2 0-.6 1.3-1.8 1.8-1.3.5-2 1.1-2.7 1 0 0-.6 1.6 1.4 1.7 2.1.1 3.3-.4 3.3-.4z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", stroke: "#4d2a15", strokeWidth: ".3", d: "M255 200.5s-5.7-1-5.6 3.6c0 1.5.4 2 1.5 2.3 1.2.3 3.6.5 5.6 2.3 2 1.8 2.2 3.1 2.2 4.2 0 1-.5 2-.5 2l1.3 6.2 1.2 4.6 3.8-2.2 2.3-6.8-2.9-12.2z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M260.5 224s2-.8 2.5-2.4c0-.4-2-2.3-2-2.3l1.5 1c.5.5 1 .7 1 .6.3 0 1.2-2.1.8-2.6-.3-.4-.9-1.5-1.7-2-.8-.6-1.9-.5-1.9-.5s1.5-.5 2.3 0c.7.3.8.8.9.6a9 9 0 0 0-.5-3c-.4-.6-.7-1-1.6-1.1-1-.2-1.9-.1-1.9-.1s1.3-.8 2.3-.5c1 .2 1 .7 1 .6a9.8 9.8 0 0 0-.7-2.3 5.3 5.3 0 0 0-1.7-1.5l-1.4-.2h-.5s.7-.5 1.7-.4c1 .1 1 .4 1.1.4.2 0 0-.2-.7-.6a39.6 39.6 0 0 0-3.4-1.6h-2.5s0-.7.7-.8c.7-.1 1 0 .9-.1 0-.2-2.2-.7-2.2-.7h-1.7l-2.4.3.5-.7c.3-.3.8-.4 1.1-.5.9-.2-.4-.9-.4-.9l.6-1 3.2.2 6.5 3.9 3.1 2.6 2 5-.6 8.6-4.4 3.6-2 .2z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M254.8 202.7s-.2-.6-.2-1.4v-.7s-2-.3-3.5.9c-1.6 1.2-.7 3.3-.7 3.3s.7-.6 1.5-1c.9-.3 2.4-.2 2.4-.2.2-.2-.3-.8-.9-.9l-1.7-.1s.7-.5 1.8-.4c1.1.1 1.3.5 1.3.5" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "m261.3 224.7-1.4.5.9 6 5.7 9.7 3-.5 1-1.8.7.3c.4.4 1.5 2.3 2.4 2.7 1 .3 1.4.2 2.3.9.8.6 3.9 5.2 4 5.3.2.2-.2-1.9-.2-1.9l-.9-2.7-1.1-1.9-.2-.5h1.5l1 .6 1.5 1.3.8.9.4 1 .2.8.4 1.3.8 1.7 1 1.7.3-.6-.5-2-1.5-4.9-1-1.6 1.6 1c.4 0 1.5 1.8 1.5 1.8l.7 1.7.5 1.6.4 1.4.5 1.5.9-.5-.2-1.1-.8-3.4-.3-3.6s.4 0 1 .6c.5.6 1 1.9 1 1.9l.3 3.2.5 3 1 3 1 2 .7 1v-1.5l-1.2-12.8.1-.5s.2-.1.6.5l.9 1.5.3 2 .2 1.4.3 2.6.3 2.8 1.3 3 .7 1.7.4-2-.6-13.6.3-.4 1 1 .6.8.5 3 .3 8.7.3 2.2 2.6-22.6 1.5-.3.2-.5-1.1-.8-2.6-4-1.7-3.9-3-5.6-5.3-6.4-4.1-3.4-1.5-1 .2-.9.9-1.4h-.8l-1.8.3-1.8-.6-3.5-2.4-3.7-1.8-2.2-.8-5.3-1.3-5.3-.7h-2.3l-2.2.3s-1 .5-1.4 1.2c-.4.6-.4 1.1-.3 2.1.1 1 .7 1.5 2.2 2.1 1.5.6 5 3 5 3l1.6 1.6.6.8.1.6 1.2 9-2.3 4.8z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M267 238.6s1 1.6 2.3.3c1.4-1.2-.6-4.8-.5-5 0-.2.6-.3.6-.3l1 1.9s.6 1 .3 2.5c-.2 1.6-1.7 3-1.7 3l-1.7-.5z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m300.2 259.4-1.2-3.6-.4-2.8-.3-7.5c-.1-1 0-2.3-.2-2.5l-1.3-1.8-.5-.5.3-.3s.5.5.6.3c.1-.3 0-1.6-.5-3.6s-3-6.7-3-6.7l.2.3.7.7 1.5 1.2 3.3 1.2 1.7.3 1.2 2.3s.8 3.9.7 5.9c0 2-.1 3.6-.9 5.6-.8 2-1 8.2-1 9.2l-.5 2z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M300.2 249s.7-.9 1-2c.3-1 .4-9.9-.6-11a8.2 8.2 0 0 0-3.3-1.8l.8 2.9.7 1 .5 1.5c0 .7.7 2.5.8 4.8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M295.4 254.4s.5-4.1.3-7.1-.5-3.4-.8-4a25.8 25.8 0 0 1-2-5c-.7-2.6-1.2-4.5-1.6-5-.5-.5-1.4-1.6-1.6-1.3-.2.3-.2.9-.2.9l-1.3-.3-.3-.8.4-1.3v-.6l-.2-.9 1.6 1.3 3.3 2.2 1.7 7 1.5 4.2.2 7.2-.1 6.4zm2-19.7 1.3 1c.5.4 1.5 1 1.3 1l-1.6-.6-1-.7z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M291 252.8s.6-1.4.5-3.3c-.1-1.8-1-6.3-1.3-6.8-.3-.6-1.6-1.4-2.7-4-1.2-2.4-1.1-3-1.9-3.8a73.6 73.6 0 0 1-1.6-2l.3-2.7 2.8 1.5 1.3.6 1.4 7 1.3 2 .6 2.7.7 6.5.3 5.2-.2.5zm-3.4-3s0-2-.4-3.8c-.5-1.9-1-3.2-1.5-3.8a28 28 0 0 1-3.3-4 45 45 0 0 0-3.1-4v-2.7l1.7 1.2a44.9 44.9 0 0 1 1.8 1l.8 3 1 2.1 1.4 2 1 .8.5 3.2.3 1.8.8 2.6-.3 1.3zm-2.4 0-.8-.7s.5-.5.3-1.5c-.3-1-.5-2-1-3s-.6-1.6-.9-1.9a97.8 97.8 0 0 0-3.5-3.2l-3-2.6c-.8-.5-1.4-.6-1.4-.6l-.4-3.2s1 1.4 1.7 1.6l1.6.6 2.3 4 .8 1 2 1.7.9 1.7.6 2 .8 2.7.2 1.7zm-4.4-.8s-1.3-1.5-1.6-2.5c-.2-1 .2-1-.2-2.1a9.5 9.5 0 0 0-3-3.7c-1.1-1-2.7-2.3-2.6-3 0-.7.3-.8.3-.8l.7.6 3.5 3.8 1.1 2 .9 2.5.5 1.1.5 1.5zm12.8-18.6s2.5 3 3.1.2c.3-1.2-.8-3.6-.8-3.6l-3-5-4.7-5.8-2.8-1.3 1 1.6s2 2 4.7 6.7c2.7 4.6 2.1 7 2.1 7zM279.4 212s4.9 4.2 8 8.7c3.1 4.5 4.4 7.5 3.7 8-.7.7-2.7-.3-3.5-1.5-.8-1.3-1.5-3.5-4.4-6.9-3-3.4-4.4-3.9-4.4-3.9l-2.2-3.4zm-2.6 10s3 2.4 4.7 4.3a29.8 29.8 0 0 1 2.8 3.4l1.1 1.1s-.6-1.2-.2-1.6c.3-.4.8-.2.8-.2l-9.2-9.7zm-.6.2s1 1.8 2.5 3.3a298 298 0 0 0 3.2 3.1l.7 2.4s-4.2-3.2-4.2-2.4a7 7 0 0 0 1 2.4l-1.3-.7-1.8-2.5-1-2.3-1.2-3z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M263.6 232.2s2.2 2 3.4 0c1.2-1.9.2-4 .2-4s3.1 4.5 4 .2c.1-.8-1.9-3.7-1.9-3.7l.7-.7 1.6 2.6s1.5-.6 1.5-2.4c0-1.8-1.6-4.2-1.6-4.2l1.5 1.6s2.8 0 2.9-1.7c0-1.7-2.4-3.5-2.4-3.5s2 .1 2-1c-.1-1.2-2.7-2-2.8-2.7 0-.7.8-1.9 2-1.2 1.2.6 2.8 1.2 3.5-.1.7-1.3 0-1.6 0-1.6l-1.7-.4-2.8-1.4-2.1-.8-2.2-.3.8 1.7.6 4.5v2.1l.4 4.6-1 3.8-.7.7-.4.5-1 2-1.2 1.5-1.7 2.2z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M279 240.7s-.5-1.3-1.7-2.3c-1.2-.9-3-1-3-1l3.2 3.4zm4.5.8s-1-2-2.2-3.3c-1.2-1.3-2-3-2.4-3l-.5.1.3 2.6 2.2 2.2s2 1.5 2.6 1.4m3.7-.2s-.5-2.4-1.7-4.7-2.6-3.3-2.6-3.3l.3 2.5 1 2.4 1.7 2.4zm3-1.3s.9-5 .1-6.3a3.7 3.7 0 0 0-2.2-1.7l-.5.7.5 3.6 1.1 2.7zm3-8.3s.7.4 1.6 2c.9 1.7 2.1 6.7 2.1 7 0 .2-.5.1-.6 0l-3-4.7-.6-4.3z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M272.3 237.5s1.6-.4 1.6-1c0-.5-2-1.6-1.8-2.5.1-.4 1.6.1 1.7-.2.2-.3-1.5-3-1-3.6.5-.6 2 2.9 2 2.9s.8 1.6.5 2.5c-1 3-3 1.9-3 1.9m3.7-3.6c0-.2 2.5.3 2.5.1.1-.5-2.2-2.3-2.2-2.3s-.5-1-.3-1.1c.1-.2 1.6.1 1.7 0 0-.3-1.7-2.6-1.7-3 0-.4.5 0 .5 0s1.3 1.4 2 2.5c.8 1.2 1.5 2.1 1.2 4-.2 2-4 .4-3.7-.2m11-3.6s-.5-1.7-.2-1.9l.8-.4s-1.3-.8-1.9-.8c-.6 0-.7-.2-.8 0-.2.3 1 2 1 2z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M279.6 231.5s3.7 1 3.8.7c.2-.3-3-3.2-3-3.2v-.7c0-.2 1.3-.2 1.7.1.3.3 0 1 0 1.2.2.2 1.4 2 1.6 1.7.2-.3-.2-2.5-.1-2.6 0-.2 1.4 1.2 1.7 1.5.4.2 2.5 1.8 2.7 1 .2-.7.3-.8.3-1.3-.1-.4.6 2.1-.3 2.4-1 .4-2.1-.3-2.1-.3l-.9-.7-.5-.5s.6 2 0 2.2c-.7.2-1.5.1-1.5.1l-1.5-.2-2-1.4zm8.5-2.5s4 2.4 4.3 2c.4-.5-1-6-.8-6.6.2-.5 3.2 6.3 1.8 7.2-1.2.7-1.7.2-1.7.2l-2-1zm11 10 .9.4.5.2-1.1.2zm-3.8-13.1.6.3.5.2-.5.2a1.3 1.3 0 0 1-.3-.1zm-1.2-2s.4.2 1-.1.5-.7.5-.8c0-.2-.9-.2-1.2-.4-.2-.2-.2-.5-.2-.5H293zm3.5 11.6 1.6.7c.3 0 .9.4.8.5 0 .1-1 .2-1.4 0-.5-.3-.6-.2-.6-.2zm-6.5-18.1h1c.2.2 0 1-.3 1.3l-.8.4a38.5 38.5 0 0 1-1.3-1.8zm-5.7-5 1.2-.1c.4 0 .9.3 1.2.5.4.2.7 2.6.5 3-.2.5-2.8-1.5-2.9-1.7 0-.2-1.2-2-1.2-2zm-2.5-1.2s2 .2 1.8-1a3 3 0 0 0-1-1.9l-2.4 1.7zm-5.2-2.2s.5.2 1.1 0c.6-.2 2.1-2.2 3.2-2.4 1.1-.3 1.4-.3 1.6 0 .2.2 0 1.4-.2 1.7-.2.3-3.5 1.7-3.5 1.7l-1.2-.2-1-.3zm-.6-3.6c-.5-1.2-1.4-1.6-1.7-1.6-.3.1 1.1 1.3 1.3 2.8l.2 2.8h.7v-.5l.2-.5v-.4l-.1-.8-.2-.6-.1-.5zm-4.6-1.7a12.3 12.3 0 0 0-4.4-3c-.2 0 3.2 2 4 3.4.7 1.2.7 3 1 3.2.4.3.7 0 .7-.1 0 0 .3-.4.2-.5l-.2-.9-.5-.8-.3-.6zm-4.4-1.8a13.4 13.4 0 0 0-8-2.5c-2.9 0-4.3.2-3.9 1.8.4 1.5 1.7 2.1 4 2.1 2.4 0 3-.2 4.2.2 1.2.4 2.4 1 2.9 1.6.4.4-1-1.2-2.1-2l-2-1.5s-.2-.5 1.4-.2c1.6.2 3.8 1.2 4.3 2.6.6 1.3.5 2 .5 2.4 0 .2.6-.2.6-.2l.2-.7s.1-.5-.2-1c-.3-.7-.4-.9-1.1-1.7zm-7.7 22.8c1.2 0 3.8-2.2 4.2-5.4a27 27 0 0 0-2-10.1c-.5-.7.7-.3 1.4.3.6.7 2 5.2 2 8.5s-.8 4.3-2.5 6c-1.8 1.6-3.2 1.5-3.2 1.5zm4.1 9.3s.6.7 1.2.5c1.2-.5 3.1-1.4 3.1-3 0-1.2-1.4-2.2-1.5-2.6v-.8l1.3.3.3 1.8s.5.5 1 .3c.6-.2 2-1.3 1.9-2.4-.2-1-1.7-2.3-1.8-2.8a1.8 1.8 0 0 1 0-1l1.2.2.4 1.5s.3.6 1 .4c.7-.1 2-1.4 1.7-2l-1.3-2.1v-.7l.5.3s.4.2 1.4-.1c.9-.3 1.8-1 1.8-1.6 0-.6-.7-1.2-.8-1.6v-.5l.6.1.8 1 .2 1-.3 1-1.1 1.3-1.2.4h-.3l.7 1.2-.2 1.6-1 1-1.4.7v1.5l-.8 1.6-1.7 1h-.5l-.2 1-1 1.5-2 1.3-1.3.2-.8-1.1z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M274.7 217.1s3.1 1 3-1c0-1.2-3-3.7-3.2-4.1-.2-.5-.1-1-.1-1l1.5 1.4s2 .5 2.6-.7c.5-1.1 0-1.8 0-1.9h.4l1 .1-.2 1.8-1 4.4s.3 1.7-1 1.9c-1.4 0-3-.9-3-.9m3 23.6s0-.9-.7-1.5-2-1.2-2.2-1.4a48 48 0 0 0 2.2 2.8zm4.5.1-2-2.5c-.2-.7-1-2.1-1.7-2.2-.6 0 .6 2.4.6 2.4l2.5 2.3zm4.3 0-1.7-3.3c-.3-.7-1-2.7-1.8-3.3-.8-.5 0 1 0 1l1 2.6 1.4 2.3 1 .7zm3.1-1.8s-.1-2.2-.4-3.7a4.6 4.6 0 0 0-1.5-2.7l.1 2.7zm6.5 1.6-1.5-3.8a17.6 17.6 0 0 0-1.7-3.3l.3 2.3 1.4 3.8zm5.6-6.8s-1-1-3.1-1.9a15 15 0 0 0-4.3-.9l.2.3 1 .8 2.2 1.2 3 .7z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M278.6 235s0 2 1 3.1l3.7 3.7c.4.4.8 2.7 1.5 4.6.6 2 .8 3.5 1.1 4 .3.6.9 1.5.5 1.4-.5 0-1-.6-1.2-1.3-.3-.7-.2-.7-.1-1.7 0-1-1.5-5.9-2.2-6.4-.7-.6-3.9-3.2-5.1-5-1.2-1.9-1-2.3-1-2.3z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M283.7 247.5c-.7-1.4-.8-2.7-1-3.5a12 12 0 0 0-3.5-3.4c-.5-.2-1.5.1-2-.2l-2.9-3.2s-.3.4-.2.5c.1 0 2.7 3 3.7 3.8 1 1 1.5 3 2.2 4.6.6 1.6.4 1.2.4 2 .1.8.6 1.2 1 1.2s.7-.2.5-.3a8.3 8.3 0 0 1-1.7-2.8c-.6-1.4-1.2-4-2-4.9l-.3-.2 1-.1c.7 0 3.4 2.4 3.6 3.1.2.7 0 1 1 3.4 1.2 2.4 1.7 3 1.7 3h.2zm-4.1-16 2.4 1.4 1 .2s.3 3.5 1.7 5.5 2.6 2.7 2.6 2.7 0 3.8 1 6.4a14 14 0 0 1 1 6.3c-.2.5-1-1.5-1.6-3.3l-1.5-5a10.3 10.3 0 0 0-2-3.6c-.7-.5-.2-.4.2 0a9.1 9.1 0 0 1 2 3.5c.6 2 .9 4 1.2 4 .4 0 .6-.3.6-.7 0-.4-.4-1.4-.7-3.3-.4-2-.7-3.2-1-3.7-.3-.6-.8-.6-2-2.8a16 16 0 0 1-2-4.2v-1c-.3-.2-.4 0-1.4-.5s-1.5-1.9-1.5-1.9" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M284.5 230.8s1.2 1 1.9 1.2c.6.3 1.6.3 1.6.3s-.3 3.4 1 5.5c1.3 2.2 2.7 3.4 2.7 3.4s.2.8.6 5.5l.6 6.6c0 1.8.1 8.4-.1 8.2-1-.8-.2-4.3-.7-5.8-.5-1.5-1.3-1.7-2.3-6-1-4-.3-5-1-6.6-.7-1.6-1.6-1.7-1.6-1.7s1.3.2 1.8 1.6c.5 1.3.6 4.8 1 6.5 1 4 2.4 6 2.4 6s-.3-5-.7-7.8c-.4-2.8-.3-5.1-.9-6.2-.5-1-1.6-2-2.3-3.3-.7-1.5-.9-4.3-1.2-5-.3-.7-.5-.5-1-.7-1.5-.6-1.8-1.7-1.8-1.7" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M288 229s1.1 1.2 2.6 2c1.4.9 2.2.6 2.4.8.2.2-.3 3.1 1.2 5.8 1.5 2.8 2 2.8 2.1 3.2l.5 11c.2 2.8.4 12-.7 12s-.1-6.8-.7-8.4c-.5-1.6-.5-1.1-1-2.4-.6-1.2-.6-6.2-1.4-9.2-.7-2.2-1.3-2.6-1.3-2.6s1 .6 1.6 2.5c.5 1.8.6 8 1.2 8.9.6 1 1.4 2.2 1.6 3 .2 1 0-11.5-.4-12.3-.2-.8-2.7-5.3-3-7.8-.1-2.5-.2-2.8-.4-3-.3-.2-1 0-2.2-1.1-1.2-1.2-2-2.4-2-2.4z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M293.8 230.4c0-.2.8 1.4 3 2.3 2.3.9 4.5.7 4.8 1a18 18 0 0 1 1.7 8.1c0 4.5-.8 4.1-1.5 8-.7 4-.7 11.8-1.1 13-.2.5-.5.7-.7 1.5-.3.7.2 2.2-.5 2.2s-.8-1.1-.8-1.7c0-.6.7-2.8.7-5s-.4-2.4-.8-5c-.3-2.5-.3-10.7-.6-11.5-.3-.8-1.7-2.5-1.7-2.5s1.5 1 1.9 2c.4 1.2.4 10.3.8 12.1.4 1.9.3-.4.4-1.5.2-1 .7-5.5.7-7.9-.1-2.4-1.1-7.6-2-8.4 0 0 .5.5 1 1.6l.6.5.8.4a2.3 2.3 0 0 1-.8-.2l-.5-.3a19.1 19.1 0 0 1 1 6.4c.1 4-.5 13 .1 13.2.7 0 .5-5 1.2-9s1.6-4.6 1.3-8c-.3-3.2-1.2-6.8-1.9-7.3-.6-.4-2.6-.3-4.4-1.4-1.8-1.1-2.8-2.3-2.7-2.6m-28.6 4.6s.6.3 1.4 0c.7-.4 2.7-2 2.7-2.7V231s0 .3.7.4c.5 0 2.2-1.2 2.3-2V227c-.3-.2.4.3.8 0 .3-.3 1.9-1.3 1.9-2.4 0-1-1-2-1-2h1.3c.5-.1 2-1 2-2s-.6-2.4-1.8-2.5c0 0 .9.2 1.8 0 .9-.4 1.2-1 1.2-2s-1.8-3-2.1-3.2c-.4-.2 1.9.6 2.5-.3.5-1 .6-1.5.4-2-.1-.5-.6-.7-.6-.7s1 .3 2.3-.4c1.3-.6 2.4-1.5 3-1.5.6 0-1.9 1.4-2 2.1 0 .3.7.8 1.8 1.7l.2.1c.5.3 2.5.4 2.6.5.2 0-1.9 0-1.7.2a27.3 27.3 0 0 1 4.6 4.3s.3.3.7.4l1 .2H290a52.2 52.2 0 0 1 2.6 3.8s.4.5.7.6l1 .2c0 .2-1.2 0-1 .2a65.6 65.6 0 0 1 2.6 4.8s-2.5-4.3-5.5-7.6c-3-3.4-3.6-3.8-3.8-3.5-.2.3 2.2 3.3 3.5 5.3 1.3 2.1 2.4 4.7 2.4 4.7s-3-6.2-7.2-10c-4.2-3.9-4.6-4.5-5-4.3-.6.1-1 3-.6 3.5.3.6 3.3 3 6 6 2.6 3 5.9 8.4 5.9 8.4s-2.4-3.8-6.4-8-5.5-5.3-5.8-5.3c-.3 0-.4.8-.8 1.5-.5.6-1.5.5-1.5.8 0 .3 3.4 3.4 4 3.8.7.4 1.1.2 1.6.5l1.1.7-1.2-.4c-.5-.2-1-.2-1 0s2.7 3.5 3.2 3.7c.4.2.7.1 1.3.4.6.2 1.5.8 1.5.8l-1.6-.7c-.7 0-1 0-1 .2s2.1 2.9 2 3c0 0-3.2-3.8-5.8-6.1-2.7-2.4-3.9-2.9-4-2.8-.1.1 0 .8-.7 1-.6.3-1.2.3-1.2.6 0 .2 2.3 2.5 4 4.3a119.5 119.5 0 0 1 3.2 3.7l-3.6-3.5c-1.9-1.8-2.8-2.5-3-2.4-.2.1-.2 1 0 1.3.1.2 3.6 4.3 3.5 4.4-.1.1-4.1-4.9-4.4-4.9-.2 0-.4.6-.6 1-.3.2-1.4.2-1.4.6 0 .4 5.6 6 5.4 6 0 0-4.6-4-4.8-3.7-.1.2 2 4 1.9 4.1-.2.1-2.8-4-3-4-.2 0-.2.5-.9 1.1-.7.6-1.5.4-1.5.6 0 .3 3.8 4.6 3.7 4.7 0 0-4-4.1-4-3.9 0 0-.3.3-.2.6.3 1 1.2 2.9 1 3 0 0-1.2-2.5-1.5-2.4-.3 0-.3.6-1 1-.5.3-1 .2-1 .5s.7.7 1 1.3c.3.6.6 2 .6 2s-.4-1.2-1-1.9c-.5-.7-1-1.2-1.4-1.2-.4 0-.7.4-.7.4z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M301.6 233.7s1.2-.1 1.4-.4c.1-.3-.5 0-1.6-1.3-1.2-1.2-4-9.7-7.3-14-5.2-6.9-10-10-10-10s5.7 3.3 10.2 9.9c4.6 6.6 5.7 11.9 7 13.2 1.3 1.4 2.5 1.6 2.4 2 0 .4-.2.7-.7.8l-1.7.1.2-.3zm-38.4-1.9.2.1c.3 0 1.9-1.5 1.8-2 0 0-.7-.2-1.3-.8-.6-.6-.7-1.5-.7-1.5s.5 1 1 1.3c.4.3 1.1.5 1.4.3.2-.3 2.5-2 2.4-2.6 0 0-.7 0-1.4-.5s-.8-1.6-.8-1.6.4.9 1.1 1.2c.7.3 1.4.2 1.6 0 .2-.3 1.7-2.4 1.5-3 0 0-.7 0-1.4-.4-.7-.5-1.1-1.7-1.1-1.7s.5 1 1.4 1.2c.9.2 1.6-.4 1.7-1 .2-.6.7-3 0-3.6 0 0-1.2.4-2 0s-1.1-1.5-1.1-1.5.6 1 1.6 1c.9.2 1.3-.3 1.4-.7.2-.3.2-1.7 0-2.4-.3-.7-.9-.7-1-1.8 0 0-.3.4-1.5.4s-1.8-1.3-1.8-1.3 1 .9 1.9.8c.9 0 1.2-.8 1.3-1.4 0-.6-.5-1.2-.8-1.8-.2-.6-.3-1.3-.4-1.2-.2 0-.4.6-1.6.4-1.2-.2-1.5-1-1.5-1s.9.6 1.5.6c.7 0 1.2-.4 1.2-.9 0-.4-.3-1.3-1.8-2.6a46.5 46.5 0 0 0-2.8-2.2s2 1.1 3.3 2.2c1.3 1 2 2.1 2 2.1s1.4.5 1.5 0c.2-.5.2-1-.3-2-.4-.7-1.6-2-1.6-2s1.2 1 1.8 2.1c.6 1.1.4 1.9.4 2.1 0 .3 2.7 1.3 3.3 1 .6-.4.3-1.2-.2-2l-1-1.4s.7.7 1.2 1.5c.4.7.8 1.4.6 1.7-.2.4-.5.5-.5.7l1.8 1c.9.5 1.9 1 2 .7.2-.3.2-.9.2-1.8-.1-.8-.6-2.1-.6-2.1s.6 1.2.7 2.1v2c.3.2 1 .3 1 .3s-.6.4-1.7 0c-1.2-.3-6.2-2.8-6.4-2.6-.2.3 2.3 1.8 3.5 3 1.2 1 1.7 2.2 1.7 2.2s-.9-.8-1.8-1.3-3.5-1.8-3.7-1.6c-.1.2 1 .4 1.1.6.1.2-.8 1-.8 1.4 0 .3 3.8 3 3.7 3.2-.2.3-1 1-1.2 1-.1 0-2-1.5-2-1.3 0 .3 1 1.2 1 1.4 0 .2-.6.6-.5 1 .1.5 2.1 2.1 2 2.7 0 .5-1 1-.8 1.4l1.2 1.6-1.5-1.1c-.3-.4-1-1.2-1.1-1.1a6 6 0 0 0-.8 2c0 .4 1 .9 1.1 1.8.2 1-.1 2-.2 2 0 0-1.3-1.7-1.5-1.7-.3 0-.6 0-.8.5-.2.4-1 1.7-.8 2 0 .1 1.3.4 1.3 1.4 0 1-.8 1.9-.9 1.9l-1.6-2c-.2 0-1.8 1.9-1.8 2 0 .3 1 1.1.9 1.4-.2.4-1 0-1.5.2l-1.3.5c-.2 0-.4-.5-.4-.5" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M284 208s.1-.5.4-.8c.2-.2 1.2-1.3.8-1.6-.3-.2-1.6.2-2.4.2-.8-.1-1.3 0-3.7-1.9 0 0-7.4-5.1-18.9-5.8-3.6-.2-5.2 1-5.4 1.8 0 .1 1-1.5 4.6-1.5a40 40 0 0 1 19.2 5.7c.3.3 2.3 2.2 4.1 2 1.9-.3 2.3-.5 2.2-.2 0 .2-.6 1-.7 1.2zm-20 1.5a9.6 9.6 0 0 0-2.2-2.6 30.3 30.3 0 0 0-6.4-3.4c-.2 0 4.8 2.3 6.2 3.7z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M264 217.8s-.4-.5-1.4-1.2a7.9 7.9 0 0 0-2-.9l2.4.6c.6.6 1 1.5 1 1.5m-.7-4.3s-.3-.5-1.7-1c-1.4-.4-1.7-.3-1.7-.3s1.3-.6 2.3 0a2 2 0 0 1 1.2 1.3zm-.8-3.6s-.3-.6-1.5-1c-1.3-.5-2.1-.6-2.1-.6s1.3-.3 2.5.2c1.3.5 1.1 1.4 1.1 1.4m-1.5-2.2s-.3-.5-2.7-1c-2.3-.6-3.2-.6-3.2-.6s3.3-.3 4.2 0c.9.4 1.7 1.6 1.7 1.6m-4.3-2.5s-1.4-.4-2.8-.5l-3.5.1s4-.6 5-.4c1.1.3 1.3.8 1.3.8" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M243.6 254.7s.7 1.3 2 1.3c1.5 0 2.6 2 2.6 2l-1.5 1.6-3.7.2-1.2-2 1.8-3zm0-1.2c.2-.3-1-2.7-1.9-3-.8-.5.3.7.1 1.2-.2.5-.3 1-.2 1.2 0 0 .7 1 .3 1.5-.3.5 1.8-1 1.8-1z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M243 257.1s.7.3 1.2.2c.5-.2 1-.7 1-.7m-2.9-.4s2.1-1.5 2-2.3c-.2-.8-.7-.8-1-.7a5.6 5.6 0 0 0-1.6 1.3z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M240.9 257.2s.3 1 1 1 1.7-.5 1.7-1c0-.3-.7-1-1.1-1.3-.5-.2-1.5.3-1.5.3z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M242.8 255.8c-.2.3-1.5 1-1.9 1-.4 0-1.3-1-1-1.2l1.2-.3c.3-.2.4-.7.6-.7.2 0 .7.2.9.5s.3.4.2.7z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M241.4 256.7s-2 2.8-2.9 2.6c-.8-.1.4-3.9.4-3.9l1 .4c.6.2 1.3.5 1.5 1z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M237.8 254.8s2.6.4 2.7.8c.1.5-1.2 1-2 1-.7 0-.7-1.9-.7-1.9z" }),
    import_react29.default.createElement("path", { fill: "#202220", d: "M231.2 258.7s.4 1.3 1.5 1.4c1.2 0 2.2-1.2 2.2-1.2l-2.7-1z" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "m231.2 258.7.3.7c.3.3.6.7 1.2.7h.1c1.1 0 2.2-1.2 2.2-1.2l-2.8-1.2zl1-.8 2.7 1-.2.1c-.3.4-1.1 1-1.9 1-.6 0-1-.3-1.2-.7a2.3 2.3 0 0 1-.2-.4 3.3 3.3 0 0 1-.1-.1z" }),
    import_react29.default.createElement("path", { fill: "#202220", d: "M232 258.4s.4 1 2 1c1.4 0 2.6-1.2 2.6-1.2l-2.4-1.9z" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "M232 258.4s.4 1 2 1a4 4 0 0 0 2.6-1.2l-2.4-2-2.3 2.2zl2.2-2 2.4 1.8h-.1a4 4 0 0 1-2.5 1.1 2.4 2.4 0 0 1-1.6-.5 1.8 1.8 0 0 1-.3-.3 1 1 0 0 1 0-.1z" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "M232.2 258.6s.6.5 1.4.6l1.8-.2-1 .3h-1.2l-.5-.2-.4-.3z" }),
    import_react29.default.createElement("path", { fill: "#202220", d: "M234 257.3s.6 1.6 2 1.4c1.3-.1 1.4-1 1.4-1l-1.6-2.2z" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "m234 257.3.4.8c.3.3.8.7 1.5.7h.2c.7-.1 1-.3 1.2-.6a.9.9 0 0 0 .2-.4l-1.6-2.4-2 1.9zl2-1.7 1.4 2.2c0 .1-.1.7-1.3.9a1.4 1.4 0 0 1-.2 0c-.6 0-1-.4-1.4-.7a3.2 3.2 0 0 1-.3-.5 3 3 0 0 1 0-.2 1.2 1.2 0 0 1-.1 0" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "M234.1 257.6s.9 1 1.6 1c.7 0 1.2-.3 1.2-.3v.1l-.4.2-.6.1h-.7l-.6-.4zm-2.6 1.6s.6.7 1.2.7 1.5-.5 1.5-.5h.1l-.1.1-.6.4-.8.2-.6-.1-.4-.3-.3-.3z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M237.6 254.6c.6 0 2 1.7 2 2.6 0 .9-.4 2.2-1 2.1-.7 0-2.2-1.3-2.5-2-.3-.6-.7-1.1-.4-1.4.2-.4 2-1.3 2-1.3zm-6.4.2s-1-.8-1.5-.4c-.4.4-.3 1.8 0 2 .3.4 1.5-.6 1.5-.6z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M231 255.8s-1.4 0-1.4.7.7 1.3.8 1.5c.2.1 1.4-.6 1.4-.6z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M231.6 256.9s-1.5.4-1.5 1c0 .4.7 1.3 1.1 1.3.5 0 .8-.9 1-1 .2-.2-.6-1.3-.6-1.3zm.7-4.1s-.3-.4-.9-.2c-.6.3-1.3.9-1.1 1.8 0 1 .4 1.6.4 1.6l2.1-.7z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M232.4 254.4s-1.8.6-1.9 1.3c0 .8.4 1.5 1 1.6.4.1 2-1.4 2-1.4z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M234 257.4s-1.8 1.2-2 1.2c-.3 0-1-1-.8-1.6.2-.6 1.4-1.1 1.9-1.3.4-.2 1 1.7 1 1.7zm1.6-6.6s-.6-.4-1.7-.4c-1 .1-1.9 1.5-2 2.3-.1.7 0 2 .4 2.2.4.2 2.7-1.6 2.7-1.6z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M233.4 256.2c-.8 0-1.4-1.1-1.3-1.8.1-.6 1.6-1.8 2.4-1.6.8 0 .6 2 .6 2s-1 1.5-1.7 1.4z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M235.8 256s-.4 1-1.1 1.3c-.8.4-1.3.1-1.7-.5-.5-.7.2-1 .5-1.3.4-.3 1.4-.5 1.4-.5z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M234.6 253.8s-.9.6-.4 1.4c.5.8.9 1 1.5 1.2.6.1 1-.1 1.5-.7s1.2-.9 1.1-1.6c0-.7-.3-1.3-.8-1.5-.4-.2-1.7 0-3 1.1z" }),
    import_react29.default.createElement("path", { fill: "#202220", d: "M237 250.4s-.9-.4-1.6 0c-.6.4-1.1 1.2-1.1 2l.1 1.7s1-.2 1.5-.7.8-.7.7-1c0 0-.3-.3-.3-.9 0-1 .7-1.1.7-1.1" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "M237 250.4s-1-.2-1.5.1c-.5.3-1 .8-1.1 1.5-.2.7 0 .8 0 .8s-.2-.5 0-1.1c.2-.6.7-1.2 1.2-1.4a3 3 0 0 1 1.4 0z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "m263 269.6 1.3-.6 1.6-1 .3 1.8-1.4 1h-1.2l-.7-.5.2-.7z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M261.1 269.7h.9l1-.1c.2 0 .5 1 .5 1l-.4.5-1.2.7-1-.6-.1-1.4zm9.7-.5-.7-.9-1.7-1.5v4h1.8l.8-1.3z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M261.1 269.7s-.3-.4-1-.3c-.8.1-1.6.7-1.7 1.3 0 .5 0 2 .4 2.3.4.3 1 .5 1.8.3.8-.3 5-2.9 5-2.9l-1 .3-1.2-.2s-.5.7-1.2.8c-.7.1-.8-.3-1-.6z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "m264 271.1-1 .4a7 7 0 0 1-1 .5l.3 1.3 1.8.4 1.1-1v-1.2zm8.3-.9-.6-.6c-.3-.4-.8-.5-.9-.4l-1 1.1v.9l1 .5.7.1 1-.6z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "m266.1 269.6-1.2.7-1 .8 1 1 .9.2 2-1.4-.2-1.3zm7.6 1.6-.4-.6c-.4-.3-.8-.4-1-.4-.2 0-1 1.2-1 1.2l-.1.3.7.8 1.3.3.9-.8z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".2", d: "m270.4 272.6 1 .2s-.1.2.2.4c.2.2.3 0 .3 0s0 1 1 1.7c0 0 1.2.4 1.7 0 .6-.3.5.1.5.1l1.6-2s0-.4-.4-.4c0 0 .3-1.2-.7-1.5s-1.9.1-1.9.1-.8 1.5-1.2 1.3a1.9 1.9 0 0 1-.6-.4l-.6-.7-.7-.2c-.4-.2-.7-.9-.7-.9s-.6 0-.8-.3a3 3 0 0 1-.5-.6l-1.5 1s0 .5-.9 1.1c-.8.7-1.4.7-1.4.7s-.2 1.3-1.2 1c-1-.1-1.6-1.2-1.6-1.2s-.7-.1-1.1.5c-.5.6-.7.8-.7 1.4 0 .6.4 1.4.7 1.7.3.3 1.3 1 2.4.4 1.2-.6.8-1.5.8-1.5l.6-.4c.7-.5 1.5-1.2 2-1.4" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeWidth: ".2", d: "M268.6 264.7v2.5s.4 2.3-.1 3c-.5.7-2.3.6-2.6 0-.2-.7-.1-2.6-.1-2.6l2.8-3z" }),
    import_react29.default.createElement("path", { fill: "#f8c83c", stroke: "#977c2e", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: ".2", d: "M266.6 272.4s-.4.7.8.8a.8.8 0 0 0 .7-.3c.3-.3.3-.6.3-.6s-.1.9 1 1c1.1 0 1-1.1 1-1.1" }),
    import_react29.default.createElement("path", { fill: "#202220", d: "M257 274.5s-.7-1.1 0-1.5c.8-.4 1.3 0 1.7 0 .5 0 .3-1.2.2-1.4 0-.3-.3-.8-.5-1-.2 0-2.8.2-2.7 1.9 0 1.7 1.3 2 1.3 2m4 4.1s-.8-1.2-.4-1.9c.5-.7.8-.2 1-.3.2 0 .3-.5 0-1.3s-.9-1.1-1.2-1.2c-.2 0-1.8 1.1-1.5 2.6.4 1.8 2 2.1 2 2.1zm14.5-1.4s2.8 1.2 3-1.7c.1-1.5-1.3-2.5-1.7-2.5-.3 0-.5.2-1 .8-.5.6-.9 1-.7 1.2.2.3 1-.2 1.4.7.6 1.5-1 1.5-1 1.5" }),
    import_react29.default.createElement("path", { fill: "#4b4139", d: "M261 278.6s-2.2-.5-2.2-2.6c0-1.4 1.6-2 1.6-2s-1.4.7-1.5 2c0 2.1 2 2.6 2 2.6zm-4-4.1s-1.3-.3-1.4-2.1c-.2-1.8 2.8-1.7 2.8-1.7s-2.8 0-2.7 1.8c.2 1.8 1.3 2 1.3 2m18.5 2.7s.6.3 1.2.2c.7 0 1.4-.2 1.7-1.2.3-1.1.1-1.6-.6-2.5-.5-.7-1-.7-1-.7s.6.1 1 .7.9 1.3.5 2.5-1.5 1.2-2 1.2z" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "m242.1 217.9-.5-.1.4-.9 1.4-.5 1.5-.1h1.5l.7.4.8 1.9-2.9 1.7-.5.2-.1-.8-.5-1.1z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "m269.5 260.4-.1-4.4-12 3.6 4.8 4.4z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "m247.6 252.7-1-.8-1.1-.6h-1l-.1.2.1.4 1.1 1.3 1.8 1 .7.5.4.2zm-.3 1.9h.7l.6.9.5.8.5 1 .2.7-1.3-.3-3.9-1.2.4-.9.6-.6.6-.2.8-.2z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "m249.8 257.8.6-.1.4-.4-.2-1.4.3-4.6-3.1-3.7-.7 2.1 1 3.8.6 2.2z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M247.5 249.3s-.2.4.1 1.6c.3 1.2.7 4 1.8 5.8 1 1.8-1-1.5-1-1.5s-1.7-3.7-1.5-6.5c.3-2.9.6.6.6.6" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M249.8 251.7s-.7.8-.8 1.5v1.7s0-.8.7-1c.7-.2.6 1.9.6 2.1l.4-3.8zm.4 7.7-3.5-.8c-1.9-.8-2.8-1.5-2.8-2 0-.4 3.2.2 3.7.3.5.1 1.9.8 1.9.8h.8l1.5-.6.2 1.6zm-6-.7s1 .6.5.9c-.4.3-1.5.3-1.8.2l3.4.8.6-.6a279.8 279.8 0 0 0-2.6-1.3z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M243.4 257.8c0-.2.2.5 1.4.6 1.2.2 1.8-.2 1.8-.2l.5.4.6.1-.5.9-2.3-.7-1.2-.6z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "m251.3 256.2.6.9.4-2v-2l-1.3-.8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m247.8 253-1-1.8-1.4-2.5.8-1.4 1 1.4s-.3 1 0 2c0 1 .6 2.2.6 2.2z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M240.6 259.2s.5-.7 1.5-.8c1.1-.1 2 .1 2 .1l2 1.2.5.7-4-.6z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "m251.2 252 .1 3.3c.1.7.6 1.5.5 1.8 0 .3-.2.4-.8.6-.5.2-1.5 0-1.5 0s1-.1 1-.3c.1-.2-.2-1.1-.3-2 0-.8 0-1.7-.2-1.7-.3 0-.6.3-.7.4 0 .1.3-3 .6-3.3.4-.4 1.3 1.3 1.3 1.3z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M243.8 258.4s-.4-.3-.4-.6.4 1.3 2.7 1.2c2.2-.1 2-.2 2-.2h1.1s-.2 1-.4 1.1c-.2 0-1.7 1.1-1.8 1.2l-.5.3v-.2l-.3-1.7-1.9-.7z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M247.8 253s-2.6-2.8-3.5-4.5c-.8-1.8-.3-4.2-.3-4.2l2.4 3.2s-.3.6-.2 1.6c.1 1 1.6 3.8 1.6 3.8z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M246.1 262.6c0-.2-.2-.8.3-1.4a15 15 0 0 1 5.4-3.3v2.4l-5 2.4z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "m246.4 260.8 1.1-1c0-.3-.6-.4-1.7-.6a8 8 0 0 1-2-.8s1.3 1.1 1.9 1.3c.5.2.5.4.4.6zm6.6.6-1-1.7-.2-1.8-.8.6-1.5.5s1.6 0 1.6.5c0 .6-2.4.8-2.4.9 0 0 1.9-.4 1.8 0-.2.5-1 .5-2 1a14.8 14.8 0 0 0-2.4 1.2s.4.3 1.2.2c.7 0 2.3-.4 2.3-.4l3-1.2z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M253 261.4s-.8-.3-1.4-3.9c-.6-3.6-.5-4.5-.5-4.5l1.5 1 1.3 2.3z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M253.5 255.4s-.7 2-.7 3.2c0 1.2 0 2 .2 2.8a6.9 6.9 0 0 0 1.5 1.8l.5-.5.3-1.6v-2.7z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M255.5 258.2s.4 5-1 5.1c-.5.1-1.4-1.9-1.5-2 0 0 1.1 2 1.6 1.7.8-.3.5-5.2.5-5.2zm-2.5 3.2-.5-.7c-.4-.6 0 .5-2.8 1.5s-3.6.4-3.6.4.9.7 3.6-.1c2.7-.8 2.5-1 2.8-1z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M248 255s.5.3 1 1.3l.8 1.7.1-.1-.8-1.7-1.7-2.6z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M246.4 261.2s.3-1 0-1.1c-.3-.2-.5 0-2.4-.2a27.3 27.3 0 0 1-3.4-.7s1.3.8 2.5 1.1a95.3 95.3 0 0 0 2.7.7h.5z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "m246.4 261.2-.2-.4c-.2-.2-.5 0-2.8-.5l-2.8-1s.8.6 2.8 1.1z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M247.4 254.6s-1.7 0-2.2.5c-.5.4-1.3 1.6-1.3 1.6l1.1.1s-.1-1 .4-1.5 1.3-.6 2-.7" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M244.2 251.4s.7.9 1.4 1.2c.7.3 1.4.6 1.7 1 .4.3.7 1.4.7 1.4s-2.4-1.1-2.8-1.6c-.5-.6-1-2-1-2" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M246.6 252s-.3-.4-1-.7c-.6-.3-1-.3-1.3-.1-.1.1 0 .2 0 .2l.8 1.3.5-.1s-1.3-.8-1-1c.6-.6 2 .3 2 .3z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "m253 248.9 13.6-7 6.4 9-11.7 3-6.2.6-3-2.2z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m271.2 252.7 16.8 14.6-1.8 1.3-4-1.1-8.2-8.1-3-3.1z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m292.8 264.4-9.7-7.3L271 248l.3 4.3 13.9 12.8 4.6 2.2 2.3-.7 1.2-1.2z" }),
    import_react29.default.createElement("path", { fill: "#803f1d", d: "M271.1 254.1s4.9 5.5 8.6 8.3c3.7 2.8 7.2 5.8 8 5.4.7-.4.4-.9.4-.9l-17-13.9z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m283 268.1-1.6 1.3-2-.8L269 258l.5-2 1.5.3z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M292.8 264.4s-1.3 3-4 2.3c-2.7-.7-17.6-14.8-17.6-14.8v1.5s15 13.8 18 14.3c2.9.6 5.3-2 5-2.2a36 36 0 0 0-1.4-1z" }),
    import_react29.default.createElement("path", { fill: "#803f1d", d: "M269.5 256.3s4.8 6.2 7.3 8.4c2.6 2.3 4.8 4.1 5.8 3.9 1-.2-.6-1.4-.6-1.4l-7.3-7.1-3.7-3.8s-1.5-.6-1.5 0" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M270.7 256.3s12.2 12.4 13.1 12.7c2 .6 5-1.5 5-1.5l-1-.6-.2.4s-.5 1.2-3.2.7a82 82 0 0 1-13.3-12.1z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m275.3 268.2-4.5-5.1-1-1.7-.2-2.2 8.8 9-1.2.8-1.1-.4z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M283.3 268.4s-1 1.6-2.5 1.3a4.3 4.3 0 0 1-2.3-1.4L270 260l-.2-1.3s9.3 9.9 11 10.3c1.2.3 2-1.2 2-1.2z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M278.6 268.1s-.4 1.2-1.7 1c-1.2-.1-1.6-.6-1.6-.6l-5.2-6.2-.1-1.6s5.4 7.4 6.6 7.9c1.3.4 1.6-.9 1.6-.9z" }),
    import_react29.default.createElement("path", { fill: "#b07229", d: "M273 251.9s5 4.3 5.5 4.5c.4.2 2.2.3 2.3.6 0 .2-1.2 0-1.3.2 0 .3 2.6 2.4 3 2.5.4 0 2.5 0 2.5.3s-1.5 0-1.5.3 2.2 2.2 2.7 2.2c.4.1 3 .1 3 .4s-2.1 0-2 .4c0 .4 3.6 2.7 3.5 3-.2.3-4.4-2.8-4.5-2.7a4 4 0 0 1-.5 1.4c-.3.1 0-1.4-.2-2-.2-.6-2.7-2.5-3-2.3-.2.3 0 1.4-.2 1.4s0-1.4-.2-1.9c-.3-.5-2.6-2.4-2.9-2.4-.3 0-.1 1-.3 1.2-.2.2-.2-1.2-.5-1.6-.3-.4-5.6-5.2-5.4-5.5" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M264.4 265.9s0 1.9-.8 2.2-2.5-3.5-2.5-3.5l-.4-3.6 2.5 2.4zm6.7-1v-1l-.2-1.2-.2-2-.4-1.2-.4-.9h-.6l-1.3 1-.4 1.3.7 2.4.6 2.1 1 .4z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M269.4 268.3c.3-.2-.3-2.8-.3-2.8l-1.5-3.8-.5-1.4-1.2-.5-.8 1 .1 1.5 1.9 3.5c.5.8 1.8 2.6 2.3 2.4z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M268 260c.5.4 1 1.4 1.1 2.1 0 0 1 2.9.9 3.1-.1.3-.8.3-.8.3s1.4 1.5 1.8 1.3c.5-.2.3-1.6.1-1.9-.1-.3-.5 0-.7-.4-.2-.3-.7-2.2-.7-3.3V259c.2-.3 1.2 2.3 1.2 3.7l.5.6-.5-2.6-.5-1.8.2-1.2v-.8l.7.4c.2 0 .5-.4.6-1.6s-.1-4.8-.1-4.8l-5.4 7.1z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M268 259.4s-.2 2 .5 4c.7 1.9.9 2 1 2.2.2.3.2 2.4 0 2.6 0 0-1.5-3.5-2-5.2-.4-1.8-.5-2.4-.8-2.6l-.6-.1z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M267.5 269.6c.1 0 0-.8 0-.8l-.2-1.8-1.9-4-2-1.8-1.1-1.7-.2 3.2s1.5 3.2 2.5 4.2c1 .9 2.6 2.8 2.9 2.7" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M259.7 260.9s.4.8.4 1.4v1l1.4 2.8c.7 1.3 1.4 2.5 2 2.3.5-.3.7-1.2.8-1.3 0-.1-.7 1-1 .8-.4-.1-2-5.2-1.9-5.3l-.8-.6zm5.7 4.3-1.4-2.5c-.4-.8-1-1.4-1.1-1.4-.2 0-.4-1.5-.4-1.5s.5 1 1.3 1.4c.7.3 1.1.6 1.5.5l.2 1.6-.1 2z" }),
    import_react29.default.createElement("path", { fill: "#5c3a1d", d: "M262 262.6s.3 1.1 1 2.2l1.9 2.3s-1.3-1.2-2-2.2c-.7-1-1.1-2.3-1.1-2.3h.1z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M265.6 261.3s.4-1 .7-1l.9-.2s-.5-.1-1-.6c-.4-.6-.5-.5-1-1l.3 1.5zm-.3.3 2 4.4c.3 1.2.3 2.8.3 2.8l-.6-2.1c-.3-1-1.7-3.7-1.8-4-.2-.3 0-1 0-1z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m267.4 259.5.4-4.8-.4-1.8-2.2-4.8s-.1.7-.7.7a5 5 0 0 1-2.4-1.5 7.3 7.3 0 0 0-.2 3.9l4.3 7.9z" }),
    import_react29.default.createElement("path", { fill: "#8b441f", d: "M259 262.7s.7.8 1 .7c.4-.1.3-1.6-.2-2.5-.5-.8-5.6-7.7-6.4-8.1-.7-.4 5.6 9.9 5.6 9.9" }),
    import_react29.default.createElement("path", { fill: "#8b441f", d: "M262.5 259.9c.1.3.5 2.5-.4 2.7-1.2.2-6.9-7.5-7.7-8.6 0 0-3.6-2.2-3.6-2.8 0-.5 3.8.8 3.8.8l7.5 7.2z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M259 262.7s-.6-1.1-.7-2c0-.7-.3-1.1-.3-1.4a91.2 91.2 0 0 0-4.6-6.6l-1.8-1.1a12.4 12.4 0 0 0 .2 1.9s1.3 2.4 3.2 4.6z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M265.3 261.6c.5-.3.3-2.2 0-2.8-.1-.6-3.5-7.6-3.5-7.6l-1 .4-1.9-1.5-1-1.1.3 2.5v1.3l2.6 4.6zm3.8-4.2.8-1-.5-3.5-2.2-7.6s-.5.2-1-.2a6.3 6.3 0 0 1-1.2-1l.5 4.5 2.3 6.4.2 1.9z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M262.1 259.2s-2.2-2.4-3-3.6l-1.3-2.4s-.6.3-1.4 0c-.7-.4-1.8-1.5-1.8-1.5s-.6 1.2 2.6 4.5c3.7 3.7 5 3 5 3z" }),
    import_react29.default.createElement("path", { fill: "#8b441f", d: "M267.5 260c1-.4 1-4.3 0-7-.9-2.6-2.3-5-2.3-5s1.8 4.4 2.2 6c.4 1.8 0 3-.3 3-.3-.1-.3-1-1-2.7-.8-1.7-1.3-2.1-1.3-2.1s2.6 7 1.9 6.9c-.7-.2-4.3-8-4.5-8.2-.1-.2-.2.3-.2.3s3.2 9.8 5.5 8.8" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m269.6 241 1.6 3.4.5 3.5.1 3s.1 6-.6 6c-.7.2-1.1-.5-1.1-.7l-1.4-6.6-1.4-6.8.5-.4.2-1 1-.1z" }),
    import_react29.default.createElement("path", { fill: "#8b441f", d: "M265.3 261.6c.6 0 0-1.6 0-1.6s-.5.7-1 .2c-.4-.5-1-2.5-1-2.5l-.4-1.2s-.5 1.3-1 1.3c-.7 0-3.7-5.1-3.7-5.1l-.4.5s4.3 8.9 7.5 8.4" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M263.3 257.7s.5-1.2.3-2.4a23 23 0 0 0-1.8-4l-1-.1-1.9-1a30 30 0 0 0 4.4 7.5m2.5-1.8s-.4-2.7-1.7-5.2a13 13 0 0 0-2-3.4v2.8s1.2.5 2 2a27.8 27.8 0 0 1 1.7 3.8m3.4-4.6s-.2-3-.7-4.7l-1-4 .3-.2h.5c.7.1 1 1.7 1 1.7l-.2-2.5a11.2 11.2 0 0 0-.2-.4h-1.1s.2.7-.1 1c-.3.3-.5-.1-.6-.2l-.1.3.2 1.6v1.4s.4 1.7 1 2.8zm2.6-.4s.5-4.2-.4-7a9 9 0 0 0-1.8-3.4l-.5.6s1.5 2.3 2 4.4c.4 2.3.7 5.4.7 5.4m-4.3 2.2s-.4-3.4-1-5.5l-.8-3-.9-.7s.5 2.2.5 2.9l-.1 1s.4 1.2 1 2.2c.6 1 1.3 3 1.3 3z" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M269.8 258.3c.8 0 0-4.8-.3-6l-2.3-7s2.4 8.2 2.2 8.6c-.3.6-1.2-2.5-1.4-2.4-.2 0 1.8 5.5 1 5.6-.6 0-1-1.2-1-1.2v1.2s.5 1.2 1.8 1.2" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M270.8 255.9c.6 0-.2-4.5-.6-6.6l-1.5-6s1.1 2.8 1.8 6c.6 3.2 1 7.3.5 7.4-.7 0-1-.6-1-.6v-.7s.2.5.8.5" }),
    import_react29.default.createElement("path", { fill: "#312317", d: "M263 261.2c0 .3 0 1.9-.8 1.8-.8-.1-2.3-1.5-2.6-2.5 0 0 1.8 2 2.4 2 .6 0 .6-2 .5-2.6 0-.5.5 1.3.5 1.3" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M267.3 239.6s1 .7 2 .2a3.1 3.1 0 0 0 1.3-2.4c0-.6 0-1.2-.5-1.9-.6-.7.8.6.8 1.9 0 1.2 0 3.4-2 3.9s-1.1-.1-1.1-.1z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M265.7 235.8s1.3 2 1.8 4c.5 1.8.4 2.5 0 2.6-.3 0-.4-.2-.4-.7z" }),
    import_react29.default.createElement("path", { fill: "#1e2121", d: "m243.3 238.3 8.4 12.3 10.7-12-6.7-6.8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m254 230.8-.5 2 1 3.2 1.8 1.8 2 1.4.5-1.5.5-1.8.5-.2 1.3.5.9-1.3 1.4-2.4-.3-1-.4-.7-2.1-3.7-.7 1.4-.7.4-1.2-.7-1.5 2-1.9-.9z" }),
    import_react29.default.createElement("path", { fill: "#5c3818", d: "M258.4 239.2s.3-.3.5-1.2c.1-1 .2-4-.1-5.2-.3-1.2-1-3.5-1.2-3.3-.2.1 1.2 2.5 1 5.5-.2 2.9 0 3.7-.7 4-.6.3.5.2.5.2" }),
    import_react29.default.createElement("path", { fill: "#5c3818", d: "M258.8 234.3s1.4 2 2.1 1.2c.7-.7.3-3.2 0-4.2l-1-2.5.4-.4.7 2.7c.3 1.1 1 4.2.1 4.8-.9.5-2.2-1.2-2.2-1.2v-.4z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M254.3 235.6s.5-.7 1.1-.7c.7 0 .8.2.8.2l.6 1.6.9 1.7.8.9-.4.5h-.7l-2-1-.6-.8z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M257.6 253c-.6.4-2.1-.3-3-1.1l-5.4-5.4-.6-2.5 1.8.4 3-1.3.6-1 3.7-2 2-1 4.5-.2 1-2.1s1.6 2.6 1.8 3.6.2 4.3-.2 4.5c-.4.3-1.8-1-2-1-.3 0 1 4.6 0 4.8-1.1.1-3-1.8-3-1.8s.8 4.2 0 4.2c-1 0-3.2-1-4.1-2 0 0 1 3.4 0 4z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "m256.8 247.7.9 1.4c.2.3 0 2.3-.2 2.6-.3.8-1.3-.9-1.8-2.3l-1.8-3c0-.4 2.9 1.3 2.9 1.3m8.7-10.3s1.5 6.5.8 6.7c-.8.2-3-2-3.2-2.4l-3.3-5.1-.6-.7.2-.3 1.3.5z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M254.3 249.8c-.3.3-1-.8-1.3-1l-2.4-2.7c-1-1-1.8-1.8-1.8-2 0-.3-.7-1-.7-1l.6-.6.7-.1s4.3 3.4 4.6 4c.3.5.5 3.3.3 3.5zm6.5.1c-.2.2-3-1.9-4.3-3.6-1.2-1.7-2.4-3.2-2.7-4a58.6 58.6 0 0 1-.5-1.5l.8.2s7 8.6 6.7 8.9m1-3c-.2.2-1.4-.7-2.2-1.7-.7-1-.3-2.3-.3-2.3s2.6 3.8 2.5 4m1.6-.4c-.4.2-2-1.8-3.4-4-1-1.6-1.3-1.9-1.5-2a3.7 3.7 0 0 0-1-.3l-.2-.2.7-.2.6-.7.8-1 3.4 6.8s.8 1.5.6 1.6" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M254.6 251.9c0 .3 0 .5-1 .4-.8 0-5.7-2.7-7.8-6.2a1712 1712 0 0 1-2.5-4l1-1.1 7.6 8.7z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M254.6 251.9c.1.4-.4.5-.8.4-.6-.1-2.5-.8-5.5-4.2-3-3.4-4.3-5.9-4.3-6l-.1-1.4.9-.4 5.2 8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M259.7 248.5s-1.6-1.2-2.6-2.4-3-4-3-4.6c0-.5 1-.5 1-.5l-.1-1.5.2-.4 1.5.6 1.9 2.3.7 1s1.2 2.8 1 3c-.3.4-2-1.5-2.2-1.3-.2.2 2 3.5 1.6 3.8m-3-.8s.6.8.3 1.3c-.2.6-.4.9-1.2-.3s-1.7-2.5-1.8-2.4c0 .1.1 1.8-.3 1.8s-1.6-1.4-2.4-2.6l-2-3s.2-.5.1-1.8l-.1-2s0 .4.2.7l.4.6 2.8 3.3.8-.5 1.7 3.3zm-10.8-5s2.2 4 4.3 6.1a14 14 0 0 0 4.4 3.1L248 244l-2-1.2zm17 2.4c-.1 0-1.5-1.4-2.4-2.7a8.8 8.8 0 0 1-1.4-4l.2-2.8s2.3 2.4 2.8 3.5c.4 1 1.3 2.6 1.1 2.8-.2.1-1.7-1-1.9-.8-.2.3 1.8 3.8 1.6 4m2.6-2.5c-.3.1-1.5-1.2-1.8-2-.3-1-.4-2.6-.4-2.6l-1-2.4.1-2.6 1-.2 1.5 2.1s.6 1.3.6 3c0 1.9.3 4.5 0 4.7m-18 6.5c-2-2.5-3.3-5-3.3-5l-.7-2.2.4.3s.6 2.6 3.7 5.7c3.2 3.1 3.9 3.4 3.9 3.4s.6 1.7.3 2.3c0 0-2.3-2-4.3-4.5" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M250.9 252.7s-2.7-2.4-4.9-5c-2.1-2.8-3.5-5.4-3.5-5.4l1-.9s1.8 4.2 3 5.9a609.9 609.9 0 0 0 4.4 5.4m3.7-.8L250 247a17.5 17.5 0 0 1-2.5-3.5l1.3.5s.5 1.4 1.7 2.8zm-.6-5.6s-1.7-2-2.5-3.4l-1.7-3s2.3 2.7 3 2.8c.7.2.7 0 .7 0s-.3 1 0 1.8c.1.8.5 1.8.5 1.8m.7-8.4s.3 1.4.1 2.3c-.2.9-.7.8-.7.8l1.5 1.8c.5.6 1.8 1.5 1.8 1.5l-1.5-2.2c-.4-.7-1-1.6-.7-2.3.2-.7 1.6.5 2 .8l2 2.3s-.5-2-1.4-2.7a43 43 0 0 0-3-2.3z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "m261.6 242.3-1.4-3.5-1.3-4v2.2c0 1-.4 2.4-.8 2.6-.4.2-.5.2-1.3 0-.7-.2.6.4.6.4s.8 0 1-.4c.4-.4.5-1.2.9-1.1.3.1.7 1.3 1 1.9z" }),
    import_react29.default.createElement("path", { fill: "#202020", d: "M259 234.7s1.6 1.9 2.3 1c.7-.8.3-3.1.3-3.1s1 .3 1.3 0c.3-.2.2-1 .2-1s1.8 2.5 2.6 4.2c.9 1.6 1.3 4.6 1.3 4.6s-1.5-2.4-2.2-4.6c-.7-2.1-1.7-3-1.9-2.8-.1.2-.4 1.6-.2 2.4.2.7.8 1.7 1.2 2.7.5 1.1 1 2.8 1 2.8l-1.4-2c-.5-.7-1-1-1.4-1.3-.3-.3-.8-1-1.3-1.1-.5-.2-1.5-.7-1.5-.3l-.2-.8z" }),
    import_react29.default.createElement("path", { fill: "#171717", d: "m253.4 242.6 1.6 2.8 1.8 2.3s-1.6-1.4-2.2-2.3c-.6-1-1.2-2.8-1.2-2.8" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M264.1 243c-.2.2-1-.1-1 .2-.1.3.4 1.3 1 1.9.5.6.7.6.9.5l-.2-1.1V243c-.1-.2-.7 0-.7 0" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "m244.7 231.5-1 .6-1 2.3.3 4.3 1.7 2.4c.6 1 2.8 3.4 3.3 3.2.6-.1 1.2-1.8 1.2-2.7l.2-2.6s.5 1 1.4 1.9c.9 1 1.7 1.9 2 1.8.5 0 1.7-2.5 1.8-2.9 0-.3-3.2-8-3.2-8l-1.4-.7z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "m251.8 238 .9 2.9c.3 1 0 1.8.2 1.8.1 0 1.8-2.2 1.8-3.2s0-2-.4-5c-.5-3.1.1-4 .1-4l-1-.8-1.5 3.3zm-5.5-1.8.5 4c.2 1 .8 2.6 1.1 2.5.3 0 1.3-2.6 1.4-3.5 0 0-.7-1.3-.7-4.4 0-3.2-.3-3.5-.3-3.5z" }),
    import_react29.default.createElement("path", { fill: "#45392d", d: "M242 230s-2.5 3.6-2.4 5.6c0 2 .3 1.6 1 3.4.5 1.8.8 4.4.8 4.6 0 .3.4 0 .5-.3z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M242 230.5s-2.2 3.3-2 5.2c.1 1.9.4 1.8 1 3.5.7 1.6.7 4.4.7 4.4s.7-.2 1.5-.8a7 7 0 0 0 1.5-1.7l-.8-1.7-.6-1.5-.6-1 .2-3.1.6-2.4v-.8z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "m253.8 236.3-1.6-.5c-.4-.3-.6-1-.6-1l.3-.6z" }),
    import_react29.default.createElement("path", { fill: "#d2a567", d: "M242.4 230.8s-1.5 3.4-1.4 5.8a16.2 16.2 0 0 0 1.7 5.3v-7.7l.7-2.3v-1.2z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M246.3 231.6v1.4c-.1.5-1 1-1.3 1.6l-.8 2.3s.3-1 .9-1.5c.5-.5.7-1 .8-.6.1.3.3 1.6.2 1.9-.1.2-.6.6-.8 1.6a3.3 3.3 0 0 0 0 1.9l.4-1.8c.1-.5.5-.7.5-.7l1 1.8V238c.2-.7 1-1.6 1.1-1.6.3 0 .6-.2-.2-.6-.3-.2-.1-3.4 0-3.6.3-.1 1.5-.1 1.4-.6a8.7 8.7 0 0 0-1.3-1.7l-2 1.7z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "m253.6 238.5-1.2-.2a.6.6 0 0 1-.4-.5v-.5l1 .5z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M243.6 238.9c0 .3-.3.7-.5 1.2l-.3 1.2-.3-2.6-.3-1.9-.5.5s0-1.2.2-1.8c.3-.6.4-1.4.2-1.6-.2 0-.6.3-.8.6l-.6 1 .5-1.5c.3-.4 1.4-1.7 1.7-2.3l.2-1 .8-.1s.9.7.9 1.3c0 .3-.9.6-.9.7 0 0-.7 0-.8 2.6-.2 2.7.5 2.5.5 3.7m7.4-7s.2 1.5 0 2c-.1.4-.5.8-.8 1.3-.4.6-.3 2-.3 2l.4-1 .5-.9c.1 0 .5.5.7 1.3l.6 2s-.2-1 0-1 .4 0 .8.3l.7.6s0-.4-.5-1-.8-.4-1-1.1c-.1-.7-.2-1.5-.1-1.7 0-.3.4.1.7.5l1.2 1.1-.5-.8v-2.3c0-.8 0-1.6.2-1.8.3-.2.4-1.2.2-1.4 0-.2-2.8 2-2.8 2z" }),
    import_react29.default.createElement("path", { fill: "#1e2121", d: "M259.7 228.9s0 1.6.3 2.6l.9 3s-.9-1.5-1.3-2.8c-.4-1.4-.7-2.8-1-3-.4 0-.8.7-.8 1.3a10 10 0 0 0 .8 3.4c.5.7-.7-1-1-1.9l-.6-1.7s-.3.7-.2 1.6c.2.9.9 2.1.9 2.1l-.8-.8-.5-.5s0 1.2.3 1.7l1 1.3-1-.9a2 2 0 0 1-.4-.5s.1 1.7.5 2.6l1.2 2.3s-1-.7-1.6-2.2a21 21 0 0 1-.8-6.5l1-1.5c.4-.7 1-3.8 1-3.8s.6 2.9 1.1 3.5c.5.5 1 .7 1 .7m-6.9-.9.6 1.1.5.8s-.9 1-1.8 1.7c-1 .7-2.2 1.5-2.5 1.1-.3-.4-.3-.8-.3-.8s1-.6 1.9-1.5a5.3 5.3 0 0 0 1.3-1.7zm-8.7 2.9s.1 1.8.9 1.7c.8 0 3-2.3 3.1-2.4.2 0 .3-.6.3-.8v-.6s-2.5 2.4-3.3 2.5a1 1 0 0 1-1-.4m0-2.4-.2 1.6c0 .4.2.7.2.7s-1.7.6-2 0c-.3-.5-.1-1.2-.1-1.2l1.2-.1c.4-.1 1-1 1-1zm16.3-2.5s.7 1.8 1.2 2.6l1.1 2.2-1.5-1.6a120.9 120.9 0 0 1-1-.8l.2-.9z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M241.7 229.6h1l.7-.1.6-1s-.3 1.1 0 2c.2.8.6.9.8.9a3 3 0 0 0 1.8-1l1.7-1.4s-.2 1 .2 2c.3 1.1 1 1.1 1.8.5.8-.7 1.6-1.8 2-2.3l.6-.8.9-.7.8-4.4-.5-.6-1 .6-1.4-.6-.4-.5-.8 1.3-.8.5h-.4l-1 .3-.4-.9-.2-.6-.5-.2-2 2-1-.1-1.1 1.7-.8 1-.8 2z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M251.1 225.2s.2 1-.4 2.9-1.3 3-1.3 3 2-1.1 2.9-3.2c1-2.2.7-4.6.7-4.6zm2.4-2s.2.3 0 2l-.6 3.2.5.9c.2.5.9 1.4 1.4 1.3.4-.2 1.2-.7 1.7-1.8l1-2.3c.3-.2.3 0 .4.2 0 0 .2 1 .7 1.4.5.4 1 1 1.4.8.3-.2.5-.7.5-1l-1-3.2-1.3-3.2-.8-1.2-2.3.2z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M257.4 220.3s.6 1.3.7 2.8c0 1.5-.3 3-.3 3v-3c-.1-1.2-.6-1.7-.6-2z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M260.5 226v2c-.2.5-1-.5-1.6-2.5-.5-2-.4-2.4-.8-3.4-.5-1-.7-1.8-.7-1.8l1.1-.2zm-5.6 3.8s2.2-1.3 2.5-5c0-1.7-1-4.5-1-4.5s0 3-.8 5l-1.5 3.1.8-.5.6-.9v1.3zm-1.9-6.5s0 .8-1 1.5c-.9.8-2.5 1.6-2.5 1.6s1.2-1.1 1.6-2.1c.5-1 .1-1.6.1-1.6s-.1.5-.6 1-1.3.4-1.3.4 0-.5.5-1c.1-.1 0-.4.2-.6.2-.8.9-1.9.9-1.9s.5 1.2 1 1.7z" }),
    import_react29.default.createElement("path", { fill: "#1e2121", d: "M259.8 218.9s.5 1.3.7 3.2c.2 1.8 0 4 0 4l-1.4-2.5c-.3-.7-.3-1.7-.5-2.3a2.6 2.6 0 0 0-.9-.8l-.8-.1s.7-.3.7-.9v-.8a3.5 3.5 0 0 0 2.2.2m-4.9 7.8s1.2-1.6 1.5-3.7c.3-2 0-2.7 0-2.7s-.5-.1-1-.5-1-1.4-1-1.4.2 1 0 2.4c-.2 1.3-1.4 2.5-1.4 2.5s.6.2 1.2-.1c1.2-.7 1-2 1-2s.3.2.3 1.8-.6 3.7-.6 3.7" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M241 229.5c-.3 0 .7-1.6 1.4-2.7l1.7-2.7s.2.2.6.2a2.9 2.9 0 0 0 2-1.3 8.2 8.2 0 0 0 .7-2c0-.3 0 1.4.8 2.3.8 1 .7.9 1 .8 0 0 0 1.2-.3 2.2l-.6 2.7s.1-2-.2-2.6c-.3-.6-.5 0-.8.8-.3.7-.9 1.2-.9 1.2l.8-1.8c.3-1 .1-1 0-1 0 0-.2 0-.5.3-.3.4-.7.5-.7.5s.4-.3.6-.8c0-.5.5-1.2.7-1.4l.4-.8c0-.2 0-.6-.2-.6s-.4.3-1.1 1c-.8.7-1 .7-1 1l-.7 2a12.8 12.8 0 0 1-.9 2.3l-.4.4.6-2c.4-1 1-2.5.8-2.7-.1-.2-.4-.2-.5 0-.1.2-1 1.1-1.7 2.2s-.7 2.5-.9 2.6z" }),
    import_react29.default.createElement("path", { fill: "#874f20", d: "M260.5 217.7c0 .1.1 1-.7 1.2a3 3 0 0 1-2-.1v-1.2z" }),
    import_react29.default.createElement("path", { fill: "#b27129", d: "m244.8 220.3-.6 1.7c-.5 1-1.2 1.7-1.1 1.8 0 .1.5.6 1.2.5.6 0 .8-3.8.8-3.8v-.2z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M254.8 218.2s-.4 5-1.8 5-2-2.5-2-2.5-.2 3.5-2 3.5c-.9 0-1.7-2.7-1.6-3.2 0 0-.3 1.8-1.2 2.5-1.7 1.4-2.8.7-2.8.5-.1-.2 1.4-1.7 1.6-3.7 0 0 .3.1.7-.5.4-.6.7-1.2 1-1.1.5 0 2.6-.9 2.6-.9l1-1.3s.2.4 1-.1a3 3 0 0 0 1-1.4l2.2 1.8.2 1.4z" }),
    import_react29.default.createElement("path", { fill: "#b27129", d: "m249.1 213.3 2.2 3 .5-.4c.2.4.4.7.3 1-.3.7-1 1.8-.5 3 0 0-.1-.7.2-1.5.3-.8.5-1.1.7-1 .2 0 .5 4.6.8 4.6.3 0 .7-2.1.7-3.6s.3-.3.5 0c.1.3 1.4 2.4 2.5 2 1-.2 1-2.2.9-2.6 0-.4-.8-3-.8-3l-4.9-3-.4 1.2c-.3.8-2.7.3-2.7.3" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M256 212.8s.3.3.8 1.5.5 5.1 0 5.1c-.7 0-2-.7-2.2-1.3-.2-.5.1-2.4-.3-3a6.5 6.5 0 0 1-1-2.2l.1-1.5 1.1-.4 1.6 1.8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m255.7 211.6 2 3.1 2 2.6.8.4a2 2 0 0 1-2.5.4c-.7-.4-.3-1.6-1.2-3.6a8 8 0 0 0-2.6-3l.6-.5 1 .6z" }),
    import_react29.default.createElement("path", { fill: "#1e2121", d: "M254.6 210s1.8 1.1 2.5 2.5l1.8 3.4c.8 1.3 1.7 1.7 1.6 1.8 0 .1-.5.2-1 0a3.8 3.8 0 0 1-1-1.3l-2-3.4a6.7 6.7 0 0 0-1.9-1.5c0 .1.5.4 1.3 1.7a5.6 5.6 0 0 1 .9 2.5l-1-1.6c-.6-1.2-2.1-2.7-2.2-2.5l1.2 2.4 1 2.6-1.4-2.3c-.8-1.3-1-1.1-1.3-1.5l-1.1-1.4s.7.2 1.5-.3c.7-.5 1-1.2 1-1.2z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M249.8 213.3s1.2.3 1.9.2h.9s.4.5.4 1.1c0 .6-.5 1.7-.6 1.8-.2 0-.2-1-.5-1.4a20.7 20.7 0 0 0-2-1.7z" }),
    import_react29.default.createElement("path", { fill: "#b27129", d: "M250.5 216.5s.4 1.3 0 3c-.2 1.9-1.3 3.7-1.5 3.7-.3 0-.2-2-.3-3a31 31 0 0 0 0-.4l-.5 1.2c0-.1.4-1.9.3-2v-.7l1.3-1.6z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M248.2 217.8c-.4.5-1 .3-1.4.5-.5.1-.7.9-.7.9s.4-.3.6-.2c.2 0 .4 0 0 1-.4.8-1.8 2.3-1.7 2.4 0 0 1.6-1.3 2-2 .6-.8.5-1.2.6-1.5.1-.3.7-.6.9-.6 0 0 .4 0 .5.6l.4 2a9 9 0 0 0 .7-2l.1-2.3-.5-.1-1.2-.7s.2 1.4-.3 2" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M254.6 208.6s.5 1.3-.5 2.1c-.3.3-.6.4-1.1.5-.6 0-1.4-.5-1.4-.5l-3.1-1.3-1.7-.5-.8-.2.1-.9 2.5.1 2.4 1 1 .3 1 .1h.6l.6-.1.3-.3z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M254.6 208.6c.1.2-.2 1-.4 1-.2.1-.7.3-1.6.1-1-.2-1.9-.8-3-1-1-.4-1.7-.6-2.5-.6s-.5-.4-.5-.4 1.9-.2 3.5.4c1.6.6 2.3 1 3.1 1 1.2 0 1.4-.5 1.4-.5" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M246.1 207.7h.7c.3 0 .5-.2.5-.2l-.1.5h-1z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M252.2 211.5s1.1 1 .8 2l-2-1-3.5-1.4-1.8-.6-.3-.3.6-.6v-.6l2.3.3 2.4.7z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M249.9 213s2 2.5 1.5 3.4l-4.5-3-1.7 2.7-3.7-1.8s3-2.3 3.4-2.8l.3-.6 1.7.4 2.7.8z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M248.8 209.3s1.6.4 2.7 1c1 .4 2.4.6 2.4.6s-.6.6-1.7.6c-.3 0-1.1-.6-1.6-1s-2-.8-2-.8z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "m246 208.4 1.9.6c.7.3.7.2 1 .2l.1-.2s.2.7-.4.7-.7-.2-1.4-.5-1.2 0-1.2 0z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M252.3 212.9s.9.5.7.6c-.1 0-.6.3-1.3.3-.7 0-1 0-1.5-.2s-.8-1.1-2-1.6a14.5 14.5 0 0 0-2.3-.8l-1-.2.8-.3 2.6.5 2.2.7 1.3.6zm-4.3 1.5.5 2-.3 1.3-.7.4-.6-.2-.2-.4s.3-.5 0-.9-1.6-1-1.6-1 .5-1 1-1.2c.7-.2.4-1 .4-1z" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M245.4 210.2s.4.4 1.3.5l1.7.3c.2.1.8-.2.9-.2l-.5.3 2 .7c.9.4 1.6 1 1.6 1l-1.6-.7a14 14 0 0 0-2.4-.7c-1.6-.3-3.1-.2-3.5-.3-.3-.1.2-.1.3-.3.2-.2.2-.6.2-.6" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M251.2 215.8s.5.6 0 .8c-.5.2-2 .1-2.6-.6l-.4-1c-.3-.3-1.3-1-2-1.3-.5-.4.3-.5.3-.5l2.9 1.3c.8.4 1.8 1.3 1.8 1.3" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M251.3 215.9s-1-1.4-4-2.6l.9-.2h-1.5a22.2 22.2 0 0 0-.7-.3c-1.6-.4-1.7-.4-1.8-.6 0-.2-.3 0-.4.3a10.5 10.5 0 0 1-.6.8 4 4 0 0 1 2-.1c.9.2.9.5.8.9 0 .3-1.1 1.6-1 1.6.1 0 .7-1.2 1.5-1 .8.2 1 .6 1 .6l-.1-.7c-.2-.2-1-1-.8-1s1.2.3 2.6 1c1.4.7 1.6.9 2 1.3z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M246.5 213.6s2.2.7 2.1 3c0 2.4-1.8 2-2 1.1-.1-.9.3.4.9.3.7-.1.8-.8.8-1.7 0-.9-.3-1.3-.8-1.8a9.6 9.6 0 0 0-1-.9" }),
    import_react29.default.createElement("path", { fill: "#6c3f18", d: "M236.8 208s.3 0-.4 1.8a8.5 8.5 0 0 1-1.9 3.3c-1.8 2-2.6 2-2.4 2.8.2.9.9.7 1 .7.2 0 3.5-4.8 3.5-4.8l.7-2.8-.2-.8-.2-.3z" }),
    import_react29.default.createElement("path", { fill: "#dbad6c", d: "M244.9 204.5s1 1.4.6 4c-.3 2.7-3.8 5-3.8 5l-5 3.6-2.2-.2h-.6c-.4-.1-.7-.4-.7-.4-.2 0-.4-1-.4-1l.6-.8 1.9-1.8 1.1-1.7s.6-1 .6-1.9c.1-1-.1-1.4-.1-1.4l.4.7.2 1.4-.2 1.6 1.4-1 1.7-.7s.5-.1.9-1c.3-1 .6-2.5.6-3.2v-1.4h.2c0 .1.5 1 .5 1.4l.3 2.2.9-.8.7-1.2c.2-.4.4-1 .4-1.4" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M245.5 217.8s.3.2.2 1.2c-.1 1-1 1.5-1.3 1.5v-1.3l-1.1-1-1.2-.3.2-.2c.1-.2 1.4-.7 1.4-.7z" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M244.6 217.8s.3.3.9.2.8-1 .5-1.4c-.3-.4-.2.8-.5 1-.4 0-.8-1-1.3-1-.5-.2-1.3.2-1.5.5-.2.3.8 0 .8 0l.6.2.4.1z" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M237.2 214.1s.7.2 1.4.1 2.5-.8 2.5-.8l1.4-1c.6-.7 2.5-1.8 2.7-4.2.2-2.3-.3-3.7-.3-3.7s2.8 3 .3 6.5c-1.6 2.3-3 3-3 3s2.8-.8 3-.1c.2.6-.1 1.6-.2 1.8 0 0 1.5.3 1.8 1.1.1.5-1.8-.5-3.2-.2a3.7 3.7 0 0 0-2 1.2s-.3-.4-1.5-.4c-1.3 0-1.9.6-2.6.5-.7 0-3-.5-3.4-1.1l1.5-1.7c.7-1.3 1.6-1 1.6-1" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M243 207.8s1.1-1 1.5-1.9l.4-1.4s.1.8-.5 1.8a10.3 10.3 0 0 1-1.4 1.6z" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M242.7 205.4s1 3.4 0 4.9c-1 1.4-5.1 3.2-5.1 3.2s3.1-1.7 4-3.6c1-2 1-3.6 1-3.6z" }),
    import_react29.default.createElement("path", { fill: "#1e2121", d: "M238.6 214.2s1.3 0 2-.5c.8-.4 1.9-1.4 1.9-1.4s-1 .9-1.3.9c-.3 0-.5-.5-.4-.8 0 0-.2.7-.8 1.1a4 4 0 0 1-1.4.7m3-4.3s1.2-1.2 1.2-3.6c0-2.4-1-2-1-2s.8.6.6 2.4c-.1 1.9-.7 3.2-.7 3.2zm1.4.2s1.3-.3 1.7-1c.5-.8.5-2.2.5-2.2s-.2 1.3-.5 1.8c-.4.5-1.7 1.4-1.7 1.4m-.7 7.6s.6-1.2 1.4-1c.9.4.9 1 .9 1s-.3-.4-1-.5a2.6 2.6 0 0 0-1.3.5m-2.4-2.2 3-.8 2.3-.8s-.9 1-2.2 1.9c-1.4.7-2.5.8-2.5.8s2.5-1.1 2.7-1.6c0 0-2.4.7-3.3.5" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M237 212.7a2.1 2.1 67.8 0 1-2.4 3.5" }),
    import_react29.default.createElement("path", { fill: "#f16e16", d: "M236.9 212.9a1.9 1.9 67.8 0 1-2.2 3" }),
    import_react29.default.createElement("path", { d: "M236 214a.8.8 0 1 1-.7 1" }),
    import_react29.default.createElement("path", { fill: "#d5d3ca", d: "M236.2 214.9a.2.2 0 1 1-.5-.1.2.2 0 0 1 .3-.2s.2.1.2.3" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M237.5 211.3s1.2-1.2 1.5-2.8c.2-1.6 0-2.5 0-2.5l.7.7.3 1.2-.4 2 1.3-.6a10 10 0 0 0 1-5s.3.7-.2 3-.9 2.6-2.6 3.6a7.6 7.6 0 0 0-3 3.3 13 13 0 0 1-1.9 2.5s.9-1.2 1.3-2.2c.7-1.4 1.4-2.2 1.4-2.2z" }),
    import_react29.default.createElement("path", { fill: "#904720", d: "M236.9 212.3s.5-1.6.5-2.5c0-.9-.6-1.9-.6-1.9s.8 0 .9 1.8c0 2-.3 2-.8 2.6" }),
    import_react29.default.createElement("path", { fill: "#4d2a15", d: "M239.3 210.3s.6-1.5.6-2.4c0-1-.8-1.9-.8-1.9s1 .2 1 2c0 1.7-.2 1.7-.8 2.3" }),
    import_react29.default.createElement("path", { fill: "#ab6d29", d: "M233.7 216.8s-.5-.6-.4-1c0-.5 0-.6 1.1-1.8a8.9 8.9 0 0 0 2-2.5c.3-.6 1.2-2.3.5-3.6 0 0 .5 2-.6 3.4a12.7 12.7 0 0 1-2.7 3c-1 .7-1 1-1 1.4 0 .4.1.7.3.8.3.2.8.2.8.2z" }),
    import_react29.default.createElement("path", { fill: "#6c4119", d: "M244.4 220.5s.2 0 .4-.3c.1-.2.1-.7-.3-1.2a2.6 2.6 0 0 0-1.3-1l-1.6-.2s.3.6 1 1c.4.2 1 0 1.4.3.3.4.4 1.4.4 1.4" }),
    import_react29.default.createElement("path", { fill: "#6c4119", d: "M244.4 220.5s1.2-.4 1.3-1.6l-.1-1s.2.4.7.6l.4-.2s-.7 2.3-2.3 2.2" }),
    import_react29.default.createElement("path", { fill: "#bf802d", d: "m235.8 220.3.7.6.7.7 3-.8 1-.9-.9-1.3h-2.1z" }),
    import_react29.default.createElement("path", { fill: "#f9c83a", stroke: "#8f4620", strokeWidth: ".3", d: "m243 219.3-.5-.8s-.2-.3-.6-.5c-.4-.3-2.2-.2-2.2-.2l-1.3.2s-.4.4-1 .2l-2.2-.7-1.4-.7s-1.1-.4-1.4-.3c-.2 0-1 1-1 1s-.3.6.1.6c.3 0-.5.2-.5.2s-2.3 1.2-2.6 3.4c-.4 2.2 3.7 5.5 5.2 3.8 0 0-2.2-1.6-1.8-3 .4-1.3 1.5-2.2 3.2-2.3 1.7 0 1.8-.3 2.6-.8.7-.6 2.1-.9 3.2.2 1 1.1-4 2.1-4 2.1l.6.8s6.1-2.1 5.6-3.2z" }),
    import_react29.default.createElement("path", { fill: "#fcf3d8", d: "M231.5 224.5s-2.5-.6-2.3-2.9a4 4 0 0 1 2.7-3.2c.4-.1.3-1.3.7-1.4.4-.1 1.2 0 1.6.3.3.4 1.1.7 1.1.7s-4.4 2-4.5 4.5c0 1.7.7 2 .7 2" }),
    import_react29.default.createElement("path", { fill: "#fdeaaf", d: "M243 219s-.3.2-.4 0c-.4-.8-1.5-1-2.4-1-1.1 0-1.9.4-2.7.4l-1.4-.2c-1 0-2.8-1.4-3.3-1.3-.4.2-.6.7-.5 1 0 .2-.8.3-1 0s.7-1.4 1.5-1.4c2.1 0 3.7 1.4 4.7 1.4s1.3-.5 2.7-.5 2.8.6 2.8 1.6" }),
    import_react29.default.createElement("path", { fill: "#513625", d: "m236.2 220.7 1.7-.6 1.8-.6-1.6 1-1.7.4z" }),
    import_react29.default.createElement("path", { fill: "#f9c83a", d: "M232.6 225.8c-.1.1-1 0-2.4-.9s-1.8-2.5-1.8-2.5-.3-1.5 1.2-3c1.4-1.6 1.6-1.1 1.7-1v.1l-1.3 1-.7 1.1-.5 1v1l.7 1.2 2 1.3z" }),
    import_react29.default.createElement("path", { fill: "#8b5122", d: "m231.9 217.2-.1-.2zv-.2zv-.2l-.2.1zl-.2.1zh-.2v.1zh-.2zl-.2-.1zh-.2zh-.2zh-.2a3.6 3.6 0 0 0-.4.5 1 1 0 0 0-.2.5c0 .2.2.4.3.5h1.2a.2.2 0 0 0 0-.3.2.2 0 0 0-.2-.1h-.5a.6.6 0 0 1-.3 0v-.1a.4.4 0 0 1 0-.2 2.4 2.4 0 0 1 .3-.4zv-.2a.2.2 0 0 0-.1-.2.2.2 0 0 0-.2.3.2.2 0 0 0 .3 0z" }),
    import_react29.default.createElement("path", { fill: "#f9c83a", d: "m236.1 219.3-3 .9c-.3.2.9 0 1.8 0a3.5 3.5 0 0 1 1.1 0h.7c1.2-.5 3.6-1.4 3.8-.4.2 1-3.3 1.7-3.3 1.7v.3l2.8-.7 1.4-.7.5-.8-1.4-1h-2l-1 .3z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M231.8 223.6c.2.6.7 1.5 1.2 1.8 0 0 .1 0 0 0 0 .2-.4.4-1.3.2-1-.3-2.4-.7-3.3-3.3v.5l.5 1 1 1 1.4 1 1 .2.9-.2.4-.3-.9-.8-1-1.8v.7z" }),
    import_react29.default.createElement("path", { fill: "#fcca3d", d: "M241.7 250.1v1h-.6l.1-1.3zm-3.8-27.5-1-1.1h-.6l1 1.4z" }),
    import_react29.default.createElement("path", { fill: "#816c2a", d: "m241.6 252.4-1.3-.8-2-.5v.3h.2a5 5 0 0 1 1.7.5 11.4 11.4 0 0 1 1.3.7zm0-2.5h-2.2c-.8.2-1.2.6-1.2.6l.1.2a3 3 0 0 1 2.1-.6 17.7 17.7 0 0 1 1.1 0zm-.3-2.1-2 1-1.4 1 .2.2.4-.3.9-.6a14.7 14.7 0 0 1 2-1zm-1.4-2.2a2 2 0 0 1-.2 1 6.9 6.9 0 0 1-.5.6l-1.3 1.4-.7.7.1.2a165 165 0 0 0 1.2-1.2l.9-1 .5-.6c.3-.5.3-1 .3-1h-.3zm-1.7-1a3.4 3.4 0 0 1-.1 1.8l-.8 1.7-.4.8-.1.3h.2s1-1.7 1.3-2.7a3.6 3.6 0 0 0 .2-1.2v-.7zm-1.7-.2a7.4 7.4 0 0 0 0 1 4.5 4.5 0 0 1-.1 1.3 97 97 0 0 1-.5 1.5l-.3.8h.2l.8-2.2c.2-.4.2-1 .2-1.5v-.9zm-1.3 0v1l-.1 1.5a41.4 41.4 0 0 0-.4 2h.2l.1-.6.3-1.3c.2-.9.2-2.6.2-2.6zm-1.3.3a9.8 9.8 0 0 0 0 2.2c-.3.8-.4 2-.4 2h.3a16.9 16.9 0 0 1 .3-1.9v-2.4zm-1.1 0v.2c0 .3 0 1-.3 1.8l-.4 1.5-.2.8.2.1.7-2.3a7 7 0 0 0 .2-1.9v-.1h-.2zm-1.3.1v.5c0 .5 0 1.2-.3 1.7-.2.5-.7.9-1 1.2a7.6 7.6 0 0 1-.7.5h-.1l.1.2s1.4-.8 2-1.8a4.6 4.6 0 0 0 .3-2.3zm-.7-.2v.1a5.3 5.3 0 0 1-.8 1.5l-1 1-.5.2-.2.1.1.3s1.2-.7 1.8-1.4c.5-.7.8-1.8.8-1.8zm-1.2-.6v.1a7.3 7.3 0 0 1-.4.5c0 .2-.2.4-.3.5l-.8.5a16.2 16.2 0 0 1-.5.3l.1.2.5-.3.8-.5.6-.7.2-.5zm-.6-.8-.2.3a13.8 13.8 0 0 1-.7.7 5.2 5.2 0 0 1-.4.4l-.3.2v.2l.6-.3 1.2-1.3zm-.2-.5-.2.2-.7.4-.7.3v.3c.2 0 .3 0 .5-.2l1.2-.8zm-.3-.5-.6.3a9.3 9.3 0 0 1-.4.2 1.5 1.5 0 0 1-.4.2v.2l.5-.1 1-.6zm-.2-1.1a2.7 2.7 0 0 1-.5.4l-.7.3v.2c.4 0 .7-.2 1-.4a2.9 2.9 0 0 0 .4-.3zm0-1.8-.4.4-.6.8a.4.4 0 0 1-.1.1v.3l.2-.1a.6.6 0 0 0 .1-.2c0-.2.3-.4.6-.7l.3-.2.1-.2zm8.6-10.2h1.3v-.2.2-.1.1-.1.1-.1l-.1.1v-.1.1-.1h-.1.1-.1v-.1h.1-1.2zm0-.8.6-.1.8-.5.3-.3a.6.6 0 0 1 .3 0v-.3l-.5.2-.8.5-.7.3zm0-1.2c.1 0 .3 0 .5-.2l1-.6.7-.3v-.3l-.5.2-1 .6-.8.4v.2zm-.5-1 1.2-1 1.3-.9-.1-.2-1.3 1-1.2.8zm-.8-1.3 2.6-1.9-.2-.2-2.6 1.9zm-1.2-1.3 1.5-1 1.2-.8-.1-.2-1.2.8-1.5 1zm-.8-.7a93.2 93.2 0 0 1 2.1-1.5l.6-.4v-.2a6.2 6.2 0 0 0-.7.3 90.4 90.4 0 0 0-2.2 1.6z" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "M235.6 220.3a13.8 13.8 0 0 1 2 2c.8 1 1.4 2.2 1.4 3.3v.4a7.7 7.7 0 0 1-2 4c-1.5 1.9-3.8 3.5-5.6 5.1a14.4 14.4 0 0 0-2.4 2.5 5 5 0 0 0-1 2.8v.1c0 1 .4 2 1 2.7a3.5 3.5 0 0 0 2.5 1.6 5.5 5.5 0 0 0 .6 0c1.4 0 3-.5 4.5-.5 1.2 0 2.4.3 3.5 1.5 1 1.1 1.3 2.9 1.3 4.6a19 19 0 0 1-.3 3.3 20.5 20.5 0 0 1-.3 1.5h.2s.7-2.3.7-4.8c0-1.7-.4-3.6-1.4-4.8a4.7 4.7 0 0 0-3.7-1.5c-1.6 0-3.1.4-4.5.4h-.6a3.3 3.3 0 0 1-2.3-1.4 4.9 4.9 0 0 1-.9-2.6v-.1c0-1.3.6-2.4 1.6-3.5 1.4-1.6 3.6-3.2 5.5-5 2-1.6 3.6-3.5 3.9-6v-.3c0-1.4-1-2.8-1.9-3.9a13.8 13.8 0 0 0-1.8-1.7z" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "m233.7 222.8-.3-.3-.3.1.5.4zm.8.7-.2-.2h-.2l.2.3z" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "m235.6 224.8-.2-.3-.1.2zm.8 1.2v-.2h-.3l.3.3zm.5 1.2v-.3h-.1zm0 1.2v-.4zm0 .7v-.3zm-9.7 11.9.1-.6c.1-.3-.2.1-.2.1v.4h.1z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M227.1 241.7v.4h.1z" }),
    import_react29.default.createElement("path", { fill: "#78732e", d: "M227.2 243.1v-.3h-.2v.5z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M227.3 243.9v-.3h-.2v.3zm.2 1.1-.1-.3zm.3 1.2-.2-.4v.4z" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "m228.5 247.8-.1-.3h-.2zm1.2 1.1-.4-.3c-.2-.2-.1.2-.1.2l.3.2zm7.8.6-.3-.2.2.3v-.1z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "m238.2 250-.3-.2v.2h.2z" }),
    import_react29.default.createElement("path", { fill: "#a8ac71", d: "m238.3 250.3-.2.2.3.2zm0 1.1v-.4c0-.1 0 0 0 0z" }),
    import_react29.default.createElement("path", { fill: "#fff", d: "M238 252.6v-.3l-.2.3zm-12-41.7s.5-.1.1.4l.3-.4-.2-.1z" }),
    import_react29.default.createElement("path", { fill: "#f9c83a", d: "m235.7 220 .3.3-.4-.1z" }),
    import_react29.default.createElement("path", { fill: "#8f4620", d: "M236 220.3h-.6l.2-.1z" }),
    import_react29.default.createElement("path", { fill: "#977c2e", d: "M240.7 255.3s.4 0 .5-.3c.2-.2 0 .3 0 .3l-.3.1z" })
  );

  // build/client/assets/flags/icons/1x1/ua.js
  var import_react30 = __toESM(require_react(), 1);
  var Icon22 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react30.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-ua", viewBox: "0 0 512 512" },
    import_react30.default.createElement(
      "g",
      { fillRule: "evenodd", strokeWidth: "1pt" },
      import_react30.default.createElement("path", { fill: "gold", d: "M0 0h512v512H0z" }),
      import_react30.default.createElement("path", { fill: "#0057b8", d: "M0 0h512v256H0z" })
    )
  );

  // build/client/assets/flags/icons/1x1/us.js
  var import_react31 = __toESM(require_react(), 1);
  var Icon23 = ({ height: height3 = "24px", width: width3 = "24px" }) => import_react31.default.createElement(
    "svg",
    { width: width3, height: height3, xmlns: "http://www.w3.org/2000/svg", id: "flag-icons-us", viewBox: "0 0 512 512" },
    import_react31.default.createElement("path", { fill: "#bd3d44", d: "M0 0h512v512H0" }),
    import_react31.default.createElement("path", { stroke: "#fff", strokeWidth: "40", d: "M0 58h512M0 137h512M0 216h512M0 295h512M0 374h512M0 453h512" }),
    import_react31.default.createElement("path", { fill: "#192f5d", d: "M0 0h390v275H0z" }),
    import_react31.default.createElement(
      "marker",
      { id: "us-a", markerHeight: "30", markerWidth: "30" },
      import_react31.default.createElement("path", { fill: "#fff", d: "m15 0 9.3 28.6L0 11h30L5.7 28.6" })
    ),
    import_react31.default.createElement("path", { fill: "none", "marker-mid": "url(#us-a)", d: "m0 0 18 11h65 65 65 65 66L51 39h65 65 65 65L18 66h65 65 65 65 66L51 94h65 65 65 65L18 121h65 65 65 65 66L51 149h65 65 65 65L18 177h65 65 65 65 66L51 205h65 65 65 65L18 232h65 65 65 65 66z" })
  );

  // build/api/getExchangeEndpoint.js
  var getExchangeEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/exchange", false);
      this.datamap = {
        base: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true },
        targets: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true }
      };
    }
    reset() {
      this.request = {
        base: Endpoint.InitValue,
        targets: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getExchangeEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getExchangeEndpoint2.Error || (getExchangeEndpoint2.Error = {}));
  })(getExchangeEndpoint || (getExchangeEndpoint = {}));

  // build/client/modules/exchange/Exchange.js
  var __awaiter9 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Direction2;
  (function(Direction4) {
    Direction4["HORIZONTAL"] = "horizontal";
    Direction4["VERTICAL"] = "vertical";
  })(Direction2 || (Direction2 = {}));
  function Exchange(props) {
    const [appdata2, setAppData] = React240.useState(AppData_default.instance());
    const [rates, setRates] = React240.useState([]);
    React240.useEffect(() => pageLoaded(), []);
    React240.useEffect(() => () => pageUnloaded(), []);
    function pageLoaded() {
      refresh();
    }
    function pageUnloaded() {
    }
    function Icon31(value, size) {
      switch (value) {
        case "CAD":
          return React240.createElement(Icon14, { width: size + "px", height: size + "px" });
          break;
        case "EUR":
          return React240.createElement(Icon15, { width: size + "px", height: size + "px" });
          break;
        case "GBP":
          return React240.createElement(Icon16, { width: size + "px", height: size + "px" });
          break;
        case "AUD":
          return React240.createElement(Icon17, { width: size + "px", height: size + "px" });
          break;
        case "CHF":
          return React240.createElement(Icon18, { width: size + "px", height: size + "px" });
          break;
        case "HKD":
          return React240.createElement(Icon19, { width: size + "px", height: size + "px" });
          break;
        case "JPY":
          return React240.createElement(Icon20, { width: size + "px", height: size + "px" });
          break;
        case "MXN":
          return React240.createElement(Icon21, { width: size + "px", height: size + "px" });
          break;
        case "UAH":
          return React240.createElement(Icon22, { width: size + "px", height: size + "px" });
          break;
        case "USD":
          return React240.createElement(Icon23, { width: size + "px", height: size + "px" });
          break;
      }
    }
    function refresh() {
      return __awaiter9(this, void 0, void 0, function* () {
        const endpt = new getExchangeEndpoint();
        endpt.request.base = props.config.base;
        endpt.request.targets = props.config.targets.join(",");
        const reply = yield appdata2.webserver.fetch(endpt, { cache: true, lifespan: 240 });
        if (reply.ok) {
          const data = reply.data;
          setRates(data.rates);
        }
        setTimeout(refresh, appdata2.nextUpdate(props.config.update_hours * Constants.HOURS_TO_MS));
      });
    }
    function renderRate(rate, index) {
      let elem = React240.createElement(
        Box_default,
        { key: rate.currency, sx: { display: "flex", justifyContent: "center", alignItems: "center" } },
        React240.createElement(
          Stack_default,
          { direction: "column", spacing: 0, gap: 0.5, sx: { display: "flex", justifyContent: "center", alignItems: "center" }, width: "100%" },
          React240.createElement(Typography_default, { component: "div", color: "text.primary" }, rate.currency),
          Icon31(rate.currency, 50),
          React240.createElement(Typography_default, { component: "div", color: "text.secondary", sx: { fontSize: 16, lineHeight: 1, paddingTop: "4px" } }, rate.conversion.toFixed(2))
        )
      );
      return elem;
    }
    return React240.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 0, width: "100%" },
      props.config.title ? React240.createElement(Title, { label: "Exchange" }) : null,
      React240.createElement(Stack_default, { direction: props.config.direction == Direction2.HORIZONTAL ? "row" : "column", spacing: 0, gap: props.config.gap, width: "100%" }, rates.map((day, index) => {
        return renderRate(day, index);
      }))
    );
  }

  // build/client/modules/map/MapGoogle.js
  var React242 = __toESM(require_react(), 1);

  // node_modules/@vis.gl/react-google-maps/dist/index.modern.mjs
  var import_react32 = __toESM(require_react(), 1);
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  var import_fast_deep_equal = __toESM(require_fast_deep_equal(), 1);
  function _toPrimitive(t, r2) {
    if ("object" != typeof t || !t)
      return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i)
        return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
  }
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var APILoadingStatus = {
    NOT_LOADED: "NOT_LOADED",
    LOADING: "LOADING",
    LOADED: "LOADED",
    FAILED: "FAILED",
    AUTH_FAILURE: "AUTH_FAILURE"
  };
  var MAPS_API_BASE_URL = "https://maps.googleapis.com/maps/api/js";
  var GoogleMapsApiLoader = class {
    /**
     * Loads the Maps JavaScript API with the specified parameters.
     * Since the Maps library can only be loaded once per page, this will
     * produce a warning when called multiple times with different
     * parameters.
     *
     * The returned promise resolves when loading completes
     * and rejects in case of an error or when the loading was aborted.
     */
    static async load(params, onLoadingStatusChange) {
      var _window$google;
      const libraries = params.libraries ? params.libraries.split(",") : [];
      const serializedParams = this.serializeParams(params);
      this.listeners.push(onLoadingStatusChange);
      if ((_window$google = window.google) != null && (_window$google = _window$google.maps) != null && _window$google.importLibrary) {
        if (!this.serializedApiParams) {
          this.loadingStatus = APILoadingStatus.LOADED;
        }
        this.notifyLoadingStatusListeners();
      } else {
        this.serializedApiParams = serializedParams;
        this.initImportLibrary(params);
      }
      if (this.serializedApiParams && this.serializedApiParams !== serializedParams) {
        console.warn(`[google-maps-api-loader] The maps API has already been loaded with different parameters and will not be loaded again. Refresh the page for new values to have effect.`);
      }
      const librariesToLoad = ["maps", ...libraries];
      await Promise.all(librariesToLoad.map((name) => google.maps.importLibrary(name)));
    }
    /**
     * Serialize the paramters used to load the library for easier comparison.
     */
    static serializeParams(params) {
      return [params.v, params.key, params.language, params.region, params.authReferrerPolicy, params.solutionChannel].join("/");
    }
    /**
     * Creates the global `google.maps.importLibrary` function for bootstrapping.
     * This is essentially a formatted version of the dynamic loading script
     * from the official documentation with some minor adjustments.
     *
     * The created importLibrary function will load the Google Maps JavaScript API,
     * which will then replace the `google.maps.importLibrary` function with the full
     * implementation.
     *
     * @see https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import
     */
    static initImportLibrary(params) {
      if (!window.google)
        window.google = {};
      if (!window.google.maps)
        window.google.maps = {};
      if (window.google.maps["importLibrary"]) {
        console.error("[google-maps-api-loader-internal]: initImportLibrary must only be called once");
        return;
      }
      let apiPromise = null;
      const loadApi = () => {
        if (apiPromise)
          return apiPromise;
        apiPromise = new Promise((resolve, reject) => {
          var _document$querySelect;
          const scriptElement = document.createElement("script");
          const urlParams = new URLSearchParams();
          for (const [key, value] of Object.entries(params)) {
            const urlParamName = key.replace(/[A-Z]/g, (t) => "_" + t[0].toLowerCase());
            urlParams.set(urlParamName, value);
          }
          urlParams.set("loading", "async");
          urlParams.set("callback", "__googleMapsCallback__");
          scriptElement.async = true;
          scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();
          scriptElement.nonce = ((_document$querySelect = document.querySelector("script[nonce]")) == null ? void 0 : _document$querySelect.nonce) || "";
          scriptElement.onerror = () => {
            this.loadingStatus = APILoadingStatus.FAILED;
            this.notifyLoadingStatusListeners();
            reject(new Error("The Google Maps JavaScript API could not load."));
          };
          window.__googleMapsCallback__ = () => {
            this.loadingStatus = APILoadingStatus.LOADED;
            this.notifyLoadingStatusListeners();
            resolve();
          };
          window.gm_authFailure = () => {
            this.loadingStatus = APILoadingStatus.AUTH_FAILURE;
            this.notifyLoadingStatusListeners();
          };
          this.loadingStatus = APILoadingStatus.LOADING;
          this.notifyLoadingStatusListeners();
          document.head.append(scriptElement);
        });
        return apiPromise;
      };
      google.maps.importLibrary = (libraryName) => loadApi().then(() => google.maps.importLibrary(libraryName));
    }
    /**
     * Calls all registered loadingStatusListeners after a status update.
     */
    static notifyLoadingStatusListeners() {
      for (const fn2 of this.listeners) {
        fn2(this.loadingStatus);
      }
    }
  };
  GoogleMapsApiLoader.loadingStatus = APILoadingStatus.NOT_LOADED;
  GoogleMapsApiLoader.serializedApiParams = void 0;
  GoogleMapsApiLoader.listeners = [];
  var _excluded$3 = ["onLoad", "apiKey", "version", "libraries"];
  var _excluded2$1 = ["children"];
  var DEFAULT_SOLUTION_CHANNEL = "GMP_visgl_rgmlibrary_v1_default";
  var APIProviderContext = import_react32.default.createContext(null);
  function useMapInstances() {
    const [mapInstances, setMapInstances] = (0, import_react32.useState)({});
    const addMapInstance = (mapInstance, id = "default") => {
      setMapInstances((instances) => _extends2({}, instances, {
        [id]: mapInstance
      }));
    };
    const removeMapInstance = (id = "default") => {
      setMapInstances((_ref) => {
        let remaining = _objectWithoutPropertiesLoose2(_ref, [id].map(_toPropertyKey));
        return remaining;
      });
    };
    const clearMapInstances = () => {
      setMapInstances({});
    };
    return {
      mapInstances,
      addMapInstance,
      removeMapInstance,
      clearMapInstances
    };
  }
  function useGoogleMapsApiLoader(props) {
    const {
      onLoad,
      apiKey,
      version: version2,
      libraries = []
    } = props, otherApiParams = _objectWithoutPropertiesLoose2(props, _excluded$3);
    const [status, setStatus] = (0, import_react32.useState)(GoogleMapsApiLoader.loadingStatus);
    const [loadedLibraries, addLoadedLibrary] = (0, import_react32.useReducer)((loadedLibraries2, action) => {
      return _extends2({}, loadedLibraries2, {
        [action.name]: action.value
      });
    }, {});
    const librariesString = (0, import_react32.useMemo)(() => libraries == null ? void 0 : libraries.join(","), [libraries]);
    const serializedParams = (0, import_react32.useMemo)(() => JSON.stringify(_extends2({
      apiKey,
      version: version2
    }, otherApiParams)), [apiKey, version2, otherApiParams]);
    const importLibrary = (0, import_react32.useCallback)(async (name) => {
      var _google;
      if (loadedLibraries[name]) {
        return loadedLibraries[name];
      }
      if (!((_google = google) != null && (_google = _google.maps) != null && _google.importLibrary)) {
        throw new Error("[api-provider-internal] importLibrary was called before google.maps.importLibrary was defined.");
      }
      const res = await window.google.maps.importLibrary(name);
      addLoadedLibrary({
        name,
        value: res
      });
      return res;
    }, [loadedLibraries]);
    (0, import_react32.useEffect)(
      () => {
        (async () => {
          try {
            const params = _extends2({
              key: apiKey
            }, otherApiParams);
            if (version2)
              params.v = version2;
            if ((librariesString == null ? void 0 : librariesString.length) > 0)
              params.libraries = librariesString;
            if (params.solutionChannel === void 0)
              params.solutionChannel = DEFAULT_SOLUTION_CHANNEL;
            else if (params.solutionChannel === "")
              delete params.solutionChannel;
            await GoogleMapsApiLoader.load(params, (status2) => setStatus(status2));
            for (const name of ["core", "maps", ...libraries]) {
              await importLibrary(name);
            }
            if (onLoad) {
              onLoad();
            }
          } catch (error) {
            console.error("<ApiProvider> failed to load the Google Maps JavaScript API", error);
          }
        })();
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [apiKey, librariesString, serializedParams]
    );
    return {
      status,
      loadedLibraries,
      importLibrary
    };
  }
  var APIProvider = (props) => {
    const {
      children
    } = props, loaderProps = _objectWithoutPropertiesLoose2(props, _excluded2$1);
    const {
      mapInstances,
      addMapInstance,
      removeMapInstance,
      clearMapInstances
    } = useMapInstances();
    const {
      status,
      loadedLibraries,
      importLibrary
    } = useGoogleMapsApiLoader(loaderProps);
    const contextValue = (0, import_react32.useMemo)(() => ({
      mapInstances,
      addMapInstance,
      removeMapInstance,
      clearMapInstances,
      status,
      loadedLibraries,
      importLibrary
    }), [mapInstances, addMapInstance, removeMapInstance, clearMapInstances, status, loadedLibraries, importLibrary]);
    return /* @__PURE__ */ import_react32.default.createElement(APIProviderContext.Provider, {
      value: contextValue
    }, children);
  };
  function useMapEvents(map2, props) {
    for (const propName of eventPropNames) {
      const handler = props[propName];
      const eventType = propNameToEventType[propName];
      (0, import_react32.useEffect)(() => {
        if (!map2)
          return;
        if (!handler)
          return;
        const listener = google.maps.event.addListener(map2, eventType, (ev) => {
          handler(createMapEvent(eventType, map2, ev));
        });
        return () => listener.remove();
      }, [map2, eventType, handler]);
    }
  }
  function createMapEvent(type, map2, srcEvent) {
    const ev = {
      type,
      map: map2,
      detail: {},
      stoppable: false,
      stop: () => {
      }
    };
    if (cameraEventTypes.includes(type)) {
      const camEvent = ev;
      const center = map2.getCenter();
      const zoom = map2.getZoom();
      const heading = map2.getHeading() || 0;
      const tilt = map2.getTilt() || 0;
      const bounds = map2.getBounds();
      if (!center || !bounds || !Number.isFinite(zoom)) {
        console.warn("[createEvent] at least one of the values from the map returned undefined. This is not expected to happen. Please report an issue at https://github.com/visgl/react-google-maps/issues/new");
      }
      camEvent.detail = {
        center: (center == null ? void 0 : center.toJSON()) || {
          lat: 0,
          lng: 0
        },
        zoom: zoom || 0,
        heading,
        tilt,
        bounds: (bounds == null ? void 0 : bounds.toJSON()) || {
          north: 90,
          east: 180,
          south: -90,
          west: -180
        }
      };
      return camEvent;
    } else if (mouseEventTypes.includes(type)) {
      var _srcEvent$latLng;
      if (!srcEvent)
        throw new Error("[createEvent] mouse events must provide a srcEvent");
      const mouseEvent = ev;
      mouseEvent.domEvent = srcEvent.domEvent;
      mouseEvent.stoppable = true;
      mouseEvent.stop = () => srcEvent.stop();
      mouseEvent.detail = {
        latLng: ((_srcEvent$latLng = srcEvent.latLng) == null ? void 0 : _srcEvent$latLng.toJSON()) || null,
        placeId: srcEvent.placeId
      };
      return mouseEvent;
    }
    return ev;
  }
  var propNameToEventType = {
    onBoundsChanged: "bounds_changed",
    onCenterChanged: "center_changed",
    onClick: "click",
    onContextmenu: "contextmenu",
    onDblclick: "dblclick",
    onDrag: "drag",
    onDragend: "dragend",
    onDragstart: "dragstart",
    onHeadingChanged: "heading_changed",
    onIdle: "idle",
    onIsFractionalZoomEnabledChanged: "isfractionalzoomenabled_changed",
    onMapCapabilitiesChanged: "mapcapabilities_changed",
    onMapTypeIdChanged: "maptypeid_changed",
    onMousemove: "mousemove",
    onMouseout: "mouseout",
    onMouseover: "mouseover",
    onProjectionChanged: "projection_changed",
    onRenderingTypeChanged: "renderingtype_changed",
    onTilesLoaded: "tilesloaded",
    onTiltChanged: "tilt_changed",
    onZoomChanged: "zoom_changed",
    // note: onCameraChanged is an alias for the bounds_changed event,
    // since that is going to be fired in every situation where the camera is
    // updated.
    onCameraChanged: "bounds_changed"
  };
  var cameraEventTypes = ["bounds_changed", "center_changed", "heading_changed", "tilt_changed", "zoom_changed"];
  var mouseEventTypes = ["click", "contextmenu", "dblclick", "mousemove", "mouseout", "mouseover"];
  var eventPropNames = Object.keys(propNameToEventType);
  function useDeepCompareEffect(effect4, deps) {
    const ref = (0, import_react32.useRef)(void 0);
    if (!ref.current || !(0, import_fast_deep_equal.default)(deps, ref.current)) {
      ref.current = deps;
    }
    (0, import_react32.useEffect)(effect4, ref.current);
  }
  var mapOptionKeys = /* @__PURE__ */ new Set(["backgroundColor", "clickableIcons", "controlSize", "disableDefaultUI", "disableDoubleClickZoom", "draggable", "draggableCursor", "draggingCursor", "fullscreenControl", "fullscreenControlOptions", "gestureHandling", "isFractionalZoomEnabled", "keyboardShortcuts", "mapTypeControl", "mapTypeControlOptions", "mapTypeId", "maxZoom", "minZoom", "noClear", "panControl", "panControlOptions", "restriction", "rotateControl", "rotateControlOptions", "scaleControl", "scaleControlOptions", "scrollwheel", "streetView", "streetViewControl", "streetViewControlOptions", "styles", "zoomControl", "zoomControlOptions"]);
  function useMapOptions(map2, mapProps) {
    const mapOptions = {};
    const keys2 = Object.keys(mapProps);
    for (const key of keys2) {
      if (!mapOptionKeys.has(key))
        continue;
      mapOptions[key] = mapProps[key];
    }
    useDeepCompareEffect(() => {
      if (!map2)
        return;
      map2.setOptions(mapOptions);
    }, [mapOptions]);
  }
  function useApiLoadingStatus() {
    var _useContext;
    return ((_useContext = (0, import_react32.useContext)(APIProviderContext)) == null ? void 0 : _useContext.status) || APILoadingStatus.NOT_LOADED;
  }
  function useDeckGLCameraUpdate(map2, props) {
    const {
      viewport: viewport2,
      viewState
    } = props;
    const isDeckGlControlled = !!viewport2;
    (0, import_react32.useLayoutEffect)(() => {
      if (!map2 || !viewState)
        return;
      const {
        latitude,
        longitude,
        bearing: heading,
        pitch: tilt,
        zoom
      } = viewState;
      map2.moveCamera({
        center: {
          lat: latitude,
          lng: longitude
        },
        heading,
        tilt,
        zoom: zoom + 1
      });
    }, [map2, viewState]);
    return isDeckGlControlled;
  }
  function isLatLngLiteral(obj) {
    if (!obj || typeof obj !== "object")
      return false;
    if (!("lat" in obj && "lng" in obj))
      return false;
    return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);
  }
  function toLatLngLiteral(obj) {
    if (isLatLngLiteral(obj))
      return obj;
    return obj.toJSON();
  }
  function useMapCameraParams(map2, cameraStateRef, mapProps) {
    const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;
    let lat = null;
    let lng = null;
    if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {
      lat = center.lat;
      lng = center.lng;
    }
    const zoom = Number.isFinite(mapProps.zoom) ? mapProps.zoom : null;
    const heading = Number.isFinite(mapProps.heading) ? mapProps.heading : null;
    const tilt = Number.isFinite(mapProps.tilt) ? mapProps.tilt : null;
    (0, import_react32.useLayoutEffect)(() => {
      if (!map2)
        return;
      const nextCamera = {};
      let needsUpdate = false;
      if (lat !== null && lng !== null && (cameraStateRef.current.center.lat !== lat || cameraStateRef.current.center.lng !== lng)) {
        nextCamera.center = {
          lat,
          lng
        };
        needsUpdate = true;
      }
      if (zoom !== null && cameraStateRef.current.zoom !== zoom) {
        nextCamera.zoom = zoom;
        needsUpdate = true;
      }
      if (heading !== null && cameraStateRef.current.heading !== heading) {
        nextCamera.heading = heading;
        needsUpdate = true;
      }
      if (tilt !== null && cameraStateRef.current.tilt !== tilt) {
        nextCamera.tilt = tilt;
        needsUpdate = true;
      }
      if (needsUpdate) {
        map2.moveCamera(nextCamera);
      }
    });
  }
  var AuthFailureMessage = () => {
    const style6 = {
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      zIndex: 999,
      display: "flex",
      flexFlow: "column nowrap",
      textAlign: "center",
      justifyContent: "center",
      fontSize: ".8rem",
      color: "rgba(0,0,0,0.6)",
      background: "#dddddd",
      padding: "1rem 1.5rem"
    };
    return /* @__PURE__ */ import_react32.default.createElement("div", {
      style: style6
    }, /* @__PURE__ */ import_react32.default.createElement("h2", null, "Error: AuthFailure"), /* @__PURE__ */ import_react32.default.createElement("p", null, "A problem with your API key prevents the map from rendering correctly. Please make sure the value of the ", /* @__PURE__ */ import_react32.default.createElement("code", null, "APIProvider.apiKey"), " prop is correct. Check the error-message in the console for further details."));
  };
  function useCallbackRef() {
    const [el, setEl] = (0, import_react32.useState)(null);
    const ref = (0, import_react32.useCallback)((value) => setEl(value), [setEl]);
    return [el, ref];
  }
  function useApiIsLoaded() {
    const status = useApiLoadingStatus();
    return status === APILoadingStatus.LOADED;
  }
  function useForceUpdate() {
    const [, forceUpdate] = (0, import_react32.useReducer)((x) => x + 1, 0);
    return forceUpdate;
  }
  function handleBoundsChange(map2, ref) {
    const center = map2.getCenter();
    const zoom = map2.getZoom();
    const heading = map2.getHeading() || 0;
    const tilt = map2.getTilt() || 0;
    const bounds = map2.getBounds();
    if (!center || !bounds || !Number.isFinite(zoom)) {
      console.warn("[useTrackedCameraState] at least one of the values from the map returned undefined. This is not expected to happen. Please report an issue at https://github.com/visgl/react-google-maps/issues/new");
    }
    Object.assign(ref.current, {
      center: (center == null ? void 0 : center.toJSON()) || {
        lat: 0,
        lng: 0
      },
      zoom: zoom || 0,
      heading,
      tilt
    });
  }
  function useTrackedCameraStateRef(map2) {
    const forceUpdate = useForceUpdate();
    const ref = (0, import_react32.useRef)({
      center: {
        lat: 0,
        lng: 0
      },
      heading: 0,
      tilt: 0,
      zoom: 0
    });
    (0, import_react32.useEffect)(() => {
      if (!map2)
        return;
      const listener = google.maps.event.addListener(map2, "bounds_changed", () => {
        handleBoundsChange(map2, ref);
        forceUpdate();
      });
      return () => listener.remove();
    }, [map2, forceUpdate]);
    return ref;
  }
  var _excluded$2 = ["id", "defaultBounds", "defaultCenter", "defaultZoom", "defaultHeading", "defaultTilt", "reuseMaps"];
  var _excluded223 = ["padding"];
  var CachedMapStack = class {
    static has(key) {
      return this.entries[key] && this.entries[key].length > 0;
    }
    static pop(key) {
      if (!this.entries[key])
        return null;
      return this.entries[key].pop() || null;
    }
    static push(key, value) {
      if (!this.entries[key])
        this.entries[key] = [];
      this.entries[key].push(value);
    }
  };
  CachedMapStack.entries = {};
  function useMapInstance(props, context) {
    const apiIsLoaded = useApiIsLoaded();
    const [map2, setMap] = (0, import_react32.useState)(null);
    const [container, containerRef] = useCallbackRef();
    const cameraStateRef = useTrackedCameraStateRef(map2);
    const {
      id,
      defaultBounds,
      defaultCenter,
      defaultZoom,
      defaultHeading,
      defaultTilt,
      reuseMaps
    } = props, mapOptions = _objectWithoutPropertiesLoose2(props, _excluded$2);
    const hasZoom = props.zoom !== void 0 || props.defaultZoom !== void 0;
    const hasCenter = props.center !== void 0 || props.defaultCenter !== void 0;
    if (!defaultBounds && (!hasZoom || !hasCenter)) {
      console.warn("<Map> component is missing configuration. You have to provide zoom and center (via the `zoom`/`defaultZoom` and `center`/`defaultCenter` props) or specify the region to show using `defaultBounds`. See https://visgl.github.io/react-google-maps/docs/api-reference/components/map#required");
    }
    if (!mapOptions.center && defaultCenter)
      mapOptions.center = defaultCenter;
    if (!mapOptions.zoom && Number.isFinite(defaultZoom))
      mapOptions.zoom = defaultZoom;
    if (!mapOptions.heading && Number.isFinite(defaultHeading))
      mapOptions.heading = defaultHeading;
    if (!mapOptions.tilt && Number.isFinite(defaultTilt))
      mapOptions.tilt = defaultTilt;
    for (const key of Object.keys(mapOptions))
      if (mapOptions[key] === void 0)
        delete mapOptions[key];
    const savedMapStateRef = (0, import_react32.useRef)();
    (0, import_react32.useEffect)(
      () => {
        if (!container || !apiIsLoaded)
          return;
        const {
          addMapInstance,
          removeMapInstance
        } = context;
        const mapId = props.mapId;
        const cacheKey = mapId || "default";
        let mapDiv;
        let map3;
        if (reuseMaps && CachedMapStack.has(cacheKey)) {
          map3 = CachedMapStack.pop(cacheKey);
          mapDiv = map3.getDiv();
          container.appendChild(mapDiv);
          map3.setOptions(mapOptions);
          setTimeout(() => map3.setCenter(map3.getCenter()), 0);
        } else {
          mapDiv = document.createElement("div");
          mapDiv.style.height = "100%";
          container.appendChild(mapDiv);
          map3 = new google.maps.Map(mapDiv, mapOptions);
        }
        setMap(map3);
        addMapInstance(map3, id);
        if (defaultBounds) {
          const {
            padding: padding3
          } = defaultBounds, defBounds = _objectWithoutPropertiesLoose2(defaultBounds, _excluded223);
          map3.fitBounds(defBounds, padding3);
        } else if (!hasZoom || !hasCenter) {
          map3.fitBounds({
            east: 180,
            west: -180,
            south: -90,
            north: 90
          });
        }
        if (savedMapStateRef.current) {
          const {
            mapId: savedMapId,
            cameraState: savedCameraState
          } = savedMapStateRef.current;
          if (savedMapId !== mapId) {
            map3.setOptions(savedCameraState);
          }
        }
        return () => {
          savedMapStateRef.current = {
            mapId,
            // eslint-disable-next-line react-hooks/exhaustive-deps
            cameraState: cameraStateRef.current
          };
          mapDiv.remove();
          if (reuseMaps) {
            CachedMapStack.push(cacheKey, map3);
          } else {
            google.maps.event.clearInstanceListeners(map3);
          }
          setMap(null);
          removeMapInstance(id);
        };
      },
      // some dependencies are ignored in the list below:
      //  - defaultBounds and the default* camera props will only be used once, and
      //    changes should be ignored
      //  - mapOptions has special hooks that take care of updating the options
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [container, apiIsLoaded, id, props.mapId]
    );
    return [map2, containerRef, cameraStateRef];
  }
  var GoogleMapsContext = import_react32.default.createContext(null);
  var Map2 = (props) => {
    const {
      children,
      id,
      className,
      style: style6
    } = props;
    const context = (0, import_react32.useContext)(APIProviderContext);
    const loadingStatus = useApiLoadingStatus();
    if (!context) {
      throw new Error("<Map> can only be used inside an <ApiProvider> component.");
    }
    const [map2, mapRef, cameraStateRef] = useMapInstance(props, context);
    useMapCameraParams(map2, cameraStateRef, props);
    useMapEvents(map2, props);
    useMapOptions(map2, props);
    const isDeckGlControlled = useDeckGLCameraUpdate(map2, props);
    const isControlledExternally = !!props.controlled;
    (0, import_react32.useEffect)(() => {
      if (!map2)
        return;
      if (isDeckGlControlled) {
        map2.setOptions({
          disableDefaultUI: true
        });
      }
      if (isDeckGlControlled || isControlledExternally) {
        map2.setOptions({
          gestureHandling: "none",
          keyboardShortcuts: false
        });
      }
      return () => {
        map2.setOptions({
          gestureHandling: props.gestureHandling,
          keyboardShortcuts: props.keyboardShortcuts
        });
      };
    }, [map2, isDeckGlControlled, isControlledExternally, props.gestureHandling, props.keyboardShortcuts]);
    const center = props.center ? toLatLngLiteral(props.center) : null;
    let lat = null;
    let lng = null;
    if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {
      lat = center.lat;
      lng = center.lng;
    }
    const cameraOptions = (0, import_react32.useMemo)(() => {
      var _lat, _lng, _props$zoom, _props$heading, _props$tilt;
      return {
        center: {
          lat: (_lat = lat) != null ? _lat : 0,
          lng: (_lng = lng) != null ? _lng : 0
        },
        zoom: (_props$zoom = props.zoom) != null ? _props$zoom : 0,
        heading: (_props$heading = props.heading) != null ? _props$heading : 0,
        tilt: (_props$tilt = props.tilt) != null ? _props$tilt : 0
      };
    }, [lat, lng, props.zoom, props.heading, props.tilt]);
    (0, import_react32.useLayoutEffect)(() => {
      if (!map2 || !isControlledExternally)
        return;
      map2.moveCamera(cameraOptions);
      const listener = map2.addListener("bounds_changed", () => {
        map2.moveCamera(cameraOptions);
      });
      return () => listener.remove();
    }, [map2, isControlledExternally, cameraOptions]);
    const combinedStyle = (0, import_react32.useMemo)(() => _extends2({
      width: "100%",
      height: "100%",
      position: "relative",
      // when using deckgl, the map should be sent to the back
      zIndex: isDeckGlControlled ? -1 : 0
    }, style6), [style6, isDeckGlControlled]);
    const contextValue = (0, import_react32.useMemo)(() => ({
      map: map2
    }), [map2]);
    if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {
      return /* @__PURE__ */ import_react32.default.createElement("div", {
        style: _extends2({
          position: "relative"
        }, className ? {} : combinedStyle),
        className
      }, /* @__PURE__ */ import_react32.default.createElement(AuthFailureMessage, null));
    }
    return /* @__PURE__ */ import_react32.default.createElement("div", _extends2({
      ref: mapRef,
      "data-testid": "map",
      style: className ? void 0 : combinedStyle,
      className
    }, id ? {
      id
    } : {}), map2 ? /* @__PURE__ */ import_react32.default.createElement(GoogleMapsContext.Provider, {
      value: contextValue
    }, children) : null);
  };
  Map2.deckGLViewProps = true;
  var shownMessages = /* @__PURE__ */ new Set();
  function logErrorOnce(...args) {
    const key = JSON.stringify(args);
    if (!shownMessages.has(key)) {
      shownMessages.add(key);
      console.error(...args);
    }
  }
  var useMap = (id = null) => {
    const ctx = (0, import_react32.useContext)(APIProviderContext);
    const {
      map: map2
    } = (0, import_react32.useContext)(GoogleMapsContext) || {};
    if (ctx === null) {
      logErrorOnce("useMap(): failed to retrieve APIProviderContext. Make sure that the <APIProvider> component exists and that the component you are calling `useMap()` from is a sibling of the <APIProvider>.");
      return null;
    }
    const {
      mapInstances
    } = ctx;
    if (id !== null)
      return mapInstances[id] || null;
    if (map2)
      return map2;
    return mapInstances["default"] || null;
  };
  function useMapsLibrary(name) {
    const apiIsLoaded = useApiIsLoaded();
    const ctx = (0, import_react32.useContext)(APIProviderContext);
    (0, import_react32.useEffect)(() => {
      if (!apiIsLoaded || !ctx)
        return;
      void ctx.importLibrary(name);
    }, [apiIsLoaded, ctx, name]);
    return (ctx == null ? void 0 : ctx.loadedLibraries[name]) || null;
  }
  function setValueForStyles(element, styles5, prevStyles) {
    if (styles5 != null && typeof styles5 !== "object") {
      throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    const elementStyle = element.style;
    if (prevStyles == null) {
      if (styles5 == null)
        return;
      for (const styleName in styles5) {
        if (!styles5.hasOwnProperty(styleName))
          continue;
        setValueForStyle(elementStyle, styleName, styles5[styleName]);
      }
      return;
    }
    for (const styleName in prevStyles) {
      if (prevStyles.hasOwnProperty(styleName) && (styles5 == null || !styles5.hasOwnProperty(styleName))) {
        const isCustomProperty3 = styleName.indexOf("--") === 0;
        if (isCustomProperty3) {
          elementStyle.setProperty(styleName, "");
        } else if (styleName === "float") {
          elementStyle.cssFloat = "";
        } else {
          elementStyle[styleName] = "";
        }
      }
    }
    if (styles5 == null)
      return;
    for (const styleName in styles5) {
      const value = styles5[styleName];
      if (styles5.hasOwnProperty(styleName) && prevStyles[styleName] !== value) {
        setValueForStyle(elementStyle, styleName, value);
      }
    }
  }
  function setValueForStyle(elementStyle, styleName, value) {
    const isCustomProperty3 = styleName.indexOf("--") === 0;
    if (value == null || typeof value === "boolean" || value === "") {
      if (isCustomProperty3) {
        elementStyle.setProperty(styleName, "");
      } else if (styleName === "float") {
        elementStyle.cssFloat = "";
      } else {
        elementStyle[styleName] = "";
      }
    } else if (isCustomProperty3) {
      elementStyle.setProperty(styleName, value);
    } else if (typeof value === "number" && value !== 0 && !isUnitlessNumber(styleName)) {
      elementStyle[styleName] = value + "px";
    } else {
      if (styleName === "float") {
        elementStyle.cssFloat = value;
      } else {
        elementStyle[styleName] = ("" + value).trim();
      }
    }
  }
  var unitlessNumbers = /* @__PURE__ */ new Set([
    "animationIterationCount",
    "aspectRatio",
    "borderImageOutset",
    "borderImageSlice",
    "borderImageWidth",
    "boxFlex",
    "boxFlexGroup",
    "boxOrdinalGroup",
    "columnCount",
    "columns",
    "flex",
    "flexGrow",
    "flexPositive",
    "flexShrink",
    "flexNegative",
    "flexOrder",
    "gridArea",
    "gridRow",
    "gridRowEnd",
    "gridRowSpan",
    "gridRowStart",
    "gridColumn",
    "gridColumnEnd",
    "gridColumnSpan",
    "gridColumnStart",
    "fontWeight",
    "lineClamp",
    "lineHeight",
    "opacity",
    "order",
    "orphans",
    "scale",
    "tabSize",
    "widows",
    "zIndex",
    "zoom",
    "fillOpacity",
    // SVG-related properties
    "floodOpacity",
    "stopOpacity",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeWidth"
  ]);
  function isUnitlessNumber(name) {
    return unitlessNumbers.has(name);
  }
  function useMapsEventListener(target, name, callback) {
    (0, import_react32.useEffect)(() => {
      if (!target || !name || !callback)
        return;
      const listener = google.maps.event.addListener(target, name, callback);
      return () => listener.remove();
    }, [target, name, callback]);
  }
  function usePropBinding(object, prop, value) {
    (0, import_react32.useEffect)(() => {
      if (!object)
        return;
      object[prop] = value;
    }, [object, prop, value]);
  }
  var AdvancedMarkerContext = import_react32.default.createContext(null);
  function useAdvancedMarker(props) {
    const [marker, setMarker] = (0, import_react32.useState)(null);
    const [contentContainer, setContentContainer] = (0, import_react32.useState)(null);
    const prevStyleRef = (0, import_react32.useRef)(null);
    const map2 = useMap();
    const markerLibrary = useMapsLibrary("marker");
    const {
      children,
      className,
      style: style6,
      onClick,
      onDrag,
      onDragStart,
      onDragEnd,
      collisionBehavior,
      clickable,
      draggable,
      position: position2,
      title,
      zIndex: zIndex2
    } = props;
    const numChildren = import_react32.Children.count(children);
    (0, import_react32.useEffect)(() => {
      if (!map2 || !markerLibrary)
        return;
      const newMarker = new markerLibrary.AdvancedMarkerElement();
      newMarker.map = map2;
      setMarker(newMarker);
      let contentElement = null;
      if (numChildren > 0) {
        contentElement = document.createElement("div");
        newMarker.content = contentElement;
        setContentContainer(contentElement);
      }
      return () => {
        var _contentElement;
        newMarker.map = null;
        (_contentElement = contentElement) == null || _contentElement.remove();
        setMarker(null);
        setContentContainer(null);
      };
    }, [map2, markerLibrary, numChildren]);
    (0, import_react32.useEffect)(() => {
      if (!marker || !marker.content)
        return;
      marker.content.className = className || "";
    }, [marker, className]);
    usePropBinding(contentContainer, "className", className != null ? className : "");
    (0, import_react32.useEffect)(() => {
      if (!contentContainer)
        return;
      setValueForStyles(contentContainer, style6 || null, prevStyleRef.current);
      prevStyleRef.current = style6 || null;
    }, [contentContainer, className, style6]);
    usePropBinding(marker, "position", position2);
    usePropBinding(marker, "title", title != null ? title : "");
    usePropBinding(marker, "zIndex", zIndex2);
    usePropBinding(marker, "collisionBehavior", collisionBehavior);
    (0, import_react32.useEffect)(() => {
      if (!marker)
        return;
      if (draggable !== void 0)
        marker.gmpDraggable = draggable;
      else if (onDrag || onDragStart || onDragEnd)
        marker.gmpDraggable = true;
      else
        marker.gmpDraggable = false;
    }, [marker, draggable, onDrag, onDragEnd, onDragStart]);
    (0, import_react32.useEffect)(() => {
      if (!marker)
        return;
      if (clickable !== void 0)
        marker.gmpClickable = clickable;
      else if (onClick)
        marker.gmpClickable = true;
      else
        marker.gmpClickable = false;
    }, [marker, clickable, onClick]);
    useMapsEventListener(marker, "click", onClick);
    useMapsEventListener(marker, "drag", onDrag);
    useMapsEventListener(marker, "dragstart", onDragStart);
    useMapsEventListener(marker, "dragend", onDragEnd);
    return [marker, contentContainer];
  }
  var AdvancedMarker = (0, import_react32.forwardRef)((props, ref) => {
    const {
      children
    } = props;
    const [marker, contentContainer] = useAdvancedMarker(props);
    const advancedMarkerContextValue = (0, import_react32.useMemo)(() => marker ? {
      marker
    } : null, [marker]);
    (0, import_react32.useImperativeHandle)(ref, () => marker, [marker]);
    if (!contentContainer)
      return null;
    return /* @__PURE__ */ import_react32.default.createElement(AdvancedMarkerContext.Provider, {
      value: advancedMarkerContextValue
    }, (0, import_react_dom2.createPortal)(children, contentContainer));
  });
  var _excluded129 = ["onClick", "onDrag", "onDragStart", "onDragEnd", "onMouseOver", "onMouseOut"];
  function useMarker(props) {
    const [marker, setMarker] = (0, import_react32.useState)(null);
    const map2 = useMap();
    const {
      onClick,
      onDrag,
      onDragStart,
      onDragEnd,
      onMouseOver,
      onMouseOut
    } = props, markerOptions = _objectWithoutPropertiesLoose2(props, _excluded129);
    const {
      position: position2,
      draggable
    } = markerOptions;
    (0, import_react32.useEffect)(() => {
      if (!map2) {
        if (map2 === void 0)
          console.error("<Marker> has to be inside a Map component.");
        return;
      }
      const newMarker = new google.maps.Marker(markerOptions);
      newMarker.setMap(map2);
      setMarker(newMarker);
      return () => {
        newMarker.setMap(null);
        setMarker(null);
      };
    }, [map2]);
    (0, import_react32.useEffect)(() => {
      if (!marker)
        return;
      const m = marker;
      const gme = google.maps.event;
      if (onClick)
        gme.addListener(m, "click", onClick);
      if (onDrag)
        gme.addListener(m, "drag", onDrag);
      if (onDragStart)
        gme.addListener(m, "dragstart", onDragStart);
      if (onDragEnd)
        gme.addListener(m, "dragend", onDragEnd);
      if (onMouseOver)
        gme.addListener(m, "mouseover", onMouseOver);
      if (onMouseOut)
        gme.addListener(m, "mouseout", onMouseOut);
      marker.setDraggable(Boolean(draggable));
      return () => {
        gme.clearInstanceListeners(m);
      };
    }, [marker, draggable, onClick, onDrag, onDragStart, onDragEnd, onMouseOver, onMouseOut]);
    (0, import_react32.useEffect)(() => {
      if (!marker)
        return;
      if (markerOptions)
        marker.setOptions(markerOptions);
    }, [marker, markerOptions]);
    (0, import_react32.useEffect)(() => {
      if (draggable || !position2 || !marker)
        return;
      marker.setPosition(position2);
    }, [draggable, position2, marker]);
    return marker;
  }
  var Marker = (0, import_react32.forwardRef)((props, ref) => {
    const marker = useMarker(props);
    (0, import_react32.useImperativeHandle)(ref, () => marker, [marker]);
    return /* @__PURE__ */ import_react32.default.createElement(import_react32.default.Fragment, null);
  });

  // build/client/modules/map/MapGoogle.js
  var __awaiter10 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function MapGoogle(props) {
    const [appdata2, setAppData] = React242.useState(AppData_default.instance());
    const map2 = React242.useRef(null);
    const styles5 = React242.useRef([
      { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
      { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
      { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
      { featureType: "administrative.locality", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
      { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
      { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#263c3f" }] },
      { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#6b9a76" }] },
      { featureType: "road", elementType: "geometry", stylers: [{ color: "#38414e" }] },
      { featureType: "road", elementType: "geometry.stroke", stylers: [{ color: "#212a37" }] },
      { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#9ca5b3" }] },
      { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#746855" }] },
      { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#1f2835" }] },
      { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#f3d19c" }] },
      { featureType: "transit", elementType: "geometry", stylers: [{ color: "#2f3948" }] },
      { featureType: "transit.station", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
      { featureType: "water", elementType: "geometry", stylers: [{ color: "#17263c" }] },
      { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#515c6d" }] },
      { featureType: "water", elementType: "labels.text.stroke", stylers: [{ color: "#17263c" }] }
    ]);
    React242.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
      loadMap();
    }
    function loadMap() {
      return __awaiter10(this, void 0, void 0, function* () {
      });
    }
    function asyncMap(google2) {
      return __awaiter10(this, void 0, void 0, function* () {
        const styles6 = [
          { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
          { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
          { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
          { featureType: "administrative.locality", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
          { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
          { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#263c3f" }] },
          { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#6b9a76" }] },
          { featureType: "road", elementType: "geometry", stylers: [{ color: "#38414e" }] },
          { featureType: "road", elementType: "geometry.stroke", stylers: [{ color: "#212a37" }] },
          { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#9ca5b3" }] },
          { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#746855" }] },
          { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#1f2835" }] },
          { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#f3d19c" }] },
          { featureType: "transit", elementType: "geometry", stylers: [{ color: "#2f3948" }] },
          { featureType: "transit.station", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
          { featureType: "water", elementType: "geometry", stylers: [{ color: "#17263c" }] },
          { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#515c6d" }] },
          { featureType: "water", elementType: "labels.text.stroke", stylers: [{ color: "#17263c" }] }
        ];
        const options = {
          center: { lat: props.config.lat, lng: props.config.lon },
          zoom: props.config.zoom,
          styles: styles6,
          zoomControl: props.config.zoomControl,
          mapTypeControl: props.config.mapTypeControl,
          scaleControl: props.config.scaleControl,
          streetViewControl: props.config.streetViewControl,
          fullscreenControl: props.config.fullscreenControl
        };
        map2.current = new google2.maps.Map(document.getElementById("map"), options);
        const trafficLayer = new google2.maps.TrafficLayer();
        trafficLayer.setMap(map2.current);
      });
    }
    function apiLoaded() {
    }
    function onTileLoaded(event) {
      if (map2.current == null) {
        map2.current = event.map;
        const trafficLayer = new google.maps.TrafficLayer();
        trafficLayer.setMap(map2.current);
      }
    }
    return React242.createElement(
      "div",
      { id: "map", style: { width: "100%", height: props.config.height } },
      React242.createElement(
        APIProvider,
        { apiKey: appdata2.config.google.map.key, onLoad: apiLoaded },
        React242.createElement(Map2, { defaultZoom: props.config.zoom, defaultCenter: { lat: props.config.lat, lng: props.config.lon }, styles: styles5.current, zoomControl: props.config.zoomControl, mapTypeControl: props.config.mapTypeControl, scaleControl: props.config.scaleControl, streetViewControl: props.config.streetViewControl, fullscreenControl: props.config.fullscreenControl, onTilesLoaded: onTileLoaded })
      )
    );
  }

  // build/client/modules/commute/Commute.js
  var React250 = __toESM(require_react(), 1);

  // build/client/modules/commute/icons/AirplaneIcon.js
  var import_react33 = __toESM(require_react(), 1);
  var Icon24 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react33.default.createElement(
    "svg",
    { fill: color3, width: width3, height: height3, viewBox: "0 2 24 24", version: "1.1", xmlns: "http://www.w3.org/2000/svg" },
    import_react33.default.createElement("path", { d: "M6.72 26.2c-0.040 0-0.080 0-0.12 0-0.28-0.040-0.48-0.2-0.64-0.44l-1.96-3.56-3.56-1.96c-0.24-0.12-0.4-0.36-0.44-0.64s0.040-0.52 0.24-0.72l1.8-1.8c0.2-0.2 0.48-0.28 0.76-0.24l2.040 0.36 2.68-2.68-6.48-3.2c-0.24-0.12-0.4-0.36-0.48-0.64s0.040-0.56 0.24-0.76l2-2c0.2-0.2 0.52-0.28 0.8-0.24l8.48 2.2 2.96-2.96c1.040-1.040 3.48-1.8 4.72-0.56 0.56 0.56 0.76 1.48 0.56 2.52-0.16 0.84-0.6 1.64-1.12 2.16l-2.96 2.96 2.2 8.48c0.080 0.28 0 0.6-0.24 0.8l-2 2c-0.2 0.2-0.48 0.28-0.76 0.24s-0.52-0.2-0.64-0.48l-3.2-6.48-2.68 2.68 0.36 2.040c0.040 0.28-0.040 0.56-0.24 0.76l-1.8 1.8c-0.080 0.28-0.28 0.36-0.52 0.36zM2.24 19.28l2.8 1.52c0.16 0.080 0.24 0.2 0.32 0.32l1.52 2.8 0.68-0.68-0.32-2.040c-0.040-0.28 0.040-0.56 0.24-0.76l3.84-3.84c0.2-0.2 0.48-0.28 0.76-0.24s0.52 0.2 0.64 0.48l3.2 6.48 0.8-0.8-2.2-8.48c-0.080-0.28 0-0.6 0.24-0.8l3.28-3.28c0.6-0.6 0.92-1.96 0.56-2.32s-1.72 0-2.32 0.56l-3.28 3.28c-0.2 0.2-0.52 0.28-0.8 0.24l-8.52-2.2-0.8 0.8 6.48 3.2c0.24 0.12 0.4 0.36 0.48 0.64s-0.040 0.56-0.24 0.76l-3.84 3.84c-0.2 0.2-0.48 0.28-0.76 0.24l-2.040-0.36-0.72 0.64z" })
  );

  // build/client/modules/commute/icons/WorkIcon.js
  var import_react34 = __toESM(require_react(), 1);
  var Icon25 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react34.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react34.default.createElement("path", { d: "M9 7H5C3.89543 7 3 7.89543 3 9V18C3 19.1046 3.89543 20 5 20H19C20.1046 20 21 19.1046 21 18V9C21 7.89543 20.1046 7 19 7H15M9 7V5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7M9 7H15", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/commute/icons/ShopIcon.js
  var import_react35 = __toESM(require_react(), 1);
  var Icon26 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react35.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react35.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.13238 1C4.07859 1 3.10207 1.5529 2.5599 2.45651L0.615776 5.69672C0.17816 6.42608 0.0121122 7.42549 0.508798 8.32014C0.789678 8.82607 1.27459 9.55181 2 10.1205V20C2 21.6569 3.34315 23 5 23H8C9.10457 23 10 22.1046 10 21V15H14V21C14 22.1046 14.8954 23 16 23H19C20.6569 23 22 21.6569 22 20V10.1205C22.7254 9.55181 23.2103 8.82607 23.4912 8.32014C23.9879 7.42548 23.8218 6.42608 23.3842 5.69672L21.4401 2.45651C20.8979 1.5529 19.9214 1 18.8676 1H5.13238ZM20 10.9697C19.8391 10.9895 19.6725 11 19.5 11C18.1259 11 17.1126 10.3216 16.4364 9.60481C16.2632 9.4211 16.1082 9.23119 15.9705 9.04325C15.2167 9.98812 13.9542 11 12 11C10.0458 11 8.7833 9.98812 8.02952 9.04325C7.89183 9.23119 7.73684 9.4211 7.56355 9.60481C6.8874 10.3216 5.87405 11 4.5 11C4.32752 11 4.16089 10.9895 4 10.9697V20C4 20.5523 4.44772 21 5 21H8V15C8 13.8954 8.89543 13 10 13H14C15.1046 13 16 13.8954 16 15V21H19C19.5523 21 20 20.5523 20 20V10.9697ZM4.27489 3.4855C4.45561 3.1843 4.78112 3 5.13238 3H18.8676C19.2189 3 19.5444 3.1843 19.7251 3.4855L21.6692 6.72571C21.8324 6.99765 21.8127 7.2231 21.7426 7.34937C21.2851 8.17345 20.5493 9 19.5 9C18.8448 9 18.323 8.69006 17.8913 8.23245C17.4506 7.76524 17.1659 7.20393 17.0284 6.88399C16.8114 6.37951 16.3329 6.21388 16.0033 6.21248C15.674 6.21109 15.1982 6.37172 14.9752 6.8683C14.6702 7.54754 13.7982 9 12 9C10.2018 9 9.32978 7.54754 9.0248 6.8683C8.80182 6.37172 8.32598 6.21109 7.99667 6.21248C7.66706 6.21388 7.18855 6.37951 6.97164 6.88399C6.83407 7.20393 6.5494 7.76524 6.10869 8.23245C5.67703 8.69006 5.15524 9 4.5 9C3.45065 9 2.71491 8.17345 2.2574 7.34937C2.1873 7.2231 2.1676 6.99765 2.33076 6.72571L4.27489 3.4855Z", fill: color3 })
  );

  // build/client/modules/commute/icons/SchoolIcon.js
  var import_react36 = __toESM(require_react(), 1);
  var Icon27 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react36.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react36.default.createElement("path", { d: "M6 15.5002H7M6 18.5002H7M17 18.5002H18M17 15.5002H18M10 22.0002V18.0002C10 16.8956 10.8954 16.0002 12 16.0002C13.1046 16.0002 14 16.8956 14 18.0002V22.0002M12 5H16.84C16.896 5 16.924 5 16.9454 4.9891C16.9642 4.97951 16.9795 4.96422 16.9891 4.9454C17 4.92401 17 4.89601 17 4.84V2.16C17 2.10399 17 2.07599 16.9891 2.0546C16.9795 2.03578 16.9642 2.02049 16.9454 2.0109C16.924 2 16.896 2 16.84 2H12.16C12.104 2 12.076 2 12.0546 2.0109C12.0358 2.02049 12.0205 2.03578 12.0109 2.0546C12 2.07599 12 2.10399 12 2.16V5ZM12 5V7.69092M12.03 12.25H12.0375M12 7.69092C12.1947 7.69092 12.3895 7.71935 12.5779 7.77623C13.0057 7.90536 13.3841 8.24585 14.1407 8.92681L17 11.5002L18.5761 11.8942C19.4428 12.1109 19.8761 12.2192 20.1988 12.4608C20.4834 12.674 20.7061 12.9592 20.8439 13.2871C21 13.6587 21 14.1053 21 14.9987V18.8002C21 19.9203 21 20.4804 20.782 20.9082C20.5903 21.2845 20.2843 21.5905 19.908 21.7822C19.4802 22.0002 18.9201 22.0002 17.8 22.0002H6.2C5.0799 22.0002 4.51984 22.0002 4.09202 21.7822C3.71569 21.5905 3.40973 21.2845 3.21799 20.9082C3 20.4804 3 19.9203 3 18.8002V14.9987C3 14.1053 3 13.6587 3.15613 13.2871C3.29388 12.9592 3.51657 12.674 3.80124 12.4608C4.12389 12.2192 4.55722 12.1109 5.42388 11.8942L7 11.5002L9.85931 8.92681C10.6159 8.24584 10.9943 7.90536 11.4221 7.77623C11.6105 7.71935 11.8053 7.69092 12 7.69092ZM12.03 13C11.6158 13 11.28 12.6642 11.28 12.25C11.28 11.8358 11.6158 11.5 12.03 11.5C12.4442 11.5 12.78 11.8358 12.78 12.25C12.78 12.6642 12.4442 13 12.03 13Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/commute/icons/TrainIcon.js
  var import_react37 = __toESM(require_react(), 1);
  var Icon28 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react37.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react37.default.createElement("path", { d: "M5 11H19M9 18L6 21M15 18L18 21M12 11V4M8 15H8.01M16 15H16.01M8.2 18H15.8C16.9201 18 17.4802 18 17.908 17.782C18.2843 17.5903 18.5903 17.2843 18.782 16.908C19 16.4802 19 15.9201 19 14.8V6.2C19 5.0799 19 4.51984 18.782 4.09202C18.5903 3.71569 18.2843 3.40973 17.908 3.21799C17.4802 3 16.9201 3 15.8 3H8.2C7.0799 3 6.51984 3 6.09202 3.21799C5.71569 3.40973 5.40973 3.71569 5.21799 4.09202C5 4.51984 5 5.07989 5 6.2V14.8C5 15.9201 5 16.4802 5.21799 16.908C5.40973 17.2843 5.71569 17.5903 6.09202 17.782C6.51984 18 7.07989 18 8.2 18Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/commute/icons/HospitalIcon.js
  var import_react38 = __toESM(require_react(), 1);
  var Icon29 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react38.default.createElement(
    "svg",
    { width: width3, height: height3, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    import_react38.default.createElement("path", { d: "M7 6H5.2C4.0799 6 3.51984 6 3.09202 6.21799C2.71569 6.40973 2.40973 6.71569 2.21799 7.09202C2 7.51984 2 8.0799 2 9.2V17.8C2 18.9201 2 19.4802 2.21799 19.908C2.40973 20.2843 2.71569 20.5903 3.09202 20.782C3.51984 21 4.0799 21 5.2 21H18.8C19.9201 21 20.4802 21 20.908 20.782C21.2843 20.5903 21.5903 20.2843 21.782 19.908C22 19.4802 22 18.9201 22 17.8V9.2C22 8.07989 22 7.51984 21.782 7.09202C21.5903 6.71569 21.2843 6.40973 20.908 6.21799C20.4802 6 19.9201 6 18.8 6H17M2 10H4M20 10H22M2 14H4M20 14H22M12 6V10M10 8H14M17 21V6.2C17 5.0799 17 4.51984 16.782 4.09202C16.5903 3.71569 16.2843 3.40973 15.908 3.21799C15.4802 3 14.9201 3 13.8 3H10.2C9.07989 3 8.51984 3 8.09202 3.21799C7.71569 3.40973 7.40973 3.71569 7.21799 4.09202C7 4.51984 7 5.0799 7 6.2V21H17ZM14 21V17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17V21H14Z", stroke: color3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // build/client/modules/commute/icons/GymIcon.js
  var import_react39 = __toESM(require_react(), 1);
  var Icon30 = ({ height: height3 = "24px", width: width3 = "24px", color: color3 = "black" }) => import_react39.default.createElement(
    "svg",
    { fill: color3, width: width3, height: height3, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
    import_react39.default.createElement("path", { d: "M22.942,6.837,20.76,4.654l.947-.947a1,1,0,1,0-1.414-1.414l-.947.947L17.163,1.058a3.7,3.7,0,0,0-5.105,0,3.609,3.609,0,0,0,0,5.106L14.24,8.346,8.346,14.24,6.163,12.058a3.7,3.7,0,0,0-5.105,0,3.609,3.609,0,0,0,0,5.106L3.24,19.346l-.947.947a1,1,0,1,0,1.414,1.414l.947-.947,2.183,2.182a3.609,3.609,0,0,0,5.105,0h0a3.608,3.608,0,0,0,0-5.105L9.76,15.655l5.9-5.895,2.182,2.182a3.609,3.609,0,0,0,5.105,0h0a3.608,3.608,0,0,0,0-5.105ZM11,20.39a1.6,1.6,0,0,1-.472,1.138,1.647,1.647,0,0,1-2.277,0L2.472,15.749a1.61,1.61,0,1,1,2.277-2.277l5.779,5.779A1.6,1.6,0,0,1,11,20.39Zm10.528-9.862a1.647,1.647,0,0,1-2.277,0L13.472,4.749a1.61,1.61,0,1,1,2.277-2.277l5.779,5.779a1.609,1.609,0,0,1,0,2.277Z" })
  );

  // build/client/modules/commute/Commute.js
  var __awaiter11 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Direction3;
  (function(Direction4) {
    Direction4["HORIZONTAL"] = "horizontal";
    Direction4["VERTICAL"] = "vertical";
  })(Direction3 || (Direction3 = {}));
  function Commute(props) {
    const [appdata2, setAppData] = React250.useState(AppData_default.instance());
    const map2 = React250.useRef(null);
    const [routes, setRoutes] = React250.useState([]);
    const [since, setSince] = React250.useState("");
    const last_refresh = React250.useRef(null);
    const directions3 = React250.useRef(null);
    React250.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
    }
    function getRoute(route) {
      return __awaiter11(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
          const request = {
            drivingOptions: {
              departureTime: /* @__PURE__ */ new Date(),
              trafficModel: google.maps.TrafficModel.BEST_GUESS
            },
            origin: appdata2.settings.location.address,
            destination: route.address,
            travelMode: google.maps.TravelMode["DRIVING"]
          };
          directions3.current.route(request, function(result, status) {
            if (status == "OK") {
              const rt = {
                name: route.name,
                icon: route.icon,
                distance: result.routes[0].legs[0].distance.value,
                time: result.routes[0].legs[0].duration_in_traffic.value / 60,
                delay: (result.routes[0].legs[0].duration_in_traffic.value - result.routes[0].legs[0].duration.value) / 60
              };
              resolve(rt);
            } else {
              resolve(null);
            }
          });
        });
      });
    }
    function refresh() {
      return __awaiter11(this, void 0, void 0, function* () {
        let rts = [];
        let i;
        let rt;
        for (i = 0; i < props.config.to.length; i++) {
          rt = yield getRoute(props.config.to[i]);
          if (rt)
            rts.push(rt);
        }
        last_refresh.current = /* @__PURE__ */ new Date();
        setRoutes(rts);
        updateSince();
        setTimeout(refresh, appdata2.nextUpdate(props.config.update_hours * Constants.HOURS_TO_MS));
      });
    }
    function updateSince() {
      const now2 = /* @__PURE__ */ new Date();
      const min_diff = (now2.getTime() - last_refresh.current.getTime()) / (60 * 1e3);
      if (min_diff > 180)
        refresh();
      setSince(hoursLabel(min_diff));
      setTimeout(updateSince, Constants.MINUTES_TO_MS);
    }
    function renderIcon(id, size) {
      switch (id) {
        case "plane":
          return React250.createElement(Icon24, { width: size, height: size, color: "white" });
          break;
        case "work":
          return React250.createElement(Icon25, { width: size, height: size, color: "white" });
          break;
        case "shop":
          return React250.createElement(Icon26, { width: size, height: size, color: "white" });
          break;
        case "school":
          return React250.createElement(Icon27, { width: size, height: size, color: "white" });
          break;
        case "train":
          return React250.createElement(Icon28, { width: size, height: size, color: "white" });
          break;
        case "hospital":
          return React250.createElement(Icon29, { width: size, height: size, color: "white" });
          break;
        case "gym":
          return React250.createElement(Icon30, { width: size, height: size, color: "white" });
          break;
      }
    }
    function hoursLabel(input_minutes) {
      const hrs = Math.abs(input_minutes);
      const hour = Math.floor(hrs / 60);
      const minutes = Math.ceil(hrs - hour * 60);
      let label = input_minutes > 0 ? "" : "-";
      if (hour > 0)
        label = StringUtils_default.format("{0}:{1}", hour, StringUtils_default.leadingZero(minutes, 2));
      else
        label = StringUtils_default.format("{0} mins", StringUtils_default.leadingZero(minutes, 2));
      return label;
    }
    function renderPath(route, index) {
      const label = hoursLabel(route.time);
      const delay = hoursLabel(route.delay);
      const elem = React250.createElement(
        "tr",
        { key: index },
        React250.createElement("td", null, renderIcon(route.icon, "25px")),
        React250.createElement(
          "td",
          null,
          React250.createElement(Typography_default, { component: "div", color: "text.primary" }, route.name)
        ),
        React250.createElement(
          "td",
          null,
          React250.createElement(Typography_default, { component: "div", color: "text.secondary" }, label)
        ),
        React250.createElement(
          "td",
          null,
          React250.createElement(Typography_default, { component: "div", color: "error" }, route.delay > 1 ? "+" + delay : "")
        )
      );
      return elem;
    }
    function onTileLoaded(event) {
      if (map2.current == null) {
        map2.current = event.map;
        const trafficLayer = new google.maps.TrafficLayer();
        trafficLayer.setMap(map2.current);
        directions3.current = new google.maps.DirectionsService();
        refresh();
      }
    }
    return React250.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 0, width: "100%" },
      React250.createElement(
        "div",
        { style: { width: "2", height: "1px" } },
        React250.createElement(
          APIProvider,
          { apiKey: appdata2.config.google.map.key },
          React250.createElement(Map2, { defaultZoom: 8, defaultCenter: { lat: 37, lng: -77 }, zoomControl: false, mapTypeControl: false, scaleControl: false, streetViewControl: false, fullscreenControl: false, onTilesLoaded: onTileLoaded })
        )
      ),
      props.config.title ? React250.createElement(Title, { label: "Commute: " + since + " ago" }) : null,
      React250.createElement(
        "table",
        null,
        React250.createElement("tbody", null, routes.map((route, index) => {
          return renderPath(route, index);
        }))
      )
    );
  }

  // build/client/modules/word/WordOfDay.js
  var React251 = __toESM(require_react(), 1);

  // build/api/getWordOfDayEndpoint.js
  var getWordOfDayEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/wordofday", false);
      this.datamap = {
        date: { type: Endpoint.PropertyType.STRING, source: Endpoint.Source.QUERY, required: true }
      };
    }
    reset() {
      this.request = {
        date: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getWordOfDayEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getWordOfDayEndpoint2.Error || (getWordOfDayEndpoint2.Error = {}));
  })(getWordOfDayEndpoint || (getWordOfDayEndpoint = {}));

  // build/client/modules/word/WordOfDay.js
  var __awaiter12 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function WordOfDay(props) {
    const [appdata2, setAppData] = React251.useState(AppData_default.instance());
    const [word, setWord] = React251.useState("");
    const [definition, setDefinitiion] = React251.useState("");
    const [type, setType] = React251.useState("");
    React251.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
      refresh();
    }
    function refresh() {
      return __awaiter12(this, void 0, void 0, function* () {
        const today = /* @__PURE__ */ new Date();
        const endpt = new getWordOfDayEndpoint();
        endpt.request.date = StringUtils_default.format("{0}-{1}-{2}", today.getFullYear(), StringUtils_default.leadingZero(today.getMonth() + 1, 2), StringUtils_default.leadingZero(today.getDate(), 2));
        const reply = yield appdata2.webserver.fetch(endpt, { cache: true, lifespan: 240 });
        if (reply.ok) {
          const data = reply.data;
          setWord(data.word);
          setDefinitiion(data.definition);
          setType(data.type);
        }
        setTimeout(refresh, appdata2.nextUpdate(props.config.update_hours * Constants.HOURS_TO_MS));
      });
    }
    return React251.createElement(
      Stack_default,
      { direction: "column", spacing: 0, gap: 1, width: "100%" },
      React251.createElement(Title, { label: "Word of the Day" }),
      React251.createElement(
        Stack_default,
        { direction: "row", spacing: 0, gap: 2, width: "100%" },
        React251.createElement(Typography_default, { component: "div", color: "text.primary", sx: { fontSize: 24, lineHeight: 1 } }, word),
        React251.createElement(Typography_default, { component: "div", color: "text.secondary", sx: { fontSize: 16, lineHeight: 1, paddingTop: 0.5, fontStyle: "italic" } }, type)
      ),
      React251.createElement(
        Stack_default,
        { direction: "row", spacing: 0, gap: 2, width: "100%" },
        React251.createElement(Typography_default, { component: "div", color: "text.secondary", sx: { fontSize: 16, lineHeight: 1 } }, definition)
      )
    );
  }

  // build/client/Page.js
  var __awaiter13 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function Page(props) {
    const [appdata2, setAppData] = React252.useState(AppData_default.instance());
    function onLogin() {
      return __awaiter13(this, void 0, void 0, function* () {
      });
    }
    function renderWidget(widget) {
      switch (widget.module) {
        case "space":
          return React252.createElement(Space, null);
        case "clock":
          return React252.createElement(Clock, { config: widget.config });
        case "timezones":
          return React252.createElement(TimeZones, { config: widget.config });
        case "wxnow":
          return React252.createElement(Weather, { config: widget.config });
        case "wxforecast":
          return React252.createElement(WeatherForecast, { config: widget.config });
        case "calendar":
          return React252.createElement(Calendar, { config: widget.config, warm: props.warm });
        case "exchange":
          return React252.createElement(Exchange, { config: widget.config });
        case "map":
          return React252.createElement(MapGoogle, { config: widget.config });
        case "commute":
          return React252.createElement(Commute, { config: widget.config });
        case "word":
          return React252.createElement(WordOfDay, { config: widget.config });
      }
      return null;
    }
    function renderRow(row_index, widgets) {
      let row = [];
      widgets.forEach((widget, index) => {
        row.push(React252.createElement(Box_default, { key: row_index + "." + index, sx: { width: widget.width } }, renderWidget(widget)));
      });
      return row;
    }
    return React252.createElement(
      "div",
      { style: { width: "100%" } },
      React252.createElement(Stack_default, { direction: "column", gap: 2 }, props.rows ? props.rows.map((row, index) => {
        return React252.createElement(Stack_default, { key: index, gap: 2, direction: "row" }, renderRow(index, row.widgets));
      }) : null)
    );
  }

  // build/client/settings/SettingsPage.js
  var React308 = __toESM(require_react(), 1);

  // node_modules/query-string/base.js
  var base_exports = {};
  __export(base_exports, {
    exclude: () => exclude,
    extract: () => extract,
    parse: () => parse2,
    parseUrl: () => parseUrl,
    pick: () => pick,
    stringify: () => stringify2,
    stringifyUrl: () => stringifyUrl
  });

  // node_modules/decode-uri-component/index.js
  var token2 = "%[a-f0-9]{2}";
  var singleMatcher = new RegExp("(" + token2 + ")|([^%]+?)", "gi");
  var multiMatcher = new RegExp("(" + token2 + ")+", "gi");
  function decodeComponents(components, split) {
    try {
      return [decodeURIComponent(components.join(""))];
    } catch {
    }
    if (components.length === 1) {
      return components;
    }
    split = split || 1;
    const left2 = components.slice(0, split);
    const right2 = components.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left2), decodeComponents(right2));
  }
  function decode(input) {
    try {
      return decodeURIComponent(input);
    } catch {
      let tokens = input.match(singleMatcher) || [];
      for (let i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join("");
        tokens = input.match(singleMatcher) || [];
      }
      return input;
    }
  }
  function customDecodeURIComponent(input) {
    const replaceMap = {
      "%FE%FF": "\uFFFD\uFFFD",
      "%FF%FE": "\uFFFD\uFFFD"
    };
    let match2 = multiMatcher.exec(input);
    while (match2) {
      try {
        replaceMap[match2[0]] = decodeURIComponent(match2[0]);
      } catch {
        const result = decode(match2[0]);
        if (result !== match2[0]) {
          replaceMap[match2[0]] = result;
        }
      }
      match2 = multiMatcher.exec(input);
    }
    replaceMap["%C2"] = "\uFFFD";
    const entries = Object.keys(replaceMap);
    for (const key of entries) {
      input = input.replace(new RegExp(key, "g"), replaceMap[key]);
    }
    return input;
  }
  function decodeUriComponent(encodedURI) {
    if (typeof encodedURI !== "string") {
      throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
    }
    try {
      return decodeURIComponent(encodedURI);
    } catch {
      return customDecodeURIComponent(encodedURI);
    }
  }

  // node_modules/filter-obj/index.js
  function includeKeys(object, predicate) {
    const result = {};
    if (Array.isArray(predicate)) {
      for (const key of predicate) {
        const descriptor = Object.getOwnPropertyDescriptor(object, key);
        if (descriptor?.enumerable) {
          Object.defineProperty(result, key, descriptor);
        }
      }
    } else {
      for (const key of Reflect.ownKeys(object)) {
        const descriptor = Object.getOwnPropertyDescriptor(object, key);
        if (descriptor.enumerable) {
          const value = object[key];
          if (predicate(key, value, object)) {
            Object.defineProperty(result, key, descriptor);
          }
        }
      }
    }
    return result;
  }

  // node_modules/split-on-first/index.js
  function splitOnFirst(string, separator) {
    if (!(typeof string === "string" && typeof separator === "string")) {
      throw new TypeError("Expected the arguments to be of type `string`");
    }
    if (string === "" || separator === "") {
      return [];
    }
    const separatorIndex = string.indexOf(separator);
    if (separatorIndex === -1) {
      return [];
    }
    return [
      string.slice(0, separatorIndex),
      string.slice(separatorIndex + separator.length)
    ];
  }

  // node_modules/query-string/base.js
  var isNullOrUndefined = (value) => value === null || value === void 0;
  var strictUriEncode = (string) => encodeURIComponent(string).replaceAll(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);
  var encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
  function encoderForArrayFormat(options) {
    switch (options.arrayFormat) {
      case "index": {
        return (key) => (result, value) => {
          const index = result.length;
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [
              ...result,
              [encode3(key, options), "[", index, "]"].join("")
            ];
          }
          return [
            ...result,
            [encode3(key, options), "[", encode3(index, options), "]=", encode3(value, options)].join("")
          ];
        };
      }
      case "bracket": {
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [
              ...result,
              [encode3(key, options), "[]"].join("")
            ];
          }
          return [
            ...result,
            [encode3(key, options), "[]=", encode3(value, options)].join("")
          ];
        };
      }
      case "colon-list-separator": {
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [
              ...result,
              [encode3(key, options), ":list="].join("")
            ];
          }
          return [
            ...result,
            [encode3(key, options), ":list=", encode3(value, options)].join("")
          ];
        };
      }
      case "comma":
      case "separator":
      case "bracket-separator": {
        const keyValueSeparator = options.arrayFormat === "bracket-separator" ? "[]=" : "=";
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          value = value === null ? "" : value;
          if (result.length === 0) {
            return [[encode3(key, options), keyValueSeparator, encode3(value, options)].join("")];
          }
          return [[result, encode3(value, options)].join(options.arrayFormatSeparator)];
        };
      }
      default: {
        return (key) => (result, value) => {
          if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
            return result;
          }
          if (value === null) {
            return [
              ...result,
              encode3(key, options)
            ];
          }
          return [
            ...result,
            [encode3(key, options), "=", encode3(value, options)].join("")
          ];
        };
      }
    }
  }
  function parserForArrayFormat(options) {
    let result;
    switch (options.arrayFormat) {
      case "index": {
        return (key, value, accumulator) => {
          result = /\[(\d*)]$/.exec(key);
          key = key.replace(/\[\d*]$/, "");
          if (!result) {
            accumulator[key] = value;
            return;
          }
          if (accumulator[key] === void 0) {
            accumulator[key] = {};
          }
          accumulator[key][result[1]] = value;
        };
      }
      case "bracket": {
        return (key, value, accumulator) => {
          result = /(\[])$/.exec(key);
          key = key.replace(/\[]$/, "");
          if (!result) {
            accumulator[key] = value;
            return;
          }
          if (accumulator[key] === void 0) {
            accumulator[key] = [value];
            return;
          }
          accumulator[key] = [...accumulator[key], value];
        };
      }
      case "colon-list-separator": {
        return (key, value, accumulator) => {
          result = /(:list)$/.exec(key);
          key = key.replace(/:list$/, "");
          if (!result) {
            accumulator[key] = value;
            return;
          }
          if (accumulator[key] === void 0) {
            accumulator[key] = [value];
            return;
          }
          accumulator[key] = [...accumulator[key], value];
        };
      }
      case "comma":
      case "separator": {
        return (key, value, accumulator) => {
          const isArray3 = typeof value === "string" && value.includes(options.arrayFormatSeparator);
          const isEncodedArray = typeof value === "string" && !isArray3 && decode2(value, options).includes(options.arrayFormatSeparator);
          value = isEncodedArray ? decode2(value, options) : value;
          const newValue = isArray3 || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode2(item, options)) : value === null ? value : decode2(value, options);
          accumulator[key] = newValue;
        };
      }
      case "bracket-separator": {
        return (key, value, accumulator) => {
          const isArray3 = /(\[])$/.test(key);
          key = key.replace(/\[]$/, "");
          if (!isArray3) {
            accumulator[key] = value ? decode2(value, options) : value;
            return;
          }
          const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item) => decode2(item, options));
          if (accumulator[key] === void 0) {
            accumulator[key] = arrayValue;
            return;
          }
          accumulator[key] = [...accumulator[key], ...arrayValue];
        };
      }
      default: {
        return (key, value, accumulator) => {
          if (accumulator[key] === void 0) {
            accumulator[key] = value;
            return;
          }
          accumulator[key] = [...[accumulator[key]].flat(), value];
        };
      }
    }
  }
  function validateArrayFormatSeparator(value) {
    if (typeof value !== "string" || value.length !== 1) {
      throw new TypeError("arrayFormatSeparator must be single character string");
    }
  }
  function encode3(value, options) {
    if (options.encode) {
      return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    }
    return value;
  }
  function decode2(value, options) {
    if (options.decode) {
      return decodeUriComponent(value);
    }
    return value;
  }
  function keysSorter(input) {
    if (Array.isArray(input)) {
      return input.sort();
    }
    if (typeof input === "object") {
      return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key) => input[key]);
    }
    return input;
  }
  function removeHash(input) {
    const hashStart = input.indexOf("#");
    if (hashStart !== -1) {
      input = input.slice(0, hashStart);
    }
    return input;
  }
  function getHash(url) {
    let hash4 = "";
    const hashStart = url.indexOf("#");
    if (hashStart !== -1) {
      hash4 = url.slice(hashStart);
    }
    return hash4;
  }
  function parseValue(value, options, type) {
    if (type === "string" && typeof value === "string") {
      return value;
    }
    if (typeof type === "function" && typeof value === "string") {
      return type(value);
    }
    if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      return value.toLowerCase() === "true";
    }
    if (type === "number" && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
      return Number(value);
    }
    if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
      return Number(value);
    }
    return value;
  }
  function extract(input) {
    input = removeHash(input);
    const queryStart = input.indexOf("?");
    if (queryStart === -1) {
      return "";
    }
    return input.slice(queryStart + 1);
  }
  function parse2(query, options) {
    options = {
      decode: true,
      sort: true,
      arrayFormat: "none",
      arrayFormatSeparator: ",",
      parseNumbers: false,
      parseBooleans: false,
      types: /* @__PURE__ */ Object.create(null),
      ...options
    };
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const formatter = parserForArrayFormat(options);
    const returnValue = /* @__PURE__ */ Object.create(null);
    if (typeof query !== "string") {
      return returnValue;
    }
    query = query.trim().replace(/^[?#&]/, "");
    if (!query) {
      return returnValue;
    }
    for (const parameter of query.split("&")) {
      if (parameter === "") {
        continue;
      }
      const parameter_ = options.decode ? parameter.replaceAll("+", " ") : parameter;
      let [key, value] = splitOnFirst(parameter_, "=");
      if (key === void 0) {
        key = parameter_;
      }
      value = value === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(options.arrayFormat) ? value : decode2(value, options);
      formatter(decode2(key, options), value, returnValue);
    }
    for (const [key, value] of Object.entries(returnValue)) {
      if (typeof value === "object" && value !== null && options.types[key] !== "string") {
        for (const [key2, value2] of Object.entries(value)) {
          const type = options.types[key] ? options.types[key].replace("[]", "") : void 0;
          value[key2] = parseValue(value2, options, type);
        }
      } else if (typeof value === "object" && value !== null && options.types[key] === "string") {
        returnValue[key] = Object.values(value).join(options.arrayFormatSeparator);
      } else {
        returnValue[key] = parseValue(value, options, options.types[key]);
      }
    }
    if (options.sort === false) {
      return returnValue;
    }
    return (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {
      const value = returnValue[key];
      result[key] = Boolean(value) && typeof value === "object" && !Array.isArray(value) ? keysSorter(value) : value;
      return result;
    }, /* @__PURE__ */ Object.create(null));
  }
  function stringify2(object, options) {
    if (!object) {
      return "";
    }
    options = {
      encode: true,
      strict: true,
      arrayFormat: "none",
      arrayFormatSeparator: ",",
      ...options
    };
    validateArrayFormatSeparator(options.arrayFormatSeparator);
    const shouldFilter = (key) => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === "";
    const formatter = encoderForArrayFormat(options);
    const objectCopy = {};
    for (const [key, value] of Object.entries(object)) {
      if (!shouldFilter(key)) {
        objectCopy[key] = value;
      }
    }
    const keys2 = Object.keys(objectCopy);
    if (options.sort !== false) {
      keys2.sort(options.sort);
    }
    return keys2.map((key) => {
      const value = object[key];
      if (value === void 0) {
        return "";
      }
      if (value === null) {
        return encode3(key, options);
      }
      if (Array.isArray(value)) {
        if (value.length === 0 && options.arrayFormat === "bracket-separator") {
          return encode3(key, options) + "[]";
        }
        return value.reduce(formatter(key), []).join("&");
      }
      return encode3(key, options) + "=" + encode3(value, options);
    }).filter((x) => x.length > 0).join("&");
  }
  function parseUrl(url, options) {
    options = {
      decode: true,
      ...options
    };
    let [url_, hash4] = splitOnFirst(url, "#");
    if (url_ === void 0) {
      url_ = url;
    }
    return {
      url: url_?.split("?")?.[0] ?? "",
      query: parse2(extract(url), options),
      ...options && options.parseFragmentIdentifier && hash4 ? { fragmentIdentifier: decode2(hash4, options) } : {}
    };
  }
  function stringifyUrl(object, options) {
    options = {
      encode: true,
      strict: true,
      [encodeFragmentIdentifier]: true,
      ...options
    };
    const url = removeHash(object.url).split("?")[0] || "";
    const queryFromUrl = extract(object.url);
    const query = {
      ...parse2(queryFromUrl, { sort: false }),
      ...object.query
    };
    let queryString = stringify2(query, options);
    queryString &&= `?${queryString}`;
    let hash4 = getHash(object.url);
    if (typeof object.fragmentIdentifier === "string") {
      const urlObjectForFragmentEncode = new URL(url);
      urlObjectForFragmentEncode.hash = object.fragmentIdentifier;
      hash4 = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;
    }
    return `${url}${queryString}${hash4}`;
  }
  function pick(input, filter3, options) {
    options = {
      parseFragmentIdentifier: true,
      [encodeFragmentIdentifier]: false,
      ...options
    };
    const { url, query, fragmentIdentifier } = parseUrl(input, options);
    return stringifyUrl({
      url,
      query: includeKeys(query, filter3),
      fragmentIdentifier
    }, options);
  }
  function exclude(input, filter3, options) {
    const exclusionFilter = Array.isArray(filter3) ? (key) => !filter3.includes(key) : (key, value) => !filter3(key, value);
    return pick(input, exclusionFilter, options);
  }

  // node_modules/query-string/index.js
  var query_string_default = base_exports;

  // node_modules/react-color/es/components/alpha/Alpha.js
  var import_react50 = __toESM(require_react());
  var import_reactcss9 = __toESM(require_lib());

  // node_modules/react-color/es/components/common/Alpha.js
  var import_react41 = __toESM(require_react());
  var import_reactcss2 = __toESM(require_lib());

  // node_modules/react-color/es/helpers/alpha.js
  var calculateChange = function calculateChange2(e, hsl, direction, initialA, container) {
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left2 = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top2 = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (direction === "vertical") {
      var a = void 0;
      if (top2 < 0) {
        a = 0;
      } else if (top2 > containerHeight) {
        a = 1;
      } else {
        a = Math.round(top2 * 100 / containerHeight) / 100;
      }
      if (hsl.a !== a) {
        return {
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a,
          source: "rgb"
        };
      }
    } else {
      var _a = void 0;
      if (left2 < 0) {
        _a = 0;
      } else if (left2 > containerWidth) {
        _a = 1;
      } else {
        _a = Math.round(left2 * 100 / containerWidth) / 100;
      }
      if (initialA !== _a) {
        return {
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: _a,
          source: "rgb"
        };
      }
    }
    return null;
  };

  // node_modules/react-color/es/components/common/Checkboard.js
  var import_react40 = __toESM(require_react());
  var import_reactcss = __toESM(require_lib());

  // node_modules/react-color/es/helpers/checkboard.js
  var checkboardCache = {};
  var render = function render2(c1, c2, size, serverCanvas) {
    if (typeof document === "undefined" && !serverCanvas) {
      return null;
    }
    var canvas = serverCanvas ? new serverCanvas() : document.createElement("canvas");
    canvas.width = size * 2;
    canvas.height = size * 2;
    var ctx = canvas.getContext("2d");
    if (!ctx) {
      return null;
    }
    ctx.fillStyle = c1;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = c2;
    ctx.fillRect(0, 0, size, size);
    ctx.translate(size, size);
    ctx.fillRect(0, 0, size, size);
    return canvas.toDataURL();
  };
  var get = function get2(c1, c2, size, serverCanvas) {
    var key = c1 + "-" + c2 + "-" + size + (serverCanvas ? "-server" : "");
    if (checkboardCache[key]) {
      return checkboardCache[key];
    }
    var checkboard = render(c1, c2, size, serverCanvas);
    checkboardCache[key] = checkboard;
    return checkboard;
  };

  // node_modules/react-color/es/components/common/Checkboard.js
  var _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var Checkboard = function Checkboard2(_ref) {
    var white = _ref.white, grey2 = _ref.grey, size = _ref.size, renderers = _ref.renderers, borderRadius3 = _ref.borderRadius, boxShadow = _ref.boxShadow, children = _ref.children;
    var styles5 = (0, import_reactcss.default)({
      "default": {
        grid: {
          borderRadius: borderRadius3,
          boxShadow,
          absolute: "0px 0px 0px 0px",
          background: "url(" + get(white, grey2, size, renderers.canvas) + ") center left"
        }
      }
    });
    return (0, import_react40.isValidElement)(children) ? import_react40.default.cloneElement(children, _extends3({}, children.props, { style: _extends3({}, children.props.style, styles5.grid) })) : import_react40.default.createElement("div", { style: styles5.grid });
  };
  Checkboard.defaultProps = {
    size: 8,
    white: "transparent",
    grey: "rgba(0,0,0,.08)",
    renderers: {}
  };
  var Checkboard_default = Checkboard;

  // node_modules/react-color/es/components/common/Alpha.js
  var _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var Alpha = function(_ref) {
    _inherits(Alpha2, _ref);
    function Alpha2() {
      var _ref2;
      var _temp, _this, _ret;
      _classCallCheck(this, Alpha2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha2.__proto__ || Object.getPrototypeOf(Alpha2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e) {
        var change = calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
        change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        window.addEventListener("mousemove", _this.handleChange);
        window.addEventListener("mouseup", _this.handleMouseUp);
      }, _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      }, _this.unbindEventListeners = function() {
        window.removeEventListener("mousemove", _this.handleChange);
        window.removeEventListener("mouseup", _this.handleMouseUp);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    _createClass(Alpha2, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: "render",
      value: function render3() {
        var _this2 = this;
        var rgb = this.props.rgb;
        var styles5 = (0, import_reactcss2.default)({
          "default": {
            alpha: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius
            },
            checkboard: {
              absolute: "0px 0px 0px 0px",
              overflow: "hidden",
              borderRadius: this.props.radius
            },
            gradient: {
              absolute: "0px 0px 0px 0px",
              background: "linear-gradient(to right, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            container: {
              position: "relative",
              height: "100%",
              margin: "0 3px"
            },
            pointer: {
              position: "absolute",
              left: rgb.a * 100 + "%"
            },
            slider: {
              width: "4px",
              borderRadius: "1px",
              height: "8px",
              boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
              background: "#fff",
              marginTop: "1px",
              transform: "translateX(-2px)"
            }
          },
          "vertical": {
            gradient: {
              background: "linear-gradient(to bottom, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)"
            },
            pointer: {
              left: 0,
              top: rgb.a * 100 + "%"
            }
          },
          "overwrite": _extends4({}, this.props.style)
        }, {
          vertical: this.props.direction === "vertical",
          overwrite: true
        });
        return import_react41.default.createElement(
          "div",
          { style: styles5.alpha },
          import_react41.default.createElement(
            "div",
            { style: styles5.checkboard },
            import_react41.default.createElement(Checkboard_default, { renderers: this.props.renderers })
          ),
          import_react41.default.createElement("div", { style: styles5.gradient }),
          import_react41.default.createElement(
            "div",
            {
              style: styles5.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            import_react41.default.createElement(
              "div",
              { style: styles5.pointer },
              this.props.pointer ? import_react41.default.createElement(this.props.pointer, this.props) : import_react41.default.createElement("div", { style: styles5.slider })
            )
          )
        );
      }
    }]);
    return Alpha2;
  }(import_react41.PureComponent || import_react41.Component);
  var Alpha_default = Alpha;

  // node_modules/react-color/es/components/common/EditableInput.js
  var import_react42 = __toESM(require_react());
  var import_reactcss3 = __toESM(require_lib());
  var _createClass2 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn2(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var DEFAULT_ARROW_OFFSET = 1;
  var UP_KEY_CODE = 38;
  var DOWN_KEY_CODE = 40;
  var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
  var isValidKeyCode = function isValidKeyCode2(keyCode) {
    return VALID_KEY_CODES.indexOf(keyCode) > -1;
  };
  var getNumberValue = function getNumberValue2(value) {
    return Number(String(value).replace(/%/g, ""));
  };
  var idCounter = 1;
  var EditableInput = function(_ref) {
    _inherits2(EditableInput2, _ref);
    function EditableInput2(props) {
      _classCallCheck2(this, EditableInput2);
      var _this = _possibleConstructorReturn2(this, (EditableInput2.__proto__ || Object.getPrototypeOf(EditableInput2)).call(this));
      _this.handleBlur = function() {
        if (_this.state.blurValue) {
          _this.setState({ value: _this.state.blurValue, blurValue: null });
        }
      };
      _this.handleChange = function(e) {
        _this.setUpdatedValue(e.target.value, e);
      };
      _this.handleKeyDown = function(e) {
        var value = getNumberValue(e.target.value);
        if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
          var offset2 = _this.getArrowOffset();
          var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset2 : value - offset2;
          _this.setUpdatedValue(updatedValue, e);
        }
      };
      _this.handleDrag = function(e) {
        if (_this.props.dragLabel) {
          var newValue = Math.round(_this.props.value + e.movementX);
          if (newValue >= 0 && newValue <= _this.props.dragMax) {
            _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);
          }
        }
      };
      _this.handleMouseDown = function(e) {
        if (_this.props.dragLabel) {
          e.preventDefault();
          _this.handleDrag(e);
          window.addEventListener("mousemove", _this.handleDrag);
          window.addEventListener("mouseup", _this.handleMouseUp);
        }
      };
      _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      };
      _this.unbindEventListeners = function() {
        window.removeEventListener("mousemove", _this.handleDrag);
        window.removeEventListener("mouseup", _this.handleMouseUp);
      };
      _this.state = {
        value: String(props.value).toUpperCase(),
        blurValue: String(props.value).toUpperCase()
      };
      _this.inputId = "rc-editable-input-" + idCounter++;
      return _this;
    }
    _createClass2(EditableInput2, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
          if (this.input === document.activeElement) {
            this.setState({ blurValue: String(this.props.value).toUpperCase() });
          } else {
            this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: "getValueObjectWithLabel",
      value: function getValueObjectWithLabel(value) {
        return _defineProperty({}, this.props.label, value);
      }
    }, {
      key: "getArrowOffset",
      value: function getArrowOffset() {
        return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
      }
    }, {
      key: "setUpdatedValue",
      value: function setUpdatedValue(value, e) {
        var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
        this.props.onChange && this.props.onChange(onChangeValue, e);
        this.setState({ value });
      }
    }, {
      key: "render",
      value: function render3() {
        var _this2 = this;
        var styles5 = (0, import_reactcss3.default)({
          "default": {
            wrap: {
              position: "relative"
            }
          },
          "user-override": {
            wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
            input: this.props.style && this.props.style.input ? this.props.style.input : {},
            label: this.props.style && this.props.style.label ? this.props.style.label : {}
          },
          "dragLabel-true": {
            label: {
              cursor: "ew-resize"
            }
          }
        }, {
          "user-override": true
        }, this.props);
        return import_react42.default.createElement(
          "div",
          { style: styles5.wrap },
          import_react42.default.createElement("input", {
            id: this.inputId,
            style: styles5.input,
            ref: function ref(input) {
              return _this2.input = input;
            },
            value: this.state.value,
            onKeyDown: this.handleKeyDown,
            onChange: this.handleChange,
            onBlur: this.handleBlur,
            placeholder: this.props.placeholder,
            spellCheck: "false"
          }),
          this.props.label && !this.props.hideLabel ? import_react42.default.createElement(
            "label",
            {
              htmlFor: this.inputId,
              style: styles5.label,
              onMouseDown: this.handleMouseDown
            },
            this.props.label
          ) : null
        );
      }
    }]);
    return EditableInput2;
  }(import_react42.PureComponent || import_react42.Component);
  var EditableInput_default = EditableInput;

  // node_modules/react-color/es/components/common/Hue.js
  var import_react43 = __toESM(require_react());
  var import_reactcss4 = __toESM(require_lib());

  // node_modules/react-color/es/helpers/hue.js
  var calculateChange3 = function calculateChange4(e, direction, hsl, container) {
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left2 = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top2 = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (direction === "vertical") {
      var h = void 0;
      if (top2 < 0) {
        h = 359;
      } else if (top2 > containerHeight) {
        h = 0;
      } else {
        var percent = -(top2 * 100 / containerHeight) + 100;
        h = 360 * percent / 100;
      }
      if (hsl.h !== h) {
        return {
          h,
          s: hsl.s,
          l: hsl.l,
          a: hsl.a,
          source: "hsl"
        };
      }
    } else {
      var _h = void 0;
      if (left2 < 0) {
        _h = 0;
      } else if (left2 > containerWidth) {
        _h = 359;
      } else {
        var _percent = left2 * 100 / containerWidth;
        _h = 360 * _percent / 100;
      }
      if (hsl.h !== _h) {
        return {
          h: _h,
          s: hsl.s,
          l: hsl.l,
          a: hsl.a,
          source: "hsl"
        };
      }
    }
    return null;
  };

  // node_modules/react-color/es/components/common/Hue.js
  var _createClass3 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn3(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var Hue = function(_ref) {
    _inherits3(Hue2, _ref);
    function Hue2() {
      var _ref2;
      var _temp, _this, _ret;
      _classCallCheck3(this, Hue2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret = (_temp = (_this = _possibleConstructorReturn3(this, (_ref2 = Hue2.__proto__ || Object.getPrototypeOf(Hue2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e) {
        var change = calculateChange3(e, _this.props.direction, _this.props.hsl, _this.container);
        change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        window.addEventListener("mousemove", _this.handleChange);
        window.addEventListener("mouseup", _this.handleMouseUp);
      }, _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      }, _temp), _possibleConstructorReturn3(_this, _ret);
    }
    _createClass3(Hue2, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: "unbindEventListeners",
      value: function unbindEventListeners() {
        window.removeEventListener("mousemove", this.handleChange);
        window.removeEventListener("mouseup", this.handleMouseUp);
      }
    }, {
      key: "render",
      value: function render3() {
        var _this2 = this;
        var _props$direction = this.props.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction;
        var styles5 = (0, import_reactcss4.default)({
          "default": {
            hue: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius,
              boxShadow: this.props.shadow
            },
            container: {
              padding: "0 2px",
              position: "relative",
              height: "100%",
              borderRadius: this.props.radius
            },
            pointer: {
              position: "absolute",
              left: this.props.hsl.h * 100 / 360 + "%"
            },
            slider: {
              marginTop: "1px",
              width: "4px",
              borderRadius: "1px",
              height: "8px",
              boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
              background: "#fff",
              transform: "translateX(-2px)"
            }
          },
          "vertical": {
            pointer: {
              left: "0px",
              top: -(this.props.hsl.h * 100 / 360) + 100 + "%"
            }
          }
        }, { vertical: direction === "vertical" });
        return import_react43.default.createElement(
          "div",
          { style: styles5.hue },
          import_react43.default.createElement(
            "div",
            {
              className: "hue-" + direction,
              style: styles5.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            import_react43.default.createElement(
              "style",
              null,
              "\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "
            ),
            import_react43.default.createElement(
              "div",
              { style: styles5.pointer },
              this.props.pointer ? import_react43.default.createElement(this.props.pointer, this.props) : import_react43.default.createElement("div", { style: styles5.slider })
            )
          )
        );
      }
    }]);
    return Hue2;
  }(import_react43.PureComponent || import_react43.Component);
  var Hue_default = Hue;

  // node_modules/react-color/es/components/common/Raised.js
  var import_react44 = __toESM(require_react());
  var import_prop_types121 = __toESM(require_prop_types());
  var import_reactcss5 = __toESM(require_lib());

  // node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  var listCacheClear_default = listCacheClear;

  // node_modules/lodash-es/eq.js
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_default = eq;

  // node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array, key) {
    var length2 = array.length;
    while (length2--) {
      if (eq_default(array[length2][0], key)) {
        return length2;
      }
    }
    return -1;
  }
  var assocIndexOf_default = assocIndexOf;

  // node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  var listCacheDelete_default = listCacheDelete;

  // node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  var listCacheGet_default = listCacheGet;

  // node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  var listCacheHas_default = listCacheHas;

  // node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  var listCacheSet_default = listCacheSet;

  // node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  var stackClear_default = stackClear;

  // node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var stackDelete_default = stackDelete;

  // node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  var stackGet_default = stackGet;

  // node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var stackHas_default = stackHas;

  // node_modules/lodash-es/_freeGlobal.js
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeGlobal_default = freeGlobal;

  // node_modules/lodash-es/_root.js
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root;

  // node_modules/lodash-es/_Symbol.js
  var Symbol2 = root_default.Symbol;
  var Symbol_default = Symbol2;

  // node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  var getRawTag_default = getRawTag;

  // node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value) {
    return nativeObjectToString2.call(value);
  }
  var objectToString_default = objectToString;

  // node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
  }
  var baseGetTag_default = baseGetTag;

  // node_modules/lodash-es/isObject.js
  function isObject2(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  var isObject_default = isObject2;

  // node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction2(value) {
    if (!isObject_default(value)) {
      return false;
    }
    var tag = baseGetTag_default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_default = isFunction2;

  // node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var isMasked_default = isMasked;

  // node_modules/lodash-es/_toSource.js
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  var toSource_default = toSource;

  // node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto2 = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty3 = objectProto3.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString2.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject_default(value) || isMasked_default(value)) {
      return false;
    }
    var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value));
  }
  var baseIsNative_default = baseIsNative;

  // node_modules/lodash-es/_getValue.js
  function getValue3(object, key) {
    return object == null ? void 0 : object[key];
  }
  var getValue_default = getValue3;

  // node_modules/lodash-es/_getNative.js
  function getNative(object, key) {
    var value = getValue_default(object, key);
    return baseIsNative_default(value) ? value : void 0;
  }
  var getNative_default = getNative;

  // node_modules/lodash-es/_Map.js
  var Map3 = getNative_default(root_default, "Map");
  var Map_default = Map3;

  // node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  var hashClear_default = hashClear;

  // node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var hashDelete_default = hashDelete;

  // node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto4 = Object.prototype;
  var hasOwnProperty4 = objectProto4.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate_default) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty4.call(data, key) ? data[key] : void 0;
  }
  var hashGet_default = hashGet;

  // node_modules/lodash-es/_hashHas.js
  var objectProto5 = Object.prototype;
  var hasOwnProperty5 = objectProto5.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty5.call(data, key);
  }
  var hashHas_default = hashHas;

  // node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  var hashSet_default = hashSet;

  // node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash_default(),
      "map": new (Map_default || ListCache_default)(),
      "string": new Hash_default()
    };
  }
  var mapCacheClear_default = mapCacheClear;

  // node_modules/lodash-es/_isKeyable.js
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  var isKeyable_default = isKeyable;

  // node_modules/lodash-es/_getMapData.js
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var getMapData_default = getMapData;

  // node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result = getMapData_default(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var mapCacheDelete_default = mapCacheDelete;

  // node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  var mapCacheGet_default = mapCacheGet;

  // node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  var mapCacheHas_default = mapCacheHas;

  // node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value) {
    var data = getMapData_default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var mapCacheSet_default = mapCacheSet;

  // node_modules/lodash-es/_MapCache.js
  function MapCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear_default;
  MapCache.prototype["delete"] = mapCacheDelete_default;
  MapCache.prototype.get = mapCacheGet_default;
  MapCache.prototype.has = mapCacheHas_default;
  MapCache.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache;

  // node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache_default) {
      var pairs = data.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache_default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var stackSet_default = stackSet;

  // node_modules/lodash-es/_Stack.js
  function Stack2(entries) {
    var data = this.__data__ = new ListCache_default(entries);
    this.size = data.size;
  }
  Stack2.prototype.clear = stackClear_default;
  Stack2.prototype["delete"] = stackDelete_default;
  Stack2.prototype.get = stackGet_default;
  Stack2.prototype.has = stackHas_default;
  Stack2.prototype.set = stackSet_default;
  var Stack_default2 = Stack2;

  // node_modules/lodash-es/_defineProperty.js
  var defineProperty = function() {
    try {
      var func = getNative_default(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var defineProperty_default = defineProperty;

  // node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  var baseAssignValue_default = baseAssignValue;

  // node_modules/lodash-es/_assignMergeValue.js
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq_default(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  var assignMergeValue_default = assignMergeValue;

  // node_modules/lodash-es/_createBaseFor.js
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
      while (length2--) {
        var key = props[fromRight ? length2 : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  var createBaseFor_default = createBaseFor;

  // node_modules/lodash-es/_baseFor.js
  var baseFor = createBaseFor_default();
  var baseFor_default = baseFor;

  // node_modules/lodash-es/_cloneBuffer.js
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
    buffer.copy(result);
    return result;
  }
  var cloneBuffer_default = cloneBuffer;

  // node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
    return result;
  }
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var cloneTypedArray_default = cloneTypedArray;

  // node_modules/lodash-es/_copyArray.js
  function copyArray(source, array) {
    var index = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index < length2) {
      array[index] = source[index];
    }
    return array;
  }
  var copyArray_default = copyArray;

  // node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  var baseCreate_default = baseCreate;

  // node_modules/lodash-es/_overArg.js
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var overArg_default = overArg;

  // node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // node_modules/lodash-es/_isPrototype.js
  var objectProto6 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto6;
    return value === proto;
  }
  var isPrototype_default = isPrototype;

  // node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
  }
  var initCloneObject_default = initCloneObject;

  // node_modules/lodash-es/isObjectLike.js
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var isObjectLike_default = isObjectLike;

  // node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
  }
  var baseIsArguments_default = baseIsArguments;

  // node_modules/lodash-es/isArguments.js
  var objectProto7 = Object.prototype;
  var hasOwnProperty6 = objectProto7.hasOwnProperty;
  var propertyIsEnumerable = objectProto7.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value) {
    return isObjectLike_default(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArguments_default = isArguments;

  // node_modules/lodash-es/isArray.js
  var isArray2 = Array.isArray;
  var isArray_default = isArray2;

  // node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  var isLength_default = isLength;

  // node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value) {
    return value != null && isLength_default(value.length) && !isFunction_default(value);
  }
  var isArrayLike_default = isArrayLike;

  // node_modules/lodash-es/isArrayLikeObject.js
  function isArrayLikeObject(value) {
    return isObjectLike_default(value) && isArrayLike_default(value);
  }
  var isArrayLikeObject_default = isArrayLikeObject;

  // node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  var stubFalse_default = stubFalse;

  // node_modules/lodash-es/isBuffer.js
  var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var Buffer3 = moduleExports2 ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
  var isBuffer2 = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer2;

  // node_modules/lodash-es/isPlainObject.js
  var objectTag = "[object Object]";
  var funcProto3 = Function.prototype;
  var objectProto8 = Object.prototype;
  var funcToString3 = funcProto3.toString;
  var hasOwnProperty7 = objectProto8.hasOwnProperty;
  var objectCtorString = funcToString3.call(Object);
  function isPlainObject5(value) {
    if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
      return false;
    }
    var proto = getPrototype_default(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty7.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
  }
  var isPlainObject_default = isPlainObject5;

  // node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag2 = "[object Object]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag2] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
  }
  var baseIsTypedArray_default = baseIsTypedArray;

  // node_modules/lodash-es/_baseUnary.js
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  var baseUnary_default = baseUnary;

  // node_modules/lodash-es/_nodeUtil.js
  var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var freeProcess = moduleExports3 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule3 && freeModule3.require && freeModule3.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray2 = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray2;

  // node_modules/lodash-es/_safeGet.js
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  var safeGet_default = safeGet;

  // node_modules/lodash-es/_assignValue.js
  var objectProto9 = Object.prototype;
  var hasOwnProperty8 = objectProto9.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty8.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  var assignValue_default = assignValue;

  // node_modules/lodash-es/_copyObject.js
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length2 = props.length;
    while (++index < length2) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue_default(object, key, newValue);
      } else {
        assignValue_default(object, key, newValue);
      }
    }
    return object;
  }
  var copyObject_default = copyObject;

  // node_modules/lodash-es/_baseTimes.js
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var baseTimes_default = baseTimes;

  // node_modules/lodash-es/_isIndex.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length2) {
    var type = typeof value;
    length2 = length2 == null ? MAX_SAFE_INTEGER2 : length2;
    return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
  }
  var isIndex_default = isIndex;

  // node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto10 = Object.prototype;
  var hasOwnProperty9 = objectProto10.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length2 = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty9.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex_default(key, length2)))) {
        result.push(key);
      }
    }
    return result;
  }
  var arrayLikeKeys_default = arrayLikeKeys;

  // node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var nativeKeysIn_default = nativeKeysIn;

  // node_modules/lodash-es/_baseKeysIn.js
  var objectProto11 = Object.prototype;
  var hasOwnProperty10 = objectProto11.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject_default(object)) {
      return nativeKeysIn_default(object);
    }
    var isProto = isPrototype_default(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty10.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeysIn_default = baseKeysIn;

  // node_modules/lodash-es/keysIn.js
  function keysIn(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
  }
  var keysIn_default = keysIn;

  // node_modules/lodash-es/toPlainObject.js
  function toPlainObject(value) {
    return copyObject_default(value, keysIn_default(value));
  }
  var toPlainObject_default = toPlainObject;

  // node_modules/lodash-es/_baseMergeDeep.js
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet_default(object, key), srcValue = safeGet_default(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue_default(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray_default(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject_default(objValue)) {
          newValue = copyArray_default(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer_default(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray_default(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
        newValue = objValue;
        if (isArguments_default(objValue)) {
          newValue = toPlainObject_default(objValue);
        } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
          newValue = initCloneObject_default(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue_default(object, key, newValue);
  }
  var baseMergeDeep_default = baseMergeDeep;

  // node_modules/lodash-es/_baseMerge.js
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor_default(source, function(srcValue, key) {
      stack || (stack = new Stack_default2());
      if (isObject_default(srcValue)) {
        baseMergeDeep_default(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet_default(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue_default(object, key, newValue);
      }
    }, keysIn_default);
  }
  var baseMerge_default = baseMerge;

  // node_modules/lodash-es/identity.js
  function identity(value) {
    return value;
  }
  var identity_default = identity;

  // node_modules/lodash-es/_apply.js
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var apply_default = apply;

  // node_modules/lodash-es/_overRest.js
  var nativeMax = Math.max;
  function overRest(func, start2, transform) {
    start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
    return function() {
      var args = arguments, index = -1, length2 = nativeMax(args.length - start2, 0), array = Array(length2);
      while (++index < length2) {
        array[index] = args[start2 + index];
      }
      index = -1;
      var otherArgs = Array(start2 + 1);
      while (++index < start2) {
        otherArgs[index] = args[index];
      }
      otherArgs[start2] = transform(array);
      return apply_default(func, this, otherArgs);
    };
  }
  var overRest_default = overRest;

  // node_modules/lodash-es/constant.js
  function constant(value) {
    return function() {
      return value;
    };
  }
  var constant_default = constant;

  // node_modules/lodash-es/_baseSetToString.js
  var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
    return defineProperty_default(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant_default(string),
      "writable": true
    });
  };
  var baseSetToString_default = baseSetToString;

  // node_modules/lodash-es/_shortOut.js
  var HOT_COUNT = 800;
  var HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  var shortOut_default = shortOut;

  // node_modules/lodash-es/_setToString.js
  var setToString = shortOut_default(baseSetToString_default);
  var setToString_default = setToString;

  // node_modules/lodash-es/_baseRest.js
  function baseRest(func, start2) {
    return setToString_default(overRest_default(func, start2, identity_default), func + "");
  }
  var baseRest_default = baseRest;

  // node_modules/lodash-es/_isIterateeCall.js
  function isIterateeCall(value, index, object) {
    if (!isObject_default(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
      return eq_default(object[index], value);
    }
    return false;
  }
  var isIterateeCall_default = isIterateeCall;

  // node_modules/lodash-es/_createAssigner.js
  function createAssigner(assigner) {
    return baseRest_default(function(object, sources) {
      var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
      if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
        customizer = length2 < 3 ? void 0 : customizer;
        length2 = 1;
      }
      object = Object(object);
      while (++index < length2) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  var createAssigner_default = createAssigner;

  // node_modules/lodash-es/merge.js
  var merge5 = createAssigner_default(function(object, source, srcIndex) {
    baseMerge_default(object, source, srcIndex);
  });
  var merge_default3 = merge5;

  // node_modules/react-color/es/components/common/Raised.js
  var Raised = function Raised2(_ref) {
    var zDepth = _ref.zDepth, radius = _ref.radius, background = _ref.background, children = _ref.children, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles;
    var styles5 = (0, import_reactcss5.default)(merge_default3({
      "default": {
        wrap: {
          position: "relative",
          display: "inline-block"
        },
        content: {
          position: "relative"
        },
        bg: {
          absolute: "0px 0px 0px 0px",
          boxShadow: "0 " + zDepth + "px " + zDepth * 4 + "px rgba(0,0,0,.24)",
          borderRadius: radius,
          background
        }
      },
      "zDepth-0": {
        bg: {
          boxShadow: "none"
        }
      },
      "zDepth-1": {
        bg: {
          boxShadow: "0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"
        }
      },
      "zDepth-2": {
        bg: {
          boxShadow: "0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"
        }
      },
      "zDepth-3": {
        bg: {
          boxShadow: "0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"
        }
      },
      "zDepth-4": {
        bg: {
          boxShadow: "0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"
        }
      },
      "zDepth-5": {
        bg: {
          boxShadow: "0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"
        }
      },
      "square": {
        bg: {
          borderRadius: "0"
        }
      },
      "circle": {
        bg: {
          borderRadius: "50%"
        }
      }
    }, passedStyles), { "zDepth-1": zDepth === 1 });
    return import_react44.default.createElement(
      "div",
      { style: styles5.wrap },
      import_react44.default.createElement("div", { style: styles5.bg }),
      import_react44.default.createElement(
        "div",
        { style: styles5.content },
        children
      )
    );
  };
  Raised.propTypes = {
    background: import_prop_types121.default.string,
    zDepth: import_prop_types121.default.oneOf([0, 1, 2, 3, 4, 5]),
    radius: import_prop_types121.default.number,
    styles: import_prop_types121.default.object
  };
  Raised.defaultProps = {
    background: "#fff",
    zDepth: 1,
    radius: 2,
    styles: {}
  };
  var Raised_default = Raised;

  // node_modules/react-color/es/components/common/Saturation.js
  var import_react45 = __toESM(require_react());
  var import_reactcss6 = __toESM(require_lib());

  // node_modules/lodash-es/now.js
  var now = function() {
    return root_default.Date.now();
  };
  var now_default = now;

  // node_modules/lodash-es/_trimmedEndIndex.js
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  var trimmedEndIndex_default = trimmedEndIndex;

  // node_modules/lodash-es/_baseTrim.js
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
  }
  var baseTrim_default = baseTrim;

  // node_modules/lodash-es/isSymbol.js
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
  }
  var isSymbol_default = isSymbol;

  // node_modules/lodash-es/toNumber.js
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol_default(value)) {
      return NAN;
    }
    if (isObject_default(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject_default(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim_default(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var toNumber_default = toNumber;

  // node_modules/lodash-es/debounce.js
  var FUNC_ERROR_TEXT = "Expected a function";
  var nativeMax2 = Math.max;
  var nativeMin = Math.min;
  function debounce3(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber_default(wait) || 0;
    if (isObject_default(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax2(toNumber_default(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now_default();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now_default());
    }
    function debounced() {
      var time = now_default(), isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  var debounce_default2 = debounce3;

  // node_modules/lodash-es/throttle.js
  var FUNC_ERROR_TEXT2 = "Expected a function";
  function throttle2(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    if (isObject_default(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce_default2(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  var throttle_default2 = throttle2;

  // node_modules/react-color/es/helpers/saturation.js
  var calculateChange5 = function calculateChange6(e, hsl, container) {
    var _container$getBoundin = container.getBoundingClientRect(), containerWidth = _container$getBoundin.width, containerHeight = _container$getBoundin.height;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left2 = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top2 = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (left2 < 0) {
      left2 = 0;
    } else if (left2 > containerWidth) {
      left2 = containerWidth;
    }
    if (top2 < 0) {
      top2 = 0;
    } else if (top2 > containerHeight) {
      top2 = containerHeight;
    }
    var saturation = left2 / containerWidth;
    var bright = 1 - top2 / containerHeight;
    return {
      h: hsl.h,
      s: saturation,
      v: bright,
      a: hsl.a,
      source: "hsv"
    };
  };

  // node_modules/react-color/es/components/common/Saturation.js
  var _createClass4 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn4(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var Saturation = function(_ref) {
    _inherits4(Saturation2, _ref);
    function Saturation2(props) {
      _classCallCheck4(this, Saturation2);
      var _this = _possibleConstructorReturn4(this, (Saturation2.__proto__ || Object.getPrototypeOf(Saturation2)).call(this, props));
      _this.handleChange = function(e) {
        typeof _this.props.onChange === "function" && _this.throttle(_this.props.onChange, calculateChange5(e, _this.props.hsl, _this.container), e);
      };
      _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        var renderWindow = _this.getContainerRenderWindow();
        renderWindow.addEventListener("mousemove", _this.handleChange);
        renderWindow.addEventListener("mouseup", _this.handleMouseUp);
      };
      _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      };
      _this.throttle = throttle_default2(function(fn2, data, e) {
        fn2(data, e);
      }, 50);
      return _this;
    }
    _createClass4(Saturation2, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.throttle.cancel();
        this.unbindEventListeners();
      }
    }, {
      key: "getContainerRenderWindow",
      value: function getContainerRenderWindow() {
        var container = this.container;
        var renderWindow = window;
        while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {
          renderWindow = renderWindow.parent;
        }
        return renderWindow;
      }
    }, {
      key: "unbindEventListeners",
      value: function unbindEventListeners() {
        var renderWindow = this.getContainerRenderWindow();
        renderWindow.removeEventListener("mousemove", this.handleChange);
        renderWindow.removeEventListener("mouseup", this.handleMouseUp);
      }
    }, {
      key: "render",
      value: function render3() {
        var _this2 = this;
        var _ref2 = this.props.style || {}, color3 = _ref2.color, white = _ref2.white, black = _ref2.black, pointer = _ref2.pointer, circle = _ref2.circle;
        var styles5 = (0, import_reactcss6.default)({
          "default": {
            color: {
              absolute: "0px 0px 0px 0px",
              background: "hsl(" + this.props.hsl.h + ",100%, 50%)",
              borderRadius: this.props.radius
            },
            white: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius
            },
            black: {
              absolute: "0px 0px 0px 0px",
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            pointer: {
              position: "absolute",
              top: -(this.props.hsv.v * 100) + 100 + "%",
              left: this.props.hsv.s * 100 + "%",
              cursor: "default"
            },
            circle: {
              width: "4px",
              height: "4px",
              boxShadow: "0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",
              borderRadius: "50%",
              cursor: "hand",
              transform: "translate(-2px, -2px)"
            }
          },
          "custom": {
            color: color3,
            white,
            black,
            pointer,
            circle
          }
        }, { "custom": !!this.props.style });
        return import_react45.default.createElement(
          "div",
          {
            style: styles5.color,
            ref: function ref(container) {
              return _this2.container = container;
            },
            onMouseDown: this.handleMouseDown,
            onTouchMove: this.handleChange,
            onTouchStart: this.handleChange
          },
          import_react45.default.createElement(
            "style",
            null,
            "\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "
          ),
          import_react45.default.createElement(
            "div",
            { style: styles5.white, className: "saturation-white" },
            import_react45.default.createElement("div", { style: styles5.black, className: "saturation-black" }),
            import_react45.default.createElement(
              "div",
              { style: styles5.pointer },
              this.props.pointer ? import_react45.default.createElement(this.props.pointer, this.props) : import_react45.default.createElement("div", { style: styles5.circle })
            )
          )
        );
      }
    }]);
    return Saturation2;
  }(import_react45.PureComponent || import_react45.Component);
  var Saturation_default = Saturation;

  // node_modules/react-color/es/components/common/ColorWrap.js
  var import_react46 = __toESM(require_react());

  // node_modules/lodash-es/_arrayEach.js
  function arrayEach(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  var arrayEach_default = arrayEach;

  // node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // node_modules/lodash-es/_baseKeys.js
  var objectProto12 = Object.prototype;
  var hasOwnProperty11 = objectProto12.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype_default(object)) {
      return nativeKeys_default(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty11.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeys_default = baseKeys;

  // node_modules/lodash-es/keys.js
  function keys(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
  }
  var keys_default = keys;

  // node_modules/lodash-es/_baseForOwn.js
  function baseForOwn(object, iteratee) {
    return object && baseFor_default(object, iteratee, keys_default);
  }
  var baseForOwn_default = baseForOwn;

  // node_modules/lodash-es/_createBaseEach.js
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_default(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length2) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  var createBaseEach_default = createBaseEach;

  // node_modules/lodash-es/_baseEach.js
  var baseEach = createBaseEach_default(baseForOwn_default);
  var baseEach_default = baseEach;

  // node_modules/lodash-es/_castFunction.js
  function castFunction(value) {
    return typeof value == "function" ? value : identity_default;
  }
  var castFunction_default = castFunction;

  // node_modules/lodash-es/forEach.js
  function forEach2(collection, iteratee) {
    var func = isArray_default(collection) ? arrayEach_default : baseEach_default;
    return func(collection, castFunction_default(iteratee));
  }
  var forEach_default = forEach2;

  // node_modules/tinycolor2/esm/tinycolor.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color3, opts) {
    color3 = color3 ? color3 : "";
    opts = opts || {};
    if (color3 instanceof tinycolor) {
      return color3;
    }
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color3, opts);
    }
    var rgb = inputToRGB(color3);
    this._originalInput = color3, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;
    if (this._r < 1)
      this._r = Math.round(this._r);
    if (this._g < 1)
      this._g = Math.round(this._g);
    if (this._b < 1)
      this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    },
    getLuminance: function getLuminance2() {
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928)
        R = RsRGB / 12.92;
      else
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928)
        G = GsRGB / 12.92;
      else
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928)
        B = BsRGB / 12.92;
      else
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex2(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex2(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString3(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn2, args) {
      var color3 = fn2.apply(null, [this].concat([].slice.call(args)));
      this._r = color3._r;
      this._g = color3._g;
      this._b = color3._b;
      this.setAlpha(color3._a);
      return this;
    },
    lighten: function lighten5() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken5() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn2, args) {
      return fn2.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };
  tinycolor.fromRatio = function(color3, opts) {
    if (_typeof(color3) == "object") {
      var newColor = {};
      for (var i in color3) {
        if (color3.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color3[i];
          } else {
            newColor[i] = convertToPercentage(color3[i]);
          }
        }
      }
      color3 = newColor;
    }
    return tinycolor(color3, opts);
  };
  function inputToRGB(color3) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color3 == "string") {
      color3 = stringInputToObject(color3);
    }
    if (_typeof(color3) == "object") {
      if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
        rgb = rgbToRgb(color3.r, color3.g, color3.b);
        ok = true;
        format = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
        s = convertToPercentage(color3.s);
        v = convertToPercentage(color3.v);
        rgb = hsvToRgb(color3.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
        s = convertToPercentage(color3.s);
        l = convertToPercentage(color3.l);
        rgb = hslToRgb2(color3.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color3.hasOwnProperty("a")) {
        a = color3.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok,
      format: color3.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a
    };
  }
  function rgbToRgb(r2, g, b) {
    return {
      r: bound01(r2, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }
  function rgbToHsl(r2, g, b) {
    r2 = bound01(r2, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max2 = Math.max(r2, g, b), min2 = Math.min(r2, g, b);
    var h, s, l = (max2 + min2) / 2;
    if (max2 == min2) {
      h = s = 0;
    } else {
      var d = max2 - min2;
      s = l > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
      switch (max2) {
        case r2:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r2) / d + 2;
          break;
        case b:
          h = (r2 - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h,
      s,
      l
    };
  }
  function hslToRgb2(h, s, l) {
    var r2, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p2, q2, t) {
      if (t < 0)
        t += 1;
      if (t > 1)
        t -= 1;
      if (t < 1 / 6)
        return p2 + (q2 - p2) * 6 * t;
      if (t < 1 / 2)
        return q2;
      if (t < 2 / 3)
        return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      return p2;
    }
    if (s === 0) {
      r2 = g = b = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r2 = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r2 * 255,
      g: g * 255,
      b: b * 255
    };
  }
  function rgbToHsv(r2, g, b) {
    r2 = bound01(r2, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max2 = Math.max(r2, g, b), min2 = Math.min(r2, g, b);
    var h, s, v = max2;
    var d = max2 - min2;
    s = max2 === 0 ? 0 : d / max2;
    if (max2 == min2) {
      h = 0;
    } else {
      switch (max2) {
        case r2:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r2) / d + 2;
          break;
        case b:
          h = (r2 - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h,
      s,
      v
    };
  }
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r2 = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
    return {
      r: r2 * 255,
      g: g * 255,
      b: b * 255
    };
  }
  function rgbToHex2(r2, g, b, allow3Char) {
    var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }
  function rgbaToHex(r2, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }
  function rgbaToArgbHex(r2, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }
  tinycolor.equals = function(color1, color22) {
    if (!color1 || !color22)
      return false;
    return tinycolor(color1).toRgbString() == tinycolor(color22).toRgbString();
  };
  tinycolor.random = function() {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };
  function _desaturate(color3, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color3).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color3, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color3).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color3) {
    return tinycolor(color3).desaturate(100);
  }
  function _lighten(color3, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color3).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color3, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color3).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color3, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color3).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _spin(color3, amount) {
    var hsl = tinycolor(color3).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }
  function _complement(color3) {
    var hsl = tinycolor(color3).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color3, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color3).toHsl();
    var result = [tinycolor(color3)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color3) {
    var hsl = tinycolor(color3).toHsl();
    var h = hsl.h;
    return [tinycolor(color3), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color3, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color3).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color3)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color3, results) {
    results = results || 6;
    var hsv = tinycolor(color3).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h,
        s,
        v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }
  tinycolor.mix = function(color1, color22, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color22).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };
  tinycolor.readability = function(color1, color22) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color22);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };
  tinycolor.isReadable = function(color1, color22, wcag2) {
    var readability = tinycolor.readability(color1, color22);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };
  tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level,
      size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };
  var hexNames = tinycolor.hexNames = flip2(names);
  function flip2(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }
  function bound01(n, max2) {
    if (isOnePointZero(n))
      n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max2, Math.max(0, parseFloat(n)));
    if (processPercent) {
      n = parseInt(n * max2, 10) / 100;
    }
    if (Math.abs(n - max2) < 1e-6) {
      return 1;
    }
    return n % max2 / parseFloat(max2);
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function() {
    var CSS_INTEGER = "[-\\+]?\\d+%?";
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();
  function isValidCSSUnit(color3) {
    return !!matchers.CSS_UNIT.exec(color3);
  }
  function stringInputToObject(color3) {
    color3 = color3.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color3]) {
      color3 = names[color3];
      named = true;
    } else if (color3 == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }
    var match2;
    if (match2 = matchers.rgb.exec(color3)) {
      return {
        r: match2[1],
        g: match2[2],
        b: match2[3]
      };
    }
    if (match2 = matchers.rgba.exec(color3)) {
      return {
        r: match2[1],
        g: match2[2],
        b: match2[3],
        a: match2[4]
      };
    }
    if (match2 = matchers.hsl.exec(color3)) {
      return {
        h: match2[1],
        s: match2[2],
        l: match2[3]
      };
    }
    if (match2 = matchers.hsla.exec(color3)) {
      return {
        h: match2[1],
        s: match2[2],
        l: match2[3],
        a: match2[4]
      };
    }
    if (match2 = matchers.hsv.exec(color3)) {
      return {
        h: match2[1],
        s: match2[2],
        v: match2[3]
      };
    }
    if (match2 = matchers.hsva.exec(color3)) {
      return {
        h: match2[1],
        s: match2[2],
        v: match2[3],
        a: match2[4]
      };
    }
    if (match2 = matchers.hex8.exec(color3)) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        a: convertHexToDecimal(match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match2 = matchers.hex6.exec(color3)) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match2 = matchers.hex4.exec(color3)) {
      return {
        r: parseIntFromHex(match2[1] + "" + match2[1]),
        g: parseIntFromHex(match2[2] + "" + match2[2]),
        b: parseIntFromHex(match2[3] + "" + match2[3]),
        a: convertHexToDecimal(match2[4] + "" + match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match2 = matchers.hex3.exec(color3)) {
      return {
        r: parseIntFromHex(match2[1] + "" + match2[1]),
        g: parseIntFromHex(match2[2] + "" + match2[2]),
        b: parseIntFromHex(match2[3] + "" + match2[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level,
      size
    };
  }

  // node_modules/react-color/es/helpers/color.js
  var simpleCheckForValidColor = function simpleCheckForValidColor2(data) {
    var keysToCheck = ["r", "g", "b", "a", "h", "s", "l", "v"];
    var checked = 0;
    var passed = 0;
    forEach_default(keysToCheck, function(letter) {
      if (data[letter]) {
        checked += 1;
        if (!isNaN(data[letter])) {
          passed += 1;
        }
        if (letter === "s" || letter === "l") {
          var percentPatt = /^\d+%$/;
          if (percentPatt.test(data[letter])) {
            passed += 1;
          }
        }
      }
    });
    return checked === passed ? data : false;
  };
  var toState = function toState2(data, oldHue) {
    var color3 = data.hex ? tinycolor(data.hex) : tinycolor(data);
    var hsl = color3.toHsl();
    var hsv = color3.toHsv();
    var rgb = color3.toRgb();
    var hex = color3.toHex();
    if (hsl.s === 0) {
      hsl.h = oldHue || 0;
      hsv.h = oldHue || 0;
    }
    var transparent = hex === "000000" && rgb.a === 0;
    return {
      hsl,
      hex: transparent ? "transparent" : "#" + hex,
      rgb,
      hsv,
      oldHue: data.h || oldHue || hsl.h,
      source: data.source
    };
  };
  var isValidHex = function isValidHex2(hex) {
    if (hex === "transparent") {
      return true;
    }
    var lh = String(hex).charAt(0) === "#" ? 1 : 0;
    return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor(hex).isValid();
  };
  var getContrastingColor = function getContrastingColor2(data) {
    if (!data) {
      return "#fff";
    }
    var col = toState(data);
    if (col.hex === "transparent") {
      return "rgba(0,0,0,0.4)";
    }
    var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1e3;
    return yiq >= 128 ? "#000" : "#fff";
  };
  var isvalidColorString = function isvalidColorString2(string, type) {
    var stringWithoutDegree = string.replace("\xB0", "");
    return tinycolor(type + " (" + stringWithoutDegree + ")")._ok;
  };

  // node_modules/react-color/es/components/common/ColorWrap.js
  var _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass5 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn5(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var ColorWrap = function ColorWrap2(Picker) {
    var ColorPicker = function(_ref) {
      _inherits5(ColorPicker2, _ref);
      function ColorPicker2(props) {
        _classCallCheck5(this, ColorPicker2);
        var _this = _possibleConstructorReturn5(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this));
        _this.handleChange = function(data, event) {
          var isValidColor = simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors = toState(data, data.h || _this.state.oldHue);
            _this.setState(colors);
            _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
            _this.props.onChange && _this.props.onChange(colors, event);
          }
        };
        _this.handleSwatchHover = function(data, event) {
          var isValidColor = simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors = toState(data, data.h || _this.state.oldHue);
            _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
          }
        };
        _this.state = _extends5({}, toState(props.color, 0));
        _this.debounce = debounce_default2(function(fn2, data, event) {
          fn2(data, event);
        }, 100);
        return _this;
      }
      _createClass5(ColorPicker2, [{
        key: "render",
        value: function render3() {
          var optionalEvents = {};
          if (this.props.onSwatchHover) {
            optionalEvents.onSwatchHover = this.handleSwatchHover;
          }
          return import_react46.default.createElement(Picker, _extends5({}, this.props, this.state, {
            onChange: this.handleChange
          }, optionalEvents));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, state) {
          return _extends5({}, toState(nextProps.color, state.oldHue));
        }
      }]);
      return ColorPicker2;
    }(import_react46.PureComponent || import_react46.Component);
    ColorPicker.propTypes = _extends5({}, Picker.propTypes);
    ColorPicker.defaultProps = _extends5({}, Picker.defaultProps, {
      color: {
        h: 250,
        s: 0.5,
        l: 0.2,
        a: 1
      }
    });
    return ColorPicker;
  };
  var ColorWrap_default = ColorWrap;

  // node_modules/react-color/es/components/common/Swatch.js
  var import_react48 = __toESM(require_react());
  var import_reactcss7 = __toESM(require_lib());

  // node_modules/react-color/es/helpers/interaction.js
  var import_react47 = __toESM(require_react());
  var _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass6 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn6(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var handleFocus = function handleFocus2(Component6) {
    var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
    return function(_React$Component) {
      _inherits6(Focus, _React$Component);
      function Focus() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck6(this, Focus);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn6(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function() {
          return _this.setState({ focus: true });
        }, _this.handleBlur = function() {
          return _this.setState({ focus: false });
        }, _temp), _possibleConstructorReturn6(_this, _ret);
      }
      _createClass6(Focus, [{
        key: "render",
        value: function render3() {
          return import_react47.default.createElement(
            Span,
            { onFocus: this.handleFocus, onBlur: this.handleBlur },
            import_react47.default.createElement(Component6, _extends6({}, this.props, this.state))
          );
        }
      }]);
      return Focus;
    }(import_react47.default.Component);
  };

  // node_modules/react-color/es/components/common/Swatch.js
  var _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var ENTER = 13;
  var Swatch = function Swatch2(_ref) {
    var color3 = _ref.color, style6 = _ref.style, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onHover = _ref.onHover, _ref$title = _ref.title, title = _ref$title === void 0 ? color3 : _ref$title, children = _ref.children, focus = _ref.focus, _ref$focusStyle = _ref.focusStyle, focusStyle = _ref$focusStyle === void 0 ? {} : _ref$focusStyle;
    var transparent = color3 === "transparent";
    var styles5 = (0, import_reactcss7.default)({
      default: {
        swatch: _extends7({
          background: color3,
          height: "100%",
          width: "100%",
          cursor: "pointer",
          position: "relative",
          outline: "none"
        }, style6, focus ? focusStyle : {})
      }
    });
    var handleClick = function handleClick2(e) {
      return onClick(color3, e);
    };
    var handleKeyDown2 = function handleKeyDown3(e) {
      return e.keyCode === ENTER && onClick(color3, e);
    };
    var handleHover3 = function handleHover4(e) {
      return onHover(color3, e);
    };
    var optionalEvents = {};
    if (onHover) {
      optionalEvents.onMouseOver = handleHover3;
    }
    return import_react48.default.createElement(
      "div",
      _extends7({
        style: styles5.swatch,
        onClick: handleClick,
        title,
        tabIndex: 0,
        onKeyDown: handleKeyDown2
      }, optionalEvents),
      children,
      transparent && import_react48.default.createElement(Checkboard_default, {
        borderRadius: styles5.swatch.borderRadius,
        boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
      })
    );
  };
  var Swatch_default = handleFocus(Swatch);

  // node_modules/react-color/es/components/alpha/AlphaPointer.js
  var import_react49 = __toESM(require_react());
  var import_reactcss8 = __toESM(require_lib());
  var AlphaPointer = function AlphaPointer2(_ref) {
    var direction = _ref.direction;
    var styles5 = (0, import_reactcss8.default)({
      "default": {
        picker: {
          width: "18px",
          height: "18px",
          borderRadius: "50%",
          transform: "translate(-9px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      },
      "vertical": {
        picker: {
          transform: "translate(-3px, -9px)"
        }
      }
    }, { vertical: direction === "vertical" });
    return import_react49.default.createElement("div", { style: styles5.picker });
  };
  var AlphaPointer_default = AlphaPointer;

  // node_modules/react-color/es/components/alpha/Alpha.js
  var _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var AlphaPicker = function AlphaPicker2(_ref) {
    var rgb = _ref.rgb, hsl = _ref.hsl, width3 = _ref.width, height3 = _ref.height, onChange = _ref.onChange, direction = _ref.direction, style6 = _ref.style, renderers = _ref.renderers, pointer = _ref.pointer, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss9.default)({
      "default": {
        picker: {
          position: "relative",
          width: width3,
          height: height3
        },
        alpha: {
          radius: "2px",
          style: style6
        }
      }
    });
    return import_react50.default.createElement(
      "div",
      { style: styles5.picker, className: "alpha-picker " + className },
      import_react50.default.createElement(Alpha_default, _extends8({}, styles5.alpha, {
        rgb,
        hsl,
        pointer,
        renderers,
        onChange,
        direction
      }))
    );
  };
  AlphaPicker.defaultProps = {
    width: "316px",
    height: "16px",
    direction: "horizontal",
    pointer: AlphaPointer_default
  };
  var Alpha_default2 = ColorWrap_default(AlphaPicker);

  // node_modules/react-color/es/components/block/Block.js
  var import_react52 = __toESM(require_react());
  var import_prop_types122 = __toESM(require_prop_types());
  var import_reactcss11 = __toESM(require_lib());

  // node_modules/react-color/es/components/block/BlockSwatches.js
  var import_react51 = __toESM(require_react());
  var import_reactcss10 = __toESM(require_lib());

  // node_modules/lodash-es/_arrayMap.js
  function arrayMap(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
    while (++index < length2) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var arrayMap_default = arrayMap;

  // node_modules/lodash-es/_setCacheAdd.js
  var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED3);
    return this;
  }
  var setCacheAdd_default = setCacheAdd;

  // node_modules/lodash-es/_setCacheHas.js
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  var setCacheHas_default = setCacheHas;

  // node_modules/lodash-es/_SetCache.js
  function SetCache(values4) {
    var index = -1, length2 = values4 == null ? 0 : values4.length;
    this.__data__ = new MapCache_default();
    while (++index < length2) {
      this.add(values4[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
  SetCache.prototype.has = setCacheHas_default;
  var SetCache_default = SetCache;

  // node_modules/lodash-es/_arraySome.js
  function arraySome(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  var arraySome_default = arraySome;

  // node_modules/lodash-es/_cacheHas.js
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  var cacheHas_default = cacheHas;

  // node_modules/lodash-es/_equalArrays.js
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome_default(other, function(othValue2, othIndex) {
          if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  var equalArrays_default = equalArrays;

  // node_modules/lodash-es/_mapToArray.js
  function mapToArray(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  var mapToArray_default = mapToArray;

  // node_modules/lodash-es/_setToArray.js
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var setToArray_default = setToArray;

  // node_modules/lodash-es/_equalByTag.js
  var COMPARE_PARTIAL_FLAG2 = 1;
  var COMPARE_UNORDERED_FLAG2 = 2;
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var errorTag2 = "[object Error]";
  var mapTag2 = "[object Map]";
  var numberTag2 = "[object Number]";
  var regexpTag2 = "[object RegExp]";
  var setTag2 = "[object Set]";
  var stringTag2 = "[object String]";
  var symbolTag2 = "[object Symbol]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag2 = "[object DataView]";
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag2:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag2:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
          return false;
        }
        return true;
      case boolTag2:
      case dateTag2:
      case numberTag2:
        return eq_default(+object, +other);
      case errorTag2:
        return object.name == other.name && object.message == other.message;
      case regexpTag2:
      case stringTag2:
        return object == other + "";
      case mapTag2:
        var convert = mapToArray_default;
      case setTag2:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
        convert || (convert = setToArray_default);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG2;
        stack.set(object, other);
        var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag2:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var equalByTag_default = equalByTag;

  // node_modules/lodash-es/_arrayPush.js
  function arrayPush(array, values4) {
    var index = -1, length2 = values4.length, offset2 = array.length;
    while (++index < length2) {
      array[offset2 + index] = values4[index];
    }
    return array;
  }
  var arrayPush_default = arrayPush;

  // node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
  }
  var baseGetAllKeys_default = baseGetAllKeys;

  // node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length2) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var arrayFilter_default = arrayFilter;

  // node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  var stubArray_default = stubArray;

  // node_modules/lodash-es/_getSymbols.js
  var objectProto13 = Object.prototype;
  var propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable2.call(object, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object) {
    return baseGetAllKeys_default(object, keys_default, getSymbols_default);
  }
  var getAllKeys_default = getAllKeys;

  // node_modules/lodash-es/_equalObjects.js
  var COMPARE_PARTIAL_FLAG3 = 1;
  var objectProto14 = Object.prototype;
  var hasOwnProperty12 = objectProto14.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty12.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  var equalObjects_default = equalObjects;

  // node_modules/lodash-es/_DataView.js
  var DataView = getNative_default(root_default, "DataView");
  var DataView_default = DataView;

  // node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // node_modules/lodash-es/_WeakMap.js
  var WeakMap2 = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap2;

  // node_modules/lodash-es/_getTag.js
  var mapTag3 = "[object Map]";
  var objectTag3 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag3 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag3 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = function(value) {
      var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag3;
          case mapCtorString:
            return mapTag3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag3;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result;
    };
  }
  var getTag_default = getTag;

  // node_modules/lodash-es/_baseIsEqualDeep.js
  var COMPARE_PARTIAL_FLAG4 = 1;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var objectTag4 = "[object Object]";
  var objectProto15 = Object.prototype;
  var hasOwnProperty13 = objectProto15.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
    objTag = objTag == argsTag3 ? objectTag4 : objTag;
    othTag = othTag == argsTag3 ? objectTag4 : othTag;
    var objIsObj = objTag == objectTag4, othIsObj = othTag == objectTag4, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer_default(object)) {
      if (!isBuffer_default(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack_default2());
      return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
      var objIsWrapped = objIsObj && hasOwnProperty13.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty13.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack_default2());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack_default2());
    return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
  }
  var baseIsEqualDeep_default = baseIsEqualDeep;

  // node_modules/lodash-es/_baseIsEqual.js
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  var baseIsEqual_default = baseIsEqual;

  // node_modules/lodash-es/_baseIsMatch.js
  var COMPARE_PARTIAL_FLAG5 = 1;
  var COMPARE_UNORDERED_FLAG3 = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length2 = index, noCustomizer = !customizer;
    if (object == null) {
      return !length2;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length2) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack_default2();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  var baseIsMatch_default = baseIsMatch;

  // node_modules/lodash-es/_isStrictComparable.js
  function isStrictComparable(value) {
    return value === value && !isObject_default(value);
  }
  var isStrictComparable_default = isStrictComparable;

  // node_modules/lodash-es/_getMatchData.js
  function getMatchData(object) {
    var result = keys_default(object), length2 = result.length;
    while (length2--) {
      var key = result[length2], value = object[key];
      result[length2] = [key, value, isStrictComparable_default(value)];
    }
    return result;
  }
  var getMatchData_default = getMatchData;

  // node_modules/lodash-es/_matchesStrictComparable.js
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  var matchesStrictComparable_default = matchesStrictComparable;

  // node_modules/lodash-es/_baseMatches.js
  function baseMatches(source) {
    var matchData = getMatchData_default(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch_default(object, source, matchData);
    };
  }
  var baseMatches_default = baseMatches;

  // node_modules/lodash-es/_isKey.js
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    if (isArray_default(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  var isKey_default = isKey;

  // node_modules/lodash-es/memoize.js
  var FUNC_ERROR_TEXT3 = "Expected a function";
  function memoize4(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT3);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize4.Cache || MapCache_default)();
    return memoized;
  }
  memoize4.Cache = MapCache_default;
  var memoize_default = memoize4;

  // node_modules/lodash-es/_memoizeCapped.js
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize_default(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  var memoizeCapped_default = memoizeCapped;

  // node_modules/lodash-es/_stringToPath.js
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped_default(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46) {
      result.push("");
    }
    string.replace(rePropName, function(match2, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
    });
    return result;
  });
  var stringToPath_default = stringToPath;

  // node_modules/lodash-es/_baseToString.js
  var INFINITY = 1 / 0;
  var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolToString = symbolProto2 ? symbolProto2.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray_default(value)) {
      return arrayMap_default(value, baseToString) + "";
    }
    if (isSymbol_default(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  var baseToString_default = baseToString;

  // node_modules/lodash-es/toString.js
  function toString4(value) {
    return value == null ? "" : baseToString_default(value);
  }
  var toString_default = toString4;

  // node_modules/lodash-es/_castPath.js
  function castPath(value, object) {
    if (isArray_default(value)) {
      return value;
    }
    return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
  }
  var castPath_default = castPath;

  // node_modules/lodash-es/_toKey.js
  var INFINITY2 = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol_default(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
  }
  var toKey_default = toKey;

  // node_modules/lodash-es/_baseGet.js
  function baseGet(object, path) {
    path = castPath_default(path, object);
    var index = 0, length2 = path.length;
    while (object != null && index < length2) {
      object = object[toKey_default(path[index++])];
    }
    return index && index == length2 ? object : void 0;
  }
  var baseGet_default = baseGet;

  // node_modules/lodash-es/get.js
  function get3(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet_default(object, path);
    return result === void 0 ? defaultValue : result;
  }
  var get_default = get3;

  // node_modules/lodash-es/_baseHasIn.js
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  var baseHasIn_default = baseHasIn;

  // node_modules/lodash-es/_hasPath.js
  function hasPath(object, path, hasFunc) {
    path = castPath_default(path, object);
    var index = -1, length2 = path.length, result = false;
    while (++index < length2) {
      var key = toKey_default(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length2) {
      return result;
    }
    length2 = object == null ? 0 : object.length;
    return !!length2 && isLength_default(length2) && isIndex_default(key, length2) && (isArray_default(object) || isArguments_default(object));
  }
  var hasPath_default = hasPath;

  // node_modules/lodash-es/hasIn.js
  function hasIn(object, path) {
    return object != null && hasPath_default(object, path, baseHasIn_default);
  }
  var hasIn_default = hasIn;

  // node_modules/lodash-es/_baseMatchesProperty.js
  var COMPARE_PARTIAL_FLAG6 = 1;
  var COMPARE_UNORDERED_FLAG4 = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey_default(path) && isStrictComparable_default(srcValue)) {
      return matchesStrictComparable_default(toKey_default(path), srcValue);
    }
    return function(object) {
      var objValue = get_default(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
    };
  }
  var baseMatchesProperty_default = baseMatchesProperty;

  // node_modules/lodash-es/_baseProperty.js
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  var baseProperty_default = baseProperty;

  // node_modules/lodash-es/_basePropertyDeep.js
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet_default(object, path);
    };
  }
  var basePropertyDeep_default = basePropertyDeep;

  // node_modules/lodash-es/property.js
  function property(path) {
    return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
  }
  var property_default = property;

  // node_modules/lodash-es/_baseIteratee.js
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity_default;
    }
    if (typeof value == "object") {
      return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
    }
    return property_default(value);
  }
  var baseIteratee_default = baseIteratee;

  // node_modules/lodash-es/_baseMap.js
  function baseMap(collection, iteratee) {
    var index = -1, result = isArrayLike_default(collection) ? Array(collection.length) : [];
    baseEach_default(collection, function(value, key, collection2) {
      result[++index] = iteratee(value, key, collection2);
    });
    return result;
  }
  var baseMap_default = baseMap;

  // node_modules/lodash-es/map.js
  function map(collection, iteratee) {
    var func = isArray_default(collection) ? arrayMap_default : baseMap_default;
    return func(collection, baseIteratee_default(iteratee, 3));
  }
  var map_default = map;

  // node_modules/react-color/es/components/block/BlockSwatches.js
  var BlockSwatches = function BlockSwatches2(_ref) {
    var colors = _ref.colors, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
    var styles5 = (0, import_reactcss10.default)({
      "default": {
        swatches: {
          marginRight: "-10px"
        },
        swatch: {
          width: "22px",
          height: "22px",
          float: "left",
          marginRight: "10px",
          marginBottom: "10px",
          borderRadius: "4px"
        },
        clear: {
          clear: "both"
        }
      }
    });
    return import_react51.default.createElement(
      "div",
      { style: styles5.swatches },
      map_default(colors, function(c) {
        return import_react51.default.createElement(Swatch_default, {
          key: c,
          color: c,
          style: styles5.swatch,
          onClick,
          onHover: onSwatchHover,
          focusStyle: {
            boxShadow: "0 0 4px " + c
          }
        });
      }),
      import_react51.default.createElement("div", { style: styles5.clear })
    );
  };
  var BlockSwatches_default = BlockSwatches;

  // node_modules/react-color/es/components/block/Block.js
  var Block = function Block2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors = _ref.colors, width3 = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var transparent = hex === "transparent";
    var handleChange = function handleChange2(hexCode, e) {
      isValidHex(hexCode) && onChange({
        hex: hexCode,
        source: "hex"
      }, e);
    };
    var styles5 = (0, import_reactcss11.default)(merge_default3({
      "default": {
        card: {
          width: width3,
          background: "#fff",
          boxShadow: "0 1px rgba(0,0,0,.1)",
          borderRadius: "6px",
          position: "relative"
        },
        head: {
          height: "110px",
          background: hex,
          borderRadius: "6px 6px 0 0",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          position: "relative"
        },
        body: {
          padding: "10px"
        },
        label: {
          fontSize: "18px",
          color: getContrastingColor(hex),
          position: "relative"
        },
        triangle: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 10px 10px 10px",
          borderColor: "transparent transparent " + hex + " transparent",
          position: "absolute",
          top: "-10px",
          left: "50%",
          marginLeft: "-10px"
        },
        input: {
          width: "100%",
          fontSize: "12px",
          color: "#666",
          border: "0px",
          outline: "none",
          height: "22px",
          boxShadow: "inset 0 0 0 1px #ddd",
          borderRadius: "4px",
          padding: "0 7px",
          boxSizing: "border-box"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        }
      }
    }, passedStyles), { "hide-triangle": triangle === "hide" });
    return import_react52.default.createElement(
      "div",
      { style: styles5.card, className: "block-picker " + className },
      import_react52.default.createElement("div", { style: styles5.triangle }),
      import_react52.default.createElement(
        "div",
        { style: styles5.head },
        transparent && import_react52.default.createElement(Checkboard_default, { borderRadius: "6px 6px 0 0" }),
        import_react52.default.createElement(
          "div",
          { style: styles5.label },
          hex
        )
      ),
      import_react52.default.createElement(
        "div",
        { style: styles5.body },
        import_react52.default.createElement(BlockSwatches_default, { colors, onClick: handleChange, onSwatchHover }),
        import_react52.default.createElement(EditableInput_default, {
          style: { input: styles5.input },
          value: hex,
          onChange: handleChange
        })
      )
    );
  };
  Block.propTypes = {
    width: import_prop_types122.default.oneOfType([import_prop_types122.default.string, import_prop_types122.default.number]),
    colors: import_prop_types122.default.arrayOf(import_prop_types122.default.string),
    triangle: import_prop_types122.default.oneOf(["top", "hide"]),
    styles: import_prop_types122.default.object
  };
  Block.defaultProps = {
    width: 170,
    colors: ["#D9E3F0", "#F47373", "#697689", "#37D67A", "#2CCCE4", "#555555", "#dce775", "#ff8a65", "#ba68c8"],
    triangle: "top",
    styles: {}
  };
  var Block_default = ColorWrap_default(Block);

  // node_modules/react-color/es/components/circle/Circle.js
  var import_react54 = __toESM(require_react());
  var import_prop_types123 = __toESM(require_prop_types());
  var import_reactcss13 = __toESM(require_lib());

  // node_modules/material-colors/dist/colors.es2015.js
  var red2 = { "50": "#ffebee", "100": "#ffcdd2", "200": "#ef9a9a", "300": "#e57373", "400": "#ef5350", "500": "#f44336", "600": "#e53935", "700": "#d32f2f", "800": "#c62828", "900": "#b71c1c", "a100": "#ff8a80", "a200": "#ff5252", "a400": "#ff1744", "a700": "#d50000" };
  var pink = { "50": "#fce4ec", "100": "#f8bbd0", "200": "#f48fb1", "300": "#f06292", "400": "#ec407a", "500": "#e91e63", "600": "#d81b60", "700": "#c2185b", "800": "#ad1457", "900": "#880e4f", "a100": "#ff80ab", "a200": "#ff4081", "a400": "#f50057", "a700": "#c51162" };
  var purple2 = { "50": "#f3e5f5", "100": "#e1bee7", "200": "#ce93d8", "300": "#ba68c8", "400": "#ab47bc", "500": "#9c27b0", "600": "#8e24aa", "700": "#7b1fa2", "800": "#6a1b9a", "900": "#4a148c", "a100": "#ea80fc", "a200": "#e040fb", "a400": "#d500f9", "a700": "#aa00ff" };
  var deepPurple = { "50": "#ede7f6", "100": "#d1c4e9", "200": "#b39ddb", "300": "#9575cd", "400": "#7e57c2", "500": "#673ab7", "600": "#5e35b1", "700": "#512da8", "800": "#4527a0", "900": "#311b92", "a100": "#b388ff", "a200": "#7c4dff", "a400": "#651fff", "a700": "#6200ea" };
  var indigo = { "50": "#e8eaf6", "100": "#c5cae9", "200": "#9fa8da", "300": "#7986cb", "400": "#5c6bc0", "500": "#3f51b5", "600": "#3949ab", "700": "#303f9f", "800": "#283593", "900": "#1a237e", "a100": "#8c9eff", "a200": "#536dfe", "a400": "#3d5afe", "a700": "#304ffe" };
  var blue2 = { "50": "#e3f2fd", "100": "#bbdefb", "200": "#90caf9", "300": "#64b5f6", "400": "#42a5f5", "500": "#2196f3", "600": "#1e88e5", "700": "#1976d2", "800": "#1565c0", "900": "#0d47a1", "a100": "#82b1ff", "a200": "#448aff", "a400": "#2979ff", "a700": "#2962ff" };
  var lightBlue2 = { "50": "#e1f5fe", "100": "#b3e5fc", "200": "#81d4fa", "300": "#4fc3f7", "400": "#29b6f6", "500": "#03a9f4", "600": "#039be5", "700": "#0288d1", "800": "#0277bd", "900": "#01579b", "a100": "#80d8ff", "a200": "#40c4ff", "a400": "#00b0ff", "a700": "#0091ea" };
  var cyan = { "50": "#e0f7fa", "100": "#b2ebf2", "200": "#80deea", "300": "#4dd0e1", "400": "#26c6da", "500": "#00bcd4", "600": "#00acc1", "700": "#0097a7", "800": "#00838f", "900": "#006064", "a100": "#84ffff", "a200": "#18ffff", "a400": "#00e5ff", "a700": "#00b8d4" };
  var teal = { "50": "#e0f2f1", "100": "#b2dfdb", "200": "#80cbc4", "300": "#4db6ac", "400": "#26a69a", "500": "#009688", "600": "#00897b", "700": "#00796b", "800": "#00695c", "900": "#004d40", "a100": "#a7ffeb", "a200": "#64ffda", "a400": "#1de9b6", "a700": "#00bfa5" };
  var green2 = { "50": "#e8f5e9", "100": "#c8e6c9", "200": "#a5d6a7", "300": "#81c784", "400": "#66bb6a", "500": "#4caf50", "600": "#43a047", "700": "#388e3c", "800": "#2e7d32", "900": "#1b5e20", "a100": "#b9f6ca", "a200": "#69f0ae", "a400": "#00e676", "a700": "#00c853" };
  var lightGreen = { "50": "#f1f8e9", "100": "#dcedc8", "200": "#c5e1a5", "300": "#aed581", "400": "#9ccc65", "500": "#8bc34a", "600": "#7cb342", "700": "#689f38", "800": "#558b2f", "900": "#33691e", "a100": "#ccff90", "a200": "#b2ff59", "a400": "#76ff03", "a700": "#64dd17" };
  var lime = { "50": "#f9fbe7", "100": "#f0f4c3", "200": "#e6ee9c", "300": "#dce775", "400": "#d4e157", "500": "#cddc39", "600": "#c0ca33", "700": "#afb42b", "800": "#9e9d24", "900": "#827717", "a100": "#f4ff81", "a200": "#eeff41", "a400": "#c6ff00", "a700": "#aeea00" };
  var yellow = { "50": "#fffde7", "100": "#fff9c4", "200": "#fff59d", "300": "#fff176", "400": "#ffee58", "500": "#ffeb3b", "600": "#fdd835", "700": "#fbc02d", "800": "#f9a825", "900": "#f57f17", "a100": "#ffff8d", "a200": "#ffff00", "a400": "#ffea00", "a700": "#ffd600" };
  var amber = { "50": "#fff8e1", "100": "#ffecb3", "200": "#ffe082", "300": "#ffd54f", "400": "#ffca28", "500": "#ffc107", "600": "#ffb300", "700": "#ffa000", "800": "#ff8f00", "900": "#ff6f00", "a100": "#ffe57f", "a200": "#ffd740", "a400": "#ffc400", "a700": "#ffab00" };
  var orange2 = { "50": "#fff3e0", "100": "#ffe0b2", "200": "#ffcc80", "300": "#ffb74d", "400": "#ffa726", "500": "#ff9800", "600": "#fb8c00", "700": "#f57c00", "800": "#ef6c00", "900": "#e65100", "a100": "#ffd180", "a200": "#ffab40", "a400": "#ff9100", "a700": "#ff6d00" };
  var deepOrange = { "50": "#fbe9e7", "100": "#ffccbc", "200": "#ffab91", "300": "#ff8a65", "400": "#ff7043", "500": "#ff5722", "600": "#f4511e", "700": "#e64a19", "800": "#d84315", "900": "#bf360c", "a100": "#ff9e80", "a200": "#ff6e40", "a400": "#ff3d00", "a700": "#dd2c00" };
  var brown = { "50": "#efebe9", "100": "#d7ccc8", "200": "#bcaaa4", "300": "#a1887f", "400": "#8d6e63", "500": "#795548", "600": "#6d4c41", "700": "#5d4037", "800": "#4e342e", "900": "#3e2723" };
  var blueGrey = { "50": "#eceff1", "100": "#cfd8dc", "200": "#b0bec5", "300": "#90a4ae", "400": "#78909c", "500": "#607d8b", "600": "#546e7a", "700": "#455a64", "800": "#37474f", "900": "#263238" };

  // node_modules/react-color/es/components/circle/CircleSwatch.js
  var import_react53 = __toESM(require_react());
  var import_reactcss12 = __toESM(require_lib());
  var CircleSwatch = function CircleSwatch2(_ref) {
    var color3 = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, hover = _ref.hover, active = _ref.active, circleSize = _ref.circleSize, circleSpacing = _ref.circleSpacing;
    var styles5 = (0, import_reactcss12.default)({
      "default": {
        swatch: {
          width: circleSize,
          height: circleSize,
          marginRight: circleSpacing,
          marginBottom: circleSpacing,
          transform: "scale(1)",
          transition: "100ms transform ease"
        },
        Swatch: {
          borderRadius: "50%",
          background: "transparent",
          boxShadow: "inset 0 0 0 " + (circleSize / 2 + 1) + "px " + color3,
          transition: "100ms box-shadow ease"
        }
      },
      "hover": {
        swatch: {
          transform: "scale(1.2)"
        }
      },
      "active": {
        Swatch: {
          boxShadow: "inset 0 0 0 3px " + color3
        }
      }
    }, { hover, active });
    return import_react53.default.createElement(
      "div",
      { style: styles5.swatch },
      import_react53.default.createElement(Swatch_default, {
        style: styles5.Swatch,
        color: color3,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: styles5.Swatch.boxShadow + ", 0 0 5px " + color3 }
      })
    );
  };
  CircleSwatch.defaultProps = {
    circleSize: 28,
    circleSpacing: 14
  };
  var CircleSwatch_default = (0, import_reactcss12.handleHover)(CircleSwatch);

  // node_modules/react-color/es/components/circle/Circle.js
  var Circle = function Circle2(_ref) {
    var width3 = _ref.width, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, circleSize = _ref.circleSize, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, circleSpacing = _ref.circleSpacing, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss13.default)(merge_default3({
      "default": {
        card: {
          width: width3,
          display: "flex",
          flexWrap: "wrap",
          marginRight: -circleSpacing,
          marginBottom: -circleSpacing
        }
      }
    }, passedStyles));
    var handleChange = function handleChange2(hexCode, e) {
      return onChange({ hex: hexCode, source: "hex" }, e);
    };
    return import_react54.default.createElement(
      "div",
      { style: styles5.card, className: "circle-picker " + className },
      map_default(colors, function(c) {
        return import_react54.default.createElement(CircleSwatch_default, {
          key: c,
          color: c,
          onClick: handleChange,
          onSwatchHover,
          active: hex === c.toLowerCase(),
          circleSize,
          circleSpacing
        });
      })
    );
  };
  Circle.propTypes = {
    width: import_prop_types123.default.oneOfType([import_prop_types123.default.string, import_prop_types123.default.number]),
    circleSize: import_prop_types123.default.number,
    circleSpacing: import_prop_types123.default.number,
    styles: import_prop_types123.default.object
  };
  Circle.defaultProps = {
    width: 252,
    circleSize: 28,
    circleSpacing: 14,
    colors: [red2["500"], pink["500"], purple2["500"], deepPurple["500"], indigo["500"], blue2["500"], lightBlue2["500"], cyan["500"], teal["500"], green2["500"], lightGreen["500"], lime["500"], yellow["500"], amber["500"], orange2["500"], deepOrange["500"], brown["500"], blueGrey["500"]],
    styles: {}
  };
  var Circle_default = ColorWrap_default(Circle);

  // node_modules/react-color/es/components/chrome/Chrome.js
  var import_react58 = __toESM(require_react());
  var import_prop_types124 = __toESM(require_prop_types());
  var import_reactcss17 = __toESM(require_lib());

  // node_modules/react-color/es/components/chrome/ChromeFields.js
  var import_react55 = __toESM(require_react());
  var import_reactcss14 = __toESM(require_lib());

  // node_modules/lodash-es/isUndefined.js
  function isUndefined2(value) {
    return value === void 0;
  }
  var isUndefined_default = isUndefined2;

  // node_modules/react-color/es/components/chrome/ChromeFields.js
  var import_UnfoldMoreHorizontalIcon = __toESM(require_UnfoldMoreHorizontalIcon());
  var _createClass7 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn7(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var ChromeFields = function(_React$Component) {
    _inherits7(ChromeFields2, _React$Component);
    function ChromeFields2(props) {
      _classCallCheck7(this, ChromeFields2);
      var _this = _possibleConstructorReturn7(this, (ChromeFields2.__proto__ || Object.getPrototypeOf(ChromeFields2)).call(this));
      _this.toggleViews = function() {
        if (_this.state.view === "hex") {
          _this.setState({ view: "rgb" });
        } else if (_this.state.view === "rgb") {
          _this.setState({ view: "hsl" });
        } else if (_this.state.view === "hsl") {
          if (_this.props.hsl.a === 1) {
            _this.setState({ view: "hex" });
          } else {
            _this.setState({ view: "rgb" });
          }
        }
      };
      _this.handleChange = function(data, e) {
        if (data.hex) {
          isValidHex(data.hex) && _this.props.onChange({
            hex: data.hex,
            source: "hex"
          }, e);
        } else if (data.r || data.g || data.b) {
          _this.props.onChange({
            r: data.r || _this.props.rgb.r,
            g: data.g || _this.props.rgb.g,
            b: data.b || _this.props.rgb.b,
            source: "rgb"
          }, e);
        } else if (data.a) {
          if (data.a < 0) {
            data.a = 0;
          } else if (data.a > 1) {
            data.a = 1;
          }
          _this.props.onChange({
            h: _this.props.hsl.h,
            s: _this.props.hsl.s,
            l: _this.props.hsl.l,
            a: Math.round(data.a * 100) / 100,
            source: "rgb"
          }, e);
        } else if (data.h || data.s || data.l) {
          if (typeof data.s === "string" && data.s.includes("%")) {
            data.s = data.s.replace("%", "");
          }
          if (typeof data.l === "string" && data.l.includes("%")) {
            data.l = data.l.replace("%", "");
          }
          if (data.s == 1) {
            data.s = 0.01;
          } else if (data.l == 1) {
            data.l = 0.01;
          }
          _this.props.onChange({
            h: data.h || _this.props.hsl.h,
            s: Number(!isUndefined_default(data.s) ? data.s : _this.props.hsl.s),
            l: Number(!isUndefined_default(data.l) ? data.l : _this.props.hsl.l),
            source: "hsl"
          }, e);
        }
      };
      _this.showHighlight = function(e) {
        e.currentTarget.style.background = "#eee";
      };
      _this.hideHighlight = function(e) {
        e.currentTarget.style.background = "transparent";
      };
      if (props.hsl.a !== 1 && props.view === "hex") {
        _this.state = {
          view: "rgb"
        };
      } else {
        _this.state = {
          view: props.view
        };
      }
      return _this;
    }
    _createClass7(ChromeFields2, [{
      key: "render",
      value: function render3() {
        var _this2 = this;
        var styles5 = (0, import_reactcss14.default)({
          "default": {
            wrap: {
              paddingTop: "16px",
              display: "flex"
            },
            fields: {
              flex: "1",
              display: "flex",
              marginLeft: "-6px"
            },
            field: {
              paddingLeft: "6px",
              width: "100%"
            },
            alpha: {
              paddingLeft: "6px",
              width: "100%"
            },
            toggle: {
              width: "32px",
              textAlign: "right",
              position: "relative"
            },
            icon: {
              marginRight: "-4px",
              marginTop: "12px",
              cursor: "pointer",
              position: "relative"
            },
            iconHighlight: {
              position: "absolute",
              width: "24px",
              height: "28px",
              background: "#eee",
              borderRadius: "4px",
              top: "10px",
              left: "12px",
              display: "none"
            },
            input: {
              fontSize: "11px",
              color: "#333",
              width: "100%",
              borderRadius: "2px",
              border: "none",
              boxShadow: "inset 0 0 0 1px #dadada",
              height: "21px",
              textAlign: "center"
            },
            label: {
              textTransform: "uppercase",
              fontSize: "11px",
              lineHeight: "11px",
              color: "#969696",
              textAlign: "center",
              display: "block",
              marginTop: "12px"
            },
            svg: {
              fill: "#333",
              width: "24px",
              height: "24px",
              border: "1px transparent solid",
              borderRadius: "5px"
            }
          },
          "disableAlpha": {
            alpha: {
              display: "none"
            }
          }
        }, this.props, this.state);
        var fields = void 0;
        if (this.state.view === "hex") {
          fields = import_react55.default.createElement(
            "div",
            { style: styles5.fields, className: "flexbox-fix" },
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "hex",
                value: this.props.hex,
                onChange: this.handleChange
              })
            )
          );
        } else if (this.state.view === "rgb") {
          fields = import_react55.default.createElement(
            "div",
            { style: styles5.fields, className: "flexbox-fix" },
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "r",
                value: this.props.rgb.r,
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "g",
                value: this.props.rgb.g,
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "b",
                value: this.props.rgb.b,
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.alpha },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "a",
                value: this.props.rgb.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })
            )
          );
        } else if (this.state.view === "hsl") {
          fields = import_react55.default.createElement(
            "div",
            { style: styles5.fields, className: "flexbox-fix" },
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "h",
                value: Math.round(this.props.hsl.h),
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "s",
                value: Math.round(this.props.hsl.s * 100) + "%",
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.field },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "l",
                value: Math.round(this.props.hsl.l * 100) + "%",
                onChange: this.handleChange
              })
            ),
            import_react55.default.createElement(
              "div",
              { style: styles5.alpha },
              import_react55.default.createElement(EditableInput_default, {
                style: { input: styles5.input, label: styles5.label },
                label: "a",
                value: this.props.hsl.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })
            )
          );
        }
        return import_react55.default.createElement(
          "div",
          { style: styles5.wrap, className: "flexbox-fix" },
          fields,
          import_react55.default.createElement(
            "div",
            { style: styles5.toggle },
            import_react55.default.createElement(
              "div",
              { style: styles5.icon, onClick: this.toggleViews, ref: function ref(icon) {
                return _this2.icon = icon;
              } },
              import_react55.default.createElement(import_UnfoldMoreHorizontalIcon.default, {
                style: styles5.svg,
                onMouseOver: this.showHighlight,
                onMouseEnter: this.showHighlight,
                onMouseOut: this.hideHighlight
              })
            )
          )
        );
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, state) {
        if (nextProps.hsl.a !== 1 && state.view === "hex") {
          return { view: "rgb" };
        }
        return null;
      }
    }]);
    return ChromeFields2;
  }(import_react55.default.Component);
  ChromeFields.defaultProps = {
    view: "hex"
  };
  var ChromeFields_default = ChromeFields;

  // node_modules/react-color/es/components/chrome/ChromePointer.js
  var import_react56 = __toESM(require_react());
  var import_reactcss15 = __toESM(require_lib());
  var ChromePointer = function ChromePointer2() {
    var styles5 = (0, import_reactcss15.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          transform: "translate(-6px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      }
    });
    return import_react56.default.createElement("div", { style: styles5.picker });
  };
  var ChromePointer_default = ChromePointer;

  // node_modules/react-color/es/components/chrome/ChromePointerCircle.js
  var import_react57 = __toESM(require_react());
  var import_reactcss16 = __toESM(require_lib());
  var ChromePointerCircle = function ChromePointerCircle2() {
    var styles5 = (0, import_reactcss16.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          boxShadow: "inset 0 0 0 1px #fff",
          transform: "translate(-6px, -6px)"
        }
      }
    });
    return import_react57.default.createElement("div", { style: styles5.picker });
  };
  var ChromePointerCircle_default = ChromePointerCircle;

  // node_modules/react-color/es/components/chrome/Chrome.js
  var Chrome = function Chrome2(_ref) {
    var width3 = _ref.width, onChange = _ref.onChange, disableAlpha = _ref.disableAlpha, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, defaultView = _ref.defaultView;
    var styles5 = (0, import_reactcss17.default)(merge_default3({
      "default": {
        picker: {
          width: width3,
          background: "#fff",
          borderRadius: "2px",
          boxShadow: "0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",
          boxSizing: "initial",
          fontFamily: "Menlo"
        },
        saturation: {
          width: "100%",
          paddingBottom: "55%",
          position: "relative",
          borderRadius: "2px 2px 0 0",
          overflow: "hidden"
        },
        Saturation: {
          radius: "2px 2px 0 0"
        },
        body: {
          padding: "16px 16px 12px"
        },
        controls: {
          display: "flex"
        },
        color: {
          width: "32px"
        },
        swatch: {
          marginTop: "6px",
          width: "16px",
          height: "16px",
          borderRadius: "8px",
          position: "relative",
          overflow: "hidden"
        },
        active: {
          absolute: "0px 0px 0px 0px",
          borderRadius: "8px",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.1)",
          background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + rgb.a + ")",
          zIndex: "2"
        },
        toggles: {
          flex: "1"
        },
        hue: {
          height: "10px",
          position: "relative",
          marginBottom: "8px"
        },
        Hue: {
          radius: "2px"
        },
        alpha: {
          height: "10px",
          position: "relative"
        },
        Alpha: {
          radius: "2px"
        }
      },
      "disableAlpha": {
        color: {
          width: "22px"
        },
        alpha: {
          display: "none"
        },
        hue: {
          marginBottom: "0px"
        },
        swatch: {
          width: "10px",
          height: "10px",
          marginTop: "0px"
        }
      }
    }, passedStyles), { disableAlpha });
    return import_react58.default.createElement(
      "div",
      { style: styles5.picker, className: "chrome-picker " + className },
      import_react58.default.createElement(
        "div",
        { style: styles5.saturation },
        import_react58.default.createElement(Saturation_default, {
          style: styles5.Saturation,
          hsl,
          hsv,
          pointer: ChromePointerCircle_default,
          onChange
        })
      ),
      import_react58.default.createElement(
        "div",
        { style: styles5.body },
        import_react58.default.createElement(
          "div",
          { style: styles5.controls, className: "flexbox-fix" },
          import_react58.default.createElement(
            "div",
            { style: styles5.color },
            import_react58.default.createElement(
              "div",
              { style: styles5.swatch },
              import_react58.default.createElement("div", { style: styles5.active }),
              import_react58.default.createElement(Checkboard_default, { renderers })
            )
          ),
          import_react58.default.createElement(
            "div",
            { style: styles5.toggles },
            import_react58.default.createElement(
              "div",
              { style: styles5.hue },
              import_react58.default.createElement(Hue_default, {
                style: styles5.Hue,
                hsl,
                pointer: ChromePointer_default,
                onChange
              })
            ),
            import_react58.default.createElement(
              "div",
              { style: styles5.alpha },
              import_react58.default.createElement(Alpha_default, {
                style: styles5.Alpha,
                rgb,
                hsl,
                pointer: ChromePointer_default,
                renderers,
                onChange
              })
            )
          )
        ),
        import_react58.default.createElement(ChromeFields_default, {
          rgb,
          hsl,
          hex,
          view: defaultView,
          onChange,
          disableAlpha
        })
      )
    );
  };
  Chrome.propTypes = {
    width: import_prop_types124.default.oneOfType([import_prop_types124.default.string, import_prop_types124.default.number]),
    disableAlpha: import_prop_types124.default.bool,
    styles: import_prop_types124.default.object,
    defaultView: import_prop_types124.default.oneOf(["hex", "rgb", "hsl"])
  };
  Chrome.defaultProps = {
    width: 225,
    disableAlpha: false,
    styles: {}
  };
  var Chrome_default = ColorWrap_default(Chrome);

  // node_modules/react-color/es/components/compact/Compact.js
  var import_react61 = __toESM(require_react());
  var import_prop_types125 = __toESM(require_prop_types());
  var import_reactcss20 = __toESM(require_lib());

  // node_modules/react-color/es/components/compact/CompactColor.js
  var import_react59 = __toESM(require_react());
  var import_reactcss18 = __toESM(require_lib());
  var CompactColor = function CompactColor2(_ref) {
    var color3 = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, active = _ref.active;
    var styles5 = (0, import_reactcss18.default)({
      "default": {
        color: {
          background: color3,
          width: "15px",
          height: "15px",
          float: "left",
          marginRight: "5px",
          marginBottom: "5px",
          position: "relative",
          cursor: "pointer"
        },
        dot: {
          absolute: "5px 5px 5px 5px",
          background: getContrastingColor(color3),
          borderRadius: "50%",
          opacity: "0"
        }
      },
      "active": {
        dot: {
          opacity: "1"
        }
      },
      "color-#FFFFFF": {
        color: {
          boxShadow: "inset 0 0 0 1px #ddd"
        },
        dot: {
          background: "#000"
        }
      },
      "transparent": {
        dot: {
          background: "#000"
        }
      }
    }, { active, "color-#FFFFFF": color3 === "#FFFFFF", "transparent": color3 === "transparent" });
    return import_react59.default.createElement(
      Swatch_default,
      {
        style: styles5.color,
        color: color3,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: "0 0 4px " + color3 }
      },
      import_react59.default.createElement("div", { style: styles5.dot })
    );
  };
  var CompactColor_default = CompactColor;

  // node_modules/react-color/es/components/compact/CompactFields.js
  var import_react60 = __toESM(require_react());
  var import_reactcss19 = __toESM(require_lib());
  var CompactFields = function CompactFields2(_ref) {
    var hex = _ref.hex, rgb = _ref.rgb, onChange = _ref.onChange;
    var styles5 = (0, import_reactcss19.default)({
      "default": {
        fields: {
          display: "flex",
          paddingBottom: "6px",
          paddingRight: "5px",
          position: "relative"
        },
        active: {
          position: "absolute",
          top: "6px",
          left: "5px",
          height: "9px",
          width: "9px",
          background: hex
        },
        HEXwrap: {
          flex: "6",
          position: "relative"
        },
        HEXinput: {
          width: "80%",
          padding: "0px",
          paddingLeft: "20%",
          border: "none",
          outline: "none",
          background: "none",
          fontSize: "12px",
          color: "#333",
          height: "16px"
        },
        HEXlabel: {
          display: "none"
        },
        RGBwrap: {
          flex: "3",
          position: "relative"
        },
        RGBinput: {
          width: "70%",
          padding: "0px",
          paddingLeft: "30%",
          border: "none",
          outline: "none",
          background: "none",
          fontSize: "12px",
          color: "#333",
          height: "16px"
        },
        RGBlabel: {
          position: "absolute",
          top: "3px",
          left: "0px",
          lineHeight: "16px",
          textTransform: "uppercase",
          fontSize: "12px",
          color: "#999"
        }
      }
    });
    var handleChange = function handleChange2(data, e) {
      if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      } else {
        onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      }
    };
    return import_react60.default.createElement(
      "div",
      { style: styles5.fields, className: "flexbox-fix" },
      import_react60.default.createElement("div", { style: styles5.active }),
      import_react60.default.createElement(EditableInput_default, {
        style: { wrap: styles5.HEXwrap, input: styles5.HEXinput, label: styles5.HEXlabel },
        label: "hex",
        value: hex,
        onChange: handleChange
      }),
      import_react60.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "r",
        value: rgb.r,
        onChange: handleChange
      }),
      import_react60.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "g",
        value: rgb.g,
        onChange: handleChange
      }),
      import_react60.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "b",
        value: rgb.b,
        onChange: handleChange
      })
    );
  };
  var CompactFields_default = CompactFields;

  // node_modules/react-color/es/components/compact/Compact.js
  var Compact = function Compact2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss20.default)(merge_default3({
      "default": {
        Compact: {
          background: "#f6f6f6",
          radius: "4px"
        },
        compact: {
          paddingTop: "5px",
          paddingLeft: "5px",
          boxSizing: "initial",
          width: "240px"
        },
        clear: {
          clear: "both"
        }
      }
    }, passedStyles));
    var handleChange = function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else {
        onChange(data, e);
      }
    };
    return import_react61.default.createElement(
      Raised_default,
      { style: styles5.Compact, styles: passedStyles },
      import_react61.default.createElement(
        "div",
        { style: styles5.compact, className: "compact-picker " + className },
        import_react61.default.createElement(
          "div",
          null,
          map_default(colors, function(c) {
            return import_react61.default.createElement(CompactColor_default, {
              key: c,
              color: c,
              active: c.toLowerCase() === hex,
              onClick: handleChange,
              onSwatchHover
            });
          }),
          import_react61.default.createElement("div", { style: styles5.clear })
        ),
        import_react61.default.createElement(CompactFields_default, { hex, rgb, onChange: handleChange })
      )
    );
  };
  Compact.propTypes = {
    colors: import_prop_types125.default.arrayOf(import_prop_types125.default.string),
    styles: import_prop_types125.default.object
  };
  Compact.defaultProps = {
    colors: ["#4D4D4D", "#999999", "#FFFFFF", "#F44E3B", "#FE9200", "#FCDC00", "#DBDF00", "#A4DD00", "#68CCCA", "#73D8FF", "#AEA1FF", "#FDA1FF", "#333333", "#808080", "#cccccc", "#D33115", "#E27300", "#FCC400", "#B0BC00", "#68BC00", "#16A5A5", "#009CE0", "#7B64FF", "#FA28FF", "#000000", "#666666", "#B3B3B3", "#9F0500", "#C45100", "#FB9E00", "#808900", "#194D33", "#0C797D", "#0062B1", "#653294", "#AB149E"],
    styles: {}
  };
  var Compact_default = ColorWrap_default(Compact);

  // node_modules/react-color/es/components/github/Github.js
  var import_react63 = __toESM(require_react());
  var import_prop_types126 = __toESM(require_prop_types());
  var import_reactcss22 = __toESM(require_lib());

  // node_modules/react-color/es/components/github/GithubSwatch.js
  var import_react62 = __toESM(require_react());
  var import_reactcss21 = __toESM(require_lib());
  var GithubSwatch = function GithubSwatch2(_ref) {
    var hover = _ref.hover, color3 = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
    var hoverSwatch = {
      position: "relative",
      zIndex: "2",
      outline: "2px solid #fff",
      boxShadow: "0 0 5px 2px rgba(0,0,0,0.25)"
    };
    var styles5 = (0, import_reactcss21.default)({
      "default": {
        swatch: {
          width: "25px",
          height: "25px",
          fontSize: "0"
        }
      },
      "hover": {
        swatch: hoverSwatch
      }
    }, { hover });
    return import_react62.default.createElement(
      "div",
      { style: styles5.swatch },
      import_react62.default.createElement(Swatch_default, {
        color: color3,
        onClick,
        onHover: onSwatchHover,
        focusStyle: hoverSwatch
      })
    );
  };
  var GithubSwatch_default = (0, import_reactcss21.handleHover)(GithubSwatch);

  // node_modules/react-color/es/components/github/Github.js
  var Github = function Github2(_ref) {
    var width3 = _ref.width, colors = _ref.colors, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss22.default)(merge_default3({
      "default": {
        card: {
          width: width3,
          background: "#fff",
          border: "1px solid rgba(0,0,0,0.2)",
          boxShadow: "0 3px 12px rgba(0,0,0,0.15)",
          borderRadius: "4px",
          position: "relative",
          padding: "5px",
          display: "flex",
          flexWrap: "wrap"
        },
        triangle: {
          position: "absolute",
          border: "7px solid transparent",
          borderBottomColor: "#fff"
        },
        triangleShadow: {
          position: "absolute",
          border: "8px solid transparent",
          borderBottomColor: "rgba(0,0,0,0.15)"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        },
        triangleShadow: {
          display: "none"
        }
      },
      "top-left-triangle": {
        triangle: {
          top: "-14px",
          left: "10px"
        },
        triangleShadow: {
          top: "-16px",
          left: "9px"
        }
      },
      "top-right-triangle": {
        triangle: {
          top: "-14px",
          right: "10px"
        },
        triangleShadow: {
          top: "-16px",
          right: "9px"
        }
      },
      "bottom-left-triangle": {
        triangle: {
          top: "35px",
          left: "10px",
          transform: "rotate(180deg)"
        },
        triangleShadow: {
          top: "37px",
          left: "9px",
          transform: "rotate(180deg)"
        }
      },
      "bottom-right-triangle": {
        triangle: {
          top: "35px",
          right: "10px",
          transform: "rotate(180deg)"
        },
        triangleShadow: {
          top: "37px",
          right: "9px",
          transform: "rotate(180deg)"
        }
      }
    }, passedStyles), {
      "hide-triangle": triangle === "hide",
      "top-left-triangle": triangle === "top-left",
      "top-right-triangle": triangle === "top-right",
      "bottom-left-triangle": triangle === "bottom-left",
      "bottom-right-triangle": triangle === "bottom-right"
    });
    var handleChange = function handleChange2(hex, e) {
      return onChange({ hex, source: "hex" }, e);
    };
    return import_react63.default.createElement(
      "div",
      { style: styles5.card, className: "github-picker " + className },
      import_react63.default.createElement("div", { style: styles5.triangleShadow }),
      import_react63.default.createElement("div", { style: styles5.triangle }),
      map_default(colors, function(c) {
        return import_react63.default.createElement(GithubSwatch_default, {
          color: c,
          key: c,
          onClick: handleChange,
          onSwatchHover
        });
      })
    );
  };
  Github.propTypes = {
    width: import_prop_types126.default.oneOfType([import_prop_types126.default.string, import_prop_types126.default.number]),
    colors: import_prop_types126.default.arrayOf(import_prop_types126.default.string),
    triangle: import_prop_types126.default.oneOf(["hide", "top-left", "top-right", "bottom-left", "bottom-right"]),
    styles: import_prop_types126.default.object
  };
  Github.defaultProps = {
    width: 200,
    colors: ["#B80000", "#DB3E00", "#FCCB00", "#008B02", "#006B76", "#1273DE", "#004DCF", "#5300EB", "#EB9694", "#FAD0C3", "#FEF3BD", "#C1E1C5", "#BEDADC", "#C4DEF6", "#BED3F3", "#D4C4FB"],
    triangle: "top-left",
    styles: {}
  };
  var Github_default = ColorWrap_default(Github);

  // node_modules/react-color/es/components/hue/Hue.js
  var import_react65 = __toESM(require_react());
  var import_prop_types127 = __toESM(require_prop_types());
  var import_reactcss24 = __toESM(require_lib());

  // node_modules/react-color/es/components/hue/HuePointer.js
  var import_react64 = __toESM(require_react());
  var import_reactcss23 = __toESM(require_lib());
  var SliderPointer = function SliderPointer2(_ref) {
    var direction = _ref.direction;
    var styles5 = (0, import_reactcss23.default)({
      "default": {
        picker: {
          width: "18px",
          height: "18px",
          borderRadius: "50%",
          transform: "translate(-9px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      },
      "vertical": {
        picker: {
          transform: "translate(-3px, -9px)"
        }
      }
    }, { vertical: direction === "vertical" });
    return import_react64.default.createElement("div", { style: styles5.picker });
  };
  var HuePointer_default = SliderPointer;

  // node_modules/react-color/es/components/hue/Hue.js
  var _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var HuePicker = function HuePicker2(_ref) {
    var width3 = _ref.width, height3 = _ref.height, onChange = _ref.onChange, hsl = _ref.hsl, direction = _ref.direction, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss24.default)(merge_default3({
      "default": {
        picker: {
          position: "relative",
          width: width3,
          height: height3
        },
        hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    var handleChange = function handleChange2(data) {
      return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });
    };
    return import_react65.default.createElement(
      "div",
      { style: styles5.picker, className: "hue-picker " + className },
      import_react65.default.createElement(Hue_default, _extends9({}, styles5.hue, {
        hsl,
        pointer,
        onChange: handleChange,
        direction
      }))
    );
  };
  HuePicker.propTypes = {
    styles: import_prop_types127.default.object
  };
  HuePicker.defaultProps = {
    width: "316px",
    height: "16px",
    direction: "horizontal",
    pointer: HuePointer_default,
    styles: {}
  };
  var Hue_default2 = ColorWrap_default(HuePicker);

  // node_modules/react-color/es/components/material/Material.js
  var import_react66 = __toESM(require_react());
  var import_reactcss25 = __toESM(require_lib());
  var Material = function Material2(_ref) {
    var onChange = _ref.onChange, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss25.default)(merge_default3({
      "default": {
        material: {
          width: "98px",
          height: "98px",
          padding: "16px",
          fontFamily: "Roboto"
        },
        HEXwrap: {
          position: "relative"
        },
        HEXinput: {
          width: "100%",
          marginTop: "12px",
          fontSize: "15px",
          color: "#333",
          padding: "0px",
          border: "0px",
          borderBottom: "2px solid " + hex,
          outline: "none",
          height: "30px"
        },
        HEXlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          fontSize: "11px",
          color: "#999999",
          textTransform: "capitalize"
        },
        Hex: {
          style: {}
        },
        RGBwrap: {
          position: "relative"
        },
        RGBinput: {
          width: "100%",
          marginTop: "12px",
          fontSize: "15px",
          color: "#333",
          padding: "0px",
          border: "0px",
          borderBottom: "1px solid #eee",
          outline: "none",
          height: "30px"
        },
        RGBlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          fontSize: "11px",
          color: "#999999",
          textTransform: "capitalize"
        },
        split: {
          display: "flex",
          marginRight: "-10px",
          paddingTop: "11px"
        },
        third: {
          flex: "1",
          paddingRight: "10px"
        }
      }
    }, passedStyles));
    var handleChange = function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      }
    };
    return import_react66.default.createElement(
      Raised_default,
      { styles: passedStyles },
      import_react66.default.createElement(
        "div",
        { style: styles5.material, className: "material-picker " + className },
        import_react66.default.createElement(EditableInput_default, {
          style: { wrap: styles5.HEXwrap, input: styles5.HEXinput, label: styles5.HEXlabel },
          label: "hex",
          value: hex,
          onChange: handleChange
        }),
        import_react66.default.createElement(
          "div",
          { style: styles5.split, className: "flexbox-fix" },
          import_react66.default.createElement(
            "div",
            { style: styles5.third },
            import_react66.default.createElement(EditableInput_default, {
              style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
              label: "r",
              value: rgb.r,
              onChange: handleChange
            })
          ),
          import_react66.default.createElement(
            "div",
            { style: styles5.third },
            import_react66.default.createElement(EditableInput_default, {
              style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
              label: "g",
              value: rgb.g,
              onChange: handleChange
            })
          ),
          import_react66.default.createElement(
            "div",
            { style: styles5.third },
            import_react66.default.createElement(EditableInput_default, {
              style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
              label: "b",
              value: rgb.b,
              onChange: handleChange
            })
          )
        )
      )
    );
  };
  var Material_default = ColorWrap_default(Material);

  // node_modules/react-color/es/components/photoshop/Photoshop.js
  var import_react72 = __toESM(require_react());
  var import_prop_types128 = __toESM(require_prop_types());
  var import_reactcss31 = __toESM(require_lib());

  // node_modules/react-color/es/components/photoshop/PhotoshopFields.js
  var import_react67 = __toESM(require_react());
  var import_reactcss26 = __toESM(require_lib());
  var PhotoshopPicker = function PhotoshopPicker2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsv = _ref.hsv, hex = _ref.hex;
    var styles5 = (0, import_reactcss26.default)({
      "default": {
        fields: {
          paddingTop: "5px",
          paddingBottom: "9px",
          width: "80px",
          position: "relative"
        },
        divider: {
          height: "5px"
        },
        RGBwrap: {
          position: "relative"
        },
        RGBinput: {
          marginLeft: "40%",
          width: "40%",
          height: "18px",
          border: "1px solid #888888",
          boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
          marginBottom: "5px",
          fontSize: "13px",
          paddingLeft: "3px",
          marginRight: "10px"
        },
        RGBlabel: {
          left: "0px",
          top: "0px",
          width: "34px",
          textTransform: "uppercase",
          fontSize: "13px",
          height: "18px",
          lineHeight: "22px",
          position: "absolute"
        },
        HEXwrap: {
          position: "relative"
        },
        HEXinput: {
          marginLeft: "20%",
          width: "80%",
          height: "18px",
          border: "1px solid #888888",
          boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
          marginBottom: "6px",
          fontSize: "13px",
          paddingLeft: "3px"
        },
        HEXlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          width: "14px",
          textTransform: "uppercase",
          fontSize: "13px",
          height: "18px",
          lineHeight: "22px"
        },
        fieldSymbols: {
          position: "absolute",
          top: "5px",
          right: "-7px",
          fontSize: "13px"
        },
        symbol: {
          height: "20px",
          lineHeight: "22px",
          paddingBottom: "7px"
        }
      }
    });
    var handleChange = function handleChange2(data, e) {
      if (data["#"]) {
        isValidHex(data["#"]) && onChange({
          hex: data["#"],
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      } else if (data.h || data.s || data.v) {
        onChange({
          h: data.h || hsv.h,
          s: data.s || hsv.s,
          v: data.v || hsv.v,
          source: "hsv"
        }, e);
      }
    };
    return import_react67.default.createElement(
      "div",
      { style: styles5.fields },
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "h",
        value: Math.round(hsv.h),
        onChange: handleChange
      }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "s",
        value: Math.round(hsv.s * 100),
        onChange: handleChange
      }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "v",
        value: Math.round(hsv.v * 100),
        onChange: handleChange
      }),
      import_react67.default.createElement("div", { style: styles5.divider }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "r",
        value: rgb.r,
        onChange: handleChange
      }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "g",
        value: rgb.g,
        onChange: handleChange
      }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.RGBwrap, input: styles5.RGBinput, label: styles5.RGBlabel },
        label: "b",
        value: rgb.b,
        onChange: handleChange
      }),
      import_react67.default.createElement("div", { style: styles5.divider }),
      import_react67.default.createElement(EditableInput_default, {
        style: { wrap: styles5.HEXwrap, input: styles5.HEXinput, label: styles5.HEXlabel },
        label: "#",
        value: hex.replace("#", ""),
        onChange: handleChange
      }),
      import_react67.default.createElement(
        "div",
        { style: styles5.fieldSymbols },
        import_react67.default.createElement(
          "div",
          { style: styles5.symbol },
          "\xB0"
        ),
        import_react67.default.createElement(
          "div",
          { style: styles5.symbol },
          "%"
        ),
        import_react67.default.createElement(
          "div",
          { style: styles5.symbol },
          "%"
        )
      )
    );
  };
  var PhotoshopFields_default = PhotoshopPicker;

  // node_modules/react-color/es/components/photoshop/PhotoshopPointerCircle.js
  var import_react68 = __toESM(require_react());
  var import_reactcss27 = __toESM(require_lib());
  var PhotoshopPointerCircle = function PhotoshopPointerCircle2(_ref) {
    var hsl = _ref.hsl;
    var styles5 = (0, import_reactcss27.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          boxShadow: "inset 0 0 0 1px #fff",
          transform: "translate(-6px, -6px)"
        }
      },
      "black-outline": {
        picker: {
          boxShadow: "inset 0 0 0 1px #000"
        }
      }
    }, { "black-outline": hsl.l > 0.5 });
    return import_react68.default.createElement("div", { style: styles5.picker });
  };
  var PhotoshopPointerCircle_default = PhotoshopPointerCircle;

  // node_modules/react-color/es/components/photoshop/PhotoshopPointer.js
  var import_react69 = __toESM(require_react());
  var import_reactcss28 = __toESM(require_lib());
  var PhotoshopPointerCircle3 = function PhotoshopPointerCircle4() {
    var styles5 = (0, import_reactcss28.default)({
      "default": {
        triangle: {
          width: 0,
          height: 0,
          borderStyle: "solid",
          borderWidth: "4px 0 4px 6px",
          borderColor: "transparent transparent transparent #fff",
          position: "absolute",
          top: "1px",
          left: "1px"
        },
        triangleBorder: {
          width: 0,
          height: 0,
          borderStyle: "solid",
          borderWidth: "5px 0 5px 8px",
          borderColor: "transparent transparent transparent #555"
        },
        left: {
          Extend: "triangleBorder",
          transform: "translate(-13px, -4px)"
        },
        leftInside: {
          Extend: "triangle",
          transform: "translate(-8px, -5px)"
        },
        right: {
          Extend: "triangleBorder",
          transform: "translate(20px, -14px) rotate(180deg)"
        },
        rightInside: {
          Extend: "triangle",
          transform: "translate(-8px, -5px)"
        }
      }
    });
    return import_react69.default.createElement(
      "div",
      { style: styles5.pointer },
      import_react69.default.createElement(
        "div",
        { style: styles5.left },
        import_react69.default.createElement("div", { style: styles5.leftInside })
      ),
      import_react69.default.createElement(
        "div",
        { style: styles5.right },
        import_react69.default.createElement("div", { style: styles5.rightInside })
      )
    );
  };
  var PhotoshopPointer_default = PhotoshopPointerCircle3;

  // node_modules/react-color/es/components/photoshop/PhotoshopButton.js
  var import_react70 = __toESM(require_react());
  var import_reactcss29 = __toESM(require_lib());
  var PhotoshopButton = function PhotoshopButton2(_ref) {
    var onClick = _ref.onClick, label = _ref.label, children = _ref.children, active = _ref.active;
    var styles5 = (0, import_reactcss29.default)({
      "default": {
        button: {
          backgroundImage: "linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",
          border: "1px solid #878787",
          borderRadius: "2px",
          height: "20px",
          boxShadow: "0 1px 0 0 #EAEAEA",
          fontSize: "14px",
          color: "#000",
          lineHeight: "20px",
          textAlign: "center",
          marginBottom: "10px",
          cursor: "pointer"
        }
      },
      "active": {
        button: {
          boxShadow: "0 0 0 1px #878787"
        }
      }
    }, { active });
    return import_react70.default.createElement(
      "div",
      { style: styles5.button, onClick },
      label || children
    );
  };
  var PhotoshopButton_default = PhotoshopButton;

  // node_modules/react-color/es/components/photoshop/PhotoshopPreviews.js
  var import_react71 = __toESM(require_react());
  var import_reactcss30 = __toESM(require_lib());
  var PhotoshopPreviews = function PhotoshopPreviews2(_ref) {
    var rgb = _ref.rgb, currentColor = _ref.currentColor;
    var styles5 = (0, import_reactcss30.default)({
      "default": {
        swatches: {
          border: "1px solid #B3B3B3",
          borderBottom: "1px solid #F0F0F0",
          marginBottom: "2px",
          marginTop: "1px"
        },
        new: {
          height: "34px",
          background: "rgb(" + rgb.r + "," + rgb.g + ", " + rgb.b + ")",
          boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"
        },
        current: {
          height: "34px",
          background: currentColor,
          boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"
        },
        label: {
          fontSize: "14px",
          color: "#000",
          textAlign: "center"
        }
      }
    });
    return import_react71.default.createElement(
      "div",
      null,
      import_react71.default.createElement(
        "div",
        { style: styles5.label },
        "new"
      ),
      import_react71.default.createElement(
        "div",
        { style: styles5.swatches },
        import_react71.default.createElement("div", { style: styles5.new }),
        import_react71.default.createElement("div", { style: styles5.current })
      ),
      import_react71.default.createElement(
        "div",
        { style: styles5.label },
        "current"
      )
    );
  };
  var PhotoshopPreviews_default = PhotoshopPreviews;

  // node_modules/react-color/es/components/photoshop/Photoshop.js
  var _createClass8 = /* @__PURE__ */ function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn8(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  function _inherits8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var Photoshop = function(_React$Component) {
    _inherits8(Photoshop2, _React$Component);
    function Photoshop2(props) {
      _classCallCheck8(this, Photoshop2);
      var _this = _possibleConstructorReturn8(this, (Photoshop2.__proto__ || Object.getPrototypeOf(Photoshop2)).call(this));
      _this.state = {
        currentColor: props.hex
      };
      return _this;
    }
    _createClass8(Photoshop2, [{
      key: "render",
      value: function render3() {
        var _props = this.props, _props$styles = _props.styles, passedStyles = _props$styles === void 0 ? {} : _props$styles, _props$className = _props.className, className = _props$className === void 0 ? "" : _props$className;
        var styles5 = (0, import_reactcss31.default)(merge_default3({
          "default": {
            picker: {
              background: "#DCDCDC",
              borderRadius: "4px",
              boxShadow: "0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",
              boxSizing: "initial",
              width: "513px"
            },
            head: {
              backgroundImage: "linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",
              borderBottom: "1px solid #B1B1B1",
              boxShadow: "inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",
              height: "23px",
              lineHeight: "24px",
              borderRadius: "4px 4px 0 0",
              fontSize: "13px",
              color: "#4D4D4D",
              textAlign: "center"
            },
            body: {
              padding: "15px 15px 0",
              display: "flex"
            },
            saturation: {
              width: "256px",
              height: "256px",
              position: "relative",
              border: "2px solid #B3B3B3",
              borderBottom: "2px solid #F0F0F0",
              overflow: "hidden"
            },
            hue: {
              position: "relative",
              height: "256px",
              width: "19px",
              marginLeft: "10px",
              border: "2px solid #B3B3B3",
              borderBottom: "2px solid #F0F0F0"
            },
            controls: {
              width: "180px",
              marginLeft: "10px"
            },
            top: {
              display: "flex"
            },
            previews: {
              width: "60px"
            },
            actions: {
              flex: "1",
              marginLeft: "20px"
            }
          }
        }, passedStyles));
        return import_react72.default.createElement(
          "div",
          { style: styles5.picker, className: "photoshop-picker " + className },
          import_react72.default.createElement(
            "div",
            { style: styles5.head },
            this.props.header
          ),
          import_react72.default.createElement(
            "div",
            { style: styles5.body, className: "flexbox-fix" },
            import_react72.default.createElement(
              "div",
              { style: styles5.saturation },
              import_react72.default.createElement(Saturation_default, {
                hsl: this.props.hsl,
                hsv: this.props.hsv,
                pointer: PhotoshopPointerCircle_default,
                onChange: this.props.onChange
              })
            ),
            import_react72.default.createElement(
              "div",
              { style: styles5.hue },
              import_react72.default.createElement(Hue_default, {
                direction: "vertical",
                hsl: this.props.hsl,
                pointer: PhotoshopPointer_default,
                onChange: this.props.onChange
              })
            ),
            import_react72.default.createElement(
              "div",
              { style: styles5.controls },
              import_react72.default.createElement(
                "div",
                { style: styles5.top, className: "flexbox-fix" },
                import_react72.default.createElement(
                  "div",
                  { style: styles5.previews },
                  import_react72.default.createElement(PhotoshopPreviews_default, {
                    rgb: this.props.rgb,
                    currentColor: this.state.currentColor
                  })
                ),
                import_react72.default.createElement(
                  "div",
                  { style: styles5.actions },
                  import_react72.default.createElement(PhotoshopButton_default, { label: "OK", onClick: this.props.onAccept, active: true }),
                  import_react72.default.createElement(PhotoshopButton_default, { label: "Cancel", onClick: this.props.onCancel }),
                  import_react72.default.createElement(PhotoshopFields_default, {
                    onChange: this.props.onChange,
                    rgb: this.props.rgb,
                    hsv: this.props.hsv,
                    hex: this.props.hex
                  })
                )
              )
            )
          )
        );
      }
    }]);
    return Photoshop2;
  }(import_react72.default.Component);
  Photoshop.propTypes = {
    header: import_prop_types128.default.string,
    styles: import_prop_types128.default.object
  };
  Photoshop.defaultProps = {
    header: "Color Picker",
    styles: {}
  };
  var Photoshop_default = ColorWrap_default(Photoshop);

  // node_modules/react-color/es/components/sketch/Sketch.js
  var import_react75 = __toESM(require_react());
  var import_prop_types130 = __toESM(require_prop_types());
  var import_reactcss34 = __toESM(require_lib());

  // node_modules/react-color/es/components/sketch/SketchFields.js
  var import_react73 = __toESM(require_react());
  var import_reactcss32 = __toESM(require_lib());
  var SketchFields = function SketchFields2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, disableAlpha = _ref.disableAlpha;
    var styles5 = (0, import_reactcss32.default)({
      "default": {
        fields: {
          display: "flex",
          paddingTop: "4px"
        },
        single: {
          flex: "1",
          paddingLeft: "6px"
        },
        alpha: {
          flex: "1",
          paddingLeft: "6px"
        },
        double: {
          flex: "2"
        },
        input: {
          width: "80%",
          padding: "4px 10% 3px",
          border: "none",
          boxShadow: "inset 0 0 0 1px #ccc",
          fontSize: "11px"
        },
        label: {
          display: "block",
          textAlign: "center",
          fontSize: "11px",
          color: "#222",
          paddingTop: "3px",
          paddingBottom: "4px",
          textTransform: "capitalize"
        }
      },
      "disableAlpha": {
        alpha: {
          display: "none"
        }
      }
    }, { disableAlpha });
    var handleChange = function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          a: rgb.a,
          source: "rgb"
        }, e);
      } else if (data.a) {
        if (data.a < 0) {
          data.a = 0;
        } else if (data.a > 100) {
          data.a = 100;
        }
        data.a /= 100;
        onChange({
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: data.a,
          source: "rgb"
        }, e);
      }
    };
    return import_react73.default.createElement(
      "div",
      { style: styles5.fields, className: "flexbox-fix" },
      import_react73.default.createElement(
        "div",
        { style: styles5.double },
        import_react73.default.createElement(EditableInput_default, {
          style: { input: styles5.input, label: styles5.label },
          label: "hex",
          value: hex.replace("#", ""),
          onChange: handleChange
        })
      ),
      import_react73.default.createElement(
        "div",
        { style: styles5.single },
        import_react73.default.createElement(EditableInput_default, {
          style: { input: styles5.input, label: styles5.label },
          label: "r",
          value: rgb.r,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react73.default.createElement(
        "div",
        { style: styles5.single },
        import_react73.default.createElement(EditableInput_default, {
          style: { input: styles5.input, label: styles5.label },
          label: "g",
          value: rgb.g,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react73.default.createElement(
        "div",
        { style: styles5.single },
        import_react73.default.createElement(EditableInput_default, {
          style: { input: styles5.input, label: styles5.label },
          label: "b",
          value: rgb.b,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react73.default.createElement(
        "div",
        { style: styles5.alpha },
        import_react73.default.createElement(EditableInput_default, {
          style: { input: styles5.input, label: styles5.label },
          label: "a",
          value: Math.round(rgb.a * 100),
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "100"
        })
      )
    );
  };
  var SketchFields_default = SketchFields;

  // node_modules/react-color/es/components/sketch/SketchPresetColors.js
  var import_react74 = __toESM(require_react());
  var import_prop_types129 = __toESM(require_prop_types());
  var import_reactcss33 = __toESM(require_lib());
  var _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var SketchPresetColors = function SketchPresetColors2(_ref) {
    var colors = _ref.colors, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover;
    var styles5 = (0, import_reactcss33.default)({
      "default": {
        colors: {
          margin: "0 -10px",
          padding: "10px 0 0 10px",
          borderTop: "1px solid #eee",
          display: "flex",
          flexWrap: "wrap",
          position: "relative"
        },
        swatchWrap: {
          width: "16px",
          height: "16px",
          margin: "0 10px 10px 0"
        },
        swatch: {
          borderRadius: "3px",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15)"
        }
      },
      "no-presets": {
        colors: {
          display: "none"
        }
      }
    }, {
      "no-presets": !colors || !colors.length
    });
    var handleClick = function handleClick2(hex, e) {
      onClick({
        hex,
        source: "hex"
      }, e);
    };
    return import_react74.default.createElement(
      "div",
      { style: styles5.colors, className: "flexbox-fix" },
      colors.map(function(colorObjOrString) {
        var c = typeof colorObjOrString === "string" ? { color: colorObjOrString } : colorObjOrString;
        var key = "" + c.color + (c.title || "");
        return import_react74.default.createElement(
          "div",
          { key, style: styles5.swatchWrap },
          import_react74.default.createElement(Swatch_default, _extends10({}, c, {
            style: styles5.swatch,
            onClick: handleClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px " + c.color
            }
          }))
        );
      })
    );
  };
  SketchPresetColors.propTypes = {
    colors: import_prop_types129.default.arrayOf(import_prop_types129.default.oneOfType([import_prop_types129.default.string, import_prop_types129.default.shape({
      color: import_prop_types129.default.string,
      title: import_prop_types129.default.string
    })])).isRequired
  };
  var SketchPresetColors_default = SketchPresetColors;

  // node_modules/react-color/es/components/sketch/Sketch.js
  var _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var Sketch = function Sketch2(_ref) {
    var width3 = _ref.width, rgb = _ref.rgb, hex = _ref.hex, hsv = _ref.hsv, hsl = _ref.hsl, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, disableAlpha = _ref.disableAlpha, presetColors = _ref.presetColors, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss34.default)(merge_default3({
      "default": _extends11({
        picker: {
          width: width3,
          padding: "10px 10px 0",
          boxSizing: "initial",
          background: "#fff",
          borderRadius: "4px",
          boxShadow: "0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"
        },
        saturation: {
          width: "100%",
          paddingBottom: "75%",
          position: "relative",
          overflow: "hidden"
        },
        Saturation: {
          radius: "3px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        controls: {
          display: "flex"
        },
        sliders: {
          padding: "4px 0",
          flex: "1"
        },
        color: {
          width: "24px",
          height: "24px",
          position: "relative",
          marginTop: "4px",
          marginLeft: "4px",
          borderRadius: "3px"
        },
        activeColor: {
          absolute: "0px 0px 0px 0px",
          borderRadius: "2px",
          background: "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        hue: {
          position: "relative",
          height: "10px",
          overflow: "hidden"
        },
        Hue: {
          radius: "2px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        alpha: {
          position: "relative",
          height: "10px",
          marginTop: "4px",
          overflow: "hidden"
        },
        Alpha: {
          radius: "2px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        }
      }, passedStyles),
      "disableAlpha": {
        color: {
          height: "10px"
        },
        hue: {
          height: "10px"
        },
        alpha: {
          display: "none"
        }
      }
    }, passedStyles), { disableAlpha });
    return import_react75.default.createElement(
      "div",
      { style: styles5.picker, className: "sketch-picker " + className },
      import_react75.default.createElement(
        "div",
        { style: styles5.saturation },
        import_react75.default.createElement(Saturation_default, {
          style: styles5.Saturation,
          hsl,
          hsv,
          onChange
        })
      ),
      import_react75.default.createElement(
        "div",
        { style: styles5.controls, className: "flexbox-fix" },
        import_react75.default.createElement(
          "div",
          { style: styles5.sliders },
          import_react75.default.createElement(
            "div",
            { style: styles5.hue },
            import_react75.default.createElement(Hue_default, {
              style: styles5.Hue,
              hsl,
              onChange
            })
          ),
          import_react75.default.createElement(
            "div",
            { style: styles5.alpha },
            import_react75.default.createElement(Alpha_default, {
              style: styles5.Alpha,
              rgb,
              hsl,
              renderers,
              onChange
            })
          )
        ),
        import_react75.default.createElement(
          "div",
          { style: styles5.color },
          import_react75.default.createElement(Checkboard_default, null),
          import_react75.default.createElement("div", { style: styles5.activeColor })
        )
      ),
      import_react75.default.createElement(SketchFields_default, {
        rgb,
        hsl,
        hex,
        onChange,
        disableAlpha
      }),
      import_react75.default.createElement(SketchPresetColors_default, {
        colors: presetColors,
        onClick: onChange,
        onSwatchHover
      })
    );
  };
  Sketch.propTypes = {
    disableAlpha: import_prop_types130.default.bool,
    width: import_prop_types130.default.oneOfType([import_prop_types130.default.string, import_prop_types130.default.number]),
    styles: import_prop_types130.default.object
  };
  Sketch.defaultProps = {
    disableAlpha: false,
    width: 200,
    styles: {},
    presetColors: ["#D0021B", "#F5A623", "#F8E71C", "#8B572A", "#7ED321", "#417505", "#BD10E0", "#9013FE", "#4A90E2", "#50E3C2", "#B8E986", "#000000", "#4A4A4A", "#9B9B9B", "#FFFFFF"]
  };
  var Sketch_default = ColorWrap_default(Sketch);

  // node_modules/react-color/es/components/slider/Slider.js
  var import_react79 = __toESM(require_react());
  var import_prop_types131 = __toESM(require_prop_types());
  var import_reactcss38 = __toESM(require_lib());

  // node_modules/react-color/es/components/slider/SliderSwatches.js
  var import_react77 = __toESM(require_react());
  var import_reactcss36 = __toESM(require_lib());

  // node_modules/react-color/es/components/slider/SliderSwatch.js
  var import_react76 = __toESM(require_react());
  var import_reactcss35 = __toESM(require_lib());
  var SliderSwatch = function SliderSwatch2(_ref) {
    var hsl = _ref.hsl, offset2 = _ref.offset, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, active = _ref.active, first = _ref.first, last = _ref.last;
    var styles5 = (0, import_reactcss35.default)({
      "default": {
        swatch: {
          height: "12px",
          background: "hsl(" + hsl.h + ", 50%, " + offset2 * 100 + "%)",
          cursor: "pointer"
        }
      },
      "first": {
        swatch: {
          borderRadius: "2px 0 0 2px"
        }
      },
      "last": {
        swatch: {
          borderRadius: "0 2px 2px 0"
        }
      },
      "active": {
        swatch: {
          transform: "scaleY(1.8)",
          borderRadius: "3.6px/2px"
        }
      }
    }, { active, first, last });
    var handleClick = function handleClick2(e) {
      return onClick({
        h: hsl.h,
        s: 0.5,
        l: offset2,
        source: "hsl"
      }, e);
    };
    return import_react76.default.createElement("div", { style: styles5.swatch, onClick: handleClick });
  };
  var SliderSwatch_default = SliderSwatch;

  // node_modules/react-color/es/components/slider/SliderSwatches.js
  var SliderSwatches = function SliderSwatches2(_ref) {
    var onClick = _ref.onClick, hsl = _ref.hsl;
    var styles5 = (0, import_reactcss36.default)({
      "default": {
        swatches: {
          marginTop: "20px"
        },
        swatch: {
          boxSizing: "border-box",
          width: "20%",
          paddingRight: "1px",
          float: "left"
        },
        clear: {
          clear: "both"
        }
      }
    });
    var epsilon = 0.1;
    return import_react77.default.createElement(
      "div",
      { style: styles5.swatches },
      import_react77.default.createElement(
        "div",
        { style: styles5.swatch },
        import_react77.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".80",
          active: Math.abs(hsl.l - 0.8) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          first: true
        })
      ),
      import_react77.default.createElement(
        "div",
        { style: styles5.swatch },
        import_react77.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".65",
          active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react77.default.createElement(
        "div",
        { style: styles5.swatch },
        import_react77.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".50",
          active: Math.abs(hsl.l - 0.5) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react77.default.createElement(
        "div",
        { style: styles5.swatch },
        import_react77.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".35",
          active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react77.default.createElement(
        "div",
        { style: styles5.swatch },
        import_react77.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".20",
          active: Math.abs(hsl.l - 0.2) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          last: true
        })
      ),
      import_react77.default.createElement("div", { style: styles5.clear })
    );
  };
  var SliderSwatches_default = SliderSwatches;

  // node_modules/react-color/es/components/slider/SliderPointer.js
  var import_react78 = __toESM(require_react());
  var import_reactcss37 = __toESM(require_lib());
  var SliderPointer3 = function SliderPointer4() {
    var styles5 = (0, import_reactcss37.default)({
      "default": {
        picker: {
          width: "14px",
          height: "14px",
          borderRadius: "6px",
          transform: "translate(-7px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      }
    });
    return import_react78.default.createElement("div", { style: styles5.picker });
  };
  var SliderPointer_default = SliderPointer3;

  // node_modules/react-color/es/components/slider/Slider.js
  var Slider3 = function Slider4(_ref) {
    var hsl = _ref.hsl, onChange = _ref.onChange, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss38.default)(merge_default3({
      "default": {
        hue: {
          height: "12px",
          position: "relative"
        },
        Hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    return import_react79.default.createElement(
      "div",
      { style: styles5.wrap || {}, className: "slider-picker " + className },
      import_react79.default.createElement(
        "div",
        { style: styles5.hue },
        import_react79.default.createElement(Hue_default, {
          style: styles5.Hue,
          hsl,
          pointer,
          onChange
        })
      ),
      import_react79.default.createElement(
        "div",
        { style: styles5.swatches },
        import_react79.default.createElement(SliderSwatches_default, { hsl, onClick: onChange })
      )
    );
  };
  Slider3.propTypes = {
    styles: import_prop_types131.default.object
  };
  Slider3.defaultProps = {
    pointer: SliderPointer_default,
    styles: {}
  };
  var Slider_default2 = ColorWrap_default(Slider3);

  // node_modules/react-color/es/components/swatches/Swatches.js
  var import_react82 = __toESM(require_react());
  var import_prop_types132 = __toESM(require_prop_types());
  var import_reactcss41 = __toESM(require_lib());

  // node_modules/react-color/es/components/swatches/SwatchesGroup.js
  var import_react81 = __toESM(require_react());
  var import_reactcss40 = __toESM(require_lib());

  // node_modules/react-color/es/components/swatches/SwatchesColor.js
  var import_react80 = __toESM(require_react());
  var import_reactcss39 = __toESM(require_lib());
  var import_CheckIcon = __toESM(require_CheckIcon());
  var SwatchesColor = function SwatchesColor2(_ref) {
    var color3 = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, first = _ref.first, last = _ref.last, active = _ref.active;
    var styles5 = (0, import_reactcss39.default)({
      "default": {
        color: {
          width: "40px",
          height: "24px",
          cursor: "pointer",
          background: color3,
          marginBottom: "1px"
        },
        check: {
          color: getContrastingColor(color3),
          marginLeft: "8px",
          display: "none"
        }
      },
      "first": {
        color: {
          overflow: "hidden",
          borderRadius: "2px 2px 0 0"
        }
      },
      "last": {
        color: {
          overflow: "hidden",
          borderRadius: "0 0 2px 2px"
        }
      },
      "active": {
        check: {
          display: "block"
        }
      },
      "color-#FFFFFF": {
        color: {
          boxShadow: "inset 0 0 0 1px #ddd"
        },
        check: {
          color: "#333"
        }
      },
      "transparent": {
        check: {
          color: "#333"
        }
      }
    }, {
      first,
      last,
      active,
      "color-#FFFFFF": color3 === "#FFFFFF",
      "transparent": color3 === "transparent"
    });
    return import_react80.default.createElement(
      Swatch_default,
      {
        color: color3,
        style: styles5.color,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: "0 0 4px " + color3 }
      },
      import_react80.default.createElement(
        "div",
        { style: styles5.check },
        import_react80.default.createElement(import_CheckIcon.default, null)
      )
    );
  };
  var SwatchesColor_default = SwatchesColor;

  // node_modules/react-color/es/components/swatches/SwatchesGroup.js
  var SwatchesGroup = function SwatchesGroup2(_ref) {
    var onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, group = _ref.group, active = _ref.active;
    var styles5 = (0, import_reactcss40.default)({
      "default": {
        group: {
          paddingBottom: "10px",
          width: "40px",
          float: "left",
          marginRight: "10px"
        }
      }
    });
    return import_react81.default.createElement(
      "div",
      { style: styles5.group },
      map_default(group, function(color3, i) {
        return import_react81.default.createElement(SwatchesColor_default, {
          key: color3,
          color: color3,
          active: color3.toLowerCase() === active,
          first: i === 0,
          last: i === group.length - 1,
          onClick,
          onSwatchHover
        });
      })
    );
  };
  var SwatchesGroup_default = SwatchesGroup;

  // node_modules/react-color/es/components/swatches/Swatches.js
  var Swatches = function Swatches2(_ref) {
    var width3 = _ref.width, height3 = _ref.height, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss41.default)(merge_default3({
      "default": {
        picker: {
          width: width3,
          height: height3
        },
        overflow: {
          height: height3,
          overflowY: "scroll"
        },
        body: {
          padding: "16px 0 6px 16px"
        },
        clear: {
          clear: "both"
        }
      }
    }, passedStyles));
    var handleChange = function handleChange2(data, e) {
      return onChange({ hex: data, source: "hex" }, e);
    };
    return import_react82.default.createElement(
      "div",
      { style: styles5.picker, className: "swatches-picker " + className },
      import_react82.default.createElement(
        Raised_default,
        null,
        import_react82.default.createElement(
          "div",
          { style: styles5.overflow },
          import_react82.default.createElement(
            "div",
            { style: styles5.body },
            map_default(colors, function(group) {
              return import_react82.default.createElement(SwatchesGroup_default, {
                key: group.toString(),
                group,
                active: hex,
                onClick: handleChange,
                onSwatchHover
              });
            }),
            import_react82.default.createElement("div", { style: styles5.clear })
          )
        )
      )
    );
  };
  Swatches.propTypes = {
    width: import_prop_types132.default.oneOfType([import_prop_types132.default.string, import_prop_types132.default.number]),
    height: import_prop_types132.default.oneOfType([import_prop_types132.default.string, import_prop_types132.default.number]),
    colors: import_prop_types132.default.arrayOf(import_prop_types132.default.arrayOf(import_prop_types132.default.string)),
    styles: import_prop_types132.default.object
    /* eslint-disable max-len */
  };
  Swatches.defaultProps = {
    width: 320,
    height: 240,
    colors: [[red2["900"], red2["700"], red2["500"], red2["300"], red2["100"]], [pink["900"], pink["700"], pink["500"], pink["300"], pink["100"]], [purple2["900"], purple2["700"], purple2["500"], purple2["300"], purple2["100"]], [deepPurple["900"], deepPurple["700"], deepPurple["500"], deepPurple["300"], deepPurple["100"]], [indigo["900"], indigo["700"], indigo["500"], indigo["300"], indigo["100"]], [blue2["900"], blue2["700"], blue2["500"], blue2["300"], blue2["100"]], [lightBlue2["900"], lightBlue2["700"], lightBlue2["500"], lightBlue2["300"], lightBlue2["100"]], [cyan["900"], cyan["700"], cyan["500"], cyan["300"], cyan["100"]], [teal["900"], teal["700"], teal["500"], teal["300"], teal["100"]], ["#194D33", green2["700"], green2["500"], green2["300"], green2["100"]], [lightGreen["900"], lightGreen["700"], lightGreen["500"], lightGreen["300"], lightGreen["100"]], [lime["900"], lime["700"], lime["500"], lime["300"], lime["100"]], [yellow["900"], yellow["700"], yellow["500"], yellow["300"], yellow["100"]], [amber["900"], amber["700"], amber["500"], amber["300"], amber["100"]], [orange2["900"], orange2["700"], orange2["500"], orange2["300"], orange2["100"]], [deepOrange["900"], deepOrange["700"], deepOrange["500"], deepOrange["300"], deepOrange["100"]], [brown["900"], brown["700"], brown["500"], brown["300"], brown["100"]], [blueGrey["900"], blueGrey["700"], blueGrey["500"], blueGrey["300"], blueGrey["100"]], ["#000000", "#525252", "#969696", "#D9D9D9", "#FFFFFF"]],
    styles: {}
  };
  var Swatches_default = ColorWrap_default(Swatches);

  // node_modules/react-color/es/components/twitter/Twitter.js
  var import_react83 = __toESM(require_react());
  var import_prop_types133 = __toESM(require_prop_types());
  var import_reactcss42 = __toESM(require_lib());
  var Twitter = function Twitter2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors = _ref.colors, width3 = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss42.default)(merge_default3({
      "default": {
        card: {
          width: width3,
          background: "#fff",
          border: "0 solid rgba(0,0,0,0.25)",
          boxShadow: "0 1px 4px rgba(0,0,0,0.25)",
          borderRadius: "4px",
          position: "relative"
        },
        body: {
          padding: "15px 9px 9px 15px"
        },
        label: {
          fontSize: "18px",
          color: "#fff"
        },
        triangle: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 9px 10px 9px",
          borderColor: "transparent transparent #fff transparent",
          position: "absolute"
        },
        triangleShadow: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 9px 10px 9px",
          borderColor: "transparent transparent rgba(0,0,0,.1) transparent",
          position: "absolute"
        },
        hash: {
          background: "#F0F0F0",
          height: "30px",
          width: "30px",
          borderRadius: "4px 0 0 4px",
          float: "left",
          color: "#98A1A4",
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        },
        input: {
          width: "100px",
          fontSize: "14px",
          color: "#666",
          border: "0px",
          outline: "none",
          height: "28px",
          boxShadow: "inset 0 0 0 1px #F0F0F0",
          boxSizing: "content-box",
          borderRadius: "0 4px 4px 0",
          float: "left",
          paddingLeft: "8px"
        },
        swatch: {
          width: "30px",
          height: "30px",
          float: "left",
          borderRadius: "4px",
          margin: "0 6px 6px 0"
        },
        clear: {
          clear: "both"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        },
        triangleShadow: {
          display: "none"
        }
      },
      "top-left-triangle": {
        triangle: {
          top: "-10px",
          left: "12px"
        },
        triangleShadow: {
          top: "-11px",
          left: "12px"
        }
      },
      "top-right-triangle": {
        triangle: {
          top: "-10px",
          right: "12px"
        },
        triangleShadow: {
          top: "-11px",
          right: "12px"
        }
      }
    }, passedStyles), {
      "hide-triangle": triangle === "hide",
      "top-left-triangle": triangle === "top-left",
      "top-right-triangle": triangle === "top-right"
    });
    var handleChange = function handleChange2(hexcode, e) {
      isValidHex(hexcode) && onChange({
        hex: hexcode,
        source: "hex"
      }, e);
    };
    return import_react83.default.createElement(
      "div",
      { style: styles5.card, className: "twitter-picker " + className },
      import_react83.default.createElement("div", { style: styles5.triangleShadow }),
      import_react83.default.createElement("div", { style: styles5.triangle }),
      import_react83.default.createElement(
        "div",
        { style: styles5.body },
        map_default(colors, function(c, i) {
          return import_react83.default.createElement(Swatch_default, {
            key: i,
            color: c,
            hex: c,
            style: styles5.swatch,
            onClick: handleChange,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c
            }
          });
        }),
        import_react83.default.createElement(
          "div",
          { style: styles5.hash },
          "#"
        ),
        import_react83.default.createElement(EditableInput_default, {
          label: null,
          style: { input: styles5.input },
          value: hex.replace("#", ""),
          onChange: handleChange
        }),
        import_react83.default.createElement("div", { style: styles5.clear })
      )
    );
  };
  Twitter.propTypes = {
    width: import_prop_types133.default.oneOfType([import_prop_types133.default.string, import_prop_types133.default.number]),
    triangle: import_prop_types133.default.oneOf(["hide", "top-left", "top-right"]),
    colors: import_prop_types133.default.arrayOf(import_prop_types133.default.string),
    styles: import_prop_types133.default.object
  };
  Twitter.defaultProps = {
    width: 276,
    colors: ["#FF6900", "#FCB900", "#7BDCB5", "#00D084", "#8ED1FC", "#0693E3", "#ABB8C3", "#EB144C", "#F78DA7", "#9900EF"],
    triangle: "top-left",
    styles: {}
  };
  var Twitter_default = ColorWrap_default(Twitter);

  // node_modules/react-color/es/components/google/Google.js
  var import_react87 = __toESM(require_react());
  var import_prop_types136 = __toESM(require_prop_types());
  var import_reactcss46 = __toESM(require_lib());

  // node_modules/react-color/es/components/google/GooglePointerCircle.js
  var import_react84 = __toESM(require_react());
  var import_reactcss43 = __toESM(require_lib());
  var import_prop_types134 = __toESM(require_prop_types());
  var GooglePointerCircle = function GooglePointerCircle2(props) {
    var styles5 = (0, import_reactcss43.default)({
      "default": {
        picker: {
          width: "20px",
          height: "20px",
          borderRadius: "22px",
          border: "2px #fff solid",
          transform: "translate(-12px, -13px)",
          background: "hsl(" + Math.round(props.hsl.h) + ", " + Math.round(props.hsl.s * 100) + "%, " + Math.round(props.hsl.l * 100) + "%)"
        }
      }
    });
    return import_react84.default.createElement("div", { style: styles5.picker });
  };
  GooglePointerCircle.propTypes = {
    hsl: import_prop_types134.default.shape({
      h: import_prop_types134.default.number,
      s: import_prop_types134.default.number,
      l: import_prop_types134.default.number,
      a: import_prop_types134.default.number
    })
  };
  GooglePointerCircle.defaultProps = {
    hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
  };
  var GooglePointerCircle_default = GooglePointerCircle;

  // node_modules/react-color/es/components/google/GooglePointer.js
  var import_react85 = __toESM(require_react());
  var import_reactcss44 = __toESM(require_lib());
  var import_prop_types135 = __toESM(require_prop_types());
  var GooglePointer = function GooglePointer2(props) {
    var styles5 = (0, import_reactcss44.default)({
      "default": {
        picker: {
          width: "20px",
          height: "20px",
          borderRadius: "22px",
          transform: "translate(-10px, -7px)",
          background: "hsl(" + Math.round(props.hsl.h) + ", 100%, 50%)",
          border: "2px white solid"
        }
      }
    });
    return import_react85.default.createElement("div", { style: styles5.picker });
  };
  GooglePointer.propTypes = {
    hsl: import_prop_types135.default.shape({
      h: import_prop_types135.default.number,
      s: import_prop_types135.default.number,
      l: import_prop_types135.default.number,
      a: import_prop_types135.default.number
    })
  };
  GooglePointer.defaultProps = {
    hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
  };
  var GooglePointer_default = GooglePointer;

  // node_modules/react-color/es/components/google/GoogleFields.js
  var import_react86 = __toESM(require_react());
  var import_reactcss45 = __toESM(require_lib());
  var GoogleFields = function GoogleFields2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, hsv = _ref.hsv;
    var handleChange = function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.rgb) {
        var values4 = data.rgb.split(",");
        isvalidColorString(data.rgb, "rgb") && onChange({
          r: values4[0],
          g: values4[1],
          b: values4[2],
          a: 1,
          source: "rgb"
        }, e);
      } else if (data.hsv) {
        var _values = data.hsv.split(",");
        if (isvalidColorString(data.hsv, "hsv")) {
          _values[2] = _values[2].replace("%", "");
          _values[1] = _values[1].replace("%", "");
          _values[0] = _values[0].replace("\xB0", "");
          if (_values[1] == 1) {
            _values[1] = 0.01;
          } else if (_values[2] == 1) {
            _values[2] = 0.01;
          }
          onChange({
            h: Number(_values[0]),
            s: Number(_values[1]),
            v: Number(_values[2]),
            source: "hsv"
          }, e);
        }
      } else if (data.hsl) {
        var _values2 = data.hsl.split(",");
        if (isvalidColorString(data.hsl, "hsl")) {
          _values2[2] = _values2[2].replace("%", "");
          _values2[1] = _values2[1].replace("%", "");
          _values2[0] = _values2[0].replace("\xB0", "");
          if (hsvValue[1] == 1) {
            hsvValue[1] = 0.01;
          } else if (hsvValue[2] == 1) {
            hsvValue[2] = 0.01;
          }
          onChange({
            h: Number(_values2[0]),
            s: Number(_values2[1]),
            v: Number(_values2[2]),
            source: "hsl"
          }, e);
        }
      }
    };
    var styles5 = (0, import_reactcss45.default)({
      "default": {
        wrap: {
          display: "flex",
          height: "100px",
          marginTop: "4px"
        },
        fields: {
          width: "100%"
        },
        column: {
          paddingTop: "10px",
          display: "flex",
          justifyContent: "space-between"
        },
        double: {
          padding: "0px 4.4px",
          boxSizing: "border-box"
        },
        input: {
          width: "100%",
          height: "38px",
          boxSizing: "border-box",
          padding: "4px 10% 3px",
          textAlign: "center",
          border: "1px solid #dadce0",
          fontSize: "11px",
          textTransform: "lowercase",
          borderRadius: "5px",
          outline: "none",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        input2: {
          height: "38px",
          width: "100%",
          border: "1px solid #dadce0",
          boxSizing: "border-box",
          fontSize: "11px",
          textTransform: "lowercase",
          borderRadius: "5px",
          outline: "none",
          paddingLeft: "10px",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        label: {
          textAlign: "center",
          fontSize: "12px",
          background: "#fff",
          position: "absolute",
          textTransform: "uppercase",
          color: "#3c4043",
          width: "35px",
          top: "-6px",
          left: "0",
          right: "0",
          marginLeft: "auto",
          marginRight: "auto",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        label2: {
          left: "10px",
          textAlign: "center",
          fontSize: "12px",
          background: "#fff",
          position: "absolute",
          textTransform: "uppercase",
          color: "#3c4043",
          width: "32px",
          top: "-6px",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        single: {
          flexGrow: "1",
          margin: "0px 4.4px"
        }
      }
    });
    var rgbValue = rgb.r + ", " + rgb.g + ", " + rgb.b;
    var hslValue = Math.round(hsl.h) + "\xB0, " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%";
    var hsvValue = Math.round(hsv.h) + "\xB0, " + Math.round(hsv.s * 100) + "%, " + Math.round(hsv.v * 100) + "%";
    return import_react86.default.createElement(
      "div",
      { style: styles5.wrap, className: "flexbox-fix" },
      import_react86.default.createElement(
        "div",
        { style: styles5.fields },
        import_react86.default.createElement(
          "div",
          { style: styles5.double },
          import_react86.default.createElement(EditableInput_default, {
            style: { input: styles5.input, label: styles5.label },
            label: "hex",
            value: hex,
            onChange: handleChange
          })
        ),
        import_react86.default.createElement(
          "div",
          { style: styles5.column },
          import_react86.default.createElement(
            "div",
            { style: styles5.single },
            import_react86.default.createElement(EditableInput_default, {
              style: { input: styles5.input2, label: styles5.label2 },
              label: "rgb",
              value: rgbValue,
              onChange: handleChange
            })
          ),
          import_react86.default.createElement(
            "div",
            { style: styles5.single },
            import_react86.default.createElement(EditableInput_default, {
              style: { input: styles5.input2, label: styles5.label2 },
              label: "hsv",
              value: hsvValue,
              onChange: handleChange
            })
          ),
          import_react86.default.createElement(
            "div",
            { style: styles5.single },
            import_react86.default.createElement(EditableInput_default, {
              style: { input: styles5.input2, label: styles5.label2 },
              label: "hsl",
              value: hslValue,
              onChange: handleChange
            })
          )
        )
      )
    );
  };
  var GoogleFields_default = GoogleFields;

  // node_modules/react-color/es/components/google/Google.js
  var Google = function Google2(_ref) {
    var width3 = _ref.width, onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, header = _ref.header, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles5 = (0, import_reactcss46.default)(merge_default3({
      "default": {
        picker: {
          width: width3,
          background: "#fff",
          border: "1px solid #dfe1e5",
          boxSizing: "initial",
          display: "flex",
          flexWrap: "wrap",
          borderRadius: "8px 8px 0px 0px"
        },
        head: {
          height: "57px",
          width: "100%",
          paddingTop: "16px",
          paddingBottom: "16px",
          paddingLeft: "16px",
          fontSize: "20px",
          boxSizing: "border-box",
          fontFamily: "Roboto-Regular,HelveticaNeue,Arial,sans-serif"
        },
        saturation: {
          width: "70%",
          padding: "0px",
          position: "relative",
          overflow: "hidden"
        },
        swatch: {
          width: "30%",
          height: "228px",
          padding: "0px",
          background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", 1)",
          position: "relative",
          overflow: "hidden"
        },
        body: {
          margin: "auto",
          width: "95%"
        },
        controls: {
          display: "flex",
          boxSizing: "border-box",
          height: "52px",
          paddingTop: "22px"
        },
        color: {
          width: "32px"
        },
        hue: {
          height: "8px",
          position: "relative",
          margin: "0px 16px 0px 16px",
          width: "100%"
        },
        Hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    return import_react87.default.createElement(
      "div",
      { style: styles5.picker, className: "google-picker " + className },
      import_react87.default.createElement(
        "div",
        { style: styles5.head },
        header
      ),
      import_react87.default.createElement("div", { style: styles5.swatch }),
      import_react87.default.createElement(
        "div",
        { style: styles5.saturation },
        import_react87.default.createElement(Saturation_default, {
          hsl,
          hsv,
          pointer: GooglePointerCircle_default,
          onChange
        })
      ),
      import_react87.default.createElement(
        "div",
        { style: styles5.body },
        import_react87.default.createElement(
          "div",
          { style: styles5.controls, className: "flexbox-fix" },
          import_react87.default.createElement(
            "div",
            { style: styles5.hue },
            import_react87.default.createElement(Hue_default, {
              style: styles5.Hue,
              hsl,
              radius: "4px",
              pointer: GooglePointer_default,
              onChange
            })
          )
        ),
        import_react87.default.createElement(GoogleFields_default, {
          rgb,
          hsl,
          hex,
          hsv,
          onChange
        })
      )
    );
  };
  Google.propTypes = {
    width: import_prop_types136.default.oneOfType([import_prop_types136.default.string, import_prop_types136.default.number]),
    styles: import_prop_types136.default.object,
    header: import_prop_types136.default.string
  };
  Google.defaultProps = {
    width: 652,
    styles: {},
    header: "Color picker"
  };
  var Google_default2 = ColorWrap_default(Google);

  // build/api/getCalendarIdsEndpoint.js
  var getCalendarIdsEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.GET, "/calendar/ids", false);
      this.datamap = {};
    }
    reset() {
      this.request = {};
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(getCalendarIdsEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = getCalendarIdsEndpoint2.Error || (getCalendarIdsEndpoint2.Error = {}));
  })(getCalendarIdsEndpoint || (getCalendarIdsEndpoint = {}));

  // build/api/putSettingsEndpoint.js
  var putSettingsEndpoint = class extends Endpoint.Definition {
    constructor() {
      super(Network.Method.PUT, "/settings", false);
      this.datamap = {
        device: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        location: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        background: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        calendar: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        events: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        persons: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true },
        units: { type: Endpoint.PropertyType.OBJECT, source: Endpoint.Source.BODY, required: true }
      };
    }
    reset() {
      this.request = {
        device: Endpoint.InitValue,
        location: Endpoint.InitValue,
        background: Endpoint.InitValue,
        calendar: Endpoint.InitValue,
        events: Endpoint.InitValue,
        persons: Endpoint.InitValue,
        units: Endpoint.InitValue
      };
    }
    failure(status, code, message) {
      return super.failure(status, code, message);
    }
  };
  (function(putSettingsEndpoint2) {
    let Error2;
    (function(Error3) {
      Error3["INVALID_IDENTIFIER"] = "invalid_identifier";
      Error3["MISSING_OR_BAD_DATA"] = "missing_or_bad_data";
      Error3["NOT_AUTHORIZED"] = "not_authorized";
    })(Error2 = putSettingsEndpoint2.Error || (putSettingsEndpoint2.Error = {}));
  })(putSettingsEndpoint || (putSettingsEndpoint = {}));

  // build/client/widgets/TextInput.js
  var React301 = __toESM(require_react(), 1);
  function TextInput(props) {
    const [value, setValue] = React301.useState(props.value);
    React301.useEffect(valueUpdated, [props.value]);
    function valueUpdated() {
      setValue(props.value);
    }
    function onChange(value2) {
      setValue(value2);
      props.onChange(value2);
    }
    function onBlur() {
      if (props.onBlur)
        props.onBlur();
    }
    return React301.createElement(TextField_default, { label: props.label, variant: "outlined", value, onBlur, onChange: (event) => onChange(event.target.value) });
  }

  // build/client/widgets/TimezoneInput.js
  var React303 = __toESM(require_react(), 1);

  // build/client/widgets/ComboInput.js
  var React302 = __toESM(require_react(), 1);
  var filter2 = createFilterOptions();
  function ComboInput(props) {
    const [value, setValue] = React302.useState("");
    React302.useEffect(() => propsUpdated(), [props]);
    function propsUpdated() {
      if (props.value != value)
        setValue(props.value);
    }
    function onFilter(options, params) {
      const filtered = filter2(options, params);
      if (ObjectUtils.notNull(props.allowAdd) && props.allowAdd) {
        const { inputValue } = params;
        const isExisting = options.some((option) => inputValue === option);
        if (inputValue !== "" && !isExisting) {
          filtered.push(inputValue);
        }
      }
      return filtered;
    }
    function onEquality(option, value2) {
      if (ObjectUtils.notNull(props.allowAdd) && props.allowAdd) {
        return true;
      } else {
        if (ObjectUtils.isNull(value2) || ObjectUtils.isString(value2) && value2 == "") {
          return false;
        } else if (ObjectUtils.isString(option) && ObjectUtils.isString(value2)) {
          return option === value2;
        } else {
          return option.value === value2.value;
        }
      }
    }
    function onChange(new_value, reason) {
      setValue(new_value);
      if (props.onChange) {
        if (ObjectUtils.isNull(new_value)) {
          props.onChange("");
        } else {
          if (ObjectUtils.isString(new_value))
            props.onChange(new_value);
          else
            props.onChange(new_value.value);
        }
      }
    }
    let sx = {};
    if (ObjectUtils.notNull(props.width))
      sx = { width: props.width };
    let field = React302.createElement(Autocomplete_default, { disablePortal: true, id: props.id, value, options: props.values, size: ObjectUtils.notNull(props.dense) ? props.dense ? "small" : "medium" : "medium", sx, disabled: ObjectUtils.notNull(props.disabled) ? props.disabled : false, fullWidth: ObjectUtils.notNull(props.fullWidth) ? props.fullWidth : true, isOptionEqualToValue: onEquality, filterOptions: onFilter, onChange: (event, newValue, reason) => {
      onChange(newValue, reason);
    }, renderInput: (params) => React302.createElement(TextField_default, Object.assign({}, params, { label: props.label })) });
    if (props.gridColumns != null && props.gridColumns > 0)
      field = React302.createElement(Grid_default, { item: true, xs: props.gridColumns }, field);
    return React302.createElement(React302.Fragment, null, field);
  }

  // build/client/widgets/TimezoneInput.js
  function TimezoneInput(props) {
    const [selected, setSelected] = React303.useState("");
    const [timezones, setTimezones] = React303.useState([]);
    React303.useEffect(() => pageLoaded(), []);
    React303.useEffect(() => propsChanged(), [props]);
    function pageLoaded() {
      let choices = [];
      const zones = Intl.supportedValuesOf("timeZone");
      zones.forEach((tz2, index) => {
        choices.push(tz2);
      });
      setTimezones(choices);
      const tz = ObjectUtils.notNull(props.value) && props.value != "" ? props.value : Intl.DateTimeFormat().resolvedOptions().timeZone;
      setSelected(tz);
      props.onChange(tz);
    }
    function propsChanged() {
      if (ObjectUtils.notNull(props.value) && props.value != "" && props.value != selected) {
        setSelected(props.value);
      }
    }
    function onChange(new_value) {
      setSelected(new_value);
      props.onChange(new_value);
    }
    let field = React303.createElement(ComboInput, { id: props.id, label: props.label, fullWidth: true, value: selected, values: timezones, onChange, gridColumns: 3 });
    if (props.gridColumns != null && props.gridColumns > 0)
      field = React303.createElement(Grid_default, { item: true, xs: props.gridColumns }, field);
    return React303.createElement(React303.Fragment, null, field);
  }

  // build/client/widgets/SelectInput.js
  var React304 = __toESM(require_react(), 1);
  function SelectInput3(props) {
    const [value, setValue] = React304.useState(props.value);
    React304.useEffect(() => propsUpdated(), [props]);
    function propsUpdated() {
      if (ObjectUtils.notNull(props.value) && props.values.length > 0 && props.value != value && hasValue2(props.value)) {
        setValue(props.value);
      }
    }
    function hasValue2(value2) {
      let i;
      for (i = 0; i < props.values.length; i++) {
        if (props.values[i].value == value2)
          return true;
      }
      return false;
    }
    function onChange(event) {
      if (props.values && props.values.length > 0)
        setValue(event.target.value);
      if (props.onChange)
        props.onChange(event.target.value);
    }
    let field = React304.createElement(
      FormControl_default,
      { sx: { m: 0, minWidth: props.minWidth != null ? props.minWidth : 150 }, disabled: props.disabled != null ? props.disabled : false, size: props.dense != null ? props.dense ? "small" : "medium" : "medium", required: props.required != null ? props.required : false },
      React304.createElement(InputLabel_default, { id: props.id + "-select-label" }, props.label),
      React304.createElement(Select_default, { labelId: props.id + "-select-label-id", id: props.id, value: hasValue2(value) ? value.toString() : "", multiple: props.multiple != null ? props.multiple : false, label: props.label, onChange, inputProps: { readOnly: props.readOnly != null ? props.readOnly : false } }, props.values.map((item, index) => {
        return React304.createElement(
          MenuItem_default,
          { key: item.value, value: item.value, selected: item.value === value },
          item.icon ? React304.createElement(
            ListItemIcon_default,
            { sx: { minWidth: 32, verticalAlign: "center" } },
            " ",
            item.icon
          ) : null,
          item.label
        );
      })),
      props.helperText != null ? React304.createElement(FormHelperText_default, null, props.helperText) : null
    );
    if (props.gridColumns != null && props.gridColumns > 0)
      field = React304.createElement(Grid_default, { item: true, xs: props.gridColumns }, field);
    return React304.createElement(React304.Fragment, null, field);
  }

  // build/client/widgets/SliderInput.js
  var React305 = __toESM(require_react(), 1);
  function SliderInput(props) {
    const [value, setValue] = React305.useState(props.value);
    const [label, setLabel] = React305.useState(updateLabel(props.value));
    React305.useEffect(() => propsUpdated(), [props]);
    function propsUpdated() {
      setValue(props.value);
      setLabel(updateLabel(props.value));
    }
    function onChange(event, newValue) {
      setValue(newValue);
      if (props.onChange)
        props.onChange(newValue);
      setLabel(updateLabel(newValue));
    }
    function updateLabel(value2) {
      return StringUtils_default.format("{0}: {1}%", props.label, ObjectUtils.isArray(value2) ? value2.join("-") : value2.toString());
    }
    function onChangeCommitted(event, newValue) {
      if (props.onChangeCommitted)
        props.onChangeCommitted(newValue);
    }
    const slider = React305.createElement(Slider_default, { name: props.id, value, valueLabelDisplay: "auto", disableSwap: true, step: ObjectUtils.notNull(props.step) ? props.step : 1, onChangeCommitted, onChange });
    let field = React305.createElement(FormControlLabel_default, { sx: { width: props.width, "& .MuiFormControlLabel-label": { fontSize: "14px" }, color: "white" }, control: slider, label, labelPlacement: props.labelPlacement });
    if (props.gridColumns != null && props.gridColumns > 0)
      field = React305.createElement(Grid_default, { item: true, xs: props.gridColumns }, field);
    return React305.createElement(React305.Fragment, null, field);
  }

  // build/client/widgets/SnackAlert.js
  var React306 = __toESM(require_react(), 1);
  function SnackAlert(props) {
    function onClose() {
      if (props.onClose)
        props.onClose();
    }
    return React306.createElement(
      Snackbar_default,
      { open: true, autoHideDuration: 5e3, anchorOrigin: { vertical: "top", horizontal: "center" }, onClose: () => onClose() },
      React306.createElement(Alert_default, { onClose: () => onClose(), severity: props.severity ? props.severity : "success", variant: "filled", sx: { width: "100%" } }, props.message)
    );
  }

  // build/client/settings/PersonColor.js
  var React307 = __toESM(require_react(), 1);
  function PersonColor(props) {
    const [name, setName] = React307.useState(props.name);
    React307.useEffect(nameChange, [props.name]);
    function nameChange() {
      setName(props.name);
    }
    function onNameChange(value) {
      props.onChange(value);
    }
    return React307.createElement(
      Stack_default,
      { direction: "row", gap: 1 },
      React307.createElement(
        "div",
        { style: { paddingTop: "15px" } },
        React307.createElement(Icon13, { color: props.color })
      ),
      React307.createElement(TextInput, { label: "", value: props.name, onChange: onNameChange, onBlur: props.onBlur })
    );
  }

  // build/client/settings/SettingsPage.js
  var __awaiter14 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function SettingsPage(props) {
    const [appdata2, setAppData] = React308.useState(AppData_default.instance());
    const [device_id, setDeviceId] = React308.useState("");
    const [device_name, setDeviceName] = React308.useState("");
    const [location_address, setLocationAddress] = React308.useState("");
    const [location_tz, setLocationTimezone] = React308.useState("America/New_York");
    const [background_image, setBackgroundImage] = React308.useState("");
    const [background_color, setBackgroundColor] = React308.useState("#121212");
    const [background_color_picker, setBackgroundColorPicker] = React308.useState(false);
    const [background_opacity, setBackgroundOpacity] = React308.useState(100);
    const [calendar_start_dow, setStartDow] = React308.useState(0);
    const [calendar_avail_ids, setCalendarAvailIds] = React308.useState([]);
    const [calendar_ids, setCalendarIds] = React308.useState([]);
    const [event_duration, setEventDuration] = React308.useState(30);
    const [event_dim_past, setEventDimPast] = React308.useState(0);
    const [person_1, setPerson1] = React308.useState("");
    const [person_2, setPerson2] = React308.useState("");
    const [person_3, setPerson3] = React308.useState("");
    const [person_4, setPerson4] = React308.useState("");
    const [person_5, setPerson5] = React308.useState("");
    const [person_6, setPerson6] = React308.useState("");
    const [person_7, setPerson7] = React308.useState("");
    const [person_8, setPerson8] = React308.useState("");
    const [person_9, setPerson9] = React308.useState("");
    const [person_10, setPerson10] = React308.useState("");
    const [person_11, setPerson11] = React308.useState("");
    const [uom, setUom] = React308.useState(getSettingsEndpoint.UnitsOfMeasure.STANDARD);
    const [show_snack, showSnack] = React308.useState(false);
    const sectionGap = React308.useRef(3);
    const oauth_window = React308.useRef(null);
    const oauth_timer_id = React308.useRef(null);
    const loading = React308.useRef(true);
    React308.useEffect(onSave, [
      location_tz,
      calendar_ids,
      calendar_start_dow,
      event_duration,
      event_dim_past,
      background_image,
      background_opacity,
      uom
    ]);
    React308.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
      getCalIds();
      setDeviceId(appdata2.settings.device.id);
      setDeviceName(appdata2.settings.device.name);
      setLocationAddress(appdata2.settings.location.address);
      setLocationTimezone(appdata2.settings.location.timezone);
      setBackgroundColor(appdata2.settings.background.color);
      setBackgroundImage(appdata2.settings.background.image_url);
      setBackgroundOpacity(appdata2.settings.background.opacity);
      setStartDow(appdata2.settings.calendar.start_dow);
      setEventDuration(appdata2.settings.events.default_duration);
      setEventDimPast(appdata2.settings.events.dim_past ? 1 : 0);
      if (appdata2.settings.persons.length > 0) {
        setPerson1(appdata2.settings.persons[0] ? appdata2.settings.persons[0].name : "");
        setPerson2(appdata2.settings.persons[1] ? appdata2.settings.persons[1].name : "");
        setPerson3(appdata2.settings.persons[2] ? appdata2.settings.persons[2].name : "");
        setPerson4(appdata2.settings.persons[3] ? appdata2.settings.persons[3].name : "");
        setPerson5(appdata2.settings.persons[4] ? appdata2.settings.persons[4].name : "");
        setPerson6(appdata2.settings.persons[5] ? appdata2.settings.persons[5].name : "");
        setPerson7(appdata2.settings.persons[6] ? appdata2.settings.persons[6].name : "");
        setPerson8(appdata2.settings.persons[7] ? appdata2.settings.persons[7].name : "");
        setPerson9(appdata2.settings.persons[8] ? appdata2.settings.persons[8].name : "");
        setPerson10(appdata2.settings.persons[9] ? appdata2.settings.persons[9].name : "");
        setPerson11(appdata2.settings.persons[10] ? appdata2.settings.persons[10].name : "");
      }
      setUom(appdata2.settings.units);
    }
    function getCalIds() {
      return __awaiter14(this, void 0, void 0, function* () {
        const endpt = new getCalendarIdsEndpoint();
        const reply = yield appdata2.webserver.fetch(endpt);
        if (reply.ok) {
          const data = reply.data;
          setCalendarAvailIds(data.calendars);
          let i;
          let j;
          let ids = [];
          for (i = 0; i < appdata2.settings.calendar.ids.length; i++) {
            if (appdata2.settings.calendar.ids[i] == "primary") {
              for (j = 0; j < data.calendars.length; j++) {
                if (data.calendars[j].primary) {
                  ids.push(data.calendars[j].id);
                  break;
                }
              }
            } else {
              ids.push(appdata2.settings.calendar.ids[i]);
            }
          }
          setCalendarIds(ids);
        } else {
        }
        loading.current = false;
      });
    }
    function onBgColor(color3, event) {
      setBackgroundColor(color3.hex);
    }
    function togglePicker() {
      setBackgroundColorPicker(!background_color_picker);
      if (background_color_picker)
        onSave();
    }
    function onCalPicked(value) {
    }
    function onSave() {
      if (!loading.current)
        doSave();
    }
    function getCalId(id) {
      let i;
      for (i = 0; i < calendar_avail_ids.length; i++) {
        if (calendar_avail_ids[i].id == id) {
          return calendar_avail_ids[i];
        }
      }
      return null;
    }
    function doSave() {
      return __awaiter14(this, void 0, void 0, function* () {
        let i;
        let cal;
        let calids = [];
        for (i = 0; i < calendar_ids.length; i++) {
          cal = getCalId(calendar_ids[i]);
          if (cal.primary)
            calids.push("primary");
          else
            calids.push(cal.id);
        }
        showSnack(false);
        const endpt = new putSettingsEndpoint();
        endpt.request.device = { id: device_id, name: device_name };
        endpt.request.location = { address: location_address, timezone: location_tz };
        endpt.request.background = { color: background_color, image_url: background_image, opacity: background_opacity };
        endpt.request.calendar = { ids: calids, start_dow: calendar_start_dow };
        endpt.request.events = { default_duration: event_duration, dim_past: event_dim_past == 1 };
        endpt.request.persons = [
          { name: person_1, colorId: 0 },
          { name: person_2, colorId: 1 },
          { name: person_3, colorId: 2 },
          { name: person_4, colorId: 3 },
          { name: person_5, colorId: 4 },
          { name: person_6, colorId: 5 },
          { name: person_7, colorId: 6 },
          { name: person_8, colorId: 7 },
          { name: person_9, colorId: 8 },
          { name: person_10, colorId: 9 },
          { name: person_11, colorId: 10 }
        ];
        endpt.request.units = uom;
        const reply = yield appdata2.webserver.fetch(endpt);
        console.log("doSave", reply.ok, endpt.request);
        if (reply.ok) {
          const data = reply.data;
          showSnack(true);
          appdata2.settings = endpt.request;
        }
      });
    }
    function CalId(cal, index) {
      return React308.createElement(
        ListItem_default,
        { key: cal.id, secondaryAction: cal.primary ? React308.createElement(CheckCircleOutline_default, null) : null },
        React308.createElement(
          ListItemButton_default,
          { role: void 0, onClick: onCalPicked, dense: true },
          React308.createElement(
            ListItemIcon_default,
            null,
            React308.createElement(Checkbox_default, { edge: "start", checked: calendar_ids.indexOf(cal.id) >= 0, tabIndex: -1, disableRipple: true, onChange: (event, checked) => onCalSelect(cal.id, checked) })
          ),
          React308.createElement(ListItemText_default, { id: cal.id, primary: cal.name, secondary: cal.id })
        )
      );
    }
    function onCalSelect(id, checked) {
      let cids = calendar_ids.concat();
      const idx = cids.indexOf(id);
      if (idx >= 0)
        cids.splice(idx, 1);
      else
        cids.push(id);
      setCalendarIds(cids);
    }
    function closeSnack() {
      showSnack(false);
    }
    function onLogin() {
      googleLogin();
    }
    function googleLogin() {
      return __awaiter14(this, void 0, void 0, function* () {
        const params = query_string_default.stringify({
          client_id: appdata2.config.google.client_id,
          redirect_uri: appdata2.config.google.redirect_url,
          scope: [
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile",
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.events"
          ].join(" "),
          response_type: "code",
          include_granted_scopes: true,
          access_type: "offline",
          prompt: "consent"
        });
        const url = StringUtils_default.format("https://accounts.google.com/o/oauth2/v2/auth?{0}", params);
        oauth_window.current = window.open(url, "_blank", "width=600,height=750,top=100,left=100,location=false");
        oauth_window.current.focus();
        oauth_timer_id.current = setInterval(onCheckWindow, 500);
      });
    }
    function onCheckWindow() {
      try {
        if (oauth_window.current.location.host === "localhost:8080") {
          clearInterval(oauth_timer_id.current);
          oauth_timer_id.current = null;
          oauth_window.current.close();
          pageLoaded();
        }
      } catch (err) {
      }
    }
    function onBack() {
      props.onClose();
    }
    return React308.createElement(
      Stack_default,
      { direction: "column", gap: 1 },
      React308.createElement(
        Stack_default,
        { direction: "row" },
        React308.createElement(
          IconButton_default,
          { size: "large", onClick: onBack, sx: { marginTop: "7px" } },
          React308.createElement(ArrowBack_default, null)
        ),
        React308.createElement(Typography_default, { component: "div", color: "text.primary", sx: { fontSize: 32, lineHeight: 1, paddingTop: 2 } }, "Settings")
      ),
      React308.createElement(
        Stack_default,
        { direction: "column", gap: 1.5, sx: { marginLeft: 2, width: "50%" } },
        React308.createElement(Typography_default, { variant: "h4", color: "white" }, "Device"),
        React308.createElement(TextInput, { label: "ID", value: device_id, onChange: setDeviceId, onBlur: onSave }),
        React308.createElement(TextInput, { label: "Name", value: device_name, onChange: setDeviceName, onBlur: onSave }),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: 3 } }, "Location"),
        React308.createElement(TextInput, { label: "Address", value: location_address, onChange: setLocationAddress, onBlur: onSave }),
        React308.createElement(TimezoneInput, { id: "timezone", label: "Timezone", value: location_tz, onChange: setLocationTimezone }),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: sectionGap.current } }, "Background"),
        React308.createElement(Button_default, { variant: "outlined", startIcon: React308.createElement(Icon13, { color: background_color }), sx: { width: "175px" }, size: "large", onClick: togglePicker }, (background_color_picker ? "Hide" : "Pick") + " Color"),
        background_color_picker ? React308.createElement(Sketch_default, { color: background_color, disableAlpha: true, onChangeComplete: onBgColor }) : null,
        React308.createElement(TextInput, { label: "Image", value: background_image, onChange: setBackgroundImage }),
        React308.createElement(SliderInput, { id: "opacity", label: "Opacity", labelPlacement: "top", value: background_opacity, onChangeCommitted: setBackgroundOpacity }),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: sectionGap.current } }, "Calendars"),
        React308.createElement(Button_default, { variant: "outlined", size: "large", onClick: onLogin, startIcon: React308.createElement(Google_default, null), sx: { width: "275px" } }, "Sign in with Google"),
        React308.createElement(
          Card_default,
          { variant: "outlined" },
          React308.createElement(List_default, { sx: { width: "100%" } }, calendar_avail_ids.map((id, index) => {
            return CalId(id, index);
          }))
        ),
        React308.createElement(SelectInput3, { id: "start_dow", label: "Start Day of Week", value: calendar_start_dow, values: [
          { value: 0, label: "Sunday" },
          { value: 1, label: "Monday" },
          { value: 2, label: "Tuesday" },
          { value: 3, label: "Wednesday" },
          { value: 4, label: "Thursday" },
          { value: 5, label: "Friday" },
          { value: 6, label: "Saturday" }
        ], onChange: (value) => setStartDow(value) }),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: sectionGap.current } }, "Events"),
        React308.createElement(SelectInput3, { id: "event_duration", label: "Default Duration", value: event_duration, values: [
          { value: 15, label: "15 minutes" },
          { value: 30, label: "30 minutes" },
          { value: 45, label: "45 minutes" },
          { value: 60, label: "1 hour" }
        ], onChange: (value) => setEventDuration(value) }),
        React308.createElement(SelectInput3, { id: "event_dim_past", label: "Dim Past", value: event_dim_past, values: [
          { value: 0, label: "No" },
          { value: 1, label: "Yes" }
        ], onChange: (value) => setEventDimPast(value) }),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: sectionGap.current } }, "Persons"),
        React308.createElement(
          Stack_default,
          { direction: "row", gap: 2 },
          React308.createElement(
            Stack_default,
            { direction: "column", gap: 1 },
            React308.createElement(PersonColor, { color: AppData_default.event_colors[0], name: person_1, onChange: setPerson1, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[1], name: person_2, onChange: setPerson2, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[2], name: person_3, onChange: setPerson3, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[3], name: person_4, onChange: setPerson4, onBlur: onSave })
          ),
          React308.createElement(
            Stack_default,
            { direction: "column", gap: 1 },
            React308.createElement(PersonColor, { color: AppData_default.event_colors[4], name: person_5, onChange: setPerson5, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[5], name: person_6, onChange: setPerson6, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[6], name: person_7, onChange: setPerson7, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[7], name: person_8, onChange: setPerson8, onBlur: onSave })
          ),
          React308.createElement(
            Stack_default,
            { direction: "column", gap: 1 },
            React308.createElement(PersonColor, { color: AppData_default.event_colors[8], name: person_9, onChange: setPerson9, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[9], name: person_10, onChange: setPerson10, onBlur: onSave }),
            React308.createElement(PersonColor, { color: AppData_default.event_colors[10], name: person_11, onChange: setPerson11, onBlur: onSave })
          )
        ),
        React308.createElement(Typography_default, { variant: "h4", color: "white", sx: { marginTop: sectionGap.current } }, "Units"),
        React308.createElement(SelectInput3, { id: "uom", label: "Measure", value: uom, values: [
          { value: getSettingsEndpoint.UnitsOfMeasure.STANDARD, label: "Standard" },
          { value: getSettingsEndpoint.UnitsOfMeasure.METRIC, label: "Metric" }
        ], onChange: (value) => setUom(value) })
      ),
      show_snack ? React308.createElement(SnackAlert, { message: "Settings Saved", severity: "success", onClose: closeSnack }) : null
    );
  }

  // build/client/Main.js
  function Main(props) {
    const [appdata2, setAppData] = React309.useState(AppData_default.instance());
    const warm_timer = React309.useRef(null);
    const [settings, showSettings] = React309.useState(false);
    const [tab, setTab] = React309.useState("");
    const [tabs, setTabs] = React309.useState([]);
    const [warm, setWarm] = React309.useState(false);
    const [anchorEl, setAnchorEl] = React309.useState(null);
    React309.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
      let new_tabs = [];
      appdata2.layout.pages.forEach((page, index) => {
        new_tabs.push(React309.createElement(Tab_default, { key: page.name, value: page.name, label: page.name }));
      });
      setTabs(new_tabs);
      setTab(appdata2.layout.pages[0].name);
      window.onclick = onBackPressed;
    }
    function onTabChange(event, newValue) {
      setTab(newValue);
    }
    function onBackPressed() {
      if (warm_timer.current)
        clearTimeout(warm_timer.current);
      setWarm(true);
      warm_timer.current = setTimeout(cool, 1e4);
    }
    function cool() {
      setWarm(false);
      warm_timer.current = null;
    }
    function onOpenMenu(event) {
      setAnchorEl(event.currentTarget);
    }
    function onCloseMenu() {
      setAnchorEl(null);
    }
    function onRefresh() {
      window.location.reload();
      onCloseMenu();
    }
    function onSettings() {
      showSettings(true);
      onCloseMenu();
    }
    function onSettingsClose() {
      showSettings(false);
    }
    if (appdata2.settings.background.image_url && appdata2.settings.background.image_url != null) {
      document.body.style.backgroundImage = StringUtils_default.format("url('{0}')", appdata2.settings.background.image_url);
      document.body.style.backgroundRepeat = "no-repeat";
      document.body.style.backgroundSize = "cover";
      document.body.style.backgroundAttachment = "fixed";
    }
    return React309.createElement(
      "div",
      null,
      React309.createElement(Box_default, { component: "span", sx: {
        width: "100%",
        height: "100vh",
        backgroundColor: appdata2.settings.background.color,
        display: "block",
        position: "relative",
        opacity: appdata2.settings.background.opacity / 100
      } }),
      React309.createElement(Box_default, { component: "span", sx: { width: "100%", typography: "body1", display: "block", position: "fixed", left: 0, top: 0 } }, settings ? React309.createElement(SettingsPage, { onClose: onSettingsClose }) : React309.createElement(
        TabContext,
        { value: tab },
        appdata2.layout.pages.map((page, index) => {
          return React309.createElement(
            TabPanel_default,
            { key: index, value: page.name },
            React309.createElement(Page, { name: page.name, rows: page.rows, warm })
          );
        }),
        warm ? React309.createElement(
          Box_default,
          { sx: { borderBottom: 1, borderColor: "divider" } },
          React309.createElement(
            AppBar_default,
            { position: "fixed", color: "primary", sx: { top: "auto", bottom: 0 } },
            React309.createElement(
              Stack_default,
              { direction: "row" },
              React309.createElement(TabList_default, { onChange: onTabChange }, tabs),
              React309.createElement(Box_default, { sx: { flexGrow: 1 } }),
              React309.createElement(
                IconButton_default,
                { onClick: onOpenMenu },
                React309.createElement(Settings_default, null)
              )
            )
          )
        ) : null
      )),
      React309.createElement(
        Menu_default,
        { id: "action-menu", anchorEl, open: anchorEl != null, onClose: onCloseMenu, MenuListProps: { "aria-labelledby": "basic-button" } },
        React309.createElement(MenuItem_default, { onClick: onCloseMenu }, "TBD"),
        React309.createElement(MenuItem_default, { onClick: onSettings }, "Settings"),
        React309.createElement(MenuItem_default, { onClick: onRefresh }, "Refresh")
      )
    );
  }

  // build/client/App.js
  var __awaiter15 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function App() {
    React310.useEffect(() => pageLoaded(), []);
    function pageLoaded() {
    }
    function aboutToLogout() {
      return __awaiter15(this, void 0, void 0, function* () {
      });
    }
    return React310.createElement(
      ThemeProvider5,
      { theme: theme_default },
      React310.createElement(Main, null)
    );
  }

  // build/client/index.js
  var appdata = AppData_default.instance();
  appdata.initialize(() => main2());
  function main2() {
    const container = document.getElementById("root");
    const root2 = (0, import_client.createRoot)(container);
    root2.render(React311.createElement(App, null));
  }
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.16.6
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/index.js:
  (**
   * @mui/private-theming v5.16.6
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/material/index.js:
  (**
   * @mui/material v5.16.7
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/lab/index.js:
  (**
   * @mui/lab v5.0.0-alpha.173
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
